{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the id of tv channels that do not play any cartoon directed by Ben Jones.' in SQLite? I currently have 'SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')', which outputs [('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show ids for all templates not used by any document.' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)', which outputs [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show ids of all students who do not have any friends.' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', which outputs [(1025,), (1641,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids for templates that are not used in any documents?' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)', which outputs [(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total ticket expense of the visitors whose membership level is 1?' in SQLite? I currently have 'SELECT sum(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID WHERE T2.Level_of_membership  =  1', which outputs [(570.84,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What languages are only used by a single country with a republic government?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm LIKE '%republic%' GROUP BY T1.Language HAVING count(*) = 1', which outputs [('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Asami',), ('Assyrian',), ('Atayal',), ('Avarian',), ('Bajad',), ('Bakhtyari',), ('Balante',), ('Bali',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bari',), ('Bariba',), ('Bashkir',), ('Bassa',), ('Batakki',), ('Beja',), ('Bemba',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Bura',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chechen',), ('Chewa',), ('Chichewa',), ('Chilluk',), ('Chin',), ('Chuabo',), ('Chuvash',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dinka',), ('Dong',), ('Dorbet',), ('Duala',), ('Dyula',), ('Edo',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Fur',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gilaki',), ('Gio',), ('Gisu',), ('Goajiro',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gujarati',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Hui',), ('Ibibio',), ('Ibo',), ('Icelandic',), ('Ijo',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kannada',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khmer',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Kosrean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Lezgian',), ('Limba',), ('Lotuko',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luri',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Malagasy',), ('Malajalam',), ('Maltese',), ('Mam',), ('Man',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Mantšu',), ('Maranao',), ('Marendje',), ('Mari',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mazandarani',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Mixtec',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Moravian',), ('Mordva',), ('Mortlock',), ('Mpongwe',), ('Muong',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nubian Languages',), ('Nuer',), ('Nung',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Náhuatl',), ('Orija',), ('Oromo',), ('Osseetti',), ('Otomí',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Philippene Languages',), ('Pilipino',), ('Pohnpei',), ('Punu',), ('Punu-sira-nzebi',), ('Puyi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southern Slavic Languages',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tagalog',), ('Tandjile',), ('Telugu',), ('Temne',), ('Teso',), ('Tho',), ('Tibetan',), ('Tigre',), ('Tikar',), ('Tiv',), ('Tongan',), ('Tripuri',), ('Trukese',), ('Tswa',), ('Tujia',), ('Tukulor',), ('Turkana',), ('Udmur',), ('Uighur',), ('Ukrainian and Russian',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Warrau',), ('Watyi',), ('Wolea',), ('Xhosa',), ('Yao',), ('Yap',), ('Yi',), ('Yucatec',), ('Zapotec',), ('Zenaga',), ('Zhuang',), ('Zulu',), ('[South]Mande',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the employee who got the highest one time bonus.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1', which outputs [('Louis Deacon',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of documents.' in SQLite? I currently have 'SELECT COUNT(*) FROM Documents', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many 'United Airlines' flights go to Airport 'ASY'?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the official language spoken in the country whose head of state is Beatrix?' in SQLite? I currently have 'SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix'', which outputs [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and age of students who have a pet.' in SQLite? I currently have 'SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID', which outputs [('Linda', 18), ('Tracy', 19), ('Tracy', 19)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of singers?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM singer", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the details for the paragraph that includes the text 'Korea ' ?' in SQLite? I currently have 'SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'', which outputs [(None,), (None,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the weekly rank for the episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'', which outputs [(43.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the arrival date and the departure date for all the dogs.' in SQLite? I currently have 'SELECT date_arrived, date_departed FROM Dogs', which outputs [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT date_arrived ,  date_departed FROM Dogs", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which continent speaks the most languages?' in SQLite? I currently have 'SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1', which outputs [('Africa',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.' in SQLite? I currently have 'SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC', which outputs [('Gonzalo Higuaín ',), ('Fernando Gago',), ('Guti Midfielder',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the codes of countries that have more than 50 players.' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50', which outputs [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of professionals who have not treated any dogs.' in SQLite? I currently have 'SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)', which outputs [(7,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names and grades of each high schooler.' in SQLite? I currently have 'SELECT name, grade FROM Highschooler', which outputs [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  grade FROM Highschooler", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the year that had the most concerts?' in SQLite? I currently have 'SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1', which outputs [('2015',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of matches.' in SQLite? I currently have 'SELECT COUNT(*) FROM matches', which outputs [(278,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM matches", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many TV Channel using language English?' in SQLite? I currently have 'SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the age of the oldest dog?' in SQLite? I currently have 'SELECT MAX(age) FROM Dogs', which outputs [('9',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(age) FROM Dogs", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the high schooler who has the greatest number of likes?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID HAVING count(T2.liked_id) = (SELECT max(count_likes) FROM (SELECT count(liked_id) as count_likes FROM Likes GROUP BY liked_id) as subquery)', which outputs [('Kris',), ('Cassandra',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of airlines in the USA.' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines WHERE Country = 'USA'', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and capacity for the stadium with highest average attendance?' in SQLite? I currently have 'SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1', which outputs [(\"Stark's Park\", 10104)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many professionals did not operate any treatment on dogs?' in SQLite? I currently have 'SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)', which outputs [(7,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the manager name and district of the shop that sells the largest number of products?' in SQLite? I currently have 'SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1', which outputs [('Ilkka Mäkelä', 'Lahden Stadion')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of documents that use the PPT template type.' in SQLite? I currently have 'SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different addresses that have students living there?' in SQLite? I currently have 'SELECT DISTINCT * FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)', which outputs [(1, '2294 Grant Square Apt. 235', 'Apt. 370', None, 'Port Chelsea', '148', 'Virginia', 'Iceland', None), (2, '3999 Aufderhar Ways Suite 593', 'Apt. 388', None, 'Lake Laishafurt', '943', 'Kentucky', 'Burundi', None), (6, '16998 Mraz Lodge', 'Apt. 689', None, 'North Omer', '902', 'Kentucky', 'Gibraltar', None), (7, '193 Marlin Brook', 'Apt. 406', None, 'Herzoghaven', '068', 'Arkansas', 'Cook Islands', None), (9, '0643 Muller Vista', 'Suite 383', None, 'Port Elvisfurt', '777', 'NorthCarolina', 'Gabon', None), (10, '7081 Eda Center', 'Suite 830', None, 'Rutherfordtown', '839', 'Delaware', 'Kyrgyz Republic', None), (12, '979 Haag Shores Suite 656', 'Apt. 468', None, 'Prohaskafort', '590', 'SouthDakota', 'Lesotho', None), (14, '186 Evan Motorway Apt. 409', 'Suite 079', None, 'Lake Careyberg', '895', 'Kentucky', 'New Caledonia', None), (15, '74046 Metz Walk Apt. 113', 'Suite 674', None, 'Port Oceane', '669', 'Wyoming', 'Norfolk Island', None), (3, '67942 Carlotta Ferry Apt. 686', 'Apt. 583', None, 'Goodwinhaven', '541', 'Kansas', 'Saudi Arabia', None), (4, '0144 Lamar Plaza Apt. 346', 'Suite 703', None, 'Port Evanston', '847', 'Washington', 'Angola', None), (5, '858 Peggie Bypass Suite 212', 'Apt. 335', None, 'Michelleburgh', '446', 'Hawaii', 'Haiti', None), (8, '202 Hessel Views Apt. 468', 'Apt. 305', None, 'Mariliehaven', '638', 'Idaho', 'Croatia', None), (11, '9283 Schulist Falls Apt. 037', 'Suite 239', None, 'South Palma', '400', 'WestVirginia', 'Bermuda', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT current_address_id) FROM Students", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the country with the most car makers?' in SQLite? I currently have 'SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1', which outputs [('japan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of conductors.' in SQLite? I currently have 'SELECT COUNT(*) FROM conductor', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM conductor", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average age of students who do not have any pet .' in SQLite? I currently have 'SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)', which outputs [(19.625,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.' in SQLite? I currently have 'SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010)', which outputs [('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?' in SQLite? I currently have 'SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID ORDER BY T1.Name ASC', which outputs [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the makers and models?' in SQLite? I currently have 'SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker', which outputs [('amc', 'amc'), ('volkswagen', 'audi'), ('bmw', 'bmw'), ('gm', 'buick'), ('gm', 'cadillac'), ('ford', 'capri'), ('gm', 'chevrolet'), ('chrysler', 'chrysler'), ('citroen', 'citroen'), ('nissan', 'datsun'), ('chrysler', 'dodge'), ('fiat', 'fiat'), ('ford', 'ford'), ('honda', 'honda'), ('mazda', 'mazda'), ('daimler benz', 'mercedes'), ('daimler benz', 'mercedes-benz'), ('ford', 'mercury'), ('nissan', 'nissan'), ('gm', 'oldsmobile'), ('opel', 'opel'), ('peugeaut', 'peugeot'), ('chrysler', 'plymouth'), ('gm', 'pontiac'), ('renault', 'renault'), ('saab', 'saab'), ('subaru', 'subaru'), ('toyota', 'toyota'), ('triumph', 'triumph'), ('volkswagen', 'volkswagen'), ('volvo', 'volvo'), ('kia', 'kia'), ('hyundai', 'hyundai'), ('chrysler', 'jeep'), ('toyota', 'scion')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Maker ,  Model FROM MODEL_LIST;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the model of the car whose weight is below the average weight.' in SQLite? I currently have 'SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT avg(Weight) FROM cars_data))', which outputs [('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the average and maximum number of tickets bought in all visits?' in SQLite? I currently have 'SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit', which outputs [(10.5, 24)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name of the earliest school graduate?' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1', which outputs [('Timmothy', 'Anna', 'Ward')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What airline serves the most flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the description of the department whose name has the substring the computer?' in SQLite? I currently have 'SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the conductor who has worked the greatest number of years?' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', which outputs [('Robert Craft',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show location and name for all stadiums with a capacity between 5000 and 10000.' in SQLite? I currently have 'SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the notes of the death events which has substring 'East'?' in SQLite? I currently have 'SELECT note FROM death WHERE note LIKE '%East%'', which outputs [('East Champaran, Bihar',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT note FROM death WHERE note LIKE '%East%'", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the money rank of the tallest poker player?' in SQLite? I currently have 'SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people)', which outputs [(68.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the name of the airport with code 'AKO'.' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode = 'AKO'', which outputs [('Colorado Plains Regional Airport ',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.' in SQLite? I currently have 'SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'', which outputs [('Employee', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model has the most version(make) of cars?' in SQLite? I currently have 'SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Make) DESC LIMIT 1', which outputs [('ford',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?' in SQLite? I currently have 'SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%'', which outputs [(16514113,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the paragraph texts for the document with the name 'Customer reviews'?' in SQLite? I currently have 'SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'', which outputs [('Korea',), ('Ukraine',), ('Korea',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids, version numbers, and type codes for each template?' in SQLite? I currently have 'SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates', which outputs [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM singer", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries that have cartoons on TV that were written by Todd Casey?' in SQLite? I currently have 'SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'', which outputs [('United Kingdom',), ('Italy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different departments offer degrees?' in SQLite? I currently have 'SELECT count(distinct department_id) FROM Degree_Programs', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List names of conductors in descending order of years of work.' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC', which outputs [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of the nations that were founded after 1950.' in SQLite? I currently have 'SELECT Name FROM country WHERE IndepYear > 1950', which outputs [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country WHERE IndepYear  >  1950", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the air date of TV series with Episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'', which outputs [('September 24, 2007',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name, country code and birth date of the winner who has the highest rank points in all matches.' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1', which outputs [('Serena', 'USA', 19810926)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the final tables made and the best finishes of poker players.' in SQLite? I currently have 'SELECT Final_Table_Made, Best_Finish FROM poker_player', which outputs [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the shop that is hiring the largest number of employees?' in SQLite? I currently have 'SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name HAVING count(T2.Employee_ID) = (SELECT max(count_employee) FROM (SELECT count(Employee_ID) as count_employee FROM hiring GROUP BY Shop_ID) as subquery)', which outputs [('FC Haka',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of pets whose weight is heavier than 10.' in SQLite? I currently have 'SELECT COUNT(*) FROM Pets WHERE weight > 10', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM pets WHERE weight  >  10", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names for all stadiums except for stadiums having a concert in year 2014.' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')', which outputs [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the template type code for template type description \"Book\".' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the maximum and minimum share of performances whose type is not \"Live final\".' in SQLite? I currently have 'SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'', which outputs [('44.7%', '22.7%')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show template ids, version numbers, and template type codes for all templates.' in SQLite? I currently have 'SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates', which outputs [(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of employees for each city.' in SQLite? I currently have 'SELECT COUNT(Employee_ID), City FROM employee GROUP BY City', which outputs [(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  city FROM employee GROUP BY city", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .' in SQLite? I currently have 'SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) >= 2 AND count(*) > 3', which outputs [(4, 'gm'), (6, 'chrysler')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the produdction code and channel of the most recent cartoon ?' in SQLite? I currently have 'SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1', which outputs [(102.0, '701')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of distinct type of pets.' in SQLite? I currently have 'SELECT COUNT(DISTINCT PetType) FROM Pets', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT pettype) FROM pets", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id of the semester that had both Masters and Bachelors students enrolled?' in SQLite? I currently have 'SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Masters') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelors')', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the last name of the owner owning the youngest dog.' in SQLite? I currently have 'SELECT T2.last_name FROM Owners AS T2 JOIN Dogs AS T1 ON T1.owner_id = T2.owner_id WHERE T1.date_of_birth = (SELECT max(date_of_birth) FROM Dogs)', which outputs [('Mertz',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many people live in Gelderland district?' in SQLite? I currently have 'SELECT sum(Population) FROM city WHERE District = 'Gelderland'', which outputs [(545548,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the orchestras that do not have any performances?' in SQLite? I currently have 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', which outputs [('San Francisco Symphony Orchestra',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.' in SQLite? I currently have 'SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'', which outputs [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of all players, and their total ranking points?' in SQLite? I currently have 'SELECT T1.first_name, sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name', which outputs [('Mirjana', 331434), ('Tamarine', 594281), ('Katarina', 437442), ('Jana', 110902), ('Lisa', 532884), ('Maureen', 219), ('Serena', 4232828), ('Nicole', 289370), ('Virginie', 514764), ('Patty', 7323), ('Nadia', 1361265), ('Cara', 240762), ('Alexandra', 261247), ('Paola', 403127), ('Kveta', 210101), ('Jelena', 626517), ('Anne', 335693), ('Brenda', 164339), ('Kimiko', 270102), ('Yayuk', 128509), ('Janette', 143422), ('Romana', 29214), ('Katerina', 10237), ('Lindsay', 142454), ('Svetlana', 54282), ('Venus', 2875425), ('Jill', 359013), ('Elena', 364725), ('Katalin', 112562), ('Stephanie', 301101), ('Liezel', 39782), ('Sophie', 23823), ('Greta', 240126), ('Elizabeth', 353), ('Kyra', 94799), ('Francesca', 1279791), ('Anabel', 678793), ('Maria Jose', 411921), ('Daniela', 1135382), ('Nuria', 243280), ('Catalina', 221309), ('Marion', 1266653), ('Anne', 242145), ('Elena', 253351), ('Eleni', 435918), ('Maria Elena', 296736), ('Roberta', 809611), ('Bethanie', 371662), ('Svetlana', 1852305), ('Samantha', 1365135), ('Vera', 1524624), ('Iveta', 443695), ('Zuzana', 193144), ('Renata', 193694), ('Klara', 566453), ('Maria', 2549520), ('Jelena', 1733205), ('Casey', 201511), ('Melinda', 290299), ('Stanislava', 49412), ('Flavia', 1006803), ('Eva', 190592), ('Anais', 46590), ('Edina', 249446), ('Barbora', 469763), ('Arantxa', 242458), ('Carly', 67459), ('Anastasia', 293766), ('Vera', 395971), ('Maria', 773249), ('Yuliya', 164785), ('Claudine', 106762), ('Marie Eve', 114687), ('Chia Jung', 33301), ('Jie', 610820), ('Sofia', 364579), ('Zuzana', 161), ('Mervana', 102693), ('Severine', 192296), ('Anna Lena', 276403), ('Shuai', 655592), ('Emily', 49709), ('Nicole', 5119), ('Abigail', 111645), ('Sesil', 208108), ('Anna', 514484), ('Evgenia', 59775), ('Monique', 106781), ('Aiko', 138707), ('Anastasia', 216035), ('Michaella', 242619), ('Alona', 64), ('Marta', 193960), ('Na', 1358928), ('Sania', 272889), ('Ana', 1320911), ('Yvonne', 246168), ('Shahar', 662926), ('Lucie', 778801), ('Pauline', 309700), ('Alize', 535684), ('Mathilde', 242988), ('Rika', 141257), ('Aravane', 383495), ('Sarah', 26649), ('Kateryna', 356602), ('Ivana', 75330), ('Ekaterina', 193847), ('Laura', 183089), ('Emma', 77512), ('Yung Jan', 229391), ('Alexa', 131846), ('Su Wei', 274936), ('Vania', 299530), ('Galina', 265162), ('Tsvetana', 456422), ('Kathrin', 141281), ('Lourdes', 371035), ('Akgul', 228538), ('Elena', 573809), ('Olga', 172000), ('Jarmila', 333150), ('Victoria', 2024970), ('Zi', 99286), ('Alberta', 238803), ('Kirsten', 382453), ('Kaia', 625836), ('Yaroslava', 404915), ('Melanie', 87711), ('Kristina', 200972), ('Naomi', 1979), ('Romina', 253471), ('Vasilisa', 41442), ('Agnieszka', 1801033), ('Ahsha', 52), ('Lauren', 70159), ('Stephanie', 198461), ('Varvara', 388528), ('Olga', 165915), ('Tamira', 322202), ('Andreja', 74453), ('Madison', 172851), ('Sandra', 156294), ('Alla', 253320), ('Aleksandra', 338720), ('Jessica', 64277), ('Mariya', 154484), ('Timea', 416391), ('Andrea', 624785), ('Angelique', 1105308), ('Raluca', 148701), ('Dominika', 918297), ('Caroline', 1852481), ('Agnes', 339796), ('Karin', 236630), ('Anastasia', 710284), ('Olga', 341060), ('Tatjana', 160892), ('Ayumi', 286994), ('Julia', 506901), ('Ekaterina', 570080), ('Sara', 861380), ('Petra', 292551), ('Ashley', 43781), ('Ekaterina', 106669), ('Monica', 423109), ('Sabine', 590911), ('Sorana', 457043), ('Alisa', 368086), ('Evgeniya', 203969), ('Magdalena', 372858), ('Yanina', 600789), ('Petra', 1304308), ('Carla', 643043), ('Jelena', 44294), ('Marina', 262043), ('Urszula', 275255), ('Eva', 64840), ('Julie', 154138), ('Stefanie', 243897), ('Melanie', 225546), ('Kristie', 34647), ('Gail', 38651), ('Mariana', 194050), ('Anastasia', 113115), ('Shuai', 258237), ('Asia', 48788), ('Coco', 235721), ('Patricia', 185492), ('Isabella', 36973), ('Christina', 300153), ('Kristina', 261445), ('Chanelle', 273720), ('Olivia', 115102), ('Emelyn', 12728), ('Anastasija', 268214), ('Michelle', 159005), ('Ajla', 116548), ('Petra', 239025), ('Tamaryn', 40060), ('Arantxa', 191994), ('Lenka', 69314), ('Vitalia', 106924), ('Polona', 318325), ('Lucie', 318382), ('Corinna', 102260), ('Lauren', 16732), ('Irena', 88369), ('Kinnie', 15102), ('Claire', 107656), ('Silvia', 204373), ('Darya', 71887), ('Lenka', 40435), ('Katarzyna', 67902), ('Agnes', 38371), ('Alexandra', 295579), ('Kristina', 133889), ('Vesna', 169500), ('Masa', 116481), ('Regina', 122331), ('Laura', 160614), ('Heidi', 88542), ('Kai Chen', 172004), ('Yurika', 101816), ('Xinyun', 109256), ('Chun Mei', 12519), ('Jing Jing', 68925), ('Yana', 16152), ('Ksenia', 211151), ('Sloane', 352458), ('Heather', 202780), ('Bojana', 251714), ('Anna', 206032), ('Sharon', 117825), ('Alison', 201699), ('Margalita', 99836), ('Beatriz', 63228), ('Irina Camelia', 293366), ('Simona', 712373), ('Misaki', 203782), ('Johanna', 288192), ('Kurumi', 177170), ('Noppawan', 73589), ('Andrea', 194566), ('Jamie', 170487), ('Chelsey', 6777), ('Beatrice', 19264), ('Shelby', 100708), ('Irina', 152780), ('Mandy', 191721), ('Rebecca', 111308), ('Sally', 53480), ('Sheng Nan', 53610), ('Yi Miao', 61839), ('Zarina', 123243), ('Daria', 148173), ('Junri', 128183), ('Arina', 94252), ('Caroline', 208822), ('Lesia', 225987), ('Lauren', 156236), ('Ana', 97597), ('Fatma', 21261), ('Madison', 303633), ('Monica', 164200), ('Mona', 282445), ('Iryna', 84139), ('Nicha', 30972), ('Estrella', 126811), ('Maria Teresa', 106375), ('Nadia', 14772), ('Fatima', 10865), ('Eva', 53947), ('Maria Joao', 72682), ('Jasmin', 24180), ('Naomi', 94624), ('Lenka', 50987), ('Irina', 57224), ('Ksenia', 56579), ('Ellen', 6698), ('Sandra', 8128), ('Anna', 101468), ('Tadeja', 83659), ('Nastja', 29250), ('Melanie', 65170), ('Tereza', 29622), ('Tina', 57044), ('Karolina', 431365), ('Ekaterina', 75003), ('Pemra', 60908), ('Ipek', 13029), ('Cagla', 119797), ('Ling', 64525), ('Alexandra', 162178), ('Amra', 60702), ('Ksenia', 61432), ('Nigina', 47651), ('Sabina', 43797), ('So Jung', 47282), ('Ye Ra', 47867), ('Mi', 24569), ('Sacha', 78204), ('Varatchaya', 54340), ('Nudnida', 63013), ('Bianca', 41135), ('Lina', 3217), ('Claire', 29976), ('Nina', 155172), ('Dia', 79958), ('Michaela', 32049), ('Timea', 195681), ('Silvia', 13618), ('Laura', 146176), ('Kristyna', 148477), ('Liana Gabriela', 59997), ('Martina', 24123), ('Nikola', 46787), ('Basak', 26501), ('Malou', 3073), ('Yi Fan', 60646), ('Alina', 1243), ('Sachie', 42676), ('Natalie', 76568), ('Yulia', 153672), ('Petra', 99437), ('Galina', 37795), ('Vanessa', 71573), ('Shiho', 247), ('Cory Ann', 20869), ('Habiba', 811), ('Liga', 23411), ('Mariana', 115), ('Olga', 14905), ('Kyung Mi', 26059), ('Maria', 43077), ('Maria Fernanda', 82186), ('Diana', 33443), ('Darija', 41925), ('Sandra', 11022), ('Magdalena', 16523), ('Klaudia', 4809), ('Ayu Fani', 38501), ('Daniella', 16516), ('Karolina', 33846), ('Lina', 69089), ('Rushmi', 27452), ('Andrea', 24384), ('Nikola', 20210), ('Madalina', 62938), ('Chin Wei', 70504), ('Marrit', 1339), ('Erika', 53764), ('Teodora', 41206), ('Lavinia', 23897), ('Raquel', 29079), ('Kirsten', 624), ('Chieh Yu', 34796), ('Ksenia', 26842), ('Kyra', 6681), ('Sung Hee', 29509), ('Vlada', 22487), ('Sandra', 37253), ('Akiko', 47321), ('Andrea', 39240), ('Camila', 10136), ('Maria', 84951), ('Anna', 19595), ('Amanda', 8584), ('Leticia', 45115), ('Alexis', 13371), ('Natasa', 14212), ('Amanda', 20922), ('Alisa', 1294), ('Sofia', 71232), ('Maria', 12063), ('Florencia', 88014), ('Catherine', 1558), ('Ximena', 19066), ('Nungnadda', 24523), ('Tetiana', 75337), ('Lara', 161059), ('Barbara', 7461), ('An Sophie', 51803), ('Alison', 96908), ('Shuko', 46124), ('Sarah', 50787), ('Conny', 52274), ('Samantha', 26624), ('Julia', 68207), ('Johanna', 264234), ('Kiki', 214121), ('Camila', 186544), ('Alize', 61217), ('Tetyana', 43020), ('Hilda', 10191), ('Anna Giulia', 49207), ('Aleksandra', 107965), ('Vanda', 10087), ('Reka Luca', 66271), ('Anastasia', 41457), ('Ani', 36361), ('Silvia', 821), ('Paula', 101053), ('Nina', 126), ('Tatia', 42), ('Valeria', 95259), ('Kamilla', 249), ('Valeria', 51691), ('Eugenie', 204628), ('Alexandra', 37627), ('Zoe Gwen', 2877), ('Victoria', 40691), ('Jana', 121823), ('Nicole', 24544), ('Yi Jing', 22443), ('Saisai', 113359), ('Erika', 98697), ('Yue Yue', 21360), ('Alexandra', 136645), ('Bibiane', 50184), ('Ashleigh', 58741), ('Bojana', 29054), ('Ons', 56242), ('Julia', 103781), ('Karen', 16614), ('Ines', 37020), ('Yuliana', 15030), ('Maria', 29169), ('Nadia', 5642), ('Elitsa', 87263), ('Jessica', 65879), ('Garbine', 412872), ('Annika', 169371), ('Karen', 15555), ('Laura', 59763), ('Annalisa', 29442), ('Jasmina', 36744), ('Csilla', 2338), ('Dinah', 67017), ('Tara', 54798), ('Grace', 70529), ('Richel', 84184), ('Chi Chi', 49122), ('Barbara', 24616), ('Sandra', 45503), ('Nicole', 84098), ('Jana', 9371), ('Mallory', 44497), ('Nastassja', 65152), ('Valentyna', 47854), ('Carina', 90451), ('Rebecca', 31058), ('Varvara', 11985), ('Qiang', 116857), ('Ekaterine', 26897), ('Elina', 314280), ('Jennifer', 42451), ('Samantha', 44166), ('Victoria', 21688), ('Julia', 108628), ('Donna', 114098), ('Maria', 58599), ('Hyun Hui', 8301), ('So Ra', 18210), ('Luksika', 77519), ('Ying Ying', 107595), ('Belinda', 135048), ('Margarita', 60475), ('Wing Yau Venise', 11694), ('Yuxuan', 24279), ('Stefania', 19313), ('Giulia', 33872), ('Erika', 12098), ('Marina', 34536), ('Natalia', 32336), ('Estelle', 32414), ('Ana', 46852), ('Federica', 21862), ('Alison', 24920), ('Neda', 8669), ('Alexia', 12772), ('Vivienne', 8918), ('Eleni', 3233), ('Afroditi', 156), ('Stamatia', 8072), ('Stephanie', 27781), ('Hulya', 7797), ('Veronika', 51601), ('Anna', 42083), ('Olga', 22497), ('Evelyn', 27011), ('Anna', 23373), ('Yumi', 9862), ('Hao Ching', 224), ('Chi Fan', 667), ('Wen Hsin', 40633), ('Remi', 38116), ('Kumiko', 56212), ('Laura Ioana', 33822), ('Giulia', 59436), ('Federica', 24242), ('Chanel', 62861), ('Megan', 13001), ('Nicole', 23123), ('Lena', 26631), ('Katie', 16716), ('Diana', 28959), ('Elena', 52008), ('Alexandra', 9273), ('Mihaela', 69242), ('Natalie', 37660), ('Alice', 15010), ('Viktoriya', 25736), ('Patrycja', 16980), ('Despina', 19065), ('Julia', 30040), ('Claudia', 30315), ('Yi', 13791), ('Akari', 11873), ('Aki', 14838), ('Oksana', 58279), ('Jacqueline', 22928), ('Natasha', 5478), ('Justyna', 30304), ('Ema', 2937), ('Yuliya', 36939), ('Elixane', 18211), ('Lyudmyla', 54172), ('Valentine', 9767), ('Stephanie', 69447), ('Fiona', 1459), ('Maryna', 84453), ('Gabriela', 27322), ('Eleanor', 1964), ('Lara', 10993), ('Nina', 17911), ('Chen', 26779), ('Jin A', 46355), ('Zuzana', 36307), ('Shivika', 4611), ('Chiaki', 42773), ('Akiko', 37074), ('Irina', 21221), ('Natalia', 20251), ('Gioia', 31741), ('Yasmin', 11217), ('Ting Fei', 8145), ('Jessy', 923), ('Ana Clara', 36696), ('Madrie', 2266), ('Zarah', 3809), ('Lynn', 647), ('Lisa', 30427), ('Kim Alice', 12388), ('Denisa', 65522), ('Martina', 1736), ('Estelle', 7575), ('Dijana', 7353), ('Audrey', 29458), ('Tereza', 66177), ('Jade', 17071), ('Lucy', 6542), ('Camilla', 8601), ('Magda', 103659), ('Roxane', 38793), ('Jessica', 6021), ('Nicola', 26603), ('Natela', 16303), ('Sina', 10360), ('Cristina', 44297), ('Cristina Andreea', 75414), ('Ekaterina', 15816), ('Anastasiya', 1033), ('Alexandra', 9699), ('Aselya', 238), ('Prerna', 9318), ('Ekaterina', 1900), ('Polina', 19387), ('Yuliya', 4194), ('Maria', 9939), ('Gabriela', 37550), ('Sara', 129), ('Wan Ting', 11653), ('Lin', 40341), ('Misa', 54509), ('Di', 9780), ('Ran', 14306), ('Isabella', 36746), ('Vaszilisza', 3763), ('Ani', 2252), ('Radina', 699), ('Ya Hsuan', 17078), ('Teliana', 112570), ('Aleksandrina', 35957), ('Federica', 7015), ('Anne Liz', 5269), ('Alessondra', 265), ('Ryann', 597), ('Simone', 532), ('Irina', 65224), ('Tereza', 48873), ('Constance', 25166), ('Rocio', 16778), ('Veronica', 82249), ('Manon', 14056), ('Myrtille', 43550), ('Kelly S', 5880), ('Tinatin', 476), ('Mariana', 3654), ('Katerina', 24682), ('Vladimira', 6470), ('Alicja', 5216), ('Vojislava', 18781), ('Ria', 5566), ('Anne', 69973), ('Tomoko', 7395), ('Natsumi', 37183), ('Ana', 27275), ('Chayenne', 20132), ('Simona', 9465), ('Indire', 12633), ('Maya', 12849), ('Sherazad', 10094), ('Agustina', 21007), ('Mari', 32785), ('Justine', 38541), ('Ayumi', 22451), ('Yurina', 12693), ('Romana Caroline', 17020), ('Maria Fernanda', 56363), ('Antonela', 280), ('Marija', 20451), ('Kaitlyn', 3329), ('Miyabi', 22840), ('Anastasiya', 47480), ('Jara', 464), ('Georgina', 11547), ('Raluca Elena', 9202), ('Danielle', 20600), ('Chang', 26585), ('Yi', 2644), ('Shiho', 39713), ('Michaela', 34262), ('Anastasia', 12551), ('Francesca', 5934), ('Kotomi', 4962), ('Korina', 21417), ('Jessica', 2581), ('Nicola', 3105), ('Marta', 66109), ('Celine', 13135), ('June', 114), ('Krista', 17577), ('Kanae', 20142), ('Yuka', 8856), ('Zuzana', 23632), ('Makoto', 14129), ('Maiko', 11320), ('Ioana', 211), ('Rui', 24), ('Danica', 17597), ('Tomoko', 36), ('Danielle', 6890), ('Yoon Young', 3592), ('Hae Sung', 8180), ('Etsuko', 7147), ('Virginie', 4444), ('Angelina', 16231), ('Jillian', 1991), ('Ai', 9177), ('Maya', 10489), ('Sakiko', 9338), ('Kaori', 8406), ('Nadja', 2661), ('Gracia', 7999), ('Amandine', 35243), ('Katerina', 29566), ('Veronika', 2045), ('Jia Jing', 48117), ('Piia', 21340), ('Karolina', 18043), ('Nadiya', 51346), ('Marion', 5632), ('Ana', 6497), ('Tatiana', 12096), ('Kristy', 1899), ('Alexa', 4367), ('Amandine', 6332), ('Shu Ying', 1483), ('Martina', 15861), ('Lisa', 27408), ('Allie', 17085), ('Ionela Andreea', 6948), ('Yumi', 10407), ('Veronica', 520), ('Sanaz', 17975), ('Milana', 14123), ('Jasmina', 7118), ('Nikola', 9980), ('Martina', 12291), ('Libby', 2362), ('Khristina', 515), ('Lauren', 1532), ('Vivian', 29513), ('Vanesa', 30669), ('Tatiana', 21926), ('Mailen', 39523), ('Jasmin', 8400), ('Tori', 10630), ('Eugeniya', 20989), ('Ksenia', 12596), ('Marina', 38215), ('Julia', 4145), ('Ganna', 18584), ('Julia', 8307), ('Miki', 24542), ('Poojashree', 13006), ('Danielle Rose', 8507), ('Martina', 10707), ('Danielle', 12038), ('Ellen', 4349), ('Tea', 2127), ('Svenja', 6338), ('Ana', 651), ('Lucia', 12855), ('Pilar', 6404), ('Macall', 12379), ('Nicole', 11146), ('Ilona', 26950), ('Natalia', 283), ('Nanuli', 16494), ('Avgusta', 21), ('Elisabeth', 1565), ('Marianne', 1090), ('Lena Marie', 14942), ('Vivien', 13041), ('Tamara', 15617), ('Keren', 24062), ('Rashmi', 741), ('Rishika', 8448), ('Dalila', 47772), ('Anastasia', 8125), ('Alexandra', 17308), ('Sviatlana', 11201), ('Aminat', 12708), ('Sofie', 10539), ('Alexandra', 1039), ('Sarah Rebecca', 13064), ('Yana', 8234), ('Marina', 17497), ('Aranza', 24184), ('Elizabeth', 11603), ('Andreea Roxana', 12727), ('Jelena', 7887), ('Polona', 6891), ('Cristina Madalina', 317), ('Lucie', 11037), ('Martina', 13935), ('Kateryna', 76271), ('Nuria', 15836), ('Benedetta', 11032), ('Amanda', 33691), ('Iris', 4743), ('Dariya', 812), ('Alexandra', 2015), ('Albina', 10507), ('Anna', 2052), ('Nika', 8479), ('Carol', 14213), ('Alejandra', 470), ('Silvia', 2589), ('Charlene', 5683), ('Oceane', 3040), ('Jennifer', 2350), ('Jan', 10947), ('Viktoryia', 1561), ('Julia', 10236), ('Celine', 5689), ('Andrea', 1303), ('Doroteja', 23976), ('Hao Chen', 9631), ('Alyona', 25183), ('Hirono', 4368), ('Emi', 3880), ('Chinami', 13141), ('Sophie', 12367), ('Simone', 617), ('Elizabeth', 8388), ('Gabrielle Faith', 1093), ('Sachia', 49767), ('Taylor', 38766), ('Lindsey', 500), ('Kazusa', 10107), ('Miyu', 23968), ('Tereza', 173), ('Giorgia', 1521), ('Diana', 40344), ('Nathalia', 28098), ('Alexandra', 5419), ('Robin', 12295), ('Katarzyna', 25598), ('Nadiya', 5250), ('Chihiro', 8451), ('Paula', 55625), ('Arabela', 11608), ('Andrea', 32964), ('Yevgeniya', 6288), ('Isabel', 6688), ('Morgane', 6358), ('Anaeve', 1962), ('Tammi', 26077), ('Khristina', 3233), ('Nicola', 3842), ('Sonja', 4261), ('Viktorija', 61541), ('Klara', 1738), ('Michaela', 2300), ('Anna Karolina', 107880), ('Melis', 19804), ('Sultan', 1544), ('Nadezda', 5027), ('Victoria', 26048), ('Polina', 23884), ('Anastasia', 9768), ('Elizaveta', 21746), ('Daria', 12630), ('Stefanie', 309), ('Monika', 95), ('Anja', 11596), ('Zuzana', 13007), ('Agnese', 13717), ('Olga', 21423), ('Brianna', 2922), ('Risa', 59476), ('Riko', 23195), ('Yuriko', 1060), ('Mai', 16929), ('Yuuki', 15071), ('Mana', 9593), ('Lou', 10143), ('Clothilde', 12304), ('Whitney', 5514), ('Charlotte', 286), ('Erin', 4140), ('Emily J', 964), ('Chloe', 15190), ('Alice', 3928), ('Christina', 8216), ('Ipek', 25946), ('Naz', 251), ('Olga', 9590), ('Bermet', 8441), ('Polina', 14751), ('Lisanne', 8284), ('Danka', 87958), ('Kai Lin', 37817), ('Caroline B', 111), ('Fangzhou', 33388), ('Chalena', 4914), ('Elizabeth Anita Alexandria', 1103), ('Adriana', 26610), ('Tatsiana', 1289), ('Ioana Loredana', 5425), ('Diana', 2512), ('Cristina', 3927), ('Camelia Elena', 9147), ('Katy', 11572), ('Dianne', 6369), ('Tyra', 4543), ('Peangtarn', 26280), ('Samantha', 302), ('Paula Catalina', 3714), ('Ingrid Esperanza', 10133), ('Victoria', 170), ('Ivette', 543), ('Intissar', 33), ('Fatyha', 80), ('Lesley', 42925), ('Csilla', 3918), ('Paulina', 1688), ('Annie', 172), ('Jeannine', 3426), ('Karolina', 16815), ('Janina', 12525), ('Martina', 14434), ('Petra', 13266), ('Natalie', 1463), ('Anastasiya', 3443), ('Ji Young', 8592), ('Seung Yeon', 6650), ('Ji Hee', 6858), ('Mi Rae', 1858), ('Min Hwa', 9938), ('Na Lae', 26185), ('Hyojung', 870), ('Seo Kyung', 6564), ('Su Jeong', 33672), ('Christine', 2438), ('Anna Arina', 6650), ('Viktorija', 17970), ('Ashling', 5155), ('Barbara', 8211), ('Ashley', 1088), ('Jawairiah', 822), ('Trang', 1884), ('Stephanie', 681), ('Rita', 428), ('Margarida', 1997), ('Sofia', 462), ('Maria', 69), ('Agata', 1901), ('Mai', 833), ('Kimberley', 288), ('Alice', 7308), ('Seda', 1469), ('Cecilie Lundgaard', 95), ('Nazari', 980), ('Nan Nan', 3094), ('Polina', 1119), ('Yvonne', 8323), ('Chihiro', 4411), ('Katherine', 960), ('Emily', 328), ('Caroline', 400), ('Carolina', 4528), ('Tanaporn', 764), ('Camila', 808), ('Josie', 804), ('Victoria', 4212), ('Valerie', 6043), ('Natasha', 36), ('Julie', 216), ('Frederikke', 9), ('Demi', 1192), ('Indy', 17382), ('Matilda', 3466), ('Brenda', 2421), ('Rebecca', 342), ('Louise', 1286), ('Valeria', 538), ('Beatrice', 4134), ('Agnes', 11981), ('Marisa', 1026), ('Vincenza', 105), ('Carolina', 13759), ('Lisa Maria', 7898), ('Anna Maria', 874), ('Pia', 9061), ('Sofia', 26112), ('Valentini', 15198), ('Brooke', 6918), ('Arina', 2157), ('Maftuna', 54), ('Yana', 270), ('Natella', 649), ('Priscila', 6), ('Ah', 141), ('Ki Ryang', 86), ('Zi', 11004), ('Yoshimi', 677), ('Kanami', 3724), ('Storm', 21152), ('Belinda', 2279), ('Azra', 11721), ('Nattawadee', 224), ('Alexandra', 3540), ('Robyn', 1103), ('Hana', 346), ('Daniella', 147), ('Ana Sofia', 15955), ('Marcela', 16352), ('Ana Paula', 988), ('Valeria', 45), ('Hayley', 1679), ('Anett', 71072), ('Sara', 43349), ('Miriam', 1312), ('Antonia', 21624), ('Anna Lena', 82971), ('Syna', 9001), ('Ysaline', 27804), ('Emma', 96), ('Jessica', 895), ('Daneika', 1607), ('Sabrina', 951), ('Kim', 4473), ('Karina Ildor', 5493), ('Magy', 756), ('Marta', 338), ('Alice', 21875), ('Gaelle', 536), ('Juliana', 414), ('Anamika', 2338), ('Fatimah', 898), ('Natalia', 7752), ('Martina', 7042), ('Beatrice', 1793), ('Blessing', 375), ('Cristina', 2713), ('Shao Yuan', 1363), ('Alessia', 1826), ('Agni', 2929), ('Sun Jung', 6591), ('Anouk', 1069), ('Nicolette', 9627), ('Lara', 5229), ('Sylwia', 8268), ('Giulia', 1884), ('Melisa', 340), ('Blessing', 287), ('Ekaterina', 1986), ('Ashmitha', 648), ('Asha', 99), ('Jana', 5161), ('Misa', 1472), ('Yoo Ri', 182), ('Lu', 3445), ('Sara', 327), ('Ioana', 128), ('Naoko', 857), ('Kady', 467), ('Marcella', 13037), ('Yasmine', 1469), ('Paula Cristina', 37384), ('Aleksandra', 164), ('Kateryna', 422), ('Viktoria', 13982), ('Marcela Guimaraes', 683), ('Marcela', 320), ('Julia', 6411), ('Xin', 8744), ('Nevena', 170), ('Adnya', 219), ('Tereza', 9800), ('Pavla', 4128), ('Ester', 3908), ('Eden', 235), ('Christie', 24), ('Ronke', 49), ('Karina', 4988), ('Keri', 894), ('Diana', 3029), ('Emma', 5466), ('Brittany', 1032), ('Julie', 1368), ('Anna', 24100), ('Ineke', 1358), ('Ema', 147), ('Carmen', 7005), ('Karin', 12185), ('Dunja', 3375), ('Natasha', 3641), ('Ai', 1574), ('Guadalupe', 7838), ('Margarita', 16824), ('Johanna', 681), ('Ingrid Alexandra', 4766), ('Dalia', 8939), ('Adriana', 57), ('Deeon', 141), ('Stephanie', 1921), ('Noel', 1558), ('Francesca', 3788), ('Na Ri', 19223), ('Alexandra', 3842), ('Chun Yan', 3374), ('Cynthia', 1034), ('Yi', 3554), ('Iryna', 234), ('Anastasiya', 221), ('Julia', 4777), ('Eri', 34570), ('Ema', 8056), ('Veronika', 2862), ('Sabrina', 211), ('Isabella', 9564), ('Isabela', 714), ('Karina', 4334), ('Beatriz Maria', 1920), ('Melina', 2609), ('Monique', 6295), ('Carla', 15032), ('Li', 1696), ('Carla', 9522), ('Nathaly', 13241), ('Yoko', 285), ('Elyne', 12554), ('Anouk', 2552), ('Makiho', 5592), ('Veronika', 244), ('Alix', 5422), ('Silvia', 291), ('Anna', 13232), ('Stefania', 1363), ('Chantal', 15001), ('Angelique', 24836), ('Ekaterina', 484), ('Barbara', 8261), ('Giuliana', 2935), ('Olawaseun', 2), ('Abiodun', 120), ('Beauty', 26), ('Rana', 9), ('Ola', 3497), ('Florencia', 1347), ('Luciana', 8281), ('Kyle', 3200), ('Ulrikke', 27118), ('Darya', 3549), ('Vladislava', 1254), ('Chanelle', 1644), ('Abbie', 5214), ('Malin', 2489), ('Aliaksandra', 61196), ('Alina', 4280), ('Hye Min', 1222), ('Samantha', 340), ('Eduarda', 11216), ('Stefani', 126), ('Maya', 58), ('Carolina', 14061), ('Anna', 13583), ('Ganna', 11552), ('Lidziya', 6809), ('Shiori', 18), ('Se Jin', 681), ('Elena', 526), ('Dilara', 85), ('Busra', 537), ('Zsofia', 1501), ('Ivana', 1531), ('Yawna', 648), ('Giulia', 5466), ('Laetitia', 6078), ('Alejandra', 921), ('Yana', 11316), ('Beatriz', 54), ('Mariona', 4), ('Verena', 1597), ('Gabriela', 996), ('Lucia', 554), ('Josepha', 2710), ('Linda', 1754), ('Carmen', 554), ('Elisabeth', 3017), ('Stephanie', 3988), ('Manisha', 3112), ('Kana', 1536), ('Tamara', 3231), ('Laura', 11073), ('Diana', 4050), ('Laura', 13464), ('Liz Tatiane', 2216), ('Giovanna', 289), ('Flavia', 3709), ('Flavia', 546), ('Asiya', 802), ('Xiao', 4789), ('Sirui', 276), ('Voni', 1036), ('Yuka', 3618), ('Laili', 595), ('Angelica', 13577), ('Alena', 8649), ('Bianca', 5376), ('Julia', 7882), ('Carolin', 9021), ('Lisa Marie', 1202), ('Saana', 195), ('Katerina', 190), ('Petra', 2561), ('Daniela', 26653), ('Mariana', 2215), ('Laura', 468), ('Andrea', 342), ('Victoire', 454), ('Bernice', 3894), ('Quirine', 22978), ('Carlotta', 529), ('Jovana', 39142), ('Marina', 7740), ('Costanza', 1186), ('Helen', 198), ('Claudia Antonia', 1227), ('Claudia Gianina', 934), ('Simona', 1980), ('Ani', 9568), ('Caroline', 544), ('Liubov', 2662), ('Marianna', 9551), ('Sofiya', 18371), ('Erin', 1216), ('Nina', 254), ('Eleanor', 323), ('Ebony', 713), ('Hiroko', 27580), ('Miharu', 21205), ('Brooke', 144), ('Karis', 1003), ('Caitlin', 15111), ('Rachael', 2592), ('Mai', 562), ('Yolande', 1381), ('Valeriya', 160), ('Viktoriya', 219), ('Lucia', 2413), ('Raquel', 1322), ('Nikola', 1224), ('Ankita', 21599), ('Ashvarya', 2321), ('Sharmada', 4106), ('Rutuja', 3642), ('Prarthana G', 5687), ('Zhaoxuan', 20236), ('Jennifer', 35193), ('Aishwarya', 96), ('Hua Chen', 7367), ('Carolina', 2894), ('Sofia', 531), ('Amina', 85), ('Chiara', 3053), ('Desiree', 709), ('Tereza', 33994), ('Ju Eun', 3453), ('Tjasa', 3361), ('Francesca', 2340), ('Martina', 483), ('Yanina', 1664), ('Valeria', 3495), ('Lutfiye', 876), ('Deniz', 23554), ('Oleksandra', 1531), ('Tanya', 1229), ('Xenia', 14578), ('Diana', 5491), ('Catalina', 28747), ('Sofia', 5800), ('Gabriela', 3975), ('Napatsakorn', 1945), ('Kamonwan', 5866), ('Anna', 2493), ('Varunya', 3623), ('Lorenza', 33), ('Natalie', 4298), ('Zalina', 2052), ('Alisa', 394), ('Kamila', 12906), ('Elizaveta Anna', 636), ('Yelena', 1856), ('Jade', 7876), ('Taisiya', 1050), ('Rachel', 469), ('Alice', 2492), ('Chiara', 209), ('Beatrice', 1104), ('Cecilia', 11770), ('Tess', 7165), ('Samira', 2020), ('Joana', 1050), ('Susanne', 16276), ('Nika', 442), ('Ghislaine', 290), ('Eva', 6841), ('Sabrina', 1904), ('Cindy', 31356), ('Kelly', 4105), ('Ekaterina', 216), ('Varvara', 839), ('Viktoryia', 426), ('Anastasia', 610), ('Ximena', 429), ('Gabriela', 18658), ('Ya', 24), ('Xi Yao', 1445), ('Ai Wen', 2217), ('Alice Andrada', 2358), ('Min', 1884), ('Francesca', 3582), ('Giulia', 2634), ('Maria', 622), ('Anna', 5581), ('Amy', 9473), ('Franziska', 969), ('Olga', 16849), ('Andjela', 228), ('Oceane', 53813), ('Mathilde', 1249), ('Magalie', 511), ('Madeline', 147), ('Sabina', 2309), ('Evgeniya', 2107), ('Cemre', 958), ('Anette', 1657), ('Natia', 2526), ('Alicia', 616), ('Alexandra', 1183), ('Abbi', 304), ('Rocio', 108), ('Marina', 849), ('Patricia', 11034), ('Beatriz', 35516), ('Priscila', 504), ('Gulchekhra', 18), ('Ofri', 5372), ('Iva', 3235), ('Nicky', 2531), ('Michaela', 4204), ('Kimberley', 5105), ('Barbora', 28890), ('Ivonne', 13010), ('Patricia Maria', 43755), ('Dunja', 1328), ('Katarina', 891), ('Veronica M', 1678), ('Patricia', 166), ('Dejana', 2332), ('Danijela', 545), ('Ashley', 1644), ('Chisa', 358), ('Claudia', 1269), ('Maud', 210), ('Ainhoa', 2433), ('Marine', 4314), ('Lyann', 30), ('Stephanie', 3564), ('Elena', 425), ('Mayya', 9064), ('Ziyue', 1420), ('Ani', 630), ('Tamari', 304), ('Maria', 41999), ('Nives', 2706), ('Mary Ann', 102), ('Astra', 1083), ('Yue', 1259), ('Nour', 120), ('Nidhi', 5425), ('Gaia', 7998), ('Sylvia', 1626), ('Sherry', 801), ('Katrine Isabel', 308), ('Ekaterina', 2443), ('Lee', 733), ('Libi', 522), ('Rona', 308), ('Gulben', 410), ('Vita', 64), ('Boyan', 1465), ('Leah', 152), ('Dana', 1257), ('Montserrat', 23564), ('Daniela', 1560), ('Jazmin', 908), ('Camila', 4411), ('Linda', 2417), ('Alena', 111), ('Jesika', 17819), ('Julia', 9864), ('Clelia', 2221), ('Stefania', 3891), ('Olga', 1592), ('Paula', 1110), ('Maria Constanza De Las Mercedes', 1892), ('Ornella', 2133), ('Stephanie Mariel', 1397), ('Fernanda', 17563), ('Victoria', 10436), ('Denise', 1478), ('Aimee', 226), ('Mayo', 32445), ('Christina', 1846), ('Rio', 556), ('Noelle', 1795), ('Lina', 82), ('Angelique', 2370), ('Claudia', 302), ('Yihong', 24), ('Nicole', 784), ('Naiktha', 4380), ('Anna', 9034), ('Paula', 1136), ('Breaunna', 676), ('Spurti', 159), ('Veronika', 15659), ('Emiliya', 541), ('Daria', 5708), ('Alina', 3332), ('Yafan', 39687), ('Sonia', 480), ('Nour', 640), ('Elke', 728), ('Nicole', 2333), ('Gabriella', 480), ('Carmen', 615), ('Sarahi', 461), ('Maria Andrea', 323), ('Ana Gabriela', 288), ('Isabella', 27), ('Aymet', 791), ('Clementina Eugenia', 538), ('Domenica', 1614), ('Isabelle', 4054), ('Ellen', 2714), ('Yosr', 75), ('Sarvinoz', 178), ('Da Hye', 1417), ('Ji Hee', 321), ('Francesca', 1134), ('Martina', 3440), ('Sanae', 354), ('Kanako', 229), ('Alona', 3699), ('Elizaveta', 41127), ('Sofia', 2114), ('Berta', 814), ('Carolina', 1647), ('Nadia', 17280), ('Guadalupe', 6439), ('Agustina', 705), ('Shakhlo', 2122), ('Guzal', 775), ('Leolia', 750), ('Imane Maelle', 1676), ('Karin', 5508), ('Ekaterina', 33874), ('Nam Yeon', 259), ('Anastasia', 3838), ('Sandra', 1304), ('Katharina', 11829), ('Giulia', 120), ('Giulia', 1833), ('Daiana', 8589), ('Luisa', 298), ('Marcela', 118), ('Carolina Meligeni Rodrigues', 3627), ('Andressa Cristina', 72), ('Ivone', 253), ('Nadia', 2166), ('Sarah', 328), ('Assia', 141), ('Adriana', 869), ('Sarah', 50), ('Daniela', 114), ('Carmen Raluca', 1077), ('Kirsten Andrea', 462), ('Joanna', 472), ('Amira', 157), ('Olena', 48), ('Mitsumi', 309), ('Magdalena', 57), ('Lenka', 3230), ('Wen Ling', 120), ('Yasmin', 34), ('Larikah', 255), ('Alexandra', 98), ('Jelena', 777), ('Elena', 20), ('Patricia', 247), ('Micaela', 230), ('Natalia', 33), ('Emma', 1015), ('Amy', 305), ('Julia', 204), ('Jade', 1023), ('Lisa', 111), ('Julia', 164), ('Abigail', 84), ('Jordana', 1092), ('Elaine', 103), ('Risa', 142), ('Stephanie', 1012), ('Marina', 885), ('Grace', 84), ('Bianca', 4954), ('Marianna', 627), ('Milena', 279), ('Treta', 736), ('Almudena', 206), ('Eveliina', 744), ('Francesca', 60), ('Sabina', 3071), ('Katharina', 1571), ('Priscilla', 1984), ('Nikol', 491), ('Maria Jesus', 294), ('Denise', 1820), ('Molly', 533), ('Jin', 15), ('Sandy', 224), ('Katherine Gabriela', 1894), ('Noelia', 1475), ('Brynn', 1344), ('Cecilia', 88), ('Ushna', 413), ('Ratnika', 957), ('Shweta', 3255), ('Natasha', 1000), ('Anna', 124), ('Yekaterina', 314), ('Violetta', 202), ('Anita', 2177), ('Ludmila', 645), ('Malika', 323), ('Kathinka', 15970), ('Meng Ning', 542), ('Giulia', 1140), ('Alina', 2417), ('Gabriela', 862), ('Rosalie', 716), ('Natalija', 12443), ('Carlotta', 33), ('Sandra', 491), ('Mara', 702), ('Francesca', 3092), ('Emiliana', 271), ('Arantxa', 240), ('Sowjanya', 2961), ('Carla', 399), ('Belen', 351), ('Kate', 34), ('Sabrina', 3669), ('Alessia', 317), ('Mami', 96), ('Qianqian', 641), ('Gabriela', 24), ('India', 762), ('Ella', 423), ('Patricia', 376), ('Lina', 804), ('Veronika', 117), ('Lynn', 190), ('Mi Jeong', 176), ('Angelina', 48), ('Despoina', 3942), ('Karla', 3127), ('Kayla', 124), ('Valeria', 2107), ('Haine', 294), ('Dan Ni', 639), ('Michika', 3657), ('Camila Vital', 136), ('Martina', 1689), ('Andrea Renee', 464), ('Brandy', 725), ('Fiona', 1594), ('Daphne', 33), ('Jazzamay', 628), ('Yujia', 184), ('Andrea', 2355), ('Ilze', 1527), ('Saray', 2061), ('Liniques', 72), ('Jasmin', 659), ('Elena Teodora', 6547), ('Stefanie', 700), ('Stefania', 210), ('Federica', 1817), ('Michele Alexandra', 596), ('Joana', 905), ('Valeria', 1848), ('Chantelle', 187), ('Polina', 16816), ('Gaelle', 464), ('Anna Katalina', 907), ('Saska', 2641), ('Elizabeta', 536), ('Sari', 464), ('Pauline', 3487), ('Steffi', 2233), ('Irina Maria', 13843), ('Stefana', 497), ('Alory Regina Elorriaga', 155), ('Madeleine', 715), ('Elise', 43779), ('Kyra', 542), ('Aida', 703), ('Jelena', 64), ('Viktoria', 2703), ('Laura', 2183), ('Xiaorong', 717), ('Stefanie', 2331), ('Iva', 7087), ('Mariana', 1224), ('Sonja', 238), ('Hanna', 539), ('Vivian', 5534), ('Francesca', 1304), ('Karolina', 200), ('Jaimy Gayle', 24), ('Gabriela', 712), ('Kristina', 772), ('Anastasia', 5816), ('Barbara', 1088), ('Dagmara', 160), ('Zuzanna', 2258), ('Catherine', 3051), ('Carolin', 72), ('Beatriz Magdalena', 75), ('Marta', 325), ('Claudia', 165), ('Giada', 677), ('Miriana', 1180), ('Valeria', 3395), ('Jessica', 2284), ('Marie', 889), ('Marijana', 3), ('Natalia', 3027), ('Steffi', 852), ('Suellen', 320), ('Borislava', 3470), ('Mayar', 1696), ('Diana', 1174), ('Kanika', 919), ('Apichaya', 126), ('Laura', 97), ('Pei Chi', 8900), ('Chia Hsien', 679), ('Ching Wen', 7975), ('Ferny', 78), ('Cornelia', 4053), ('Alexandra', 3519), ('Linda', 45), ('Colomba', 129), ('Ivania', 2094), ('Macarena', 2133), ('Se Hyun', 143), ('Eva', 249), ('Audrey', 4166), ('Lea', 3365), ('Maria', 1023), ('Dominique', 36), ('Sarah Beth', 1270), ('Pippa', 243), ('Natasha', 4673), ('Vilma Y', 27), ('Maria Paulina', 1388), ('Paula Andrea', 269), ('Sri Vaishnavi', 1744), ('Giorgia', 785), ('Valeriya', 13150), ('Charlotte', 15), ('Neda', 867), ('Sharon Sanchana', 522), ('Aleksandra', 582), ('Smriti', 96), ('Sai Samhitha', 1034), ('Mariia', 206), ('Vaniya', 255), ('Anushka', 480), ('Julia', 4433), ('Bernarda', 19092), ('Cristina', 5746), ('Nicoleta Catalina', 8146), ('Ioana', 659), ('Shelby', 1432), ('Sara', 1142), ('Akvile', 640), ('Katie', 7539), ('Mafalda', 163), ('Darya', 504), ('Anna', 85), ('Charlotte', 1212), ('Casey', 1186), ('Yukako', 84), ('Julie', 333), ('Jasmine', 14865), ('Agustina Elena', 158), ('Camila', 26), ('Nikki', 614), ('Mandy', 2046), ('Isabella', 166), ('Nina Isabella', 115), ('Lena', 63), ('Jessica', 1784), ('Kelsey', 410), ('Blair', 905), ('Amanda', 432), ('Patricia', 589), ('Jainy', 761), ('Theresa', 377), ('Angeliki', 677), ('Eetee', 2446), ('Sara', 644), ('Ho Ching', 2371), ('Cristiana', 7486), ('Chiara', 3), ('Jamie', 20510), ('Quinn', 646), ('Lina', 17750), ('Vladyslava', 2570), ('Deria', 215), ('Catherine', 378), ('Daniela', 30), ('Marie', 10527), ('Karolina', 159), ('Yulia', 364), ('Daniela', 675), ('Laura', 261), ('Eudice Wong', 976), ('Justine', 877), ('Michelle', 282), ('Harriet', 8608), ('Sophie', 317), ('Karoline', 910), ('Tayisiya', 5051), ('Mia Nicole', 1098), ('Sybille', 581), ('Dea', 7027), ('Eugenie', 173), ('Deborah', 3580), ('Jessika', 4122), ('Olaya', 40), ('Klaartje', 5818), ('Natalia', 2556), ('Katherine', 1977), ('Deborah', 3912), ('Tena', 12402), ('Marlies', 1624), ('Georgia', 9600), ('Charlotte', 668), ('Tamara', 19735), ('Katharina', 1517), ('Sarah', 293), ('Gabriela', 2641), ('Caroline', 1897), ('Jil Nora', 611), ('Chiara', 206), ('Ayaka', 7996), ('Alejandra', 187), ('Nozomi', 1333), ('Hikari', 122), ('Hazal', 78), ('Caroline', 5222), ('Rosalia', 803), ('Georgina', 22), ('Melis', 392), ('Mari', 5301), ('Ana', 720), ('Ena', 500), ('Gabriela', 9573), ('Dejana', 7514), ('Kerstin', 942), ('Nina', 19346), ('Bojana', 1858), ('Elena', 1043), ('Ines', 78), ('Giulia', 59), ('Esen', 69), ('Lenka', 934), ('Sadafmoh', 2275), ('Violetta', 96), ('Nastassia', 72), ('Eden', 1689), ('Corina', 1002), ('Bhuvana', 1152), ('Charlotte', 48), ('Manya', 93), ('Daniela', 553), ('Louise', 198), ('Eva', 503), ('Sabina Elena', 27), ('Julia', 6904), ('Naomi', 5916), ('Anna', 66), ('Alena', 18), ('Gulnaz', 39), ('Oleksandra', 6729), ('Yekaterina', 59), ('Polina', 3), ('Victoria', 24), ('Lou', 24), ('Elodie', 90), ('Manon', 552), ('Leslie', 173), ('Maria Agustina', 185), ('Helen', 841), ('Nikita', 22), ('Juliana Rocha', 129), ('Josephine', 4980), ('Wendy Qi Wen', 613), ('Rosalie', 164), ('Ulyana', 2400), ('Daria', 353), ('Sandra', 4708), ('Oana', 148), ('Jelena', 101685), ('Erika', 30), ('Camille', 441), ('Mathilde', 525), ('Carla', 1550), ('Fiona', 15077), ('Jacqueline', 4093), ('Jennifer', 1228), ('Nagi', 1535), ('Mihoki', 201), ('Harmony', 5944), ('Viktoriya', 179), ('Helene', 3856), ('Nina', 1588), ('Vladica', 997), ('Martina', 265), ('Danielle', 1295), ('Wan Yi', 42), ('Alessandra', 235), ('Jamilya', 18), ('Diana', 211), ('Yuliya', 139), ('Aleksandra', 24), ('Madina', 6), ('Julia Mansano', 21), ('Leticia Garcia', 87), ('Ingrid', 1253), ('Anna', 1026), ('Ailen', 288), ('Ana Victoria', 1367), ('Fernanda', 24), ('Louisa', 50700), ('Tornado Alicia', 1864), ('Madison', 284), ('Kajsa', 2280), ('Oana Georgeta', 4294), ('Elke', 232), ('Paula', 13329), ('Ana Bianca', 2421), ('Amrita', 159), ('Simran Kaur', 467), ('Shreya', 6), ('Riya', 2634), ('Camila', 137), ('Paulina', 1390), ('Aleksandra', 59), ('Magdalena', 9427), ('Rebecca', 22305), ('Deniz', 66), ('Eva', 705), ('Pernilla', 6573), ('Karolina', 925), ('Barbora', 16496), ('Katerina', 82902), ('Nao', 59671), ('Polina', 179), ('Jaqueline Adina', 5416), ('Shilin', 9634), ('Akiho', 83), ('Szabina', 2127), ('Nicole', 3682), ('Kim', 54), ('Sofico', 336), ('Melissa', 200), ('Aleksandra', 711), ('Ekaterina', 30), ('Alessia', 286), ('Ivana', 23892), ('Pia', 1798), ('Olena', 436), ('Lauren', 79), ('Alexandra', 562), ('Laura', 519), ('Patcharin', 1188), ('Margaux', 8), ('Sandra', 60), ('Anastasiya', 922), ('Anna', 1019), ('Emina', 3029), ('Naomi', 60678), ('Nicole', 456), ('Julia', 1967), ('Ina', 292), ('Beatrice', 766), ('Erika', 703), ('Yana', 2526), ('Alexa', 324), ('Monique', 1028), ('Francoise', 21685), ('Aldana', 71), ('Luciana', 24), ('Anke', 54), ('Daria', 2274), ('Chiara', 147), ('Deborah', 113), ('Luisa Marie', 1822), ('Julia', 7687), ('Elena Gabriela', 7772), ('Martina', 1394), ('Chiara', 2042), ('Darya', 267), ('Anastasiya', 2591), ('Hongrui', 1063), ('You Na', 242), ('Maxine', 390), ('Katie', 735), ('Eleonore', 126), ('Anhelina', 17967), ('Haruka', 3633), ('Kyoka', 9036), ('Rafaela', 228), ('Emma Christine', 65), ('Maria', 381), ('Katerina', 13368), ('Jessica', 921), ('Anastasiya', 16968), ('Dominika', 449), ('Emmanuelle', 118), ('Ana Paula', 1153), ('Maria Fernanda', 2708), ('Vishesh', 71), ('Victoria', 13911), ('Angelina', 2221), ('Lizette', 11623), ('Samantha', 1089), ('Priscilla', 6219), ('Olivia', 4501), ('Michelle', 877), ('Chiara', 499), ('Alice', 6824), ('Maia', 1235), ('Kaitlyn', 576), ('Donika', 164), ('Gloria', 1297), ('Andreea', 1236), ('Aliona', 2369), ('Jacqueline', 441), ('Barbara', 1947), ('Talya', 45), ('Valeria', 384), ('Alona', 289), ('Anastasija', 63), ('Martina', 1534), ('Julieta Lara', 4093), ('Eliza', 480), ('Yana', 490), ('Aleksandra', 466), ('Teodora', 431), ('Gebriela', 143), ('Vivian', 1049), ('Parris', 209), ('Zoe', 2691), ('Gabriela', 310), ('Ana', 88510), ('Nicole', 114), ('Ariadna', 980), ('Ksenija', 625), ('Lilla', 1960), ('Emmanuelle', 978), ('Muge', 162), ('Ege', 50), ('Ilka', 1142), ('Jasmin', 1214), ('Ksenia', 1635), ('Nina', 2447), ('Natsumi', 798), ('Angelina', 90), ('Chanikarn', 39), ('Marija', 30), ('Adrijana', 4619), ('Janneke', 861), ('Anastasiya', 406), ('Sarai Delfina', 148), ('Sneha', 134), ('Victoria', 45), ('Natalia', 30786), ('Ivanka', 291), ('Valeriya', 554), ('Dhruthi', 2738), ('Nelise', 142), ('Vanja', 291), ('Jessica', 391), ('Caitlin', 107), ('Yan', 4196), ('Yuenu', 682), ('Kwan Yau', 403), ('Fang Ying', 7755), ('Si Qi', 531), ('Veronika', 256), ('Emilia', 43), ('Paulina', 130), ('Freya', 6525), ('Katharina', 2605), ('Sinead', 688), ('Shiran', 236), ('Nataliya', 33), ('Anastasia', 5562), ('Amelie', 887), ('Mariaryeni', 226), ('Lesedi Sheya', 286), ('Justina', 36), ('Paige Mary', 147), ('Anais', 318), ('Petra', 5055), ('Ting Jr', 8676), ('Damilola', 0), ('Brittany', 87), ('Megan', 253), ('Jil Belen', 13978), ('Sara', 1646), ('Allie', 15969), ('Maria', 5975), ('Olga', 7190), ('Pamela', 241), ('Elizaveta', 104), ('Jana', 20650), ('Sofia', 12858), ('Adeliya', 490), ('Camille', 133), ('Louise', 149), ('Theo', 2249), ('Maria', 1069), ('Ao', 4941), ('Karina Kristina', 410), ('Maria Jose', 1838), ('Mahitha', 395), ('Risa', 2634), ('Megumi', 407), ('Iryna', 3471), ('Oyku', 382), ('Yasmyn', 71), ('Kristyna', 251), ('Kateryna', 1713), ('Tatjana', 69370), ('Irina', 3018), ('Hana', 3), ('Tatiana', 57), ('Anna', 373), ('Ksenia', 449), ('Sandra', 1054), ('Lisa', 97), ('Jelena', 711), ('Emily', 1676), ('Gabriella', 5394), ('Luisa', 1373), ('Damini', 12), ('Jessica', 7751), ('Anna', 497), ('Yana', 114), ('Melanie', 7209), ('Marie', 12486), ('Zaineb', 87), ('Rita', 973), ('Yukun', 1828), ('Tina', 541), ('Vera', 192), ('Eleni', 28), ('Dalma', 15935), ('Ahlam', 85), ('Agne', 110), ('Martha', 153), ('Alexa', 2135), ('Yukina', 998), ('Maddison', 2434), ('Marie', 384), ('Alexandra', 1924), ('Usue Maitane', 7874), ('Ellie', 8040), ('Jade', 239), ('Sung Hee', 343), ('Evgeniya', 63), ('Ivana', 95), ('Silvia', 3), ('Camilla', 3113), ('Cecilia', 96), ('Sandra', 107), ('Lisa', 2271), ('Costanza', 50), ('Marta', 263), ('Irene', 3133), ('Chaoyi', 15), ('Cristina', 2605), ('Maja', 88), ('Fanny', 2231), ('Ines', 2344), ('Sean', 75), ('May', 225), ('Maria Del Rosario', 296), ('Aina', 92), ('Mariam', 4060), ('Anastasia Evgenyevna', 1235), ('Ana Luisa', 21), ('Constanza', 907), ('Alexia', 57), ('Maia A', 12), ('Eva', 821), ('Peggy', 1016), ('Zhanlan', 2166), ('En Pei', 52), ('Thai Sa Grana', 706), ('Erika', 185), ('Karyn', 330), ('Damira', 30), ('Marina', 219), ('Dajana', 150), ('Ayla', 7444), ('Amy', 838), ('Yeong Won', 966), ('Yu Jin', 452), ('Maurien', 138), ('Raluca Georgiana', 4258), ('Andreea Amalia', 1365), ('Iulia Maria', 74), ('Emilija', 24), ('Katarina', 1101), ('Sofia', 96), ('Gozal', 2864), ('Petra', 2105), ('Yuanyi', 772), ('Aiko', 1401), ('Inger', 221), ('Marie', 1210), ('Mary', 653), ('Cristina', 124), ('Alisa', 33), ('Muazzez', 6), ('Wushuang', 879), ('Verena', 1034), ('Plobrung', 934), ('Magdalena', 209), ('Chompoothip', 276), ('Qiu Yu', 2034), ('Teodora', 155), ('Rebeka', 1057), ('Alba', 1424), ('Federica Joe', 44), ('Ylena', 1546), ('Tamachan', 843), ('Nicole', 98), ('Barbara', 219), ('Karolina', 337), ('Hollie', 24), ('Eliessa', 882), ('Elena', 50), ('Magali', 1917), ('Nonna', 134), ('Angela', 209), ('Ana', 209), ('Ronit', 3165), ('Kristina N', 555), ('Ekaterina', 266), ('Emma', 206), ('Anna', 236), ('Nina', 283), ('Antonina', 484), ('Barbara', 1598), ('Lena', 107), ('Rosie', 336), ('Renata', 8162), ('Britt', 2487), ('Greetje', 6168), ('Morgane', 548), ('Elina', 286), ('Maria', 111), ('Frances', 359), ('Yuriko', 668), ('Clemence', 1622), ('Milica', 63), ('Nina', 3131), ('Tamara', 65), ('Bianca', 3317), ('Veronica', 310), ('Ekaterina', 658), ('Nora', 1082), ('Tereza', 332), ('Nikola', 90), ('Anastasia', 2967), ('Pranjala', 1214), ('Jin Ju', 414), ('Ying', 3783), ('Dabin', 1261), ('Hanna', 2243), ('Sabina', 320), ('Margaux', 209), ('Sara', 100), ('Natasha', 537), ('Minami', 96), ('Ines', 796), ('Lamis', 456), ('Yulia', 899), ('Sandra', 258), ('Elisabeth', 127), ('Yulia', 48), ('Valentina', 338), ('Tamara', 42), ('Ipek', 377), ('Inci', 406), ('Irina', 194), ('Natalie', 90), ('Nikola', 142), ('Vendula', 2221), ('Petia', 1832), ('Dasha', 1923), ('Elizabeth', 9), ('Adriana', 509), ('Raveena', 5387), ('Amina', 1905), ('Petra', 22), ('Natalija', 1243), ('Milagros', 42), ('Chiraz', 1726), ('Kimberly', 4831), ('Bianka', 1213), ('Masa', 991), ('Vasilisa', 1085), ('Katarina', 271), ('Laura D', 281), ('Sofia', 248), ('Yuliana', 218), ('Diana', 66), ('Idia', 45), ('Weronika Jasmina', 179), ('Nicole', 2390), ('Katharina', 7073), ('Darya', 86829), ('Mercedes', 48), ('Vera', 141), ('Karolina', 10538), ('Caroline', 12), ('Guillermina', 576), ('Ekaterina', 44), ('Luca', 1013), ('Rebeka', 4746), ('Kristina', 4277), ('Anastasia', 120), ('Melany Solange', 97), ('Jasmine Amber', 142), ('Julia', 522), ('Magdalena', 2783), ('Viktoria', 13506), ('Federica', 795), ('Anastasiya', 2642), ('Eva', 40), ('Margot', 414), ('Natalia', 230), ('Valeria', 393), ('Anna', 416), ('Anastasia', 4517), ('Veronica', 1464), ('Anastasia', 354), ('Victoria', 438), ('Alicia', 290), ('Seone', 1312), ('Sofia', 108), ('Simona', 344), ('Noelia', 550), ('Marta Huqi', 778), ('Tessah', 9116), ('Margot', 4305), ('Ralina', 40), ('Snehadevi S', 2820), ('Man Ying Maggie', 102), ('Julie', 476), ('Angela', 36), ('Verena', 387), ('Sara', 3748), ('Julia', 323), ('Lena', 1196), ('Alice', 308), ('Vinciane', 37), ('Valeriya', 62), ('Ana', 24), ('Michaela', 2237), ('Ena', 323), ('Catherine Cartan', 45884), ('Lisa', 1019), ('Jaeda', 1375), ('Ksenia', 325), ('Yuan', 281), ('Bunyawi', 3187), ('Mizuno', 2927), ('Mila', 107), ('Alina', 33), ('Jiahui', 1553), ('Kseniia', 298), ('Alisa', 3), ('Tereza', 3863), ('Erica', 472), ('Andie K', 605), ('Lucie', 152), ('Alexandria', 191), ('Tatiana', 716), ('Vera', 8066), ('Kelly', 600), ('Ines', 172), ('Sherazad', 12883), ('Karin', 197), ('Mallaurie', 688), ('Eleonore', 441), ('Sara', 2439), ('Valentine', 159), ('Karolayne', 465), ('Julia', 406), ('Huijie', 118), ('Xu Liu', 4535), ('Shangqing', 111), ('Maria', 238), ('Katya', 515), ('Marta', 5557), ('Shakhnoza', 198), ('Terri', 18), ('Doga Selen', 117), ('Natalie', 193), ('Arthi', 39), ('Daniela', 84), ('Vera', 143), ('Yixuan', 1380), ('Xinyu', 9498), ('Anna', 4477), ('Maria', 59), ('Alexis', 18), ('Rianna', 984), ('Mirjam', 272), ('Savannah', 70), ('Agata Jadwiga', 219), ('Ida', 467), ('Lidia', 169), ('Estela', 376), ('Mouna', 12), ('Caroline', 7179), ('Sophie', 2800), ('Andrina', 159), ('Lucia', 1002), ('Manca', 2070), ('Tamara', 15450), ('Yuval', 45), ('Shir', 117), ('Maya', 272), ('Sarlota', 27), ('Phenomena', 3), ('Alina', 31), ('Yarden', 32), ('Miriam Bianca', 1458), ('Ioana', 227), ('Warona', 9), ('Valeriya', 1317), ('Haruna', 1873), ('Berfu', 2850), ('Greta', 69), ('Yulia', 4), ('Anastasia', 762), ('Polina', 170), ('Andrea', 494), ('Lea', 306), ('Jessica', 45), ('Komola', 701), ('Petra', 36), ('Yuki Kristina', 2191), ('Chihiro', 2539), ('Fanny', 9029), ('Anastasia', 140), ('Aryna', 19446), ('Ekaterina', 1869), ('Natalie', 320), ('Paula', 60), ('Lauren', 69), ('Ingrid', 2218), ('Alexandra', 121), ('Farah', 167), ('Dina', 149), ('Maria', 437), ('Ayan', 571), ('Pei Hsuan', 24), ('I Hsuan', 511), ('Lucrezia', 1589), ('Giorgia', 178), ('Gabriela Nicole', 468), ('Oana', 948), ('Georgia Andreea', 1848), ('Jelena', 296), ('Jovana', 128), ('Maria Lourdes', 156), ('Agustina', 16), ('Margot', 68), ('Sang Hee', 1277), ('Jia Qi', 4612), ('Anastasia', 471), ('Ludmilla', 1187), ('Arina', 443), ('Anastasiya', 144), ('Xiaodi', 5057), ('Andreea', 248), ('Anna', 641), ('Lusine', 377), ('Yuqi', 559), ('Sunam', 3594), ('Katherine', 4906), ('Ylona Georgiana', 1453), ('Marta', 301), ('Karman', 3193), ('Tamar', 60), ('Jessica', 1283), ('Charlotte', 2127), ('Joanne', 15), ('Natalia', 146), ('Dana', 1864), ('Georgiana', 48), ('Valerie', 103), ('Camila', 110), ('Jana', 465), ('Sabrina', 75), ('Jiaxi', 3002), ('Isabelle', 723), ('Anca', 101), ('Ashley', 2781), ('Suzuho', 324), ('Angelina', 458), ('Federica', 1086), ('Barbora', 808), ('Alena', 54), ('Gyulnara', 238), ('Mirabelle', 1977), ('Karolina', 39), ('Margarita', 966), ('Emilie', 1440), ('Sara', 58), ('Daria', 8), ('Sophia', 96), ('Sabastiani', 780), ('Evgeniya', 842), ('Satsuki', 906), ('Aleksandra', 655), ('Julyette Maria Josephine', 1446), ('Aleksandra', 2068), ('Anna', 487), ('Mira', 1626), ('Moulika', 15), ('Ioana Diana', 2403), ('Janja', 72), ('Susan', 502), ('Carolyn', 72), ('Jodie Anna', 355), ('Maegan', 525), ('Karola Patricia', 776), ('Martina', 230), ('Sofya', 8587), ('Valeriya', 452), ('Ekaterina', 71), ('Victoria', 221), ('Kennedy', 653), ('Iana', 395), ('Oliwia', 363), ('Francesca', 63), ('Meritxell', 284), ('Stephanie', 353), ('Petra', 38), ('Tereza', 528), ('Kimika', 272), ('Martina', 28), ('Abigail', 3254), ('Claire', 4244), ('Jada', 64), ('Dalila', 841), ('Basak', 123), ('Ema', 78), ('Clara', 81), ('Astrid Wanja', 269), ('Malene', 316), ('Eva', 1250), ('Anna', 13517), ('Claudia', 179), ('Chelsea', 5), ('Marketa', 18286), ('Miriam', 2513), ('Nika', 199), ('Anna', 780), ('Dariya', 45), ('Laura Sofia', 97), ('Kim', 53), ('Shanshan', 2378), ('Linnea', 697), ('Anhzelika', 836), ('Akiko', 51), ('Jessica', 487), ('Elena', 1810), ('Mihika', 427), ('Wiktoria', 363), ('Zhibek', 7), ('Polina', 280), ('Sofya', 593), ('Karina', 33), ('Anna', 622), ('Siyu', 87), ('Yijia', 366), ('Marcelina', 33), ('Karine', 1936), ('Eleonora', 405), ('Destanee', 9227), ('Anna', 15218), ('Naima', 440), ('Elena', 120), ('Kristina', 105), ('Andra Maria', 51), ('Dominique', 419), ('Dayana', 5619), ('Kayla', 13573), ('Pei Ju', 181), ('Lara', 7), ('Dalila', 244), ('Katie', 5045), ('Qianhui', 683), ('Yu Tong', 9), ('Xinyu', 1207), ('Mi Zhuoma', 72), ('Michela', 90), ('Schena', 148), ('Dorien', 109), ('Siqi', 716), ('Zhima', 99), ('Reina', 64), ('Carson', 289), ('Maria', 780), ('Kylie', 1236), ('Jenny', 1002), ('Viktoriia', 90), ('Polina', 158), ('Laura', 456), ('Jaimee', 5007), ('Emma', 491), ('Anna Maria', 453), ('Melissa Ishuan', 171), ('Alexandra', 142), ('Natalie', 403), ('Chengyiyi', 277), ('Lulu', 304), ('Eugenia', 36), ('Daniela', 82), ('Shelly', 142), ('Lina', 175), ('Olesya', 3811), ('Victoria Ariadna', 106), ('Zeel', 702), ('Lizaveta', 135), ('Aneta', 199), ('Claudia', 351), ('Seira', 144), ('Zhou', 30), ('Alana', 385), ('Sabina', 287), ('Veronika', 408), ('Anda', 160), ('Nicole', 133), ('Mihaela Lorena', 15), ('Anna', 185), ('Kaja', 1176), ('Aastha', 68), ('Abigail', 310), ('Cameron', 38), ('Katharine', 363), ('Elina', 181), ('Daria', 1243), ('Maria', 25), ('Diana Maria', 99), ('Nermeen', 279), ('Mathilde', 377), ('Daniela', 72), ('Yanni', 275), ('Shou Na', 105), ('Hanyu', 4643), ('Leonie', 672), ('Constanze', 18), ('Zhuoma', 121), ('Ana', 254), ('Alina', 57), ('Katarina', 4598), ('Kristina', 224), ('Karolina', 48), ('Desirae', 354), ('Emiliana', 987), ('Sing Le', 95), ('Yang', 73), ('Margaux', 631), ('Olga', 908), ('Hortencia', 98), ('Nina', 778), ('Lucia', 77), ('Axana', 7), ('Blanca', 312), ('Bianca', 9216), ('Francesca', 4811), ('Ksenia', 131), ('Eva', 267), ('Miranda', 180), ('Vivian', 618), ('Sandra', 15), ('Judith', 3), ('Tijana', 333), ('Lucia', 17), ('Hana', 64), ('Boba', 123), ('Vanessa', 72), ('Kassandra', 704), ('Abir', 72), ('Caroline', 329), ('Vicky', 77), ('Patrycja', 534), ('Nikola', 80), ('Emily', 940), ('Olivia', 153), ('Alessia', 92), ('Monika', 1145), ('Cindy', 264), ('Alicia', 87), ('Zinovia', 74), ('Denise Antonela', 168), ('Marina', 388), ('Carlota', 27), ('Emily', 236), ('Momoko', 2061), ('Lorraine M', 40), ('Fiona', 89), ('Suzan', 344), ('Ramu', 443), ('Lisa Marie', 381), ('Laura', 302), ('Livia', 128), ('Johana', 40), ('Adva', 9), ('Anna Maria', 100), ('Laura', 439), ('Ayano', 5173), ('Irina', 17), ('Maryna', 972), ('Roosh', 28), ('Guiomar', 687), ('Selin', 169), ('Hsin Yuan', 120), ('Kateryna', 30), ('Anastasiia', 12), ('Yasmine', 279), ('Franziska', 25), ('Elizabeth', 15), ('Kei', 294), ('Nicole', 44), ('Lara', 6), ('Kelia', 324), ('Phillis', 664), ('Anne Sophie', 33), ('Michaela', 821), ('Arlinda', 154), ('Paula', 118), ('Lucia', 215), ('Dewi', 134), ('Anna', 122), ('Xiaoxi', 1352), ('Anastasia', 3077), ('Rebeca', 168), ('Daria', 112), ('Ekaterina', 63), ('Sara', 19), ('Ana', 171), ('Mayar', 92), ('Lea', 526), ('Mahak', 154), ('Oleksandra', 440), ('Sarah', 354), ('Salma', 9), ('Emmanuelle', 513), ('Emma', 236), ('Maria Camila', 148), ('Alexandra', 1751), ('Eden', 54), ('Lauryn', 207), ('Rosa', 111), ('Kaylah', 237), ('Alexandra', 452), ('Shuyue', 336), ('Yidi', 136), ('Gabriella', 305), ('Erina', 1225), ('Vitalia', 3), ('Laylo', 39), ('Ilay', 52), ('Kaitlin', 416), ('Alexandra', 104), ('Jule', 63), ('Simona', 476), ('Bojana', 540), ('Adrienn', 68), ('Panna', 1446), ('Salma', 57), ('Julita', 286), ('Francesca', 188), ('Shuo', 597), ('Alexa', 110), ('Ye Xin', 281), ('Jia', 52), ('Nina', 116), ('Yasmina', 27), ('Suzy', 1054), ('Sasa', 316), ('Stefania', 120), ('Katarzyna', 230), ('Valeriya', 926), ('Ann', 62), ('Mai', 849), ('Whitney', 90), ('Julia', 7), ('Draginja', 392), ('Yuliya', 318), ('Xiyu', 315), ('Jiatian', 100), ('Katyarina', 97), ('Luna', 15), ('Sunae', 15), ('Yuki', 505), ('Svenja', 3), ('Angelica', 66), ('Francisca', 157), ('Meiling', 417), ('Tingting', 151), ('Ella', 103), ('Anna', 35), ('Ashley', 686), ('Ran', 403), ('Maja', 979), ('Caty', 22), ('Michaela', 713), ('Loudmilla', 6), ('Maileen', 83), ('Akilah', 742), ('Xin Yu', 187), ('Vlada', 91), ('Romy', 911), ('Alessia', 3), ('Marta', 826), ('Anna', 33), ('Lara', 164), ('Amanda', 4578), ('Himari', 3), ('Ayumi', 235), ('Meiqi', 96), ('Mei Xu', 40), ('Karolina', 175), ('Aneta', 3), ('Ana', 3), ('Sohyun', 108), ('Adrienn', 39), ('Ramya', 161), ('Anne Marie', 99), ('Yekaterina', 3), ('Giulia', 76), ('Clara', 35), ('Yulia', 156), ('Irina', 20), ('Lucia', 52), ('Ayumi', 310), ('Ange Oby', 36), ('Genevieve', 440), ('Eva Marie', 41), ('Iga', 916), ('Giorgie', 13), ('Layne', 22), ('Daria', 116), ('Zoe', 81), ('Jiaxue', 96), ('Laura', 60), ('Kariann', 85), ('Caroline', 63), ('Mananchaya', 15), ('Zeynep  Sena', 21), ('Brienne', 12), ('Jiakang', 15), ('Varvara', 57), ('Betina', 21), ('Viktoriya', 92), ('Eva', 28), ('Taylor', 84), ('Margaux', 57), ('Molly', 32), ('Leylah Annie', 48), ('Ellie', 39), ('Moyuka', 32), ('Nina', 21), ('Brindtha', 30), ('Naomi', 42), ('Merel', 101), ('Arina Gabriela', 3), ('Helene', 72), ('Kristina', 9)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the contestants whose names are not 'Jessie Alloway'' in SQLite? I currently have 'SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'', which outputs [('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "database": "voter_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.' in SQLite? I currently have 'SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id  FROM Students AS T2  WHERE T2.student_id IN (     SELECT T1.student_id      FROM Student_Enrolment AS T1      GROUP BY T1.student_id, T1.semester_id      HAVING count(*) = 2 )', which outputs [('Frida', 'Aisha', 'Huel', 7)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?' in SQLite? I currently have 'SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Total_spent = (SELECT max(Total_spent) FROM visit)', which outputs [(3, 'Arjen Robben', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names and birth dates of people in ascending alphabetical order of name.' in SQLite? I currently have 'SELECT Name, Birth_Date FROM people ORDER BY Name ASC', which outputs [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id of the pet owned by student whose last name is â€˜Smithâ€™.' in SQLite? I currently have 'SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'', which outputs [(2001,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is maximum and minimum death toll caused each time?' in SQLite? I currently have 'SELECT max(killed), min(killed), caused_by_ship_id FROM death GROUP BY caused_by_ship_id', which outputs [(29, 8, 1), (3, 0, 2), (25, 0, 3), (3, 0, 4), (14, 0, 5), (0, 0, 6)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(killed) ,  min(killed) FROM death", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which distinct car models are the produced after 1980?' in SQLite? I currently have 'SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Year > 1980', which outputs [('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?' in SQLite? I currently have 'SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT T1.dog_id FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING sum(T2.cost_of_treatment) > 1000)', which outputs [('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show name of all students who have some friends and also are liked by someone else.' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)', which outputs [('Haley',), ('Alexis',), ('Jordan',), ('Kris',), ('Jessica',), ('Gabriel',), ('Cassandra',), ('Kyle',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the package choice and series name of the TV channel that has high definition TV.' in SQLite? I currently have 'SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the zip code of the address in the city Port Chelsea?' in SQLite? I currently have 'SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'', which outputs [('148',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.' in SQLite? I currently have 'SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.last_name, T1.cell_number HAVING count(*) > 2)', which outputs near \"(\": syntax error. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the ids of documents that have between one and two paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2', which outputs [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes of countries where people use languages other than English?' in SQLite? I currently have 'SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'', which outputs [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which languages are spoken by only one country in republic governments?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING count(*) = 1', which outputs [('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tandjile',), ('Temne',), ('Teso',), ('Thai',), ('Tigre',), ('Tikar',), ('Tongan',), ('Tripuri',), ('Tswa',), ('Tukulor',), ('Turkana',), ('Turkmenian',), ('Ukrainian and Russian',), ('Urdu',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Watyi',), ('Xhosa',), ('Yao',), ('Zande',), ('Zenaga',), ('Zulu',), ('[South]Mande',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average age of losers and winners of all matches.' in SQLite? I currently have 'SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches', which outputs [(27.31121386258453, 27.062177773183823)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of airports in Aberdeen?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all courses that have some students enrolled?' in SQLite? I currently have 'SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id', which outputs [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which continent has the most diverse languages?' in SQLite? I currently have 'SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS num_languages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY num_languages DESC LIMIT 1', which outputs [('Africa', 215)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of people that are not poker players.' in SQLite? I currently have 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)', which outputs [('Roman Bragin',), ('Sergey Grankin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What model has the most different versions?' in SQLite? I currently have 'SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Model) DESC LIMIT 1', which outputs [('ford',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?' in SQLite? I currently have 'SELECT avg(LifeExpectancy), sum(Population), Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72', which outputs [(52.571929824561394, 784475000, 'Africa'), (67.44117647058825, 3705025700, 'Asia'), (69.715, 30401150, 'Oceania'), (70.94615384615386, 345780000, 'South America')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which unique cities are in Asian countries where Chinese is the official language ?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'', which outputs [('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui´an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji´an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu´an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da´an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai´an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan´an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong´an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu´an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya´an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all different template ids used for documents, and how many times were each of them used?' in SQLite? I currently have 'SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID', which outputs [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of documents that have 2 or more paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(*) >= 2', which outputs [(80,), (2394,), (651512,), (16514113,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of orchestras that have no performance.' in SQLite? I currently have 'SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)', which outputs [('San Francisco Symphony Orchestra',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many distinct nationalities are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM people', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT Nationality) FROM people", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show name, country, age for all singers ordered by age from the oldest to the youngest.' in SQLite? I currently have 'SELECT Name, Country, Age FROM singer ORDER BY Age DESC', which outputs [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the mean life expectancy of countries in which English is not the official language.' in SQLite? I currently have 'SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')', which outputs [(65.48270270270272,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the minimum and maximum number of products across all the shops?' in SQLite? I currently have 'SELECT MIN(Number_products), MAX(Number_products) FROM shop', which outputs [(1600, 15000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?' in SQLite? I currently have 'SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'', which outputs [('Battle of Adrianople',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the nations with the 3 lowest populations?' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population ASC LIMIT 3', which outputs [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many transcripts are listed?' in SQLite? I currently have 'SELECT COUNT(*) FROM Transcripts', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Transcripts", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of countries that speak more than 2 languages, as well as how many languages they speak?' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) > 2', which outputs [('Afghanistan', 5), ('Albania', 3), ('American Samoa', 3), ('Andorra', 4), ('Angola', 9), ('Argentina', 3), ('Aruba', 4), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Bangladesh', 7), ('Belarus', 4), ('Belgium', 6), ('Belize', 4), ('Benin', 7), ('Bhutan', 3), ('Bolivia', 4), ('Botswana', 5), ('Brazil', 5), ('Brunei', 4), ('Bulgaria', 4), ('Burkina Faso', 6), ('Burundi', 3), ('Cambodia', 4), ('Cameroon', 8), ('Canada', 12), ('Central African Republic', 6), ('Chad', 8), ('Chile', 4), ('China', 12), ('Colombia', 5), ('Comoros', 5), ('Congo', 6), ('Congo, The Democratic Republic of the', 10), ('Costa Rica', 4), ('Czech Republic', 8), ('Côte d’Ivoire', 5), ('Denmark', 7), ('Djibouti', 3), ('Eritrea', 6), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('French Polynesia', 3), ('Gabon', 4), ('Gambia', 5), ('Georgia', 6), ('Germany', 6), ('Ghana', 6), ('Guam', 5), ('Guatemala', 5), ('Guinea', 7), ('Guinea-Bissau', 6), ('Guyana', 3), ('Honduras', 4), ('Hong Kong', 5), ('Hungary', 6), ('India', 12), ('Indonesia', 9), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Japan', 6), ('Jordan', 3), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Laos', 4), ('Latvia', 6), ('Lebanon', 3), ('Lesotho', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Macao', 4), ('Macedonia', 5), ('Malawi', 4), ('Malaysia', 6), ('Mali', 6), ('Mauritania', 6), ('Mauritius', 6), ('Mayotte', 3), ('Mexico', 6), ('Micronesia, Federated States of', 6), ('Moldova', 5), ('Monaco', 4), ('Mongolia', 6), ('Mozambique', 10), ('Myanmar', 8), ('Namibia', 8), ('Nauru', 5), ('Nepal', 7), ('Netherlands', 4), ('Netherlands Antilles', 3), ('New Caledonia', 3), ('Nicaragua', 4), ('Niger', 5), ('Nigeria', 10), ('Northern Mariana Islands', 6), ('Norway', 5), ('Pakistan', 8), ('Palau', 4), ('Panama', 6), ('Paraguay', 4), ('Peru', 3), ('Philippines', 10), ('Poland', 4), ('Romania', 6), ('Russian Federation', 12), ('Réunion', 5), ('Samoa', 3), ('Senegal', 6), ('Seychelles', 3), ('Sierra Leone', 8), ('Singapore', 3), ('Slovakia', 5), ('Slovenia', 3), ('Solomon Islands', 3), ('South Africa', 11), ('Spain', 4), ('Sri Lanka', 3), ('Sudan', 10), ('Sweden', 6), ('Switzerland', 4), ('Taiwan', 6), ('Tajikistan', 3), ('Tanzania', 11), ('Thailand', 6), ('Togo', 8), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Turkmenistan', 4), ('Tuvalu', 3), ('Uganda', 10), ('Ukraine', 7), ('United Kingdom', 3), ('United States', 12), ('Uzbekistan', 6), ('Vanuatu', 3), ('Venezuela', 3), ('Vietnam', 9), ('Virgin Islands, U.S.', 3), ('Yugoslavia', 6), ('Zambia', 6), ('Zimbabwe', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When did the episode \"A Love of a Lifetime\" air?' in SQLite? I currently have 'SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'', which outputs [('September 24, 2007',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the number of Jetblue Airways flights.' in SQLite? I currently have 'SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'Jetblue Airways'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".' in SQLite? I currently have 'SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'', which outputs [('A Love of a Lifetime',), ('Keepers',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the hometowns shared by at least two teachers.' in SQLite? I currently have 'SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) > 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of high schoolers.' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler', which outputs [(16,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Highschooler", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of countries for which Spanish is the predominantly spoken language.' in SQLite? I currently have 'SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'', which outputs [(20,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which employee received the most awards in evaluations? Give me the employee name.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(awards) FROM (SELECT count(*) as awards FROM evaluation GROUP BY Employee_ID) as subquery)', which outputs [('George Chuter',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the section_name in reversed lexicographical order.' in SQLite? I currently have 'SELECT section_name FROM Sections ORDER BY section_name DESC', which outputs [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many degrees does the engineering department have?' in SQLite? I currently have 'SELECT count(degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name, independence year, and surface area of the country with the smallest population?' in SQLite? I currently have 'SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1', which outputs [('Antarctica', None, 13120000.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many battles did not lose any ship with tonnage '225'?' in SQLite? I currently have 'SELECT COUNT(id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)', which outputs [(7,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of countries where Spanish is spoken by the largest percentage of people?' in SQLite? I currently have 'SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' ORDER BY T2.Percentage DESC', which outputs [('CUB',), ('SLV',), ('COL',), ('DOM',), ('NIC',), ('CRI',), ('HND',), ('VEN',), ('ARG',), ('URY',), ('ECU',), ('MEX',), ('CHL',), ('BOL',), ('PER',), ('PAN',), ('ESP',), ('GTM',), ('PRY',), ('PRI',), ('AND',), ('BLZ',), ('VIR',), ('USA',), ('ABW',), ('CAN',), ('SWE',), ('FRA',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the average life expectancy for countries in Africa which are republics?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'', which outputs [(51.0612244897959,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers who teach at least two courses?' in SQLite? I currently have 'SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name HAVING count(*)  >=  2', which outputs [('Anne Walker',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What region is Kabul in?' in SQLite? I currently have 'SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'', which outputs [('Southern and Central Asia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the citizenship shared by singers with birth year before 1945 and after 1955.' in SQLite? I currently have 'SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)', which outputs [('United States',), ('United States',), ('United States',), ('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the best rank of losers across all matches?' in SQLite? I currently have 'SELECT MIN(loser_rank) FROM matches', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT min(loser_rank) FROM matches", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the most common hometown of teachers.' in SQLite? I currently have 'SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1', which outputs [('Turton Urban District',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the language that is spoken in the most countries.' in SQLite? I currently have 'SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1', which outputs [('English',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different store locations are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Location) FROM shop', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT LOCATION) FROM shop", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the course with the most students enrolled?' in SQLite? I currently have 'SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(T2.student_course_id) DESC LIMIT 1', which outputs [('pl',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the countries that are in the continent of Europe and have a population of 80000?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of flights departing from Airport \"APG\"?' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who have likes, and how many likes does each have?' in SQLite? I currently have 'SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', which outputs [('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries that have greater surface area than any country in Europe?' in SQLite? I currently have 'SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of nations speak both English and French?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'', which outputs [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and age of students who have a dog but do not have a cat as a pet.' in SQLite? I currently have 'SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'', which outputs [('Tracy', 19)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')', which outputs [('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the charge amount of the most expensive charge type?' in SQLite? I currently have 'SELECT MAX(charge_amount) FROM Charges', which outputs [(640,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(charge_amount) FROM Charges", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the Package Options of the TV Channels whose series names are Sky Radio?' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'', which outputs [('Sky Famiglia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How is the math course described?' in SQLite? I currently have 'SELECT course_description FROM Courses WHERE course_name = 'math'', which outputs [('q',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)', which outputs [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of friends Kyle has.' in SQLite? I currently have 'SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of flights.' in SQLite? I currently have 'SELECT COUNT(*) FROM flights', which outputs [(1200,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM FLIGHTS", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs are of the rarest breed? Show their names and treatment dates.' in SQLite? I currently have 'SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )', which outputs [('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.' in SQLite? I currently have 'SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the students' first names who have both cats and dogs as pets?' in SQLite? I currently have 'SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id and type code for the template used by the most documents?' in SQLite? I currently have 'SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1', which outputs [(11, 'BK')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?' in SQLite? I currently have 'SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)', which outputs [('United States',), ('United States',), ('United States',), ('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.' in SQLite? I currently have 'SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1', which outputs [(3, '02647')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cities in each district have a population that is above the average population across all cities?' in SQLite? I currently have 'SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District', which outputs [(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of the conductor with the most years of work.' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1', which outputs [('Robert Craft',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List document IDs, document names, and document descriptions for all documents.' in SQLite? I currently have 'SELECT Document_ID, Document_Name, Document_Description FROM Documents', which outputs [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many official languages does Afghanistan have?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of singers in ascending order of net worth.' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC', which outputs [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.' in SQLite? I currently have 'SELECT count(T1.student_course_id) ,  T1.student_course_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T1.student_course_id ORDER BY count(T1.student_course_id) DESC LIMIT 1', which outputs [(4, 0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of nations that use English and Dutch?' in SQLite? I currently have 'SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch'', which outputs [(62,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is the earliest graduate of the school? List the first name, middle name and last name.' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1', which outputs [('Timmothy', 'Anna', 'Ward')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .' in SQLite? I currently have 'SELECT DISTINCT first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'', which outputs [('Hobart',), ('Warren',), ('Jarvis',), ('Delaney',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the birth date of the poker player with the lowest earnings?' in SQLite? I currently have 'SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (SELECT min(Earnings) FROM poker_player)', which outputs [('August 8, 1986',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all distinct countries where singers above age 20 are from?' in SQLite? I currently have 'SELECT DISTINCT Country FROM singer WHERE Age > 20', which outputs [('Netherlands',), ('United States',), ('France',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the codes of countries that do not speak English and do not have Republics for governments.' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'', which outputs [('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professional did not operate any treatment on dogs? List the professional's id, role and email.' in SQLite? I currently have 'SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)', which outputs [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the make and production time of the cars that were produced in the earliest year?' in SQLite? I currently have 'SELECT T1.Make , T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data)', which outputs [('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many paragraphs for the document with name 'Summer Show'?' in SQLite? I currently have 'SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different template type codes, and how many templates correspond to each?' in SQLite? I currently have 'SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code', which outputs [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the age of the oldest dog.' in SQLite? I currently have 'SELECT MAX(age) FROM Dogs', which outputs [('9',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(age) FROM Dogs", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the museum that had no visitor yet?' in SQLite? I currently have 'SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)', which outputs [('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "database": "museum_visit"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?' in SQLite? I currently have 'SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')', which outputs [('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the type code of the template type with the description \"Book\".' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of flights arriving at Airport \"APG\"?' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?' in SQLite? I currently have 'SELECT T1.series_name, T1.Country  FROM TV_Channel AS T1  WHERE T1.id IN (     SELECT T2.id      FROM TV_Channel AS T2      JOIN Cartoon AS T3 ON T2.id = T3.Channel      WHERE T3.Directed_by = 'Ben Jones'  ) AND T1.id IN (     SELECT T4.id      FROM TV_Channel AS T4      JOIN Cartoon AS T5 ON T4.id = T5.Channel      WHERE T5.Directed_by = 'Michael Chang' )', which outputs [('MTV Dance', 'United Kingdom')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the average ages of losers and winners across matches?' in SQLite? I currently have 'SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches', which outputs [(27.31121386258453, 27.062177773183823)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dog pets are raised by female students?' in SQLite? I currently have 'SELECT count(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'female'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names , themes , and number of singers for every concert ?' in SQLite? I currently have 'SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme', which outputs [('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the highest rank of losers in all matches.' in SQLite? I currently have 'SELECT MAX(loser_rank) FROM matches', which outputs [(112,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT min(loser_rank) FROM matches", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show countries where a singer above age 40 and a singer below 30 are from.' in SQLite? I currently have 'SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age > 40) INTERSECT SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age < 30)', which outputs [('France',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the country codes for countries in which people speak langauges that are not English.' in SQLite? I currently have 'SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'', which outputs [('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the population, name and leader of the country with the largest area?' in SQLite? I currently have 'SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1', which outputs [(146934000, 'Russian Federation', 'Vladimir Putin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and rank of the 3 youngest winners across all matches.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T3.winner_rank FROM players AS T1 JOIN matches AS T3 ON T1.player_id = T3.winner_id ORDER BY T3.winner_age ASC LIMIT 3', which outputs [('Madison', 'Keys', 17), ('Madison', 'Keys', 24), ('Madison', 'Keys', 16)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of shops in each location.' in SQLite? I currently have 'SELECT count(*) ,  Location FROM shop GROUP BY Location', which outputs [(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total ranking points for each player and their first name.' in SQLite? I currently have 'SELECT sum(T1.ranking_points), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id, T2.first_name', which outputs [(331434, 'Mirjana'), (594281, 'Tamarine'), (437442, 'Katarina'), (110902, 'Jana'), (532884, 'Lisa'), (219, 'Maureen'), (4232828, 'Serena'), (289370, 'Nicole'), (514764, 'Virginie'), (7323, 'Patty'), (1361265, 'Nadia'), (240762, 'Cara'), (261247, 'Alexandra'), (403127, 'Paola'), (210101, 'Kveta'), (626517, 'Jelena'), (335693, 'Anne'), (164339, 'Brenda'), (270102, 'Kimiko'), (128509, 'Yayuk'), (143422, 'Janette'), (29214, 'Romana'), (10237, 'Katerina'), (142454, 'Lindsay'), (54282, 'Svetlana'), (2875425, 'Venus'), (359013, 'Jill'), (364725, 'Elena'), (112562, 'Katalin'), (301101, 'Stephanie'), (39782, 'Liezel'), (23823, 'Sophie'), (240126, 'Greta'), (353, 'Elizabeth'), (94799, 'Kyra'), (1279791, 'Francesca'), (678793, 'Anabel'), (411921, 'Maria Jose'), (1135382, 'Daniela'), (243280, 'Nuria'), (221309, 'Catalina'), (1266653, 'Marion'), (242145, 'Anne'), (253351, 'Elena'), (435918, 'Eleni'), (296736, 'Maria Elena'), (809611, 'Roberta'), (371662, 'Bethanie'), (1852305, 'Svetlana'), (1365135, 'Samantha'), (1524624, 'Vera'), (443695, 'Iveta'), (193144, 'Zuzana'), (193694, 'Renata'), (566453, 'Klara'), (2549520, 'Maria'), (1733205, 'Jelena'), (201511, 'Casey'), (290299, 'Melinda'), (49412, 'Stanislava'), (1006803, 'Flavia'), (190592, 'Eva'), (46590, 'Anais'), (249446, 'Edina'), (469763, 'Barbora'), (242458, 'Arantxa'), (67459, 'Carly'), (293766, 'Anastasia'), (395971, 'Vera'), (773249, 'Maria'), (164785, 'Yuliya'), (106762, 'Claudine'), (114687, 'Marie Eve'), (33301, 'Chia Jung'), (610820, 'Jie'), (364579, 'Sofia'), (161, 'Zuzana'), (102693, 'Mervana'), (192296, 'Severine'), (276403, 'Anna Lena'), (655592, 'Shuai'), (49709, 'Emily'), (5119, 'Nicole'), (111645, 'Abigail'), (208108, 'Sesil'), (514484, 'Anna'), (59775, 'Evgenia'), (106781, 'Monique'), (138707, 'Aiko'), (216035, 'Anastasia'), (242619, 'Michaella'), (64, 'Alona'), (193960, 'Marta'), (1358928, 'Na'), (272889, 'Sania'), (1320911, 'Ana'), (246168, 'Yvonne'), (662926, 'Shahar'), (778801, 'Lucie'), (309700, 'Pauline'), (535684, 'Alize'), (242988, 'Mathilde'), (141257, 'Rika'), (383495, 'Aravane'), (26649, 'Sarah'), (356602, 'Kateryna'), (75330, 'Ivana'), (193847, 'Ekaterina'), (183089, 'Laura'), (77512, 'Emma'), (229391, 'Yung Jan'), (131846, 'Alexa'), (274936, 'Su Wei'), (299530, 'Vania'), (265162, 'Galina'), (456422, 'Tsvetana'), (141281, 'Kathrin'), (371035, 'Lourdes'), (228538, 'Akgul'), (573809, 'Elena'), (172000, 'Olga'), (333150, 'Jarmila'), (2024970, 'Victoria'), (99286, 'Zi'), (238803, 'Alberta'), (382453, 'Kirsten'), (625836, 'Kaia'), (404915, 'Yaroslava'), (87711, 'Melanie'), (200972, 'Kristina'), (1979, 'Naomi'), (253471, 'Romina'), (41442, 'Vasilisa'), (1801033, 'Agnieszka'), (52, 'Ahsha'), (70159, 'Lauren'), (198461, 'Stephanie'), (388528, 'Varvara'), (165915, 'Olga'), (322202, 'Tamira'), (74453, 'Andreja'), (172851, 'Madison'), (156294, 'Sandra'), (253320, 'Alla'), (338720, 'Aleksandra'), (64277, 'Jessica'), (154484, 'Mariya'), (416391, 'Timea'), (624785, 'Andrea'), (1105308, 'Angelique'), (148701, 'Raluca'), (918297, 'Dominika'), (1852481, 'Caroline'), (339796, 'Agnes'), (236630, 'Karin'), (710284, 'Anastasia'), (341060, 'Olga'), (160892, 'Tatjana'), (286994, 'Ayumi'), (506901, 'Julia'), (570080, 'Ekaterina'), (861380, 'Sara'), (292551, 'Petra'), (43781, 'Ashley'), (106669, 'Ekaterina'), (423109, 'Monica'), (590911, 'Sabine'), (457043, 'Sorana'), (368086, 'Alisa'), (203969, 'Evgeniya'), (372858, 'Magdalena'), (600789, 'Yanina'), (1304308, 'Petra'), (643043, 'Carla'), (44294, 'Jelena'), (262043, 'Marina'), (275255, 'Urszula'), (64840, 'Eva'), (154138, 'Julie'), (243897, 'Stefanie'), (225546, 'Melanie'), (34647, 'Kristie'), (38651, 'Gail'), (194050, 'Mariana'), (113115, 'Anastasia'), (258237, 'Shuai'), (48788, 'Asia'), (235721, 'Coco'), (185492, 'Patricia'), (36973, 'Isabella'), (300153, 'Christina'), (261445, 'Kristina'), (273720, 'Chanelle'), (115102, 'Olivia'), (12728, 'Emelyn'), (268214, 'Anastasija'), (159005, 'Michelle'), (116548, 'Ajla'), (239025, 'Petra'), (40060, 'Tamaryn'), (191994, 'Arantxa'), (69314, 'Lenka'), (106924, 'Vitalia'), (318325, 'Polona'), (318382, 'Lucie'), (102260, 'Corinna'), (16732, 'Lauren'), (88369, 'Irena'), (15102, 'Kinnie'), (107656, 'Claire'), (204373, 'Silvia'), (71887, 'Darya'), (40435, 'Lenka'), (67902, 'Katarzyna'), (38371, 'Agnes'), (295579, 'Alexandra'), (133889, 'Kristina'), (169500, 'Vesna'), (116481, 'Masa'), (122331, 'Regina'), (160614, 'Laura'), (88542, 'Heidi'), (172004, 'Kai Chen'), (101816, 'Yurika'), (109256, 'Xinyun'), (12519, 'Chun Mei'), (68925, 'Jing Jing'), (16152, 'Yana'), (211151, 'Ksenia'), (352458, 'Sloane'), (202780, 'Heather'), (251714, 'Bojana'), (206032, 'Anna'), (117825, 'Sharon'), (201699, 'Alison'), (99836, 'Margalita'), (63228, 'Beatriz'), (293366, 'Irina Camelia'), (712373, 'Simona'), (203782, 'Misaki'), (288192, 'Johanna'), (177170, 'Kurumi'), (73589, 'Noppawan'), (194566, 'Andrea'), (170487, 'Jamie'), (6777, 'Chelsey'), (19264, 'Beatrice'), (100708, 'Shelby'), (152780, 'Irina'), (191721, 'Mandy'), (111308, 'Rebecca'), (53480, 'Sally'), (53610, 'Sheng Nan'), (61839, 'Yi Miao'), (123243, 'Zarina'), (148173, 'Daria'), (128183, 'Junri'), (94252, 'Arina'), (208822, 'Caroline'), (225987, 'Lesia'), (156236, 'Lauren'), (97597, 'Ana'), (21261, 'Fatma'), (303633, 'Madison'), (164200, 'Monica'), (282445, 'Mona'), (84139, 'Iryna'), (30972, 'Nicha'), (126811, 'Estrella'), (106375, 'Maria Teresa'), (14772, 'Nadia'), (10865, 'Fatima'), (53947, 'Eva'), (72682, 'Maria Joao'), (24180, 'Jasmin'), (94624, 'Naomi'), (50987, 'Lenka'), (57224, 'Irina'), (56579, 'Ksenia'), (6698, 'Ellen'), (8128, 'Sandra'), (101468, 'Anna'), (83659, 'Tadeja'), (29250, 'Nastja'), (65170, 'Melanie'), (29622, 'Tereza'), (57044, 'Tina'), (431365, 'Karolina'), (75003, 'Ekaterina'), (60908, 'Pemra'), (13029, 'Ipek'), (119797, 'Cagla'), (64525, 'Ling'), (162178, 'Alexandra'), (60702, 'Amra'), (61432, 'Ksenia'), (47651, 'Nigina'), (43797, 'Sabina'), (47282, 'So Jung'), (47867, 'Ye Ra'), (24569, 'Mi'), (78204, 'Sacha'), (54340, 'Varatchaya'), (63013, 'Nudnida'), (41135, 'Bianca'), (3217, 'Lina'), (29976, 'Claire'), (155172, 'Nina'), (79958, 'Dia'), (32049, 'Michaela'), (195681, 'Timea'), (13618, 'Silvia'), (146176, 'Laura'), (148477, 'Kristyna'), (59997, 'Liana Gabriela'), (24123, 'Martina'), (46787, 'Nikola'), (26501, 'Basak'), (3073, 'Malou'), (60646, 'Yi Fan'), (1243, 'Alina'), (42676, 'Sachie'), (76568, 'Natalie'), (153672, 'Yulia'), (99437, 'Petra'), (37795, 'Galina'), (71573, 'Vanessa'), (247, 'Shiho'), (20869, 'Cory Ann'), (811, 'Habiba'), (23411, 'Liga'), (115, 'Mariana'), (14905, 'Olga'), (26059, 'Kyung Mi'), (43077, 'Maria'), (82186, 'Maria Fernanda'), (33443, 'Diana'), (41925, 'Darija'), (11022, 'Sandra'), (16523, 'Magdalena'), (4809, 'Klaudia'), (38501, 'Ayu Fani'), (16516, 'Daniella'), (33846, 'Karolina'), (69089, 'Lina'), (27452, 'Rushmi'), (24384, 'Andrea'), (20210, 'Nikola'), (62938, 'Madalina'), (70504, 'Chin Wei'), (1339, 'Marrit'), (53764, 'Erika'), (41206, 'Teodora'), (23897, 'Lavinia'), (29079, 'Raquel'), (624, 'Kirsten'), (34796, 'Chieh Yu'), (26842, 'Ksenia'), (6681, 'Kyra'), (29509, 'Sung Hee'), (22487, 'Vlada'), (37253, 'Sandra'), (47321, 'Akiko'), (39240, 'Andrea'), (10136, 'Camila'), (84951, 'Maria'), (19595, 'Anna'), (8584, 'Amanda'), (45115, 'Leticia'), (13371, 'Alexis'), (14212, 'Natasa'), (20922, 'Amanda'), (1294, 'Alisa'), (71232, 'Sofia'), (12063, 'Maria'), (88014, 'Florencia'), (1558, 'Catherine'), (19066, 'Ximena'), (24523, 'Nungnadda'), (75337, 'Tetiana'), (161059, 'Lara'), (7461, 'Barbara'), (51803, 'An Sophie'), (96908, 'Alison'), (46124, 'Shuko'), (50787, 'Sarah'), (52274, 'Conny'), (26624, 'Samantha'), (68207, 'Julia'), (264234, 'Johanna'), (214121, 'Kiki'), (186544, 'Camila'), (61217, 'Alize'), (43020, 'Tetyana'), (10191, 'Hilda'), (49207, 'Anna Giulia'), (107965, 'Aleksandra'), (10087, 'Vanda'), (66271, 'Reka Luca'), (41457, 'Anastasia'), (36361, 'Ani'), (821, 'Silvia'), (101053, 'Paula'), (126, 'Nina'), (42, 'Tatia'), (95259, 'Valeria'), (249, 'Kamilla'), (51691, 'Valeria'), (204628, 'Eugenie'), (37627, 'Alexandra'), (2877, 'Zoe Gwen'), (40691, 'Victoria'), (121823, 'Jana'), (24544, 'Nicole'), (22443, 'Yi Jing'), (113359, 'Saisai'), (98697, 'Erika'), (21360, 'Yue Yue'), (136645, 'Alexandra'), (50184, 'Bibiane'), (58741, 'Ashleigh'), (29054, 'Bojana'), (56242, 'Ons'), (103781, 'Julia'), (16614, 'Karen'), (37020, 'Ines'), (15030, 'Yuliana'), (29169, 'Maria'), (5642, 'Nadia'), (87263, 'Elitsa'), (65879, 'Jessica'), (412872, 'Garbine'), (169371, 'Annika'), (15555, 'Karen'), (59763, 'Laura'), (29442, 'Annalisa'), (36744, 'Jasmina'), (2338, 'Csilla'), (67017, 'Dinah'), (54798, 'Tara'), (70529, 'Grace'), (84184, 'Richel'), (49122, 'Chi Chi'), (24616, 'Barbara'), (45503, 'Sandra'), (84098, 'Nicole'), (9371, 'Jana'), (44497, 'Mallory'), (65152, 'Nastassja'), (47854, 'Valentyna'), (90451, 'Carina'), (31058, 'Rebecca'), (11985, 'Varvara'), (116857, 'Qiang'), (26897, 'Ekaterine'), (314280, 'Elina'), (42451, 'Jennifer'), (44166, 'Samantha'), (21688, 'Victoria'), (108628, 'Julia'), (114098, 'Donna'), (58599, 'Maria'), (8301, 'Hyun Hui'), (18210, 'So Ra'), (77519, 'Luksika'), (107595, 'Ying Ying'), (135048, 'Belinda'), (60475, 'Margarita'), (11694, 'Wing Yau Venise'), (24279, 'Yuxuan'), (19313, 'Stefania'), (33872, 'Giulia'), (12098, 'Erika'), (34536, 'Marina'), (32336, 'Natalia'), (32414, 'Estelle'), (46852, 'Ana'), (21862, 'Federica'), (24920, 'Alison'), (8669, 'Neda'), (12772, 'Alexia'), (8918, 'Vivienne'), (3233, 'Eleni'), (156, 'Afroditi'), (8072, 'Stamatia'), (27781, 'Stephanie'), (7797, 'Hulya'), (51601, 'Veronika'), (42083, 'Anna'), (22497, 'Olga'), (27011, 'Evelyn'), (23373, 'Anna'), (9862, 'Yumi'), (224, 'Hao Ching'), (667, 'Chi Fan'), (40633, 'Wen Hsin'), (38116, 'Remi'), (56212, 'Kumiko'), (33822, 'Laura Ioana'), (59436, 'Giulia'), (24242, 'Federica'), (62861, 'Chanel'), (13001, 'Megan'), (23123, 'Nicole'), (26631, 'Lena'), (16716, 'Katie'), (28959, 'Diana'), (52008, 'Elena'), (9273, 'Alexandra'), (69242, 'Mihaela'), (37660, 'Natalie'), (15010, 'Alice'), (25736, 'Viktoriya'), (16980, 'Patrycja'), (19065, 'Despina'), (30040, 'Julia'), (30315, 'Claudia'), (13791, 'Yi'), (11873, 'Akari'), (14838, 'Aki'), (58279, 'Oksana'), (22928, 'Jacqueline'), (5478, 'Natasha'), (30304, 'Justyna'), (2937, 'Ema'), (36939, 'Yuliya'), (18211, 'Elixane'), (54172, 'Lyudmyla'), (9767, 'Valentine'), (69447, 'Stephanie'), (1459, 'Fiona'), (84453, 'Maryna'), (27322, 'Gabriela'), (1964, 'Eleanor'), (10993, 'Lara'), (17911, 'Nina'), (26779, 'Chen'), (46355, 'Jin A'), (36307, 'Zuzana'), (4611, 'Shivika'), (42773, 'Chiaki'), (37074, 'Akiko'), (21221, 'Irina'), (20251, 'Natalia'), (31741, 'Gioia'), (11217, 'Yasmin'), (8145, 'Ting Fei'), (923, 'Jessy'), (36696, 'Ana Clara'), (2266, 'Madrie'), (3809, 'Zarah'), (647, 'Lynn'), (30427, 'Lisa'), (12388, 'Kim Alice'), (65522, 'Denisa'), (1736, 'Martina'), (7575, 'Estelle'), (7353, 'Dijana'), (29458, 'Audrey'), (66177, 'Tereza'), (17071, 'Jade'), (6542, 'Lucy'), (8601, 'Camilla'), (103659, 'Magda'), (38793, 'Roxane'), (6021, 'Jessica'), (26603, 'Nicola'), (16303, 'Natela'), (10360, 'Sina'), (44297, 'Cristina'), (75414, 'Cristina Andreea'), (15816, 'Ekaterina'), (1033, 'Anastasiya'), (9699, 'Alexandra'), (238, 'Aselya'), (9318, 'Prerna'), (1900, 'Ekaterina'), (19387, 'Polina'), (4194, 'Yuliya'), (9939, 'Maria'), (37550, 'Gabriela'), (129, 'Sara'), (11653, 'Wan Ting'), (40341, 'Lin'), (54509, 'Misa'), (9780, 'Di'), (14306, 'Ran'), (36746, 'Isabella'), (3763, 'Vaszilisza'), (2252, 'Ani'), (699, 'Radina'), (17078, 'Ya Hsuan'), (112570, 'Teliana'), (35957, 'Aleksandrina'), (7015, 'Federica'), (5269, 'Anne Liz'), (265, 'Alessondra'), (597, 'Ryann'), (532, 'Simone'), (65224, 'Irina'), (48873, 'Tereza'), (25166, 'Constance'), (16778, 'Rocio'), (82249, 'Veronica'), (14056, 'Manon'), (43550, 'Myrtille'), (5880, 'Kelly S'), (476, 'Tinatin'), (3654, 'Mariana'), (24682, 'Katerina'), (6470, 'Vladimira'), (5216, 'Alicja'), (18781, 'Vojislava'), (5566, 'Ria'), (69973, 'Anne'), (7395, 'Tomoko'), (37183, 'Natsumi'), (27275, 'Ana'), (20132, 'Chayenne'), (9465, 'Simona'), (12633, 'Indire'), (12849, 'Maya'), (10094, 'Sherazad'), (21007, 'Agustina'), (32785, 'Mari'), (38541, 'Justine'), (22451, 'Ayumi'), (12693, 'Yurina'), (17020, 'Romana Caroline'), (56363, 'Maria Fernanda'), (280, 'Antonela'), (20451, 'Marija'), (3329, 'Kaitlyn'), (22840, 'Miyabi'), (47480, 'Anastasiya'), (464, 'Jara'), (11547, 'Georgina'), (9202, 'Raluca Elena'), (20600, 'Danielle'), (26585, 'Chang'), (2644, 'Yi'), (39713, 'Shiho'), (34262, 'Michaela'), (12551, 'Anastasia'), (5934, 'Francesca'), (4962, 'Kotomi'), (21417, 'Korina'), (2581, 'Jessica'), (3105, 'Nicola'), (66109, 'Marta'), (13135, 'Celine'), (114, 'June'), (17577, 'Krista'), (20142, 'Kanae'), (8856, 'Yuka'), (23632, 'Zuzana'), (14129, 'Makoto'), (11320, 'Maiko'), (211, 'Ioana'), (24, 'Rui'), (17597, 'Danica'), (36, 'Tomoko'), (6890, 'Danielle'), (3592, 'Yoon Young'), (8180, 'Hae Sung'), (7147, 'Etsuko'), (4444, 'Virginie'), (16231, 'Angelina'), (1991, 'Jillian'), (9177, 'Ai'), (10489, 'Maya'), (9338, 'Sakiko'), (8406, 'Kaori'), (2661, 'Nadja'), (7999, 'Gracia'), (35243, 'Amandine'), (29566, 'Katerina'), (2045, 'Veronika'), (48117, 'Jia Jing'), (21340, 'Piia'), (18043, 'Karolina'), (51346, 'Nadiya'), (5632, 'Marion'), (6497, 'Ana'), (12096, 'Tatiana'), (1899, 'Kristy'), (4367, 'Alexa'), (6332, 'Amandine'), (1483, 'Shu Ying'), (15861, 'Martina'), (27408, 'Lisa'), (17085, 'Allie'), (6948, 'Ionela Andreea'), (10407, 'Yumi'), (520, 'Veronica'), (17975, 'Sanaz'), (14123, 'Milana'), (7118, 'Jasmina'), (9980, 'Nikola'), (12291, 'Martina'), (2362, 'Libby'), (515, 'Khristina'), (1532, 'Lauren'), (29513, 'Vivian'), (30669, 'Vanesa'), (21926, 'Tatiana'), (39523, 'Mailen'), (8400, 'Jasmin'), (10630, 'Tori'), (20989, 'Eugeniya'), (12596, 'Ksenia'), (38215, 'Marina'), (4145, 'Julia'), (18584, 'Ganna'), (8307, 'Julia'), (24542, 'Miki'), (13006, 'Poojashree'), (8507, 'Danielle Rose'), (10707, 'Martina'), (12038, 'Danielle'), (4349, 'Ellen'), (2127, 'Tea'), (6338, 'Svenja'), (651, 'Ana'), (12855, 'Lucia'), (6404, 'Pilar'), (12379, 'Macall'), (11146, 'Nicole'), (26950, 'Ilona'), (283, 'Natalia'), (16494, 'Nanuli'), (21, 'Avgusta'), (1565, 'Elisabeth'), (1090, 'Marianne'), (14942, 'Lena Marie'), (13041, 'Vivien'), (15617, 'Tamara'), (24062, 'Keren'), (741, 'Rashmi'), (8448, 'Rishika'), (47772, 'Dalila'), (8125, 'Anastasia'), (17308, 'Alexandra'), (11201, 'Sviatlana'), (12708, 'Aminat'), (10539, 'Sofie'), (1039, 'Alexandra'), (13064, 'Sarah Rebecca'), (8234, 'Yana'), (17497, 'Marina'), (24184, 'Aranza'), (11603, 'Elizabeth'), (12727, 'Andreea Roxana'), (7887, 'Jelena'), (6891, 'Polona'), (317, 'Cristina Madalina'), (11037, 'Lucie'), (13935, 'Martina'), (76271, 'Kateryna'), (15836, 'Nuria'), (11032, 'Benedetta'), (33691, 'Amanda'), (4743, 'Iris'), (812, 'Dariya'), (2015, 'Alexandra'), (10507, 'Albina'), (2052, 'Anna'), (8479, 'Nika'), (14213, 'Carol'), (470, 'Alejandra'), (2589, 'Silvia'), (5683, 'Charlene'), (3040, 'Oceane'), (2350, 'Jennifer'), (10947, 'Jan'), (1561, 'Viktoryia'), (10236, 'Julia'), (5689, 'Celine'), (1303, 'Andrea'), (23976, 'Doroteja'), (9631, 'Hao Chen'), (25183, 'Alyona'), (4368, 'Hirono'), (3880, 'Emi'), (13141, 'Chinami'), (12367, 'Sophie'), (617, 'Simone'), (8388, 'Elizabeth'), (1093, 'Gabrielle Faith'), (49767, 'Sachia'), (38766, 'Taylor'), (500, 'Lindsey'), (10107, 'Kazusa'), (23968, 'Miyu'), (173, 'Tereza'), (1521, 'Giorgia'), (40344, 'Diana'), (28098, 'Nathalia'), (5419, 'Alexandra'), (12295, 'Robin'), (25598, 'Katarzyna'), (5250, 'Nadiya'), (8451, 'Chihiro'), (55625, 'Paula'), (11608, 'Arabela'), (32964, 'Andrea'), (6288, 'Yevgeniya'), (6688, 'Isabel'), (6358, 'Morgane'), (1962, 'Anaeve'), (26077, 'Tammi'), (3233, 'Khristina'), (3842, 'Nicola'), (4261, 'Sonja'), (61541, 'Viktorija'), (1738, 'Klara'), (2300, 'Michaela'), (107880, 'Anna Karolina'), (19804, 'Melis'), (1544, 'Sultan'), (5027, 'Nadezda'), (26048, 'Victoria'), (23884, 'Polina'), (9768, 'Anastasia'), (21746, 'Elizaveta'), (12630, 'Daria'), (309, 'Stefanie'), (95, 'Monika'), (11596, 'Anja'), (13007, 'Zuzana'), (13717, 'Agnese'), (21423, 'Olga'), (2922, 'Brianna'), (59476, 'Risa'), (23195, 'Riko'), (1060, 'Yuriko'), (16929, 'Mai'), (15071, 'Yuuki'), (9593, 'Mana'), (10143, 'Lou'), (12304, 'Clothilde'), (5514, 'Whitney'), (286, 'Charlotte'), (4140, 'Erin'), (964, 'Emily J'), (15190, 'Chloe'), (3928, 'Alice'), (8216, 'Christina'), (25946, 'Ipek'), (251, 'Naz'), (9590, 'Olga'), (8441, 'Bermet'), (14751, 'Polina'), (8284, 'Lisanne'), (87958, 'Danka'), (37817, 'Kai Lin'), (111, 'Caroline B'), (33388, 'Fangzhou'), (4914, 'Chalena'), (1103, 'Elizabeth Anita Alexandria'), (26610, 'Adriana'), (1289, 'Tatsiana'), (5425, 'Ioana Loredana'), (2512, 'Diana'), (3927, 'Cristina'), (9147, 'Camelia Elena'), (11572, 'Katy'), (6369, 'Dianne'), (4543, 'Tyra'), (26280, 'Peangtarn'), (302, 'Samantha'), (3714, 'Paula Catalina'), (10133, 'Ingrid Esperanza'), (170, 'Victoria'), (543, 'Ivette'), (33, 'Intissar'), (80, 'Fatyha'), (42925, 'Lesley'), (3918, 'Csilla'), (1688, 'Paulina'), (172, 'Annie'), (3426, 'Jeannine'), (16815, 'Karolina'), (12525, 'Janina'), (14434, 'Martina'), (13266, 'Petra'), (1463, 'Natalie'), (3443, 'Anastasiya'), (8592, 'Ji Young'), (6650, 'Seung Yeon'), (6858, 'Ji Hee'), (1858, 'Mi Rae'), (9938, 'Min Hwa'), (26185, 'Na Lae'), (870, 'Hyojung'), (6564, 'Seo Kyung'), (33672, 'Su Jeong'), (2438, 'Christine'), (6650, 'Anna Arina'), (17970, 'Viktorija'), (5155, 'Ashling'), (8211, 'Barbara'), (1088, 'Ashley'), (822, 'Jawairiah'), (1884, 'Trang'), (681, 'Stephanie'), (428, 'Rita'), (1997, 'Margarida'), (462, 'Sofia'), (69, 'Maria'), (1901, 'Agata'), (833, 'Mai'), (288, 'Kimberley'), (7308, 'Alice'), (1469, 'Seda'), (95, 'Cecilie Lundgaard'), (980, 'Nazari'), (3094, 'Nan Nan'), (1119, 'Polina'), (8323, 'Yvonne'), (4411, 'Chihiro'), (960, 'Katherine'), (328, 'Emily'), (400, 'Caroline'), (4528, 'Carolina'), (764, 'Tanaporn'), (808, 'Camila'), (804, 'Josie'), (4212, 'Victoria'), (6043, 'Valerie'), (36, 'Natasha'), (216, 'Julie'), (9, 'Frederikke'), (1192, 'Demi'), (17382, 'Indy'), (3466, 'Matilda'), (2421, 'Brenda'), (342, 'Rebecca'), (1286, 'Louise'), (538, 'Valeria'), (4134, 'Beatrice'), (11981, 'Agnes'), (1026, 'Marisa'), (105, 'Vincenza'), (13759, 'Carolina'), (7898, 'Lisa Maria'), (874, 'Anna Maria'), (9061, 'Pia'), (26112, 'Sofia'), (15198, 'Valentini'), (6918, 'Brooke'), (2157, 'Arina'), (54, 'Maftuna'), (270, 'Yana'), (649, 'Natella'), (6, 'Priscila'), (141, 'Ah'), (86, 'Ki Ryang'), (11004, 'Zi'), (677, 'Yoshimi'), (3724, 'Kanami'), (21152, 'Storm'), (2279, 'Belinda'), (11721, 'Azra'), (224, 'Nattawadee'), (3540, 'Alexandra'), (1103, 'Robyn'), (346, 'Hana'), (147, 'Daniella'), (15955, 'Ana Sofia'), (16352, 'Marcela'), (988, 'Ana Paula'), (45, 'Valeria'), (1679, 'Hayley'), (71072, 'Anett'), (43349, 'Sara'), (1312, 'Miriam'), (21624, 'Antonia'), (82971, 'Anna Lena'), (9001, 'Syna'), (27804, 'Ysaline'), (96, 'Emma'), (895, 'Jessica'), (1607, 'Daneika'), (951, 'Sabrina'), (4473, 'Kim'), (5493, 'Karina Ildor'), (756, 'Magy'), (338, 'Marta'), (21875, 'Alice'), (536, 'Gaelle'), (414, 'Juliana'), (2338, 'Anamika'), (898, 'Fatimah'), (7752, 'Natalia'), (7042, 'Martina'), (1793, 'Beatrice'), (375, 'Blessing'), (2713, 'Cristina'), (1363, 'Shao Yuan'), (1826, 'Alessia'), (2929, 'Agni'), (6591, 'Sun Jung'), (1069, 'Anouk'), (9627, 'Nicolette'), (5229, 'Lara'), (8268, 'Sylwia'), (1884, 'Giulia'), (340, 'Melisa'), (287, 'Blessing'), (1986, 'Ekaterina'), (648, 'Ashmitha'), (99, 'Asha'), (5161, 'Jana'), (1472, 'Misa'), (182, 'Yoo Ri'), (3445, 'Lu'), (327, 'Sara'), (128, 'Ioana'), (857, 'Naoko'), (467, 'Kady'), (13037, 'Marcella'), (1469, 'Yasmine'), (37384, 'Paula Cristina'), (164, 'Aleksandra'), (422, 'Kateryna'), (13982, 'Viktoria'), (683, 'Marcela Guimaraes'), (320, 'Marcela'), (6411, 'Julia'), (8744, 'Xin'), (170, 'Nevena'), (219, 'Adnya'), (9800, 'Tereza'), (4128, 'Pavla'), (3908, 'Ester'), (235, 'Eden'), (24, 'Christie'), (49, 'Ronke'), (4988, 'Karina'), (894, 'Keri'), (3029, 'Diana'), (5466, 'Emma'), (1032, 'Brittany'), (1368, 'Julie'), (24100, 'Anna'), (1358, 'Ineke'), (147, 'Ema'), (7005, 'Carmen'), (12185, 'Karin'), (3375, 'Dunja'), (3641, 'Natasha'), (1574, 'Ai'), (7838, 'Guadalupe'), (16824, 'Margarita'), (681, 'Johanna'), (4766, 'Ingrid Alexandra'), (8939, 'Dalia'), (57, 'Adriana'), (141, 'Deeon'), (1921, 'Stephanie'), (1558, 'Noel'), (3788, 'Francesca'), (19223, 'Na Ri'), (3842, 'Alexandra'), (3374, 'Chun Yan'), (1034, 'Cynthia'), (3554, 'Yi'), (234, 'Iryna'), (221, 'Anastasiya'), (4777, 'Julia'), (34570, 'Eri'), (8056, 'Ema'), (2862, 'Veronika'), (211, 'Sabrina'), (9564, 'Isabella'), (714, 'Isabela'), (4334, 'Karina'), (1920, 'Beatriz Maria'), (2609, 'Melina'), (6295, 'Monique'), (15032, 'Carla'), (1696, 'Li'), (9522, 'Carla'), (13241, 'Nathaly'), (285, 'Yoko'), (12554, 'Elyne'), (2552, 'Anouk'), (5592, 'Makiho'), (244, 'Veronika'), (5422, 'Alix'), (291, 'Silvia'), (13232, 'Anna'), (1363, 'Stefania'), (15001, 'Chantal'), (24836, 'Angelique'), (484, 'Ekaterina'), (8261, 'Barbara'), (2935, 'Giuliana'), (2, 'Olawaseun'), (120, 'Abiodun'), (26, 'Beauty'), (9, 'Rana'), (3497, 'Ola'), (1347, 'Florencia'), (8281, 'Luciana'), (3200, 'Kyle'), (27118, 'Ulrikke'), (3549, 'Darya'), (1254, 'Vladislava'), (1644, 'Chanelle'), (5214, 'Abbie'), (2489, 'Malin'), (61196, 'Aliaksandra'), (4280, 'Alina'), (1222, 'Hye Min'), (340, 'Samantha'), (11216, 'Eduarda'), (126, 'Stefani'), (58, 'Maya'), (14061, 'Carolina'), (13583, 'Anna'), (11552, 'Ganna'), (6809, 'Lidziya'), (18, 'Shiori'), (681, 'Se Jin'), (526, 'Elena'), (85, 'Dilara'), (537, 'Busra'), (1501, 'Zsofia'), (1531, 'Ivana'), (648, 'Yawna'), (5466, 'Giulia'), (6078, 'Laetitia'), (921, 'Alejandra'), (11316, 'Yana'), (54, 'Beatriz'), (4, 'Mariona'), (1597, 'Verena'), (996, 'Gabriela'), (554, 'Lucia'), (2710, 'Josepha'), (1754, 'Linda'), (554, 'Carmen'), (3017, 'Elisabeth'), (3988, 'Stephanie'), (3112, 'Manisha'), (1536, 'Kana'), (3231, 'Tamara'), (11073, 'Laura'), (4050, 'Diana'), (13464, 'Laura'), (2216, 'Liz Tatiane'), (289, 'Giovanna'), (3709, 'Flavia'), (546, 'Flavia'), (802, 'Asiya'), (4789, 'Xiao'), (276, 'Sirui'), (1036, 'Voni'), (3618, 'Yuka'), (595, 'Laili'), (13577, 'Angelica'), (8649, 'Alena'), (5376, 'Bianca'), (7882, 'Julia'), (9021, 'Carolin'), (1202, 'Lisa Marie'), (195, 'Saana'), (190, 'Katerina'), (2561, 'Petra'), (26653, 'Daniela'), (2215, 'Mariana'), (468, 'Laura'), (342, 'Andrea'), (454, 'Victoire'), (3894, 'Bernice'), (22978, 'Quirine'), (529, 'Carlotta'), (39142, 'Jovana'), (7740, 'Marina'), (1186, 'Costanza'), (198, 'Helen'), (1227, 'Claudia Antonia'), (934, 'Claudia Gianina'), (1980, 'Simona'), (9568, 'Ani'), (544, 'Caroline'), (2662, 'Liubov'), (9551, 'Marianna'), (18371, 'Sofiya'), (1216, 'Erin'), (254, 'Nina'), (323, 'Eleanor'), (713, 'Ebony'), (27580, 'Hiroko'), (21205, 'Miharu'), (144, 'Brooke'), (1003, 'Karis'), (15111, 'Caitlin'), (2592, 'Rachael'), (562, 'Mai'), (1381, 'Yolande'), (160, 'Valeriya'), (219, 'Viktoriya'), (2413, 'Lucia'), (1322, 'Raquel'), (1224, 'Nikola'), (21599, 'Ankita'), (2321, 'Ashvarya'), (4106, 'Sharmada'), (3642, 'Rutuja'), (5687, 'Prarthana G'), (20236, 'Zhaoxuan'), (35193, 'Jennifer'), (96, 'Aishwarya'), (7367, 'Hua Chen'), (2894, 'Carolina'), (531, 'Sofia'), (85, 'Amina'), (3053, 'Chiara'), (709, 'Desiree'), (33994, 'Tereza'), (3453, 'Ju Eun'), (3361, 'Tjasa'), (2340, 'Francesca'), (483, 'Martina'), (1664, 'Yanina'), (3495, 'Valeria'), (876, 'Lutfiye'), (23554, 'Deniz'), (1531, 'Oleksandra'), (1229, 'Tanya'), (14578, 'Xenia'), (5491, 'Diana'), (28747, 'Catalina'), (5800, 'Sofia'), (3975, 'Gabriela'), (1945, 'Napatsakorn'), (5866, 'Kamonwan'), (2493, 'Anna'), (3623, 'Varunya'), (33, 'Lorenza'), (4298, 'Natalie'), (2052, 'Zalina'), (394, 'Alisa'), (12906, 'Kamila'), (636, 'Elizaveta Anna'), (1856, 'Yelena'), (7876, 'Jade'), (1050, 'Taisiya'), (469, 'Rachel'), (2492, 'Alice'), (209, 'Chiara'), (1104, 'Beatrice'), (11770, 'Cecilia'), (7165, 'Tess'), (2020, 'Samira'), (1050, 'Joana'), (16276, 'Susanne'), (442, 'Nika'), (290, 'Ghislaine'), (6841, 'Eva'), (1904, 'Sabrina'), (31356, 'Cindy'), (4105, 'Kelly'), (216, 'Ekaterina'), (839, 'Varvara'), (426, 'Viktoryia'), (610, 'Anastasia'), (429, 'Ximena'), (18658, 'Gabriela'), (24, 'Ya'), (1445, 'Xi Yao'), (2217, 'Ai Wen'), (2358, 'Alice Andrada'), (1884, 'Min'), (3582, 'Francesca'), (2634, 'Giulia'), (622, 'Maria'), (5581, 'Anna'), (9473, 'Amy'), (969, 'Franziska'), (16849, 'Olga'), (228, 'Andjela'), (53813, 'Oceane'), (1249, 'Mathilde'), (511, 'Magalie'), (147, 'Madeline'), (2309, 'Sabina'), (2107, 'Evgeniya'), (958, 'Cemre'), (1657, 'Anette'), (2526, 'Natia'), (616, 'Alicia'), (1183, 'Alexandra'), (304, 'Abbi'), (108, 'Rocio'), (849, 'Marina'), (11034, 'Patricia'), (35516, 'Beatriz'), (504, 'Priscila'), (18, 'Gulchekhra'), (5372, 'Ofri'), (3235, 'Iva'), (2531, 'Nicky'), (4204, 'Michaela'), (5105, 'Kimberley'), (28890, 'Barbora'), (13010, 'Ivonne'), (43755, 'Patricia Maria'), (1328, 'Dunja'), (891, 'Katarina'), (1678, 'Veronica M'), (166, 'Patricia'), (2332, 'Dejana'), (545, 'Danijela'), (1644, 'Ashley'), (358, 'Chisa'), (1269, 'Claudia'), (210, 'Maud'), (2433, 'Ainhoa'), (4314, 'Marine'), (30, 'Lyann'), (3564, 'Stephanie'), (425, 'Elena'), (9064, 'Mayya'), (1420, 'Ziyue'), (630, 'Ani'), (304, 'Tamari'), (41999, 'Maria'), (2706, 'Nives'), (102, 'Mary Ann'), (1083, 'Astra'), (1259, 'Yue'), (120, 'Nour'), (5425, 'Nidhi'), (7998, 'Gaia'), (1626, 'Sylvia'), (801, 'Sherry'), (308, 'Katrine Isabel'), (2443, 'Ekaterina'), (733, 'Lee'), (522, 'Libi'), (308, 'Rona'), (410, 'Gulben'), (64, 'Vita'), (1465, 'Boyan'), (152, 'Leah'), (1257, 'Dana'), (23564, 'Montserrat'), (1560, 'Daniela'), (908, 'Jazmin'), (4411, 'Camila'), (2417, 'Linda'), (111, 'Alena'), (17819, 'Jesika'), (9864, 'Julia'), (2221, 'Clelia'), (3891, 'Stefania'), (1592, 'Olga'), (1110, 'Paula'), (1892, 'Maria Constanza De Las Mercedes'), (2133, 'Ornella'), (1397, 'Stephanie Mariel'), (17563, 'Fernanda'), (10436, 'Victoria'), (1478, 'Denise'), (226, 'Aimee'), (32445, 'Mayo'), (1846, 'Christina'), (556, 'Rio'), (1795, 'Noelle'), (82, 'Lina'), (2370, 'Angelique'), (302, 'Claudia'), (24, 'Yihong'), (784, 'Nicole'), (4380, 'Naiktha'), (9034, 'Anna'), (1136, 'Paula'), (676, 'Breaunna'), (159, 'Spurti'), (15659, 'Veronika'), (541, 'Emiliya'), (5708, 'Daria'), (3332, 'Alina'), (39687, 'Yafan'), (480, 'Sonia'), (640, 'Nour'), (728, 'Elke'), (2333, 'Nicole'), (480, 'Gabriella'), (615, 'Carmen'), (461, 'Sarahi'), (323, 'Maria Andrea'), (288, 'Ana Gabriela'), (27, 'Isabella'), (791, 'Aymet'), (538, 'Clementina Eugenia'), (1614, 'Domenica'), (4054, 'Isabelle'), (2714, 'Ellen'), (75, 'Yosr'), (178, 'Sarvinoz'), (1417, 'Da Hye'), (321, 'Ji Hee'), (1134, 'Francesca'), (3440, 'Martina'), (354, 'Sanae'), (229, 'Kanako'), (3699, 'Alona'), (41127, 'Elizaveta'), (2114, 'Sofia'), (814, 'Berta'), (1647, 'Carolina'), (17280, 'Nadia'), (6439, 'Guadalupe'), (705, 'Agustina'), (2122, 'Shakhlo'), (775, 'Guzal'), (750, 'Leolia'), (1676, 'Imane Maelle'), (5508, 'Karin'), (33874, 'Ekaterina'), (259, 'Nam Yeon'), (3838, 'Anastasia'), (1304, 'Sandra'), (11829, 'Katharina'), (120, 'Giulia'), (1833, 'Giulia'), (8589, 'Daiana'), (298, 'Luisa'), (118, 'Marcela'), (3627, 'Carolina Meligeni Rodrigues'), (72, 'Andressa Cristina'), (253, 'Ivone'), (2166, 'Nadia'), (328, 'Sarah'), (141, 'Assia'), (869, 'Adriana'), (50, 'Sarah'), (114, 'Daniela'), (1077, 'Carmen Raluca'), (462, 'Kirsten Andrea'), (472, 'Joanna'), (157, 'Amira'), (48, 'Olena'), (309, 'Mitsumi'), (57, 'Magdalena'), (3230, 'Lenka'), (120, 'Wen Ling'), (34, 'Yasmin'), (255, 'Larikah'), (98, 'Alexandra'), (777, 'Jelena'), (20, 'Elena'), (247, 'Patricia'), (230, 'Micaela'), (33, 'Natalia'), (1015, 'Emma'), (305, 'Amy'), (204, 'Julia'), (1023, 'Jade'), (111, 'Lisa'), (164, 'Julia'), (84, 'Abigail'), (1092, 'Jordana'), (103, 'Elaine'), (142, 'Risa'), (1012, 'Stephanie'), (885, 'Marina'), (84, 'Grace'), (4954, 'Bianca'), (627, 'Marianna'), (279, 'Milena'), (736, 'Treta'), (206, 'Almudena'), (744, 'Eveliina'), (60, 'Francesca'), (3071, 'Sabina'), (1571, 'Katharina'), (1984, 'Priscilla'), (491, 'Nikol'), (294, 'Maria Jesus'), (1820, 'Denise'), (533, 'Molly'), (15, 'Jin'), (224, 'Sandy'), (1894, 'Katherine Gabriela'), (1475, 'Noelia'), (1344, 'Brynn'), (88, 'Cecilia'), (413, 'Ushna'), (957, 'Ratnika'), (3255, 'Shweta'), (1000, 'Natasha'), (124, 'Anna'), (314, 'Yekaterina'), (202, 'Violetta'), (2177, 'Anita'), (645, 'Ludmila'), (323, 'Malika'), (15970, 'Kathinka'), (542, 'Meng Ning'), (1140, 'Giulia'), (2417, 'Alina'), (862, 'Gabriela'), (716, 'Rosalie'), (12443, 'Natalija'), (33, 'Carlotta'), (491, 'Sandra'), (702, 'Mara'), (3092, 'Francesca'), (271, 'Emiliana'), (240, 'Arantxa'), (2961, 'Sowjanya'), (399, 'Carla'), (351, 'Belen'), (34, 'Kate'), (3669, 'Sabrina'), (317, 'Alessia'), (96, 'Mami'), (641, 'Qianqian'), (24, 'Gabriela'), (762, 'India'), (423, 'Ella'), (376, 'Patricia'), (804, 'Lina'), (117, 'Veronika'), (190, 'Lynn'), (176, 'Mi Jeong'), (48, 'Angelina'), (3942, 'Despoina'), (3127, 'Karla'), (124, 'Kayla'), (2107, 'Valeria'), (294, 'Haine'), (639, 'Dan Ni'), (3657, 'Michika'), (136, 'Camila Vital'), (1689, 'Martina'), (464, 'Andrea Renee'), (725, 'Brandy'), (1594, 'Fiona'), (33, 'Daphne'), (628, 'Jazzamay'), (184, 'Yujia'), (2355, 'Andrea'), (1527, 'Ilze'), (2061, 'Saray'), (72, 'Liniques'), (659, 'Jasmin'), (6547, 'Elena Teodora'), (700, 'Stefanie'), (210, 'Stefania'), (1817, 'Federica'), (596, 'Michele Alexandra'), (905, 'Joana'), (1848, 'Valeria'), (187, 'Chantelle'), (16816, 'Polina'), (464, 'Gaelle'), (907, 'Anna Katalina'), (2641, 'Saska'), (536, 'Elizabeta'), (464, 'Sari'), (3487, 'Pauline'), (2233, 'Steffi'), (13843, 'Irina Maria'), (497, 'Stefana'), (155, 'Alory Regina Elorriaga'), (715, 'Madeleine'), (43779, 'Elise'), (542, 'Kyra'), (703, 'Aida'), (64, 'Jelena'), (2703, 'Viktoria'), (2183, 'Laura'), (717, 'Xiaorong'), (2331, 'Stefanie'), (7087, 'Iva'), (1224, 'Mariana'), (238, 'Sonja'), (539, 'Hanna'), (5534, 'Vivian'), (1304, 'Francesca'), (200, 'Karolina'), (24, 'Jaimy Gayle'), (712, 'Gabriela'), (772, 'Kristina'), (5816, 'Anastasia'), (1088, 'Barbara'), (160, 'Dagmara'), (2258, 'Zuzanna'), (3051, 'Catherine'), (72, 'Carolin'), (75, 'Beatriz Magdalena'), (325, 'Marta'), (165, 'Claudia'), (677, 'Giada'), (1180, 'Miriana'), (3395, 'Valeria'), (2284, 'Jessica'), (889, 'Marie'), (3, 'Marijana'), (3027, 'Natalia'), (852, 'Steffi'), (320, 'Suellen'), (3470, 'Borislava'), (1696, 'Mayar'), (1174, 'Diana'), (919, 'Kanika'), (126, 'Apichaya'), (97, 'Laura'), (8900, 'Pei Chi'), (679, 'Chia Hsien'), (7975, 'Ching Wen'), (78, 'Ferny'), (4053, 'Cornelia'), (3519, 'Alexandra'), (45, 'Linda'), (129, 'Colomba'), (2094, 'Ivania'), (2133, 'Macarena'), (143, 'Se Hyun'), (249, 'Eva'), (4166, 'Audrey'), (3365, 'Lea'), (1023, 'Maria'), (36, 'Dominique'), (1270, 'Sarah Beth'), (243, 'Pippa'), (4673, 'Natasha'), (27, 'Vilma Y'), (1388, 'Maria Paulina'), (269, 'Paula Andrea'), (1744, 'Sri Vaishnavi'), (785, 'Giorgia'), (13150, 'Valeriya'), (15, 'Charlotte'), (867, 'Neda'), (522, 'Sharon Sanchana'), (582, 'Aleksandra'), (96, 'Smriti'), (1034, 'Sai Samhitha'), (206, 'Mariia'), (255, 'Vaniya'), (480, 'Anushka'), (4433, 'Julia'), (19092, 'Bernarda'), (5746, 'Cristina'), (8146, 'Nicoleta Catalina'), (659, 'Ioana'), (1432, 'Shelby'), (1142, 'Sara'), (640, 'Akvile'), (7539, 'Katie'), (163, 'Mafalda'), (504, 'Darya'), (85, 'Anna'), (1212, 'Charlotte'), (1186, 'Casey'), (84, 'Yukako'), (333, 'Julie'), (14865, 'Jasmine'), (158, 'Agustina Elena'), (26, 'Camila'), (614, 'Nikki'), (2046, 'Mandy'), (166, 'Isabella'), (115, 'Nina Isabella'), (63, 'Lena'), (1784, 'Jessica'), (410, 'Kelsey'), (905, 'Blair'), (432, 'Amanda'), (589, 'Patricia'), (761, 'Jainy'), (377, 'Theresa'), (677, 'Angeliki'), (2446, 'Eetee'), (644, 'Sara'), (2371, 'Ho Ching'), (7486, 'Cristiana'), (3, 'Chiara'), (20510, 'Jamie'), (646, 'Quinn'), (17750, 'Lina'), (2570, 'Vladyslava'), (215, 'Deria'), (378, 'Catherine'), (30, 'Daniela'), (10527, 'Marie'), (159, 'Karolina'), (364, 'Yulia'), (675, 'Daniela'), (261, 'Laura'), (976, 'Eudice Wong'), (877, 'Justine'), (282, 'Michelle'), (8608, 'Harriet'), (317, 'Sophie'), (910, 'Karoline'), (5051, 'Tayisiya'), (1098, 'Mia Nicole'), (581, 'Sybille'), (7027, 'Dea'), (173, 'Eugenie'), (3580, 'Deborah'), (4122, 'Jessika'), (40, 'Olaya'), (5818, 'Klaartje'), (2556, 'Natalia'), (1977, 'Katherine'), (3912, 'Deborah'), (12402, 'Tena'), (1624, 'Marlies'), (9600, 'Georgia'), (668, 'Charlotte'), (19735, 'Tamara'), (1517, 'Katharina'), (293, 'Sarah'), (2641, 'Gabriela'), (1897, 'Caroline'), (611, 'Jil Nora'), (206, 'Chiara'), (7996, 'Ayaka'), (187, 'Alejandra'), (1333, 'Nozomi'), (122, 'Hikari'), (78, 'Hazal'), (5222, 'Caroline'), (803, 'Rosalia'), (22, 'Georgina'), (392, 'Melis'), (5301, 'Mari'), (720, 'Ana'), (500, 'Ena'), (9573, 'Gabriela'), (7514, 'Dejana'), (942, 'Kerstin'), (19346, 'Nina'), (1858, 'Bojana'), (1043, 'Elena'), (78, 'Ines'), (59, 'Giulia'), (69, 'Esen'), (934, 'Lenka'), (2275, 'Sadafmoh'), (96, 'Violetta'), (72, 'Nastassia'), (1689, 'Eden'), (1002, 'Corina'), (1152, 'Bhuvana'), (48, 'Charlotte'), (93, 'Manya'), (553, 'Daniela'), (198, 'Louise'), (503, 'Eva'), (27, 'Sabina Elena'), (6904, 'Julia'), (5916, 'Naomi'), (66, 'Anna'), (18, 'Alena'), (39, 'Gulnaz'), (6729, 'Oleksandra'), (59, 'Yekaterina'), (3, 'Polina'), (24, 'Victoria'), (24, 'Lou'), (90, 'Elodie'), (552, 'Manon'), (173, 'Leslie'), (185, 'Maria Agustina'), (841, 'Helen'), (22, 'Nikita'), (129, 'Juliana Rocha'), (4980, 'Josephine'), (613, 'Wendy Qi Wen'), (164, 'Rosalie'), (2400, 'Ulyana'), (353, 'Daria'), (4708, 'Sandra'), (148, 'Oana'), (101685, 'Jelena'), (30, 'Erika'), (441, 'Camille'), (525, 'Mathilde'), (1550, 'Carla'), (15077, 'Fiona'), (4093, 'Jacqueline'), (1228, 'Jennifer'), (1535, 'Nagi'), (201, 'Mihoki'), (5944, 'Harmony'), (179, 'Viktoriya'), (3856, 'Helene'), (1588, 'Nina'), (997, 'Vladica'), (265, 'Martina'), (1295, 'Danielle'), (42, 'Wan Yi'), (235, 'Alessandra'), (18, 'Jamilya'), (211, 'Diana'), (139, 'Yuliya'), (24, 'Aleksandra'), (6, 'Madina'), (21, 'Julia Mansano'), (87, 'Leticia Garcia'), (1253, 'Ingrid'), (1026, 'Anna'), (288, 'Ailen'), (1367, 'Ana Victoria'), (24, 'Fernanda'), (50700, 'Louisa'), (1864, 'Tornado Alicia'), (284, 'Madison'), (2280, 'Kajsa'), (4294, 'Oana Georgeta'), (232, 'Elke'), (13329, 'Paula'), (2421, 'Ana Bianca'), (159, 'Amrita'), (467, 'Simran Kaur'), (6, 'Shreya'), (2634, 'Riya'), (137, 'Camila'), (1390, 'Paulina'), (59, 'Aleksandra'), (9427, 'Magdalena'), (22305, 'Rebecca'), (66, 'Deniz'), (705, 'Eva'), (6573, 'Pernilla'), (925, 'Karolina'), (16496, 'Barbora'), (82902, 'Katerina'), (59671, 'Nao'), (179, 'Polina'), (5416, 'Jaqueline Adina'), (9634, 'Shilin'), (83, 'Akiho'), (2127, 'Szabina'), (3682, 'Nicole'), (54, 'Kim'), (336, 'Sofico'), (200, 'Melissa'), (711, 'Aleksandra'), (30, 'Ekaterina'), (286, 'Alessia'), (23892, 'Ivana'), (1798, 'Pia'), (436, 'Olena'), (79, 'Lauren'), (562, 'Alexandra'), (519, 'Laura'), (1188, 'Patcharin'), (8, 'Margaux'), (60, 'Sandra'), (922, 'Anastasiya'), (1019, 'Anna'), (3029, 'Emina'), (60678, 'Naomi'), (456, 'Nicole'), (1967, 'Julia'), (292, 'Ina'), (766, 'Beatrice'), (703, 'Erika'), (2526, 'Yana'), (324, 'Alexa'), (1028, 'Monique'), (21685, 'Francoise'), (71, 'Aldana'), (24, 'Luciana'), (54, 'Anke'), (2274, 'Daria'), (147, 'Chiara'), (113, 'Deborah'), (1822, 'Luisa Marie'), (7687, 'Julia'), (7772, 'Elena Gabriela'), (1394, 'Martina'), (2042, 'Chiara'), (267, 'Darya'), (2591, 'Anastasiya'), (1063, 'Hongrui'), (242, 'You Na'), (390, 'Maxine'), (735, 'Katie'), (126, 'Eleonore'), (17967, 'Anhelina'), (3633, 'Haruka'), (9036, 'Kyoka'), (228, 'Rafaela'), (65, 'Emma Christine'), (381, 'Maria'), (13368, 'Katerina'), (921, 'Jessica'), (16968, 'Anastasiya'), (449, 'Dominika'), (118, 'Emmanuelle'), (1153, 'Ana Paula'), (2708, 'Maria Fernanda'), (71, 'Vishesh'), (13911, 'Victoria'), (2221, 'Angelina'), (11623, 'Lizette'), (1089, 'Samantha'), (6219, 'Priscilla'), (4501, 'Olivia'), (877, 'Michelle'), (499, 'Chiara'), (6824, 'Alice'), (1235, 'Maia'), (576, 'Kaitlyn'), (164, 'Donika'), (1297, 'Gloria'), (1236, 'Andreea'), (2369, 'Aliona'), (441, 'Jacqueline'), (1947, 'Barbara'), (45, 'Talya'), (384, 'Valeria'), (289, 'Alona'), (63, 'Anastasija'), (1534, 'Martina'), (4093, 'Julieta Lara'), (480, 'Eliza'), (490, 'Yana'), (466, 'Aleksandra'), (431, 'Teodora'), (143, 'Gebriela'), (1049, 'Vivian'), (209, 'Parris'), (2691, 'Zoe'), (310, 'Gabriela'), (88510, 'Ana'), (114, 'Nicole'), (980, 'Ariadna'), (625, 'Ksenija'), (1960, 'Lilla'), (978, 'Emmanuelle'), (162, 'Muge'), (50, 'Ege'), (1142, 'Ilka'), (1214, 'Jasmin'), (1635, 'Ksenia'), (2447, 'Nina'), (798, 'Natsumi'), (90, 'Angelina'), (39, 'Chanikarn'), (30, 'Marija'), (4619, 'Adrijana'), (861, 'Janneke'), (406, 'Anastasiya'), (148, 'Sarai Delfina'), (134, 'Sneha'), (45, 'Victoria'), (30786, 'Natalia'), (291, 'Ivanka'), (554, 'Valeriya'), (2738, 'Dhruthi'), (142, 'Nelise'), (291, 'Vanja'), (391, 'Jessica'), (107, 'Caitlin'), (4196, 'Yan'), (682, 'Yuenu'), (403, 'Kwan Yau'), (7755, 'Fang Ying'), (531, 'Si Qi'), (256, 'Veronika'), (43, 'Emilia'), (130, 'Paulina'), (6525, 'Freya'), (2605, 'Katharina'), (688, 'Sinead'), (236, 'Shiran'), (33, 'Nataliya'), (5562, 'Anastasia'), (887, 'Amelie'), (226, 'Mariaryeni'), (286, 'Lesedi Sheya'), (36, 'Justina'), (147, 'Paige Mary'), (318, 'Anais'), (5055, 'Petra'), (8676, 'Ting Jr'), (0, 'Damilola'), (87, 'Brittany'), (253, 'Megan'), (13978, 'Jil Belen'), (1646, 'Sara'), (15969, 'Allie'), (5975, 'Maria'), (7190, 'Olga'), (241, 'Pamela'), (104, 'Elizaveta'), (20650, 'Jana'), (12858, 'Sofia'), (490, 'Adeliya'), (133, 'Camille'), (149, 'Louise'), (2249, 'Theo'), (1069, 'Maria'), (4941, 'Ao'), (410, 'Karina Kristina'), (1838, 'Maria Jose'), (395, 'Mahitha'), (2634, 'Risa'), (407, 'Megumi'), (3471, 'Iryna'), (382, 'Oyku'), (71, 'Yasmyn'), (251, 'Kristyna'), (1713, 'Kateryna'), (69370, 'Tatjana'), (3018, 'Irina'), (3, 'Hana'), (57, 'Tatiana'), (373, 'Anna'), (449, 'Ksenia'), (1054, 'Sandra'), (97, 'Lisa'), (711, 'Jelena'), (1676, 'Emily'), (5394, 'Gabriella'), (1373, 'Luisa'), (12, 'Damini'), (7751, 'Jessica'), (497, 'Anna'), (114, 'Yana'), (7209, 'Melanie'), (12486, 'Marie'), (87, 'Zaineb'), (973, 'Rita'), (1828, 'Yukun'), (541, 'Tina'), (192, 'Vera'), (28, 'Eleni'), (15935, 'Dalma'), (85, 'Ahlam'), (110, 'Agne'), (153, 'Martha'), (2135, 'Alexa'), (998, 'Yukina'), (2434, 'Maddison'), (384, 'Marie'), (1924, 'Alexandra'), (7874, 'Usue Maitane'), (8040, 'Ellie'), (239, 'Jade'), (343, 'Sung Hee'), (63, 'Evgeniya'), (95, 'Ivana'), (3, 'Silvia'), (3113, 'Camilla'), (96, 'Cecilia'), (107, 'Sandra'), (2271, 'Lisa'), (50, 'Costanza'), (263, 'Marta'), (3133, 'Irene'), (15, 'Chaoyi'), (2605, 'Cristina'), (88, 'Maja'), (2231, 'Fanny'), (2344, 'Ines'), (75, 'Sean'), (225, 'May'), (296, 'Maria Del Rosario'), (92, 'Aina'), (4060, 'Mariam'), (1235, 'Anastasia Evgenyevna'), (21, 'Ana Luisa'), (907, 'Constanza'), (57, 'Alexia'), (12, 'Maia A'), (821, 'Eva'), (1016, 'Peggy'), (2166, 'Zhanlan'), (52, 'En Pei'), (706, 'Thai Sa Grana'), (185, 'Erika'), (330, 'Karyn'), (30, 'Damira'), (219, 'Marina'), (150, 'Dajana'), (7444, 'Ayla'), (838, 'Amy'), (966, 'Yeong Won'), (452, 'Yu Jin'), (138, 'Maurien'), (4258, 'Raluca Georgiana'), (1365, 'Andreea Amalia'), (74, 'Iulia Maria'), (24, 'Emilija'), (1101, 'Katarina'), (96, 'Sofia'), (2864, 'Gozal'), (2105, 'Petra'), (772, 'Yuanyi'), (1401, 'Aiko'), (221, 'Inger'), (1210, 'Marie'), (653, 'Mary'), (124, 'Cristina'), (33, 'Alisa'), (6, 'Muazzez'), (879, 'Wushuang'), (1034, 'Verena'), (934, 'Plobrung'), (209, 'Magdalena'), (276, 'Chompoothip'), (2034, 'Qiu Yu'), (155, 'Teodora'), (1057, 'Rebeka'), (1424, 'Alba'), (44, 'Federica Joe'), (1546, 'Ylena'), (843, 'Tamachan'), (98, 'Nicole'), (219, 'Barbara'), (337, 'Karolina'), (24, 'Hollie'), (882, 'Eliessa'), (50, 'Elena'), (1917, 'Magali'), (134, 'Nonna'), (209, 'Angela'), (209, 'Ana'), (3165, 'Ronit'), (555, 'Kristina N'), (266, 'Ekaterina'), (206, 'Emma'), (236, 'Anna'), (283, 'Nina'), (484, 'Antonina'), (1598, 'Barbara'), (107, 'Lena'), (336, 'Rosie'), (8162, 'Renata'), (2487, 'Britt'), (6168, 'Greetje'), (548, 'Morgane'), (286, 'Elina'), (111, 'Maria'), (359, 'Frances'), (668, 'Yuriko'), (1622, 'Clemence'), (63, 'Milica'), (3131, 'Nina'), (65, 'Tamara'), (3317, 'Bianca'), (310, 'Veronica'), (658, 'Ekaterina'), (1082, 'Nora'), (332, 'Tereza'), (90, 'Nikola'), (2967, 'Anastasia'), (1214, 'Pranjala'), (414, 'Jin Ju'), (3783, 'Ying'), (1261, 'Dabin'), (2243, 'Hanna'), (320, 'Sabina'), (209, 'Margaux'), (100, 'Sara'), (537, 'Natasha'), (96, 'Minami'), (796, 'Ines'), (456, 'Lamis'), (899, 'Yulia'), (258, 'Sandra'), (127, 'Elisabeth'), (48, 'Yulia'), (338, 'Valentina'), (42, 'Tamara'), (377, 'Ipek'), (406, 'Inci'), (194, 'Irina'), (90, 'Natalie'), (142, 'Nikola'), (2221, 'Vendula'), (1832, 'Petia'), (1923, 'Dasha'), (9, 'Elizabeth'), (509, 'Adriana'), (5387, 'Raveena'), (1905, 'Amina'), (22, 'Petra'), (1243, 'Natalija'), (42, 'Milagros'), (1726, 'Chiraz'), (4831, 'Kimberly'), (1213, 'Bianka'), (991, 'Masa'), (1085, 'Vasilisa'), (271, 'Katarina'), (281, 'Laura D'), (248, 'Sofia'), (218, 'Yuliana'), (66, 'Diana'), (45, 'Idia'), (179, 'Weronika Jasmina'), (2390, 'Nicole'), (7073, 'Katharina'), (86829, 'Darya'), (48, 'Mercedes'), (141, 'Vera'), (10538, 'Karolina'), (12, 'Caroline'), (576, 'Guillermina'), (44, 'Ekaterina'), (1013, 'Luca'), (4746, 'Rebeka'), (4277, 'Kristina'), (120, 'Anastasia'), (97, 'Melany Solange'), (142, 'Jasmine Amber'), (522, 'Julia'), (2783, 'Magdalena'), (13506, 'Viktoria'), (795, 'Federica'), (2642, 'Anastasiya'), (40, 'Eva'), (414, 'Margot'), (230, 'Natalia'), (393, 'Valeria'), (416, 'Anna'), (4517, 'Anastasia'), (1464, 'Veronica'), (354, 'Anastasia'), (438, 'Victoria'), (290, 'Alicia'), (1312, 'Seone'), (108, 'Sofia'), (344, 'Simona'), (550, 'Noelia'), (778, 'Marta Huqi'), (9116, 'Tessah'), (4305, 'Margot'), (40, 'Ralina'), (2820, 'Snehadevi S'), (102, 'Man Ying Maggie'), (476, 'Julie'), (36, 'Angela'), (387, 'Verena'), (3748, 'Sara'), (323, 'Julia'), (1196, 'Lena'), (308, 'Alice'), (37, 'Vinciane'), (62, 'Valeriya'), (24, 'Ana'), (2237, 'Michaela'), (323, 'Ena'), (45884, 'Catherine Cartan'), (1019, 'Lisa'), (1375, 'Jaeda'), (325, 'Ksenia'), (281, 'Yuan'), (3187, 'Bunyawi'), (2927, 'Mizuno'), (107, 'Mila'), (33, 'Alina'), (1553, 'Jiahui'), (298, 'Kseniia'), (3, 'Alisa'), (3863, 'Tereza'), (472, 'Erica'), (605, 'Andie K'), (152, 'Lucie'), (191, 'Alexandria'), (716, 'Tatiana'), (8066, 'Vera'), (600, 'Kelly'), (172, 'Ines'), (12883, 'Sherazad'), (197, 'Karin'), (688, 'Mallaurie'), (441, 'Eleonore'), (2439, 'Sara'), (159, 'Valentine'), (465, 'Karolayne'), (406, 'Julia'), (118, 'Huijie'), (4535, 'Xu Liu'), (111, 'Shangqing'), (238, 'Maria'), (515, 'Katya'), (5557, 'Marta'), (198, 'Shakhnoza'), (18, 'Terri'), (117, 'Doga Selen'), (193, 'Natalie'), (39, 'Arthi'), (84, 'Daniela'), (143, 'Vera'), (1380, 'Yixuan'), (9498, 'Xinyu'), (4477, 'Anna'), (59, 'Maria'), (18, 'Alexis'), (984, 'Rianna'), (272, 'Mirjam'), (70, 'Savannah'), (219, 'Agata Jadwiga'), (467, 'Ida'), (169, 'Lidia'), (376, 'Estela'), (12, 'Mouna'), (7179, 'Caroline'), (2800, 'Sophie'), (159, 'Andrina'), (1002, 'Lucia'), (2070, 'Manca'), (15450, 'Tamara'), (45, 'Yuval'), (117, 'Shir'), (272, 'Maya'), (27, 'Sarlota'), (3, 'Phenomena'), (31, 'Alina'), (32, 'Yarden'), (1458, 'Miriam Bianca'), (227, 'Ioana'), (9, 'Warona'), (1317, 'Valeriya'), (1873, 'Haruna'), (2850, 'Berfu'), (69, 'Greta'), (4, 'Yulia'), (762, 'Anastasia'), (170, 'Polina'), (494, 'Andrea'), (306, 'Lea'), (45, 'Jessica'), (701, 'Komola'), (36, 'Petra'), (2191, 'Yuki Kristina'), (2539, 'Chihiro'), (9029, 'Fanny'), (140, 'Anastasia'), (19446, 'Aryna'), (1869, 'Ekaterina'), (320, 'Natalie'), (60, 'Paula'), (69, 'Lauren'), (2218, 'Ingrid'), (121, 'Alexandra'), (167, 'Farah'), (149, 'Dina'), (437, 'Maria'), (571, 'Ayan'), (24, 'Pei Hsuan'), (511, 'I Hsuan'), (1589, 'Lucrezia'), (178, 'Giorgia'), (468, 'Gabriela Nicole'), (948, 'Oana'), (1848, 'Georgia Andreea'), (296, 'Jelena'), (128, 'Jovana'), (156, 'Maria Lourdes'), (16, 'Agustina'), (68, 'Margot'), (1277, 'Sang Hee'), (4612, 'Jia Qi'), (471, 'Anastasia'), (1187, 'Ludmilla'), (443, 'Arina'), (144, 'Anastasiya'), (5057, 'Xiaodi'), (248, 'Andreea'), (641, 'Anna'), (377, 'Lusine'), (559, 'Yuqi'), (3594, 'Sunam'), (4906, 'Katherine'), (1453, 'Ylona Georgiana'), (301, 'Marta'), (3193, 'Karman'), (60, 'Tamar'), (1283, 'Jessica'), (2127, 'Charlotte'), (15, 'Joanne'), (146, 'Natalia'), (1864, 'Dana'), (48, 'Georgiana'), (103, 'Valerie'), (110, 'Camila'), (465, 'Jana'), (75, 'Sabrina'), (3002, 'Jiaxi'), (723, 'Isabelle'), (101, 'Anca'), (2781, 'Ashley'), (324, 'Suzuho'), (458, 'Angelina'), (1086, 'Federica'), (808, 'Barbora'), (54, 'Alena'), (238, 'Gyulnara'), (1977, 'Mirabelle'), (39, 'Karolina'), (966, 'Margarita'), (1440, 'Emilie'), (58, 'Sara'), (8, 'Daria'), (96, 'Sophia'), (780, 'Sabastiani'), (842, 'Evgeniya'), (906, 'Satsuki'), (655, 'Aleksandra'), (1446, 'Julyette Maria Josephine'), (2068, 'Aleksandra'), (487, 'Anna'), (1626, 'Mira'), (15, 'Moulika'), (2403, 'Ioana Diana'), (72, 'Janja'), (502, 'Susan'), (72, 'Carolyn'), (355, 'Jodie Anna'), (525, 'Maegan'), (776, 'Karola Patricia'), (230, 'Martina'), (8587, 'Sofya'), (452, 'Valeriya'), (71, 'Ekaterina'), (221, 'Victoria'), (653, 'Kennedy'), (395, 'Iana'), (363, 'Oliwia'), (63, 'Francesca'), (284, 'Meritxell'), (353, 'Stephanie'), (38, 'Petra'), (528, 'Tereza'), (272, 'Kimika'), (28, 'Martina'), (3254, 'Abigail'), (4244, 'Claire'), (64, 'Jada'), (841, 'Dalila'), (123, 'Basak'), (78, 'Ema'), (81, 'Clara'), (269, 'Astrid Wanja'), (316, 'Malene'), (1250, 'Eva'), (13517, 'Anna'), (179, 'Claudia'), (5, 'Chelsea'), (18286, 'Marketa'), (2513, 'Miriam'), (199, 'Nika'), (780, 'Anna'), (45, 'Dariya'), (97, 'Laura Sofia'), (53, 'Kim'), (2378, 'Shanshan'), (697, 'Linnea'), (836, 'Anhzelika'), (51, 'Akiko'), (487, 'Jessica'), (1810, 'Elena'), (427, 'Mihika'), (363, 'Wiktoria'), (7, 'Zhibek'), (280, 'Polina'), (593, 'Sofya'), (33, 'Karina'), (622, 'Anna'), (87, 'Siyu'), (366, 'Yijia'), (33, 'Marcelina'), (1936, 'Karine'), (405, 'Eleonora'), (9227, 'Destanee'), (15218, 'Anna'), (440, 'Naima'), (120, 'Elena'), (105, 'Kristina'), (51, 'Andra Maria'), (419, 'Dominique'), (5619, 'Dayana'), (13573, 'Kayla'), (181, 'Pei Ju'), (7, 'Lara'), (244, 'Dalila'), (5045, 'Katie'), (683, 'Qianhui'), (9, 'Yu Tong'), (1207, 'Xinyu'), (72, 'Mi Zhuoma'), (90, 'Michela'), (148, 'Schena'), (109, 'Dorien'), (716, 'Siqi'), (99, 'Zhima'), (64, 'Reina'), (289, 'Carson'), (780, 'Maria'), (1236, 'Kylie'), (1002, 'Jenny'), (90, 'Viktoriia'), (158, 'Polina'), (456, 'Laura'), (5007, 'Jaimee'), (491, 'Emma'), (453, 'Anna Maria'), (171, 'Melissa Ishuan'), (142, 'Alexandra'), (403, 'Natalie'), (277, 'Chengyiyi'), (304, 'Lulu'), (36, 'Eugenia'), (82, 'Daniela'), (142, 'Shelly'), (175, 'Lina'), (3811, 'Olesya'), (106, 'Victoria Ariadna'), (702, 'Zeel'), (135, 'Lizaveta'), (199, 'Aneta'), (351, 'Claudia'), (144, 'Seira'), (30, 'Zhou'), (385, 'Alana'), (287, 'Sabina'), (408, 'Veronika'), (160, 'Anda'), (133, 'Nicole'), (15, 'Mihaela Lorena'), (185, 'Anna'), (1176, 'Kaja'), (68, 'Aastha'), (310, 'Abigail'), (38, 'Cameron'), (363, 'Katharine'), (181, 'Elina'), (1243, 'Daria'), (25, 'Maria'), (99, 'Diana Maria'), (279, 'Nermeen'), (377, 'Mathilde'), (72, 'Daniela'), (275, 'Yanni'), (105, 'Shou Na'), (4643, 'Hanyu'), (672, 'Leonie'), (18, 'Constanze'), (121, 'Zhuoma'), (254, 'Ana'), (57, 'Alina'), (4598, 'Katarina'), (224, 'Kristina'), (48, 'Karolina'), (354, 'Desirae'), (987, 'Emiliana'), (95, 'Sing Le'), (73, 'Yang'), (631, 'Margaux'), (908, 'Olga'), (98, 'Hortencia'), (778, 'Nina'), (77, 'Lucia'), (7, 'Axana'), (312, 'Blanca'), (9216, 'Bianca'), (4811, 'Francesca'), (131, 'Ksenia'), (267, 'Eva'), (180, 'Miranda'), (618, 'Vivian'), (15, 'Sandra'), (3, 'Judith'), (333, 'Tijana'), (17, 'Lucia'), (64, 'Hana'), (123, 'Boba'), (72, 'Vanessa'), (704, 'Kassandra'), (72, 'Abir'), (329, 'Caroline'), (77, 'Vicky'), (534, 'Patrycja'), (80, 'Nikola'), (940, 'Emily'), (153, 'Olivia'), (92, 'Alessia'), (1145, 'Monika'), (264, 'Cindy'), (87, 'Alicia'), (74, 'Zinovia'), (168, 'Denise Antonela'), (388, 'Marina'), (27, 'Carlota'), (236, 'Emily'), (2061, 'Momoko'), (40, 'Lorraine M'), (89, 'Fiona'), (344, 'Suzan'), (443, 'Ramu'), (381, 'Lisa Marie'), (302, 'Laura'), (128, 'Livia'), (40, 'Johana'), (9, 'Adva'), (100, 'Anna Maria'), (439, 'Laura'), (5173, 'Ayano'), (17, 'Irina'), (972, 'Maryna'), (28, 'Roosh'), (687, 'Guiomar'), (169, 'Selin'), (120, 'Hsin Yuan'), (30, 'Kateryna'), (12, 'Anastasiia'), (279, 'Yasmine'), (25, 'Franziska'), (15, 'Elizabeth'), (294, 'Kei'), (44, 'Nicole'), (6, 'Lara'), (324, 'Kelia'), (664, 'Phillis'), (33, 'Anne Sophie'), (821, 'Michaela'), (154, 'Arlinda'), (118, 'Paula'), (215, 'Lucia'), (134, 'Dewi'), (122, 'Anna'), (1352, 'Xiaoxi'), (3077, 'Anastasia'), (168, 'Rebeca'), (112, 'Daria'), (63, 'Ekaterina'), (19, 'Sara'), (171, 'Ana'), (92, 'Mayar'), (526, 'Lea'), (154, 'Mahak'), (440, 'Oleksandra'), (354, 'Sarah'), (9, 'Salma'), (513, 'Emmanuelle'), (236, 'Emma'), (148, 'Maria Camila'), (1751, 'Alexandra'), (54, 'Eden'), (207, 'Lauryn'), (111, 'Rosa'), (237, 'Kaylah'), (452, 'Alexandra'), (336, 'Shuyue'), (136, 'Yidi'), (305, 'Gabriella'), (1225, 'Erina'), (3, 'Vitalia'), (39, 'Laylo'), (52, 'Ilay'), (416, 'Kaitlin'), (104, 'Alexandra'), (63, 'Jule'), (476, 'Simona'), (540, 'Bojana'), (68, 'Adrienn'), (1446, 'Panna'), (57, 'Salma'), (286, 'Julita'), (188, 'Francesca'), (597, 'Shuo'), (110, 'Alexa'), (281, 'Ye Xin'), (52, 'Jia'), (116, 'Nina'), (27, 'Yasmina'), (1054, 'Suzy'), (316, 'Sasa'), (120, 'Stefania'), (230, 'Katarzyna'), (926, 'Valeriya'), (62, 'Ann'), (849, 'Mai'), (90, 'Whitney'), (7, 'Julia'), (392, 'Draginja'), (318, 'Yuliya'), (315, 'Xiyu'), (100, 'Jiatian'), (97, 'Katyarina'), (15, 'Luna'), (15, 'Sunae'), (505, 'Yuki'), (3, 'Svenja'), (66, 'Angelica'), (157, 'Francisca'), (417, 'Meiling'), (151, 'Tingting'), (103, 'Ella'), (35, 'Anna'), (686, 'Ashley'), (403, 'Ran'), (979, 'Maja'), (22, 'Caty'), (713, 'Michaela'), (6, 'Loudmilla'), (83, 'Maileen'), (742, 'Akilah'), (187, 'Xin Yu'), (91, 'Vlada'), (911, 'Romy'), (3, 'Alessia'), (826, 'Marta'), (33, 'Anna'), (164, 'Lara'), (4578, 'Amanda'), (3, 'Himari'), (235, 'Ayumi'), (96, 'Meiqi'), (40, 'Mei Xu'), (175, 'Karolina'), (3, 'Aneta'), (3, 'Ana'), (108, 'Sohyun'), (39, 'Adrienn'), (161, 'Ramya'), (99, 'Anne Marie'), (3, 'Yekaterina'), (76, 'Giulia'), (35, 'Clara'), (156, 'Yulia'), (20, 'Irina'), (52, 'Lucia'), (310, 'Ayumi'), (36, 'Ange Oby'), (440, 'Genevieve'), (41, 'Eva Marie'), (916, 'Iga'), (13, 'Giorgie'), (22, 'Layne'), (116, 'Daria'), (81, 'Zoe'), (96, 'Jiaxue'), (60, 'Laura'), (85, 'Kariann'), (63, 'Caroline'), (15, 'Mananchaya'), (21, 'Zeynep  Sena'), (12, 'Brienne'), (15, 'Jiakang'), (57, 'Varvara'), (21, 'Betina'), (92, 'Viktoriya'), (28, 'Eva'), (84, 'Taylor'), (57, 'Margaux'), (32, 'Molly'), (48, 'Leylah Annie'), (39, 'Ellie'), (32, 'Moyuka'), (21, 'Nina'), (30, 'Brindtha'), (42, 'Naomi'), (101, 'Merel'), (3, 'Arina Gabriela'), (72, 'Helene'), (9, 'Kristina')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the course names of the courses which ever have students enrolled in?' in SQLite? I currently have 'SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id', which outputs [('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights leaving from Aberdeen.' in SQLite? I currently have 'SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the ids of high schoolers who have friends and are also liked by someone else.' in SQLite? I currently have 'SELECT DISTINCT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id', which outputs [(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the grade for the high schooler named Kyle.' in SQLite? I currently have 'SELECT grade FROM Highschooler WHERE name = 'Kyle'', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the record company shared by the most number of orchestras.' in SQLite? I currently have 'SELECT Record_Company, COUNT(*) as count FROM orchestra GROUP BY Record_Company ORDER BY count DESC LIMIT 1', which outputs [('Decca Records', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and descriptions of all the sections?' in SQLite? I currently have 'SELECT section_name, section_description FROM Sections', which outputs [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT section_name ,  section_description FROM Sections", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of country that has the shortest life expectancy in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE LifeExpectancy = (SELECT min(LifeExpectancy) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'', which outputs [('Afghanistan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of likes for each student id.' in SQLite? I currently have 'SELECT count(T1.liked_id), T1.student_id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id', which outputs [(1, 1025), (1, 1247), (1, 1316), (1, 1501), (1, 1641), (1, 1689), (1, 1709), (1, 1782), (1, 1911), (1, 1934)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first name and last name of the professionals who have done treatment with cost below average?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)', which outputs [('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', \"O'Reilly\"), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Monte', 'Kshlerin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of countries in Asia.' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE Continent = 'Asia'', which outputs [(51,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the production code and channel of the most recently aired cartoon .' in SQLite? I currently have 'SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1', which outputs [(102.0, '701')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many languages are spoken in Aruba?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba'', which outputs [(4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of cities in Europe for which English is not the official language?' in SQLite? I currently have 'SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  'Europe' AND T3.Language  =  'English' AND T3.IsOfficial  =  'T')', which outputs [('Tirana',), ('Andorra la Vella',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tallinn',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Tórshavn',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Monte-Carlo',), ('Monaco-Ville',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Skopje',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Zeleznogorsk',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Longyearbyen',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Città del Vaticano',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the record companies shared by orchestras founded before 2003 and after 2003.' in SQLite? I currently have 'SELECT DISTINCT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)', which outputs [('Decca Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of  airports.' in SQLite? I currently have 'SELECT COUNT(*) FROM airports', which outputs [(100,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM AIRPORTS", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all high schoolers in grade 10?' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE grade = 10', which outputs [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM Highschooler WHERE grade  =  10", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each semester, what is the name and id of the one with the most students registered?' in SQLite? I currently have 'SELECT T1.semester_id, T1.semester_name, COUNT(T2.student_id) AS num_students FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY num_students DESC LIMIT 1', which outputs [(2, 'summer 2010', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average attendance of shows?' in SQLite? I currently have 'SELECT AVG(Attendance) FROM show', which outputs [(1326.4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(Attendance) FROM SHOW", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'how many cars were produced in 1980?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Year = 1980', which outputs [(29,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of flights landing in the city of Aberdeen or Abilene.' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many people are there of each nationality?' in SQLite? I currently have 'SELECT count(*) ,  Nationality FROM people GROUP BY Nationality', which outputs [(1, 'Bulgaria'), (6, 'Russia')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have flights from airport 'CVO' but not from 'APG'.' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport  =  'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport  =  'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the country in Asia with the lowest life expectancy.' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1', which outputs [('Afghanistan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many people live in countries that do not speak English?' in SQLite? I currently have 'SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', which outputs [(5451331150,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of cities that have a population between 160000 and 900000 .' in SQLite? I currently have 'SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000', which outputs [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select name from city where population between 160000 and 900000", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the last transcript release date?' in SQLite? I currently have 'SELECT MAX(transcript_date) FROM Transcripts', which outputs [('2013-06-30 13:01:40',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the episode for the TV series named \"Sky Radio\"?' in SQLite? I currently have 'SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'', which outputs [('A Love of a Lifetime',), ('Keepers',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cars with more than 4 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4', which outputs [(195,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names and surface areas of the 5 largest countries.' in SQLite? I currently have 'SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', which outputs [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most populace city that speaks English?' in SQLite? I currently have 'SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1', which outputs [('New York',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of paragraphs.' in SQLite? I currently have 'SELECT COUNT(*) FROM Paragraphs', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Paragraphs", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of the teacher for the math course.' in SQLite? I currently have 'SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players whose earnings is higher than 300000?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000', which outputs [('Aleksey Ostapenko',), ('Maksim Botin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id, template id and description for document named \"Robbin CV\"?' in SQLite? I currently have 'SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'', which outputs [(76, 20, 'y')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id and type code of the template that is used for the greatest number of documents.' in SQLite? I currently have 'SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code HAVING COUNT(*) = (     SELECT MAX(COUNT(*))     FROM Documents     GROUP BY Template_ID )', which outputs misuse of aggregate function COUNT(). If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of conductors that have conducted more than one orchestras.' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the courses they are arranged to teach.' in SQLite? I currently have 'SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID', which outputs [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total count of teachers?' in SQLite? I currently have 'SELECT COUNT(*) FROM teacher', which outputs [(7,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM teacher", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names and birth dates of players from the USA?' in SQLite? I currently have 'SELECT first_name, birth_date FROM players WHERE country_code = 'USA'', which outputs [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average earnings of poker players with height higher than 200?' in SQLite? I currently have 'SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200', which outputs [(309445.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of flights arriving at City \"Aberdeen\"?' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of flights departing from 'APG'.' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Sort employee names by their age in ascending order.' in SQLite? I currently have 'SELECT Name FROM employee ORDER BY Age ASC', which outputs [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM employee ORDER BY age", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average, minimum, and maximum age for all French singers?' in SQLite? I currently have 'SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'', which outputs [(34.5, 25, 43)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each citizenship, what is the maximum net worth?' in SQLite? I currently have 'SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship', which outputs [(17.0, 'Australia'), (17.4, 'Chile'), (30.0, 'France'), (14.3, 'Germany'), (28.8, 'United States')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What language is predominantly spoken in Aruba?' in SQLite? I currently have 'SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1', which outputs [('Papiamento',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries where either English or Dutch is the official language ?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'', which outputs [('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antigua and Barbuda',), ('Australia',), ('Belgium',), ('Belize',), ('Bermuda',), ('Barbados',), ('Canada',), ('Cocos (Keeling) Islands',), ('Christmas Island',), ('Cayman Islands',), ('Falkland Islands',), ('United Kingdom',), ('Gibraltar',), ('Guam',), ('Hong Kong',), ('Ireland',), ('Saint Kitts and Nevis',), ('Saint Lucia',), ('Lesotho',), ('Marshall Islands',), ('Malta',), ('Northern Mariana Islands',), ('Montserrat',), ('Norfolk Island',), ('Niue',), ('Netherlands',), ('Nauru',), ('New Zealand',), ('Palau',), ('Saint Helena',), ('Seychelles',), ('Turks and Caicos Islands',), ('Tokelau',), ('Tonga',), ('Tuvalu',), ('United States Minor Outlying Islands',), ('United States',), ('Saint Vincent and the Grenadines',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('Samoa',), ('South Africa',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of flights departing from City \"Aberdeen \"?' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of properties that are either houses or apartments with more than 1 room?' in SQLite? I currently have 'SELECT P.property_name FROM Properties AS P JOIN Ref_Property_Types AS RPT ON P.property_type_code = RPT.property_type_code WHERE (RPT.property_type_description = 'house' OR RPT.property_type_description = 'apartment') AND P.room_count > 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "database": "real_estate_properties"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of all makers with more than 3 models?' in SQLite? I currently have 'SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) > 3', which outputs [(4, 'gm'), (6, 'chrysler')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the abbreviation and country of the airline that has fewest number of flights?' in SQLite? I currently have 'SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)', which outputs [('UAL', 'USA'), ('USAir', 'USA'), ('Delta', 'USA'), ('Southwest', 'USA'), ('American', 'USA'), ('Northwest', 'USA'), ('Continental', 'USA'), ('JetBlue', 'USA'), ('Frontier', 'USA'), ('AirTran', 'USA'), ('Allegiant', 'USA'), ('Virgin', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which template type code has most number of templates?' in SQLite? I currently have 'SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1', which outputs [('PP',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors, ordered by age?' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Age', which outputs [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM conductor ORDER BY Age ASC", "database": "orchestra"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?' in SQLite? I currently have 'SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'', which outputs [(16615, 'Japan'), (608931827, 'Micronesia')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ranks of the three youngest winners across all matches?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age ASC LIMIT 3', which outputs [('Madison', 'Keys', 17), ('Madison', 'Keys', 24), ('Madison', 'Keys', 16)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which address holds the most number of students currently? List the address id and all lines.' in SQLite? I currently have 'SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses AS A WHERE A.address_id = (     SELECT S.current_address_id     FROM Students AS S     GROUP BY S.current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )', which outputs [(9, '0643 Muller Vista', 'Suite 383', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different degrees are offered?' in SQLite? I currently have 'SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of matches happened in each year.' in SQLite? I currently have 'SELECT count(*) ,  year FROM matches GROUP BY year', which outputs [(12, 2013), (158, 2016), (108, 2017)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of dogs of an age below the average.' in SQLite? I currently have 'SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the owner id, first name and last name of the owner who has the most dogs.' in SQLite? I currently have 'SELECT T2.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1', which outputs [(14, 'Rachelle', 'Funk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have departures from CVO but not from APG airports?' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List each charge type and its amount.' in SQLite? I currently have 'SELECT charge_type, charge_amount FROM Charges', which outputs [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT charge_type ,  charge_amount FROM Charges", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average age of the dogs who went through treatments.' in SQLite? I currently have 'SELECT avg(T1.age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', which outputs [(5.466666666666667,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car makers are there in france?' in SQLite? I currently have 'SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find id of the tv channels that from the countries where have more than two tv channels.' in SQLite? I currently have 'SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*) > 2)', which outputs [('700',), ('701',), ('703',), ('704',), ('705',), ('708',), ('713',), ('714',), ('715',), ('717',), ('719',), ('728',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all singer names in concerts in year 2014.' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'', which outputs [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Tribal King',), ('Rose White',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each language, list the number of TV Channels that use it.' in SQLite? I currently have 'SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language', which outputs [('English', 3), ('Italian', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is last date created of votes from the state 'CA'?' in SQLite? I currently have 'SELECT MAX(created) FROM VOTES WHERE state = 'CA'', which outputs [('2018-03-09 19:03:39',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'", "database": "voter_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which breed do the most dogs have? Give me the breed name.' in SQLite? I currently have 'SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(T2.breed_code) DESC LIMIT 1', which outputs [('Bulldog',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of singers whose citizenship is not \"France\".' in SQLite? I currently have 'SELECT Name FROM singer WHERE Citizenship != 'France'', which outputs [('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For a volvo model, how many cylinders does the version with least accelerate have?' in SQLite? I currently have 'SELECT T4.Cylinders FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'Volvo' ORDER BY T4.Accelerate ASC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?' in SQLite? I currently have 'SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000', which outputs [(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select distinct year from cars_data where weight between 3000 and 4000;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?' in SQLite? I currently have 'SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'', which outputs [('Justin Brown', 'France')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers ordered by ascending age?' in SQLite? I currently have 'SELECT Name FROM teacher ORDER BY Age ASC', which outputs [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM teacher ORDER BY Age ASC", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all document ids and the number of paragraphs in each document. Order by document id.' in SQLite? I currently have 'SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID', which outputs [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is average life expectancy in the countries where English is not the official language?' in SQLite? I currently have 'SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')', which outputs [(65.48270270270272,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the earnings of poker players in descending order.' in SQLite? I currently have 'SELECT Earnings FROM poker_player ORDER BY Earnings DESC', which outputs [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What other details can you tell me about students in reverse alphabetical order?' in SQLite? I currently have 'SELECT other_student_details FROM Students ORDER BY last_name DESC', which outputs [('assumenda',), ('quia',), ('omnis',), ('qui',), ('et',), ('nesciunt',), ('rerum',), ('non',), ('omnis',), ('dolorum',), ('facilis',), ('laborum',), ('atque',), ('autem',), ('voluptatem',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have a flight with destination airport AHD?' in SQLite? I currently have 'SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the names of loser and winner who played in the match with greatest number of minutes.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON (T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id) WHERE T2.minutes = (SELECT MAX(minutes) FROM matches) ORDER BY T2.minutes DESC LIMIT 2', which outputs [('Angelique', 'Kerber'), ('Petra', 'Kvitova')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many templates do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM Templates', which outputs [(20,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the package options and the name of the series for the TV Channel that supports high definition TV?' in SQLite? I currently have 'SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'', which outputs no such column: T2.series_name. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the codes of countries for which Spanish is the predominantly spoken language.' in SQLite? I currently have 'SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'', which outputs [('ARG',), ('BOL',), ('CHL',), ('COL',), ('CRI',), ('CUB',), ('DOM',), ('ECU',), ('ESP',), ('GTM',), ('HND',), ('MEX',), ('NIC',), ('PAN',), ('PER',), ('PRI',), ('PRY',), ('SLV',), ('URY',), ('VEN',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the phone number of the man with the first name Timmothy and the last name Ward?' in SQLite? I currently have 'SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'', which outputs [('(096)889-8954x524',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the ids corresponding to templates with the description 'Presentation'.' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'', which outputs [(6,), (7,), (10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of teachers who have not been arranged to teach courses.' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)', which outputs [('Joseph Huts',), ('John Deloor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What major is every student who does not own a cat as a pet, and also how old are they?' in SQLite? I currently have 'SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')', which outputs [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of pets for each student who has any pet and student id.' in SQLite? I currently have 'SELECT count(T1.PetID), T1.StuID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID', which outputs [(1, 1001), (2, 1002)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airline has abbreviation 'UAL'?' in SQLite? I currently have 'SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'', which outputs [('United Airlines',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of the 3 most populated countries.' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population DESC LIMIT 3', which outputs [('China',), ('India',), ('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the abbreviation of Airline \"JetBlue Airways\"?' in SQLite? I currently have 'SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'', which outputs [('JetBlue',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players, ordered ascending by the number of final tables they have made?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC', which outputs [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "database": "poker_player"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.' in SQLite? I currently have 'SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'', which outputs [('Sky Radio',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "database": "tvshow"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are  the different countries with singers above age 20?' in SQLite? I currently have 'SELECT DISTINCT Country FROM singer WHERE Age > 20', which outputs [('Netherlands',), ('United States',), ('France',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of students who both have friends and are liked?' in SQLite? I currently have 'SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id GROUP BY T1.student_id', which outputs [(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "database": "network_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name, date and result of each battle.' in SQLite? I currently have 'SELECT name, date, result FROM battle', which outputs [('Battle of Adrianople', '14 April 1205', 'Bulgarian victory'), ('Battle of Serres', 'June 1205', 'Bulgarian victory'), ('Battle of Rusion', '31 January 1206', 'Bulgarian victory'), ('Battle of Rodosto', 'February 1206', 'Bulgarian victory'), ('Battle of Messinopolis', '4 September 1207', 'Bulgarian victory'), ('Battle of Boruy', 'June 1205', 'Bulgarian victory'), ('Battle of Philippopolis', '31 June 1208', 'Latin victory'), ('Siege of Constantinople', '1235', 'Two Year Truce')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  date FROM battle", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of left handed winners who participated in the WTA Championships.' in SQLite? I currently have 'SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of countries with more than 50 players?' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50', which outputs [('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of employees and sort in ascending order of age.' in SQLite? I currently have 'SELECT Name FROM employee ORDER BY Age ASC', which outputs [('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM employee ORDER BY age", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.' in SQLite? I currently have 'SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1', which outputs [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the cities that have more than one employee under age 30.' in SQLite? I currently have 'SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1', which outputs [('Bath',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?' in SQLite? I currently have 'SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'', which outputs [('uboehm@example.org',), ('mekhi.little@example.org',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers who performed in a concert in 2014?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'', which outputs [('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Tribal King',), ('Rose White',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "database": "concert_singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Compute the average age of all the dogs.' in SQLite? I currently have 'SELECT AVG(age) FROM Dogs', which outputs [(5.066666666666666,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT avg(age) FROM Dogs", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the language that is used by the largest number of Asian nations?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1', which outputs [('Arabic',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.' in SQLite? I currently have 'SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000 INTERSECT SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the minimum and maximum number of products of all stores.' in SQLite? I currently have 'SELECT MIN(Number_products), MAX(Number_products) FROM shop', which outputs [(1600, 15000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "database": "employee_hire_evaluation"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum accelerate for all the different cylinders?' in SQLite? I currently have 'SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders', which outputs [(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show distinct names of singers that have songs with sales more than 300000.' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000', which outputs [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the airline with abbreviation 'UAL'.' in SQLite? I currently have 'SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'', which outputs [('United Airlines',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "database": "flight_2"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dogs went through any treatments?' in SQLite? I currently have 'SELECT count(DISTINCT dog_id) FROM Treatments', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(DISTINCT dog_id) FROM Treatments", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the description for the section named h?' in SQLite? I currently have 'SELECT section_description FROM Sections WHERE section_name = 'h'', which outputs [('et',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the semester which most student registered in? Show both the name and the id.' in SQLite? I currently have 'SELECT T2.semester_id, T2.semester_name, count(T1.student_id) as student_count FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id, T2.semester_name ORDER BY student_count DESC LIMIT 1', which outputs [(2, 'summer 2010', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the full names of all left handed players, in order of birth date?' in SQLite? I currently have 'SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date', which outputs [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different template type codes, and how many documents use each type?' in SQLite? I currently have 'SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code', which outputs [('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the cities whose population is between 160000 and 900000?' in SQLite? I currently have 'SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000', which outputs [('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "database": "world_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the maximum weight and type for each type of pet.' in SQLite? I currently have 'SELECT MAX(weight), PetType FROM Pets GROUP BY PetType', which outputs [(12.0, 'cat'), (13.4, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "database": "pets_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of countries with more than 2 car makers ?' in SQLite? I currently have 'SELECT count(T1.Id) ,  T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING count(*)  >  2', which outputs [(4, 1), (4, 2), (3, 3), (5, 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many ships ended up being 'Captured'?' in SQLite? I currently have 'SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'', which outputs [(4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "database": "battle_death"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the vote ids, phone numbers and states of all votes.' in SQLite? I currently have 'SELECT vote_id, phone_number, state FROM VOTES', which outputs [(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\\n')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT vote_id ,  phone_number ,  state FROM votes", "database": "voter_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers and how many courses do they teach?' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name', which outputs [('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the date and the operating professional's first name of each treatment?' in SQLite? I currently have 'SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id', which outputs [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List each owner's first name, last name, and the size of his for her dog.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code', which outputs [('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Nora', 'Haley', 'Medium'), ('Rachelle', 'Funk', 'Large'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Cindy', 'Schmitt', 'Large'), ('Orlando', 'Price', 'Medium'), ('Rolando', 'Prohaska', 'Small'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "database": "dog_kennels"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first and last name of all players who are left / L hand in the order of birth date.' in SQLite? I currently have 'SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date', which outputs [('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Annie', 'Sullivan'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Sabrina', 'Dos Reis'), ('Maria Sol', 'Carrasco'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Rita', 'Vilaca'), ('Zanmarie', 'Pienaar'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "database": "wta_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?' in SQLite? I currently have 'SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'', which outputs [('plymouth',), ('amc',), ('ford',), ('citroen',), ('ford',), ('buick',), ('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('plymouth',), ('chevrolet',), ('ford',), ('amc',), ('amc',), ('chevrolet',), ('pontiac',), ('ford',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('plymouth',), ('chevrolet',), ('amc',), ('ford',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('dodge',), ('saab',), ('toyota',), ('plymouth',), ('ford',), ('amc',), ('chevrolet',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('plymouth',), ('chevrolet',), ('mercury',), ('ford',), ('buick',), ('chevrolet',), ('ford',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('ford',), ('volkswagen',), ('amc',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('plymouth',), ('chevrolet',), ('ford',), ('amc',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('amc',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('volvo',), ('peugeot',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('buick',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('oldsmobile',), ('chevrolet',), ('ford',), ('ford',), ('plymouth',), ('amc',), ('buick',), ('mercury',), ('amc',), ('chevrolet',), ('buick',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('volvo',), ('saab',), ('peugeot',), ('volkswagen',), ('honda',), ('pontiac',), ('mercury',), ('ford',), ('amc',), ('dodge',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('peugeot',), ('oldsmobile',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('amc',), ('dodge',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('mercedes-benz',), ('honda',), ('renault',), ('subaru',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('peugeot',), ('saab',), ('volvo',), ('toyota',), ('datsun',), ('buick',), ('ford',), ('chrysler',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('amc',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('oldsmobile',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "database": "car_1"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the most common citizenship of singers.' in SQLite? I currently have 'SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1', which outputs [('United States', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "database": "singer"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show paragraph details for paragraph with text 'Korea ' .' in SQLite? I currently have 'SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'', which outputs [(7, 2394, 'Korea', None), (510442723, 2394, 'Korea', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "database": "cre_Doc_Template_Mgt"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the age and hometown of every teacher?' in SQLite? I currently have 'SELECT Age, Hometown FROM teacher', which outputs [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT Age ,  Hometown FROM teacher", "database": "course_teach"}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names and country codes for players who won both the WTA Championships and the Australian Open?' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  INTERSECT  SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'Australian Open'', which outputs [('Angelique', 'GER'), ('Serena', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}], "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "database": "wta_1"}

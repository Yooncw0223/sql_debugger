{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids of high school students who do not have friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'what is the name and nation of the singer who have a song having 'Hey' in its name?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of all cartoons directed by Ben Jones?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average age of the visitors whose membership level is not higher than 4?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the greatest accelerate?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which city has the most frequent destination airport?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of poker players sorted by their earnings descending.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the number of flights arriving in Aberdeen.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of different templates used for documents.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many friends does each student have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the birth years and citizenships of the singers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many unique languages are spoken in the world?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the title of all cartoons in alphabetical order.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the government form name and total population for each government form whose average life expectancy is longer than 72.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the language used least number of TV Channel. List language and number of TV Channel.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all countries and the number of singers in each country.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many car makers are there in each continents? List the continent name and the count.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What type of pet is the youngest animal, and how much does it weigh?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each continent, list its id, name, and how many countries it has?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the distinct states and create time of all votes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT state ,  created FROM votes\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the total number of tours for each ranking date.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airports do not have departing or arriving flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name and directors of all the cartoons that are ordered by air date?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the names of all winners who played in both 2013 and 2016.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the document id, template id, and description for the document with the name Robbin CV.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \\\"Robbin CV\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the singers whose birth years are either 1948 or 1949?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of owners who do not own any dogs at this moment.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of dogs that went through a treatment.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT dog_id) FROM Treatments\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the number of flights departing from Aberdeen.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many concerts are there in year 2014 or 2015?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of cartoons directed by each of the listed directors.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average number of staff working for the museums that were open before 2009.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which year had the most matches?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name of the shops that do not hire any employee.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of students who have no friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average and maximum age for each type of pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the maximum weight for each type of pet. List the maximum weight and pet type.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(weight) ,  petType FROM pets GROUP BY petType\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which country does Airline \"JetBlue Airways\" belong to?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of distinct name of losers.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of nations where both English and French are official languages?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the count of the car models produced in the United States?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which district has both stores with less than 3000 products and stores with more than 10000 products?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different first names and ages of the students who do have pets?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much does the youngest dog weigh?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the ship id and name that caused most total injuries?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of employees from each city?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  city FROM employee GROUP BY city\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted at more than one orchestra?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the mean GNP and total population of nations which are considered US territory.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the official language used in the country the name of whose head of state is Beatrix.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \\\"Beatrix\\\" AND T2.IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the type code of the template type that the most templates belong to.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids of the students who do not own cats as pets?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the maximum and minimum shares for performances that do not have the type \"Live final\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \\\"Live final\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many pets are owned by students that have an age greater than 20?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all paragraph ids and texts for the document with name 'Welcome to NY'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different winners both participated in the WTA Championships and were left handed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and ids of all countries with at least one car maker?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names of people whose nationality is not \"Russia\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the average attendance across all shows.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Attendance) FROM SHOW\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are all the possible breed type and size type combinations?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names and template ids for documents that contain the letter w in their description.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon of all the cards with 4 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List all song names by singers above the average age.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For model volvo, how many cylinders does the car with the least accelerate have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the template type code of the template used by document with the name \"Data base\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average weight of cars each year?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many pets have a greater weight than 10?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM pets WHERE weight  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are airlines that have flights arriving at airport 'AHD'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \\\"AHD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average transcript date?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find all airlines that have at least 10 flights.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are all of the episodes ordered by ratings?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many matches were played in each year?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the name of singers whose birth year is either 1948 or 1949?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of singers ordered by ascending net worth?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the high schooler who has the greatest number of friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many templates have template type code CV?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give me the description of the treatment type whose total cost is the lowest.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the template type description of the template type with the code AD.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are each owner's first name, last name, and the size of their dog?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average and maximum capacities for all stadiums ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(capacity) ,  max(capacity) from stadium\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of professionals who have ever treated dogs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the airport code and airport name corresonding to the city Anthony.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of orchestras that have CD or DVD as their record format.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the template type code of the template that is used by a document named Data base.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of flights into ATO.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of all of the high schooler Kyle's friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many likes does Kyle have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template type codes that are not used by any document.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show ids for all templates that are used by more than one document.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airlines have at least 10 flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many players are from each country?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many airlines do we have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the document name and template id for document with description with the letter 'w' in it?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the names of conductors in ascending order of age.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Age ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the name, year of independence, and surface area of the country that has the lowest population.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of templates.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the id of the pet owned by the student whose last name is 'Smith'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and areas of countries with the top 5 largest area?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the codes of template types that are not used for any document?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the most commmon hometowns for teachers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the city and country for the Alton airport.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the name of teachers aged either 32 or 33?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the age and hometown of teachers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Age ,  Hometown FROM teacher\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many likes correspond to each student id?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which regions speak Dutch or English?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first names of owners living in Virginia and the names of dogs they own.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List top 3 highest Rating  TV series. List the TV series's Episode and Rating.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the series that has the episode \"A Love of a Lifetime\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the name and tonnage ordered by in descending alphaetical order for the names.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  tonnage FROM ship ORDER BY name DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many concerts occurred in 2014 or 2015?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the nationality that is most common across all people.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of distinct continents where Chinese is spoken?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What region does Angola belong to and what is its population?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights landing at APG.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \\\"APG\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find all airlines that have fewer than 200 flights.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the number of different series names and contents in the TV Channel table.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List singer names and number of concerts for each singer.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first name and gender of student who have more than one pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many cars have a larger accelerate than the car with the largest horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total surface area of the countries in the Caribbean region?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template type codes with less than three templates.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many high schoolers are there in grade 9 or 10?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of players for each hand type.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of all the countries that became independent after 1950?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE IndepYear  >  1950\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many car models are produced by each maker ? Only list the count and the maker full name .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the winner with the most rank points who participated in the Australian Open tournament?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the document id with paragraph text 'Brazil' and 'Ireland'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the Episode of all TV series sorted by rating.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first names that are used for professionals or owners but are not used as dog names.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries exist?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the death and injury situations caused by the ship with tonnage 't'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the oldest player.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which countries have greater area than that of any country in Europe?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \\\"Europe\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the birth date of the poker player with the lowest earnings.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the teachers who are aged either 32 or 33?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many TV Channels use the English language?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \\\"English\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the id and weight of every pet who is older than 1?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which models are lighter than 3500 but not built by the 'Ford Motor Company'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For the cars with 4 cylinders, which model has the largest horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airlines have departing flights from both APG and CVO airports?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total number of airlines?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the Package Option of TV Channel with serial name \"Sky Radio\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Package_Option FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the breed with the most dogs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the earnings of poker players, ordered descending by value?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Earnings FROM poker_player ORDER BY Earnings DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the code of the template type that is most commonly used in documents.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many transcripts are released?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Transcripts\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and ids of every course with less than 2 sections?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the song titles and singer names?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the grade of each high schooler?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the largest accelerate?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many degrees does the engineering department offer?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the major record formats of orchestras, sorted by their frequency?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the different names of cities that are in Asia and for which Chinese is the official language.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \\\"Asia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of the cars with horsepower more than 150?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the full names of all players, sorted by birth date?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name of every student who has a dog but does not have a cat?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the pixel aspect ratio and country of origin for all TV channels that do not use English?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are airlines that have some flight departing from airport 'AHD'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which city is the most frequent source airport?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many shops are there in each location?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries has more than 2 car makers ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average number of injuries caused each time?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(injured) FROM death\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much surface area do the countires in the Carribean cover together?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total population of Gelderland district?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM city WHERE District  =  \\\"Gelderland\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the id and name of the museum that has the most staff members?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the different car makers who produced a car in 1970?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the cost and treatment type description of each treatment?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the final tables made and best finishes for all poker players?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Final_Table_Made ,  Best_Finish FROM poker_player\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airline has most number of flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the codes of template types that have fewer than 3 templates?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the money rank of the player with the greatest earnings.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List pairs of the owner's first name and the dogs's name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total population and maximum GNP in Asia?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights that arrive in Aberdeen.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the hometown of the youngest teacher?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the names of the dogs of the rarest breed and the treatment dates of them.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of visitors who did not visit any museum opened after 2010.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template ids and number of documents using each template.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the names of countries that are in Europe and have a population equal to 80000.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE continent  =  \\\"Europe\\\" AND Population  =  \\\"80000\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the locations and names of all stations with capacity between 5000 and 10000?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and descriptions for all the sections?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name ,  section_description FROM Sections\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are flight numbers of Airline \"United Airlines\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the degree summary name that has the most number of students enrolled?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the name and the release year of the song by the youngest singer.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids of all tv channels that have more than 2 TV channels?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the property type descriptions of properties belonging to that code.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total number of people living in the nations that do not use English?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different models for the cards produced after 1980?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the area code in which the most voters voted?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find number of pets owned by students who are older than 20.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the different descriptions for templates that have been used in a document.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the player with the most tours?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the stadium name and the number of concerts in each stadium.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the id and name of the document with the most paragraphs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the number of United Airlines flights leaving from AHD Airport.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'what are the different names of the singers that have sales more than 300000?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which cities are in European countries where English is not the official language?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give me Brazilâ€™s population and life expectancies.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights have destination ATO?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries have a republic as their form of government?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the name and results of the battles when the bulgarian commander is not 'Boril'' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name and id of the department with the most number of degrees ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the document id with least number of paragraphs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the airport code and name in the city of Anthony.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the people who teach math courses?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \\\"Math\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of cartoones written by Joseph Kuhr?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many people live in Asia, and what is the largest GNP among them?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many states are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM area_code_state\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the number of distinct country codes of all players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the name of the countries where there is not a single car maker?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many museums were opened after 2013 or before 2008?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the nationalities for which there are two or more people.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each citizenship, how many singers are from that country?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show me the cost of the most recently performed treatment.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the money rank of the poker player with the highest earnings?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the model of the car with the smallest amount of horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum and minimum share for the TV series?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids and names of the battles that led to more than 10 people killed in total.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average weight for each type of pet?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries does each continent have? List the continent id, continent name and the number of countries.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the country with the most number of TV Channels and how many does it have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many singers do we have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Where is the youngest teacher from?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the code of the country with the most players?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different nationalities do conductors have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different degree names are offered?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which of the countries has the most car makers? List the country name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is name of the country that speaks the largest number of languages?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the most common singer citizenship ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select citizenship from singer group by citizenship order by count(*) desc limit 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which city has most number of departing flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the version number and template type code for the template with version number later than 5?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maker of the carr produced in the earliest year and what year was it?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total number of languages used in Aruba?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the code of the country where has the greatest number of players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights does airline 'JetBlue Airways' have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \\\"JetBlue Airways\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average horsepower of the cars before 1980?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which flight numbers correspond to United Airlines flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show different citizenships and the maximum net worth of singers of each citizenship.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many continents speak Chinese?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of poker players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'which countries' tv channels are not playing any cartoon written by Todd Casey?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all paragraph texts for the document \"Customer reviews\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \\\"Customer reviews\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Please show the different record companies and the corresponding number of orchestras.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which year has most number of concerts?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of conductors that do not have the nationality \"USA\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the opening year and staff number of the museum named Plaza Museum?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average grade of all students who have some friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the average earnings across all poker players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names, countries, and ages for every singer in descending order of age?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country ,  age FROM singer ORDER BY age DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the car model with the highest mpg ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the template ids with template type description \"Presentation\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \\\"Presentation\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average grade of students who have friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many owners temporarily do not have any dogs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is Kyle's id?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List all cartoon directed by \"Ben Jones\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of conductors whose nationalities are not \"USA\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the code of airport that has the highest number of flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all document ids, names and the number of paragraphs in each document.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which language is the most popular in Aruba?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\" ORDER BY Percentage DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all document names using templates with template type code BK.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the id, name and age for visitors who visited some museums more than once.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all the grades of the high schoolers.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the email, cell phone and home phone of all the professionals.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the oldest player?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the id of students who do not have a cat pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of paragraphs in the document named 'Summer Show'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find all airlines that have flights from both airports 'APG' and 'CVO'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much does the car accelerate that makes amc hornet sportabout (sw)?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of poker players in descending order of earnings?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the department description for the one whose name has the word computer?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different addresses do the students currently live?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT current_address_id) FROM Students\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of cars with a horsepower greater than 150?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many employees are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two types of treatments? List the professional id and cell phone.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the name of the nation that uses the greatest amount of languages.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average edispl of the cars of model volvo?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and release years for all the songs of the youngest singer?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different results are there for the battles?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT RESULT) FROM battle\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the date of each treatment, together with the first name of the professional who operated it.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of distinct languages used around the world?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who have 3 or more friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names of teachers that teach at least two courses.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average life expectancy in African countries that are republics?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \\\"Africa\\\" AND GovernmentForm  =  \\\"Republic\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the distinct template type descriptions for the templates ever used by any document?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'In which years cars were produced weighing no less than 3000 and no more than 4000 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select distinct year from cars_data where weight between 3000 and 4000;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the earliest date of a transcript release, and what details can you tell me?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which template type code is used by most number of documents?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which first names are used for professionals or owners but are not used as dog names?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the maximum final tables made across all poker players who have earnings below 200000.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many high schoolers are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different types of pet are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT pettype) FROM pets\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of each teacher and what course they teach?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the number of players for each country.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the winner and loser who played in the longest match?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of people who are not from Russia?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give average earnings of poker players who are taller than 200.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and birth dates of people, ordered by their names in alphabetical order?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many dogs have an age below the average?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids, names, and descriptions for all documents?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  document_name ,  document_description FROM Documents\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the high schoolers and how many friends does each have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total number of countries where Spanish is spoken by the largest percentage of people?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \\\"Spanish\\\" GROUP BY CountryCode\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'When was the last transcript released?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many cars has over 6 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the countries that are not playing cartoons written by Todd Casey?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the lowest version number, along with its corresponding template type code.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first name of students who have both cat and dog pets .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of orchestras whose record format is \"CD\" or \"DVD\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show different citizenship of singers and the number of singers of each citizenship.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many players are there for each hand type?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many conductors are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM conductor\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the number of all matches who played in years of 2013 or 2016.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of the 3 countries with the fewest people.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population ASC LIMIT 3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average rank of winners in all matches.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'On average, when were the transcripts printed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the regions that use English or Dutch?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give me the id, role and email of the professionals who did not perform any treatment on dogs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many United Airlines flights go to City 'Aberdeen'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of cities in each district whose population is greater than the average population of cities?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the titles of the cartoons sorted alphabetically?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the employees who never received any evaluation?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the type codes and descriptions for all template types?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average expected life expectancy for countries in the region of Central Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average, minimum, and maximum age of all singers from France?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of conductors as well as the corresonding orchestras that they have conducted?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name and rank points of the winner who won the most times.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the contestant numbers and names, ordered by contestant name descending.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which states have both owners and professionals living there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many departments offer any degree?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT department_id) FROM Degree_Programs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average earnings of poker players?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the date of the transcript which shows the least number of results, also list the id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many poker players are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the record companies of orchestras in descending order of years in which they were founded?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the id, role, and first name of the professionals who have performed two or more treatments?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the id and cell phone of the professionals who operate two or more types of treatments.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which shops' number products is above the average? Give me the shop names.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which shop has the most employees? Give me the shop name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the first names of all players, and their average rankings?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the names of employees who never won any award in the evaluation.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the minimum weight of the car with 8 cylinders produced in 1974 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the name of singers that do not have any song.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are all the song names by singers who are older than average?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM people\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the first and last name of all players in the order of birth date.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are each professional's first name and description of the treatment they have performed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of cars with a greater accelerate than the one with the most horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the singers that have more than one songs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which continent is Anguilla in?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the names of nations that speak both English and French.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which Asian countries have a population that is larger than any country in Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \\\"Africa\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many airlines are from USA?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES WHERE Country  =  \\\"USA\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights do we have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many cartoons did each director create?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names for everybody enrolled in a Bachelors program?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the states where both owners and professionals live.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of carsw ith over 6 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of each continent and how many car makers are there in each one?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum capacity and the average of all stadiums ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(capacity), average from stadium\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the semester when both Master students and Bachelor students got enrolled in.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many professionals have performed any treatment to dogs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries speak both English and Dutch?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the program id and the summary of the degree that has the most students enrolled?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template type codes and number of templates for each.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many total tours were there for each ranking date?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different ids and names of the battles that lost any 'Brig' type shipes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the cost of each treatment and the corresponding treatment type description.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names of teachers and the number of courses they teach.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which African countries have a smaller population than that of any country in Asia?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \\\"Asia\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many models does each car maker produce? List maker full name, id and the number.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the first name and birth date of all players from the country with code USA.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the last name of the student who has a cat that is age 3.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the lowest grade of students who do not have any friends?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which language is spoken by the largest number of countries?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which region is the city Kabul located in?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \\\"Kabul\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum number of final tables made among poker players with earnings less than 200000?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the names of poker players who have earnings above 300000.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of singers and the total sales of their songs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name, population and expected life length of asian country with the largest area?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the city with the largest population that uses English.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" ORDER BY T1.Population DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are each owner's first name and their dogs's name?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the name of the conductor that has conducted the most number of orchestras.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different template type codes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name of the first student to register?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many paragraphs in total?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the id and weight of all pets whose age is older than 1.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the zip code for Port Chelsea?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many courses in total are listed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of documents that use templates with the code BK?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which city has most number of arriving flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'In 1980, how many cars were made?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is total bonus given in all evaluations?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the stadiums without any concerts?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of makers of care in France?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first and second line for all addresses?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show titles of songs and names of singers.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template type codes and descriptions.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the id of the document with the fewest paragraphs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the count of singers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which owner owns the most dogs? List the owner id, first name and last name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of friends of the high school student Kyle.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show me all grades that have at least 4 students.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many airports do we have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRPORTS\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average horsepower for all cars produced before 1980 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(horsepower) from cars_data where year  <  1980;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of tournaments that have more than 10 matches?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the number of high schoolers for each grade.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights arriving in Aberdeen.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average age of the dogs who have gone through any treatments?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the total amount of bonus given in all the evaluations.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the birth year and citizenship of singers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of high school students and their corresponding number of friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the abbreviation of the airilne has the fewest flights and what country is it in?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the name and theme for all concerts and the number of singers in each concert.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of continents?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the number of concerts that occurred in the stadium with the largest capacity ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all template type codes and the number of documents using each type.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the major and age of students who do not have a cat pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the distinct breed type and size type combinations for dogs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the airport name for airport 'AKO'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \\\"AKO\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the total number of players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each hometown, how many teachers are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average GNP and total population in all nations whose government is US territory?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many documents do we have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average weight for each pet type.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show different hometown of teachers and the number of teachers from each hometown.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What's the name of the course with most number of enrollments?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List all the student details in reversed lexicographical order.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT other_student_details FROM Students ORDER BY other_student_details DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many friends does the high school student Kyle have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of the dogs who have gone through a treatment?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many high schoolers are in each grade?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the names of poker players ordered by the final tables made in ascending order.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many 'United Airlines' flights depart from Airport 'AHD'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the program which most number of students are enrolled in. List both the id and the summary.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the years in which orchestras that have given more than one performance are founded.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and grades for each high schooler?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  grade FROM Highschooler\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the money rank of the poker player with the greatest height.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the number of likes that the high schooler named Kyle has.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the id and name of the museum visited most times?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the contestant numbers and names of the contestants who had at least two votes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average edispl for all volvos?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights fly from Aberdeen to Ashley?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are 3 most highly rated episodes in the TV series table and what were those ratings?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the grade that has the greatest number of high schoolers.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of high schoolers in grades 9 or 10.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have likes, and numbers of likes for each.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the total surface area covered by countries in Asia or Europe.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the singer with the largest net worth?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of the contestants whose names contain the substring 'Al' .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select contestant_name from contestants where contestant_name like \\\"%al%\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total surface area of the continents Asia and Europe?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the arriving date and the departing date of the dogs that received a treatment.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the region and population of Angola?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airlines have a flight with source airport AHD?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For the countries founded before 1930, what is the total number of distinct official languages?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the type and weight of the youngest pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the stadium name and capacity with most number of concerts in year 2014 or after.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many teachers are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM teacher\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights arriving in ASY Airport.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.DestAirport  =  \\\"ASY\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different forms of governments are there in Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which countries in europe have at least 3 car manufacturers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the template type descriptions for template type code \"AD\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the accelerate of the car make amc hornet sportabout (sw)?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For all of the 4 cylinder cars, which model has the most horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights depart from City Aberdeen?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average rank for winners in all matches?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with at least 2 courses listed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Sort all the shops by number products in descending order, and return the name, location and district of each shop.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the name of the high school student with the most friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'list all cartoon titles and their directors ordered by their air date' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the feature type name of feature AirCon?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \\\"AirCon\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of conductors, sorted descending by the number of years they have worked?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Year_of_Work DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and id of courses having at most 2 sections?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of employees hired in each shop; show the shop name as well.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the average ranking for each player and their first name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of templates of the type CV.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are all the makers and models?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Maker ,  Model FROM MODEL_LIST;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many available features are there in total?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Other_Available_Features\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'what are all the addresses including line 1 and line 2?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the code of the airport with the least flights.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are different nationalities of people and the corresponding number of people from each nation?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which country has the most of TV Channels? List the country and number of TV Channels it has.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name of tourney that has more than 10 matches.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon(mpg) of the cars with 4 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the winner who has won the most matches, and how many rank points does this player have?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name and capacity of the stadium with the most concerts after 2013 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of car models that are produced by each maker and what is the id and full name of each maker?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which makers designed more than 3 car models? List full name and the id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different models created by either the car maker General Motors or weighed more than 3500?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the sections in reverse alphabetical order?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name FROM Sections ORDER BY section_name DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the number of votes from state 'NY' or 'CA'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Weekly_Rank FROM TV_series WHERE Episode = \\\"A Love of a Lifetime\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the year that has the most number of matches.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different series and contents are listed in the TV Channel table?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum accelerate for different number of cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the names of countries with English and French as official languages.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of employees' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of all the dogs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT date_arrived ,  date_departed FROM Dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the record companies of orchestras, sorted descending by the years in which they were founded.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids of templates with template type code PP or PPT?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the email, cell phone and home phone of each professional?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights leaving from APG.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many matches were played in 2013 or 2016?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose courses have not been arranged?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of conductors and the orchestras they have conducted.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List each language and the number of TV Channels using it.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name and capacity for the stadium with the highest average attendance?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the version numbers and template type codes of templates with a version number greater than 5.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of distinct store locations.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LOCATION) FROM shop\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the manager name and district of the shop whose number of products is the largest.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the airport code of the airport with the most flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the full name of each car maker, along with its id and how many models it produces?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which department offers the most number of degrees? List department name and id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which grade has the most high schoolers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which employee received the biggest bonus? Give me the employee name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which shops run with no employees? Find the shop names' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many cartoons were written by \"Joseph Kuhr\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different loser names are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the airline names and abbreviations for airlines in the USA?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List all document ids with at least two paragraphs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the first name of all the professionals along with the description of the treatment they have done.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of singers that have more than one song.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the names of stores whose number products is more than the average number of products.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'how many countries are in Asia?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE continent  =  \\\"Asia\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many dogs have not gone through any treatment?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which abbreviation corresponds to Jetblue Airways?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of all stadiums that did not have a concert in 2014?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For students who have pets , how many pets does each student have ? list their ids instead of names .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many documents are using the template with type code 'PPT'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the total number of unique official languages spoken in the countries that are founded before 1930?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many singers are from each country?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the ID of the high schooler named Kyle.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of concerts happened in the stadium with the highest capacity .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average age for all students who do not own any pets ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(age) from student where stuid not in (select stuid from has_pet)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the country codes for countries that do not speak English?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the singers and number of concerts for each person?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each singer name, what is the total sales for their songs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the first names of every student who has a cat or dog as a pet?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the codes of the countries that do not speak English and whose government forms are not Republic?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Code FROM country WHERE GovernmentForm != \\\"Republic\\\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many visitors below age 30 are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE age  <  30\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the id, line 1, and line 2 of the address with the most students?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights arriving in Aberdeen city?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the number of car models created by the car maker American Motor Company?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many official languages are spoken in Afghanistan?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Afghanistan\\\" AND IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the countries having at least one car maker? List name and id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many type of governments are in Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with the least number of results?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the model for the car with a weight smaller than the average?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the document id with 1 to 2 paragraphs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of all European countries with at least 3 manufacturers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each stadium, how many concerts play there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the name of the student with the most likes.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Who is the first student to register? List the first name, middle name and last name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the ids and names of each document, as well as the number of paragraphs in each?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the descriptions for all the math courses?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT course_description FROM Courses WHERE course_name  =  'math'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the names of teachers in ascending order of age.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher ORDER BY Age ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are airport names at City 'Aberdeen'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE City = \\\"Aberdeen\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the mobile phone number of the student named Timmothy Ward ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \\\"The Rise of the Blue Beetle!\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the name of teachers whose hometown is not `` Little Lever Urban District '' .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are years of founding for orchestras that have had more than a single performance?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the language spoken by the largest percentage of people in each country?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is all the information about hiring?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the maximum and minimum values of area codes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(area_code) ,  min(area_code) FROM area_code_state\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which grades have 4 or more high schoolers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights land in Aberdeen or Abilene?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \\\"Aberdeen\\\" OR T2.city  =  \\\"Abilene\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the languages used by the least number of TV Channels and how many channels use it?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which city and country is the Alton airport at?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which model of the car has the minimum horsepower?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the singers who are not French citizens?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Citizenship != \\\"France\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average age of all the dogs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Describe the section h.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_description FROM Sections WHERE section_name  =  'h'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many different templates do all document use?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name of the student whose permanent address is different from his or her current one?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the record company used by the greatest number of orchestras?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the document id and name with greatest number of paragraphs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of students who have 2 or more likes?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How long is the peopleâ€™s average life expectancy in Central Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give the name, population, and head of state for the country that has the largest area.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the code of airport that has fewest number of flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the names of all the poker players.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many cars have more than 4 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Please show the name of the conductor that has conducted orchestras founded after 2008.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What country is Jetblue Airways affiliated with?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What grade is Kyle in?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler WHERE name  =  \\\"Kyle\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the maximum horsepower and the make of the car models with 3 cylinders?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much does the most expensive charge type costs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(charge_amount) FROM Charges\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the weight of the youngest dog.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the African countries that have a  population less than any country in Asia?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \\\"Asia\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the ids of templates that have the code PP or PPT.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many flights depart from 'APG'?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the last name of the student who has a cat that is 3 years old?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the description of the treatment type that costs the least money in total?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'which countries' tv channels are playing some cartoon written by Todd Casey?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of students who have at least 2 likes.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'When is the first transcript released? List the date and details.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the towns from which at least two teachers come from?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show names of all high school students who do not have any friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries are listed?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name and gender of the all the students who have more than one pet?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many players are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the country codes for countries that do not speak English.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the smallest weight of the car produced with 8 cylinders on 1974 ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of all high schoolers in grade 10.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler WHERE grade  =  10\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Give me all the information about hiring.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first name of students who have cat or dog pet.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show all distinct template type codes for all templates.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name of airports which do not have any flight in and out.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have at least 3 friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much does each charge type costs? List both charge type and amount.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT charge_type ,  charge_amount FROM Charges\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many distinct countries do players come from?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is minimum and maximum share of TV series?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What the smallest version number and its template type code?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Return the name, location and district of all shops in descending order of number of products.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which language is the most popular on the Asian continent?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \\\"Asia\\\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the first name, country code, and birth date of the player with the most winner rank points across all matches?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the last name of the students who live in North Carolina but have not registered in any degree programs?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who both have friends and are liked?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the number of dog pets that are raised by female students (with sex F).' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two treatments? List the professional's id, role, and first name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Tell me the number of dogs that have not received any treatment .' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from dogs where dog_id not in ( select dog_id from treatments )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average weight and year for each year?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are names of countries with the top 3 largest population?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population DESC LIMIT 3\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the stadium names without any concert.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List all airline names and their abbreviations in \"USA\".' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the student IDs and numbers of friends corresponding to each.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the player who did the most number of tours.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many courses are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the most common nationality of people?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which airlines have less than 200 flights?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the population and life expectancies in Brazil?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which semesters do not have any student enrolled? List the semester name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the semester with no students enrolled?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the pixel aspect ratio and nation of the tv channels that do not use English.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many contestants did not get voted?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which cities do more than one employee under age 30 come from?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Who owns the youngest dog? Give me his or her last name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'For each shop, return the number of employees working there and the name of the shop.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name and age of the visitor who bought the most tickets at once.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the names of students who have a grade higher than 5 and have at least 2 friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many car models were produced by the maker with full name American Motor Company?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of poker players?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the singer who is worth the most?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the name of the makers that produced some cars in the year of 1970?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Please show the record formats of orchestras in ascending order of count.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of players who won in both 2013 and 2016?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the total number of matches.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted orchestras founded after the year 2008?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the continent name which Anguilla belongs to?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Which countries have either English or Dutch as an official language?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND IsOfficial  =  \\\"T\\\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\" AND IsOfficial  =  \\\"T\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How much does the most recent treatment cost?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many car models are produced in the usa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the minimum grade of students who have no friends.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the Asian countries which have a population larger than that of any country in Africa?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \\\"Africa\\\")\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the average and maximum age for each pet type?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the name of the conductor who has conducted the most orchestras?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Find the kind of program which most number of students are enrolled in?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the nationalities that are shared by at least two people?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many orchestras does each record company manage?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the sname of every sing that does not have any song?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of the countries with no car makers?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many continents are there?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Show the date and id of the transcript with at least 2 course results.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'How many countries have governments that are republics?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the template ids of any templates used in more than a single document?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the content of the series Sky Radio?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What is the content of TV Channel with serial name \"Sky Radio\"?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'find the name of employee who was awarded the most times in the evaluation.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the name, population, and life expectancy of the largest Asian country by land?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities of conductors.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'Whose permanent address is different from his or her current address? List his or her first name.' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt."}, {"role": "user", "content": "How do I express 'What are the names of people who do not play poker?' in SQLite? Create a valid JSON that represents the corrected query:{\"sql_query\": \"The SQL query\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of high school students who do not have friends?' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?' in SQLite? I currently have 'SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what is the name and nation of the singer who have a song having 'Hey' in its name?' in SQLite? I currently have 'SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all cartoons directed by Ben Jones?' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of the visitors whose membership level is not higher than 4?' in SQLite? I currently have 'SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the greatest accelerate?' in SQLite? I currently have 'SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has the most frequent destination airport?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(T2.DestAirport) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of poker players sorted by their earnings descending.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of flights arriving in Aberdeen.' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different templates used for documents.' in SQLite? I currently have 'SELECT count(DISTINCT Template_ID) FROM Documents', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many friends does each student have?' in SQLite? I currently have 'SELECT T1.ID, T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the birth years and citizenships of the singers?' in SQLite? I currently have 'SELECT Birth_Year, Citizenship FROM singer', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many unique languages are spoken in the world?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Language) FROM countrylanguage', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.' in SQLite? I currently have 'SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders <= 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all cartoons in alphabetical order.' in SQLite? I currently have 'SELECT Title FROM Cartoon ORDER BY Title ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the government form name and total population for each government form whose average life expectancy is longer than 72.' in SQLite? I currently have 'SELECT GovernmentForm, sum(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72) GROUP BY GovernmentForm', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the language used least number of TV Channel. List language and number of TV Channel.' in SQLite? I currently have 'SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all countries and the number of singers in each country.' in SQLite? I currently have 'SELECT Country, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Country', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car makers are there in each continents? List the continent name and the count.' in SQLite? I currently have 'SELECT count(T1.Id), T3.Continent FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId GROUP BY T3.Continent', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What type of pet is the youngest animal, and how much does it weigh?' in SQLite? I currently have 'SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each continent, list its id, name, and how many countries it has?' in SQLite? I currently have 'SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the distinct states and create time of all votes?' in SQLite? I currently have 'SELECT DISTINCT state, created FROM VOTES', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT state ,  created FROM votes\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of tours for each ranking date.' in SQLite? I currently have 'SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airports do not have departing or arriving flights?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and directors of all the cartoons that are ordered by air date?' in SQLite? I currently have 'SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of all winners who played in both 2013 and 2016.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013 ', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the document id, template id, and description for the document with the name Robbin CV.' in SQLite? I currently have 'SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \\\"Robbin CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers whose birth years are either 1948 or 1949?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of owners who do not own any dogs at this moment.' in SQLite? I currently have 'SELECT count(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of dogs that went through a treatment.' in SQLite? I currently have 'SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT dog_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of flights departing from Aberdeen.' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many concerts are there in year 2014 or 2015?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of cartoons directed by each of the listed directors.' in SQLite? I currently have 'SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average number of staff working for the museums that were open before 2009.' in SQLite? I currently have 'SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which year had the most matches?' in SQLite? I currently have 'SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the shops that do not hire any employee.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of students who have no friends?' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID NOT IN (SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id OR T1.ID  =  T2.friend_id)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average and maximum age for each type of pet.' in SQLite? I currently have 'SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the maximum weight for each type of pet. List the maximum weight and pet type.' in SQLite? I currently have 'SELECT MAX(weight), PetType FROM Pets GROUP BY PetType', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(weight) ,  petType FROM pets GROUP BY petType\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which country does Airline \"JetBlue Airways\" belong to?' in SQLite? I currently have 'SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of distinct name of losers.' in SQLite? I currently have 'SELECT COUNT(DISTINCT loser_name) FROM matches', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of nations where both English and French are official languages?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the count of the car models produced in the United States?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'United States'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which district has both stores with less than 3000 products and stores with more than 10000 products?' in SQLite? I currently have 'SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different first names and ages of the students who do have pets?' in SQLite? I currently have 'SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the youngest dog weigh?' in SQLite? I currently have 'SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the ship id and name that caused most total injuries?' in SQLite? I currently have 'SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T2.injured) = (SELECT max(sum_injured) FROM (SELECT sum(T3.injured) AS sum_injured FROM death AS T3 GROUP BY T3.caused_by_ship_id) AS T4)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of employees from each city?' in SQLite? I currently have 'SELECT COUNT(*) ,  City FROM employee GROUP BY City', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  city FROM employee GROUP BY city\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted at more than one orchestra?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the mean GNP and total population of nations which are considered US territory.' in SQLite? I currently have 'SELECT AVG(GNP), SUM(Population) FROM country WHERE Code2 = 'US'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the official language used in the country the name of whose head of state is Beatrix.' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \\\"Beatrix\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the type code of the template type that the most templates belong to.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Template_ID) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of the students who do not own cats as pets?' in SQLite? I currently have 'SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the maximum and minimum shares for performances that do not have the type \"Live final\".' in SQLite? I currently have 'SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \\\"Live final\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many pets are owned by students that have an age greater than 20?' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all paragraph ids and texts for the document with name 'Welcome to NY'.' in SQLite? I currently have 'SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different winners both participated in the WTA Championships and were left handed?' in SQLite? I currently have 'SELECT count(DISTINCT winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of all countries with at least one car maker?' in SQLite? I currently have 'SELECT DISTINCT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of people whose nationality is not \"Russia\".' in SQLite? I currently have 'SELECT Name FROM people WHERE Nationality != 'Russia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?' in SQLite? I currently have 'SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the average attendance across all shows.' in SQLite? I currently have 'SELECT AVG(Attendance) FROM show', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Attendance) FROM SHOW\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the possible breed type and size type combinations?' in SQLite? I currently have 'SELECT breed_name, size_description FROM Breeds, Sizes', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names and template ids for documents that contain the letter w in their description.' in SQLite? I currently have 'SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon of all the cards with 4 cylinders?' in SQLite? I currently have 'SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all song names by singers above the average age.' in SQLite? I currently have 'SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For model volvo, how many cylinders does the car with the least accelerate have?' in SQLite? I currently have 'SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T3.Accelerate  =  (SELECT min(T3.Accelerate) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T1.Model  =  'volvo') AND T1.Model  =  'volvo'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the template type code of the template used by document with the name \"Data base\"?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight of cars each year?' in SQLite? I currently have 'SELECT AVG(Weight), Year FROM cars_data GROUP BY Year', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many pets have a greater weight than 10?' in SQLite? I currently have 'SELECT COUNT(*) FROM Pets WHERE weight > 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM pets WHERE weight  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airlines that have flights arriving at airport 'AHD'?' in SQLite? I currently have 'SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average transcript date?' in SQLite? I currently have 'SELECT AVG(transcript_date) FROM Transcripts', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have at least 10 flights.' in SQLite? I currently have 'SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) >= 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all of the episodes ordered by ratings?' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY Rating DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many matches were played in each year?' in SQLite? I currently have 'SELECT count(*) ,  year FROM matches GROUP BY year', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of singers whose birth year is either 1948 or 1949?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of singers ordered by ascending net worth?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the high schooler who has the greatest number of friends?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  =  (SELECT max(count_friends) FROM (SELECT count(*) AS count_friends FROM Friend GROUP BY student_id) AS T3)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?' in SQLite? I currently have 'SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING count(*) = (     SELECT min(count_votes)     FROM (         SELECT count(*) AS count_votes         FROM VOTES         GROUP BY contestant_number     ) AS subquery )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many templates have template type code CV?' in SQLite? I currently have 'SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me the description of the treatment type whose total cost is the lowest.' in SQLite? I currently have 'SELECT T2.treatment_type_description FROM Treatment_Types AS T2 WHERE T2.treatment_type_code = (SELECT T1.treatment_type_code FROM Treatments AS T1 GROUP BY T1.treatment_type_code ORDER BY sum(T1.cost_of_treatment) ASC LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?' in SQLite? I currently have 'SELECT T1.CountryCode, T1.Language, max(T1.Percentage) FROM countrylanguage AS T1 GROUP BY T1.CountryCode', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the template type description of the template type with the code AD.' in SQLite? I currently have 'SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each owner's first name, last name, and the size of their dog?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average and maximum capacities for all stadiums ?' in SQLite? I currently have 'SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(capacity) ,  max(capacity) from stadium\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of professionals who have ever treated dogs.' in SQLite? I currently have 'SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the airport code and airport name corresonding to the city Anthony.' in SQLite? I currently have 'SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of orchestras that have CD or DVD as their record format.' in SQLite? I currently have 'SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the template type code of the template that is used by a document named Data base.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of flights into ATO.' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE DestAirport = 'ATO'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of all of the high schooler Kyle's friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle'))', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many likes does Kyle have?' in SQLite? I currently have 'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes that are not used by any document.' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show ids for all templates that are used by more than one document.' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(T2.Document_ID) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have at least 10 flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are from each country?' in SQLite? I currently have 'SELECT count(*) ,  country_code FROM players GROUP BY country_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?' in SQLite? I currently have 'SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airlines do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.' in SQLite? I currently have 'SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(MPG) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document name and template id for document with description with the letter 'w' in it?' in SQLite? I currently have 'SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of conductors in ascending order of age.' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Age ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Age ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name, year of independence, and surface area of the country that has the lowest population.' in SQLite? I currently have 'SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of templates.' in SQLite? I currently have 'SELECT COUNT(*) FROM Templates', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id of the pet owned by the student whose last name is 'Smith'?' in SQLite? I currently have 'SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and areas of countries with the top 5 largest area?' in SQLite? I currently have 'SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of template types that are not used for any document?' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most commmon hometowns for teachers?' in SQLite? I currently have 'SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the city and country for the Alton airport.' in SQLite? I currently have 'SELECT City, Country FROM airports WHERE AirportName = 'Alton'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of teachers aged either 32 or 33?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Age = 32 OR Age = 33', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the age and hometown of teachers?' in SQLite? I currently have 'SELECT Age, Hometown FROM teacher', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Age ,  Hometown FROM teacher\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many likes correspond to each student id?' in SQLite? I currently have 'SELECT student_id, count(liked_id) FROM Likes GROUP BY student_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which regions speak Dutch or English?' in SQLite? I currently have 'SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' OR T2.Language = 'English'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first names of owners living in Virginia and the names of dogs they own.' in SQLite? I currently have 'SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List top 3 highest Rating  TV series. List the TV series's Episode and Rating.' in SQLite? I currently have 'SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the series that has the episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name and tonnage ordered by in descending alphaetical order for the names.' in SQLite? I currently have 'SELECT name, tonnage FROM ship ORDER BY name DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  tonnage FROM ship ORDER BY name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many concerts occurred in 2014 or 2015?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the nationality that is most common across all people.' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of distinct continents where Chinese is spoken?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What region does Angola belong to and what is its population?' in SQLite? I currently have 'SELECT Region, Population FROM country WHERE Name = 'Angola'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights landing at APG.' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE DestAirport = 'APG'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have fewer than 200 flights.' in SQLite? I currently have 'SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) < 200', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the number of different series names and contents in the TV Channel table.' in SQLite? I currently have 'SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List singer names and number of concerts for each singer.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.concert_ID)  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Singer_ID, T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and gender of student who have more than one pet.' in SQLite? I currently have 'SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars have a larger accelerate than the car with the largest horsepower?' in SQLite? I currently have 'SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total surface area of the countries in the Caribbean region?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes with less than three templates.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are there in grade 9 or 10?' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of players for each hand type.' in SQLite? I currently have 'SELECT count(*) , hand FROM players GROUP BY hand', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all the countries that became independent after 1950?' in SQLite? I currently have 'SELECT Name FROM country WHERE IndepYear > 1950', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE IndepYear  >  1950\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models are produced by each maker ? Only list the count and the maker full name .' in SQLite? I currently have 'SELECT count(T1.Model) ,  T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.Id, T2.FullName', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner with the most rank points who participated in the Australian Open tournament?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the document id with paragraph text 'Brazil' and 'Ireland'.' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Brazil%' OR T2.Paragraph_Text LIKE '%Ireland%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the Episode of all TV series sorted by rating.' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY Rating DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first names that are used for professionals or owners but are not used as dog names.' in SQLite? I currently have 'SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries exist?' in SQLite? I currently have 'SELECT COUNT(*) FROM countries', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the death and injury situations caused by the ship with tonnage 't'?' in SQLite? I currently have 'SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the oldest player.' in SQLite? I currently have 'SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have greater area than that of any country in Europe?' in SQLite? I currently have 'SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \\\"Europe\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the birth date of the poker player with the lowest earnings.' in SQLite? I currently have 'SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers who are aged either 32 or 33?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Age = 32 OR Age = 33', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many TV Channels use the English language?' in SQLite? I currently have 'SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \\\"English\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id and weight of every pet who is older than 1?' in SQLite? I currently have 'SELECT PetID, weight FROM Pets WHERE pet_age > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which models are lighter than 3500 but not built by the 'Ford Motor Company'?' in SQLite? I currently have 'SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName != 'Ford Motor Company'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For the cars with 4 cylinders, which model has the largest horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have departing flights from both APG and CVO airports?' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of airlines?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the Package Option of TV Channel with serial name \"Sky Radio\"?' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Package_Option FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the breed with the most dogs?' in SQLite? I currently have 'SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the earnings of poker players, ordered descending by value?' in SQLite? I currently have 'SELECT Earnings FROM poker_player ORDER BY Earnings DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Earnings FROM poker_player ORDER BY Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the code of the template type that is most commonly used in documents.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many transcripts are released?' in SQLite? I currently have 'SELECT COUNT(*) FROM Transcripts', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.' in SQLite? I currently have 'SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of every course with less than 2 sections?' in SQLite? I currently have 'SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) < 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the song titles and singer names?' in SQLite? I currently have 'SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the grade of each high schooler?' in SQLite? I currently have 'SELECT ID, name, grade FROM Highschooler', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the largest accelerate?' in SQLite? I currently have 'SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many degrees does the engineering department offer?' in SQLite? I currently have 'SELECT count(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the major record formats of orchestras, sorted by their frequency?' in SQLite? I currently have 'SELECT Major_Record_Format, COUNT(*) as frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different names of cities that are in Asia and for which Chinese is the official language.' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of the cars with horsepower more than 150?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the full names of all players, sorted by birth date?' in SQLite? I currently have 'SELECT first_name, last_name FROM players ORDER BY birth_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name of every student who has a dog but does not have a cat?' in SQLite? I currently have 'SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the pixel aspect ratio and country of origin for all TV channels that do not use English?' in SQLite? I currently have 'SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airlines that have some flight departing from airport 'AHD'?' in SQLite? I currently have 'SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city is the most frequent source airport?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many shops are there in each location?' in SQLite? I currently have 'SELECT COUNT(*) ,  Location FROM shop GROUP BY Location', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries has more than 2 car makers ?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Id), Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average number of injuries caused each time?' in SQLite? I currently have 'SELECT AVG(injured) FROM death', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(injured) FROM death\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.' in SQLite? I currently have 'SELECT T2.first_name, T2.middle_name, T2.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id JOIN Students AS T2 ON T3.student_id = T2.student_id WHERE T1.degree_summary_name = 'Bachelor'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much surface area do the countires in the Carribean cover together?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?' in SQLite? I currently have 'SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3 ', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population of Gelderland district?' in SQLite? I currently have 'SELECT sum(Population) FROM city WHERE District = 'Gelderland'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM city WHERE District  =  \\\"Gelderland\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and name of the museum that has the most staff members?' in SQLite? I currently have 'SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the different car makers who produced a car in 1970?' in SQLite? I currently have 'SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T4 ON T1.Id = T4.Maker JOIN car_names AS T2 ON T4.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = 1970', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the cost and treatment type description of each treatment?' in SQLite? I currently have 'SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the final tables made and best finishes for all poker players?' in SQLite? I currently have 'SELECT Final_Table_Made, Best_Finish FROM poker_player', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Final_Table_Made ,  Best_Finish FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airline has most number of flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline ORDER BY count(FlightNo) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of template types that have fewer than 3 templates?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING count(T2.Template_ID) < 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the money rank of the player with the greatest earnings.' in SQLite? I currently have 'SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List pairs of the owner's first name and the dogs's name.' in SQLite? I currently have 'SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population and maximum GNP in Asia?' in SQLite? I currently have 'SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.' in SQLite? I currently have 'SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.' in SQLite? I currently have 'SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights that arrive in Aberdeen.' in SQLite? I currently have 'SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the hometown of the youngest teacher?' in SQLite? I currently have 'SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of the dogs of the rarest breed and the treatment dates of them.' in SQLite? I currently have 'SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of visitors who did not visit any museum opened after 2010.' in SQLite? I currently have 'SELECT count(ID) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > 2010)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template ids and number of documents using each template.' in SQLite? I currently have 'SELECT T1.Template_ID, COUNT(T2.Document_ID)  FROM Templates AS T1  JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of countries that are in Europe and have a population equal to 80000.' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE continent  =  \\\"Europe\\\" AND Population  =  \\\"80000\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .' in SQLite? I currently have 'SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the locations and names of all stations with capacity between 5000 and 10000?' in SQLite? I currently have 'SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and descriptions for all the sections?' in SQLite? I currently have 'SELECT section_name, section_description FROM Sections', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name ,  section_description FROM Sections\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of Airline \"United Airlines\"?' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the degree summary name that has the most number of students enrolled?' in SQLite? I currently have 'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name and the release year of the song by the youngest singer.' in SQLite? I currently have 'SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of all tv channels that have more than 2 TV channels?' in SQLite? I currently have 'SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.id HAVING count(*) > 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the property type descriptions of properties belonging to that code.' in SQLite? I currently have 'SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of people living in the nations that do not use English?' in SQLite? I currently have 'SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models for the cards produced after 1980?' in SQLite? I currently have 'SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN model_list AS T3 ON T1.Model = T3.Model WHERE T2.Year > 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the area code in which the most voters voted?' in SQLite? I currently have 'SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(T2.vote_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find number of pets owned by students who are older than 20.' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different descriptions for templates that have been used in a document.' in SQLite? I currently have 'SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the player with the most tours?' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  WHERE T2.tours = (SELECT max(tours) FROM rankings)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium name and the number of concerts in each stadium.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id and name of the document with the most paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of United Airlines flights leaving from AHD Airport.' in SQLite? I currently have 'SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what are the different names of the singers that have sales more than 300000?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which cities are in European countries where English is not the official language?' in SQLite? I currently have 'SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND T2.Code NOT IN (SELECT T3.CountryCode FROM countrylanguage AS T3 WHERE T3.Language = 'English' AND T3.IsOfficial = 'T')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me Brazilâ€™s population and life expectancies.' in SQLite? I currently have 'SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights have destination ATO?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have a republic as their form of government?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name and results of the battles when the bulgarian commander is not 'Boril'' in SQLite? I currently have 'SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and id of the department with the most number of degrees ?' in SQLite? I currently have 'SELECT T1.department_id, T1.department_name, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id with least number of paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the airport code and name in the city of Anthony.' in SQLite? I currently have 'SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the people who teach math courses?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \\\"Math\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cartoones written by Joseph Kuhr?' in SQLite? I currently have 'SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.' in SQLite? I currently have 'SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many people live in Asia, and what is the largest GNP among them?' in SQLite? I currently have 'SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many states are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM area_code_state\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the number of distinct country codes of all players.' in SQLite? I currently have 'SELECT COUNT(DISTINCT country_code) FROM players', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?' in SQLite? I currently have 'SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name of the countries where there is not a single car maker?' in SQLite? I currently have 'SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many museums were opened after 2013 or before 2008?' in SQLite? I currently have 'SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the nationalities for which there are two or more people.' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each citizenship, how many singers are from that country?' in SQLite? I currently have 'SELECT COUNT(*) ,  Citizenship FROM singer GROUP BY Citizenship', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show me the cost of the most recently performed treatment.' in SQLite? I currently have 'SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the money rank of the poker player with the highest earnings?' in SQLite? I currently have 'SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the model of the car with the smallest amount of horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum and minimum share for the TV series?' in SQLite? I currently have 'SELECT max(Share), min(Share) FROM TV_series', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of the battles that led to more than 10 people killed in total.' in SQLite? I currently have 'SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T3.killed) > 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight for each type of pet?' in SQLite? I currently have 'SELECT AVG(weight), PetType FROM Pets GROUP BY PetType', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries does each continent have? List the continent id, continent name and the number of countries.' in SQLite? I currently have 'SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the country with the most number of TV Channels and how many does it have?' in SQLite? I currently have 'SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Where is the youngest teacher from?' in SQLite? I currently have 'SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of the country with the most players?' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different nationalities do conductors have?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM conductor', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different degree names are offered?' in SQLite? I currently have 'SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which of the countries has the most car makers? List the country name.' in SQLite? I currently have 'SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is name of the country that speaks the largest number of languages?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(T2.Language) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most common singer citizenship ?' in SQLite? I currently have 'SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select citizenship from singer group by citizenship order by count(*) desc limit 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has most number of departing flights?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the version number and template type code for the template with version number later than 5?' in SQLite? I currently have 'SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maker of the carr produced in the earliest year and what year was it?' in SQLite? I currently have 'SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN model_list AS T3 ON T1.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T2 ON T4.MakeId = T2.Id ORDER BY T2.Year ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of languages used in Aruba?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the code of the country where has the greatest number of players.' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights does airline 'JetBlue Airways' have?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average horsepower of the cars before 1980?' in SQLite? I currently have 'SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which flight numbers correspond to United Airlines flights?' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different citizenships and the maximum net worth of singers of each citizenship.' in SQLite? I currently have 'SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many continents speak Chinese?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of poker players.' in SQLite? I currently have 'SELECT COUNT(*) FROM poker_player', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'which countries' tv channels are not playing any cartoon written by Todd Casey?' in SQLite? I currently have 'SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all paragraph texts for the document \"Customer reviews\".' in SQLite? I currently have 'SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \\\"Customer reviews\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the different record companies and the corresponding number of orchestras.' in SQLite? I currently have 'SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which year has most number of concerts?' in SQLite? I currently have 'SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of conductors that do not have the nationality \"USA\".' in SQLite? I currently have 'SELECT Name FROM conductor WHERE Nationality != 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the opening year and staff number of the museum named Plaza Museum?' in SQLite? I currently have 'SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average grade of all students who have some friends.' in SQLite? I currently have 'SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the average earnings across all poker players.' in SQLite? I currently have 'SELECT AVG(Earnings) FROM poker_player', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names, countries, and ages for every singer in descending order of age?' in SQLite? I currently have 'SELECT Name, Country, Age FROM singer ORDER BY Age DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country ,  age FROM singer ORDER BY age DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the car model with the highest mpg ?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.MPG DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the template ids with template type description \"Presentation\".' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \\\"Presentation\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average grade of students who have friends?' in SQLite? I currently have 'SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many owners temporarily do not have any dogs?' in SQLite? I currently have 'SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is Kyle's id?' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all cartoon directed by \"Ben Jones\".' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors whose nationalities are not \"USA\"?' in SQLite? I currently have 'SELECT Name FROM conductor WHERE Nationality != 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of airport that has the highest number of flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all document ids, names and the number of paragraphs in each document.' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is the most popular in Aruba?' in SQLite? I currently have 'SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\" ORDER BY Percentage DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all document names using templates with template type code BK.' in SQLite? I currently have 'SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the id, name and age for visitors who visited some museums more than once.' in SQLite? I currently have 'SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 WHERE T1.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING count(*) > 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all the grades of the high schoolers.' in SQLite? I currently have 'SELECT DISTINCT grade FROM Highschooler', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the email, cell phone and home phone of all the professionals.' in SQLite? I currently have 'SELECT email_address, cell_number, home_phone FROM Professionals', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the oldest player?' in SQLite? I currently have 'SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id of students who do not have a cat pet.' in SQLite? I currently have 'SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) >= 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of paragraphs in the document named 'Summer Show'.' in SQLite? I currently have 'SELECT count(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have flights from both airports 'APG' and 'CVO'.' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the car accelerate that makes amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players in descending order of earnings?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the department description for the one whose name has the word computer?' in SQLite? I currently have 'SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different addresses do the students currently live?' in SQLite? I currently have 'SELECT count(DISTINCT T1.address_id) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT current_address_id) FROM Students\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cars with a horsepower greater than 150?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many employees are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM employee', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two types of treatments? List the professional id and cell phone.' in SQLite? I currently have 'SELECT T3.professional_id, T3.cell_number FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Professionals AS T3 ON T1.professional_id = T3.professional_id GROUP BY T1.professional_id, T3.cell_number HAVING count(DISTINCT T1.treatment_type_code) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the nation that uses the greatest amount of languages.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average edispl of the cars of model volvo?' in SQLite? I currently have 'SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and release years for all the songs of the youngest singer?' in SQLite? I currently have 'SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different results are there for the battles?' in SQLite? I currently have 'SELECT COUNT(DISTINCT result) FROM battle', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT RESULT) FROM battle\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the date of each treatment, together with the first name of the professional who operated it.' in SQLite? I currently have 'SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of distinct languages used around the world?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Language) FROM countrylanguage', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who have 3 or more friends?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers that teach at least two courses.' in SQLite? I currently have 'SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average life expectancy in African countries that are republics?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \\\"Africa\\\" AND GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the distinct template type descriptions for the templates ever used by any document?' in SQLite? I currently have 'SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'In which years cars were produced weighing no less than 3000 and no more than 4000 ?' in SQLite? I currently have 'SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select distinct year from cars_data where weight between 3000 and 4000;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the earliest date of a transcript release, and what details can you tell me?' in SQLite? I currently have 'SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?' in SQLite? I currently have 'SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which template type code is used by most number of documents?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which first names are used for professionals or owners but are not used as dog names?' in SQLite? I currently have 'SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?' in SQLite? I currently have 'SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the maximum final tables made across all poker players who have earnings below 200000.' in SQLite? I currently have 'SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different types of pet are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT PetType) FROM Pets', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT pettype) FROM pets\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of each teacher and what course they teach?' in SQLite? I currently have 'SELECT T1.Name, T2.Course  FROM teacher AS T1  JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID  JOIN course AS T2 ON T3.Course_ID = T2.Course_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?' in SQLite? I currently have 'SELECT max(count(T1.student_course_id)), T2.student_enrolment_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T2.student_enrolment_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the number of players for each country.' in SQLite? I currently have 'SELECT COUNT(player_id), country_code FROM players GROUP BY country_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the winner and loser who played in the longest match?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 JOIN matches ON T1.player_id = matches.winner_id JOIN players AS T2 ON T2.player_id = matches.loser_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of people who are not from Russia?' in SQLite? I currently have 'SELECT Name FROM people WHERE Nationality != 'Russia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.' in SQLite? I currently have 'SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Kelly Clauss'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'' in SQLite? I currently have 'SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give average earnings of poker players who are taller than 200.' in SQLite? I currently have 'SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and birth dates of people, ordered by their names in alphabetical order?' in SQLite? I currently have 'SELECT Name, Birth_Date FROM people ORDER BY Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dogs have an age below the average?' in SQLite? I currently have 'SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids, names, and descriptions for all documents?' in SQLite? I currently have 'SELECT Document_ID, Document_Name, Document_Description FROM Documents', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  document_name ,  document_description FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the high schoolers and how many friends does each have?' in SQLite? I currently have 'SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of countries where Spanish is spoken by the largest percentage of people?' in SQLite? I currently have 'SELECT count(*) FROM (SELECT CountryCode FROM countrylanguage AS T1 WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE CountryCode = T1.CountryCode)) AS T2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \\\"Spanish\\\" GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When was the last transcript released?' in SQLite? I currently have 'SELECT MAX(transcript_date) FROM Transcripts', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars has over 6 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries that are not playing cartoons written by Todd Casey?' in SQLite? I currently have 'SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the lowest version number, along with its corresponding template type code.' in SQLite? I currently have 'SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Lowest_Version_Number ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name of students who have both cat and dog pets .' in SQLite? I currently have 'SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of orchestras whose record format is \"CD\" or \"DVD\".' in SQLite? I currently have 'SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different citizenship of singers and the number of singers of each citizenship.' in SQLite? I currently have 'SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are there for each hand type?' in SQLite? I currently have 'SELECT count(*) , hand FROM players GROUP BY hand', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many conductors are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM conductor', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the number of all matches who played in years of 2013 or 2016.' in SQLite? I currently have 'SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of the 3 countries with the fewest people.' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population ASC LIMIT 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population ASC LIMIT 3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average rank of winners in all matches.' in SQLite? I currently have 'SELECT AVG(winner_rank) FROM matches', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'On average, when were the transcripts printed?' in SQLite? I currently have 'SELECT AVG(transcript_date) FROM Transcripts', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the regions that use English or Dutch?' in SQLite? I currently have 'SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me the id, role and email of the professionals who did not perform any treatment on dogs.' in SQLite? I currently have 'SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many United Airlines flights go to City 'Aberdeen'?' in SQLite? I currently have 'SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of cities in each district whose population is greater than the average population of cities?' in SQLite? I currently have 'SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the titles of the cartoons sorted alphabetically?' in SQLite? I currently have 'SELECT Title FROM Cartoon ORDER BY Title ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the employees who never received any evaluation?' in SQLite? I currently have 'SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the type codes and descriptions for all template types?' in SQLite? I currently have 'SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average expected life expectancy for countries in the region of Central Africa?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average, minimum, and maximum age of all singers from France?' in SQLite? I currently have 'SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors as well as the corresonding orchestras that they have conducted?' in SQLite? I currently have 'SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and rank points of the winner who won the most times.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.rank_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .' in SQLite? I currently have 'SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the contestant numbers and names, ordered by contestant name descending.' in SQLite? I currently have 'SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which states have both owners and professionals living there?' in SQLite? I currently have 'SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state  =  T2.state GROUP BY T1.state', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many departments offer any degree?' in SQLite? I currently have 'SELECT count(distinct department_id) FROM Degree_Programs', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT department_id) FROM Degree_Programs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average earnings of poker players?' in SQLite? I currently have 'SELECT AVG(Earnings) FROM poker_player', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date of the transcript which shows the least number of results, also list the id.' in SQLite? I currently have 'SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) = (     SELECT MIN(COUNT(*))     FROM Transcript_Contents     GROUP BY transcript_id )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many poker players are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM poker_player', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the record companies of orchestras in descending order of years in which they were founded?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id, role, and first name of the professionals who have performed two or more treatments?' in SQLite? I currently have 'SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?' in SQLite? I currently have 'SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name  FROM Students AS T1  JOIN (     SELECT student_id, semester_id      FROM Student_Enrolment      GROUP BY student_id, semester_id      HAVING count(degree_program_id) = 2 ) AS T2  ON T1.student_id = T2.student_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and cell phone of the professionals who operate two or more types of treatments.' in SQLite? I currently have 'SELECT T2.professional_id, T2.cell_number FROM Professionals AS T2 WHERE T2.professional_id IN (     SELECT T1.professional_id     FROM Treatments AS T1     GROUP BY T1.professional_id     HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shops' number products is above the average? Give me the shop names.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shop has the most employees? Give me the shop name.' in SQLite? I currently have 'SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name HAVING count(T1.Employee_ID)  =  (SELECT max(counted) FROM (SELECT count(Employee_ID) AS counted FROM hiring GROUP BY Shop_ID) AS subquery)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of all players, and their average rankings?' in SQLite? I currently have 'SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?' in SQLite? I currently have 'SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  <  2009 INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  >  2011', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the names of employees who never won any award in the evaluation.' in SQLite? I currently have 'SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the minimum weight of the car with 8 cylinders produced in 1974 ?' in SQLite? I currently have 'SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of singers that do not have any song.' in SQLite? I currently have 'SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the song names by singers who are older than average?' in SQLite? I currently have 'SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM people', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM people\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first and last name of all players in the order of birth date.' in SQLite? I currently have 'SELECT first_name, last_name FROM players ORDER BY birth_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?' in SQLite? I currently have 'SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each professional's first name and description of the treatment they have performed?' in SQLite? I currently have 'SELECT P.first_name, TT.treatment_type_description FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cars with a greater accelerate than the one with the most horsepower?' in SQLite? I currently have 'SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data))', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers that have more than one songs?' in SQLite? I currently have 'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING count(*) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which continent is Anguilla in?' in SQLite? I currently have 'SELECT Continent FROM country WHERE Name = 'Anguilla'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of nations that speak both English and French.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which Asian countries have a population that is larger than any country in Africa?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \\\"Africa\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airlines are from USA?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines WHERE Country = 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cartoons did each director create?' in SQLite? I currently have 'SELECT COUNT(*) ,  Directed_by FROM Cartoon GROUP BY Directed_by', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names for everybody enrolled in a Bachelors program?' in SQLite? I currently have 'SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the states where both owners and professionals live.' in SQLite? I currently have 'SELECT state FROM Owners INTERSECT SELECT state FROM Professionals', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of carsw ith over 6 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of each continent and how many car makers are there in each one?' in SQLite? I currently have 'SELECT T1.Continent, COUNT(T3.Id)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  JOIN car_makers AS T3 ON T2.CountryId = T3.Country  GROUP BY T1.Continent', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum capacity and the average of all stadiums ?' in SQLite? I currently have 'SELECT MAX(Capacity), AVG(Capacity) FROM stadium', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(capacity), average from stadium\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the semester when both Master students and Bachelor students got enrolled in.' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Master') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelor')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many professionals have performed any treatment to dogs?' in SQLite? I currently have 'SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries speak both English and Dutch?' in SQLite? I currently have 'SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the program id and the summary of the degree that has the most students enrolled?' in SQLite? I currently have 'SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name HAVING COUNT(*) = (     SELECT MAX(counted)     FROM (         SELECT COUNT(*) AS counted         FROM Student_Enrolment         GROUP BY degree_program_id     ) AS subquery )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and number of templates for each.' in SQLite? I currently have 'SELECT T1.Template_Type_Code, count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many total tours were there for each ranking date?' in SQLite? I currently have 'SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different ids and names of the battles that lost any 'Brig' type shipes?' in SQLite? I currently have 'SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the cost of each treatment and the corresponding treatment type description.' in SQLite? I currently have 'SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the number of courses they teach.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which African countries have a smaller population than that of any country in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \\\"Asia\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many models does each car maker produce? List maker full name, id and the number.' in SQLite? I currently have 'SELECT T2.FullName, T2.Id, COUNT(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName, T2.Id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first name and birth date of all players from the country with code USA.' in SQLite? I currently have 'SELECT first_name, birth_date FROM players WHERE country_code = 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the last name of the student who has a cat that is age 3.' in SQLite? I currently have 'SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the lowest grade of students who do not have any friends?' in SQLite? I currently have 'SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is spoken by the largest number of countries?' in SQLite? I currently have 'SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which region is the city Kabul located in?' in SQLite? I currently have 'SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \\\"Kabul\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum number of final tables made among poker players with earnings less than 200000?' in SQLite? I currently have 'SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.' in SQLite? I currently have 'SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of poker players who have earnings above 300000.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers and the total sales of their songs.' in SQLite? I currently have 'SELECT T1.Name, sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name, population and expected life length of asian country with the largest area?' in SQLite? I currently have 'SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the city with the largest population that uses English.' in SQLite? I currently have 'SELECT Name FROM city WHERE Population = (SELECT max(Population) FROM city WHERE CountryCode IN (SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English'))', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" ORDER BY T1.Population DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each owner's first name and their dogs's name?' in SQLite? I currently have 'SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of the conductor that has conducted the most number of orchestras.' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different template type codes?' in SQLite? I currently have 'SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name of the first student to register?' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many paragraphs in total?' in SQLite? I currently have 'SELECT COUNT(*) FROM Paragraphs', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and weight of all pets whose age is older than 1.' in SQLite? I currently have 'SELECT PetID, weight FROM Pets WHERE pet_age > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the zip code for Port Chelsea?' in SQLite? I currently have 'SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many courses in total are listed?' in SQLite? I currently have 'SELECT COUNT(*) FROM Courses', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of documents that use templates with the code BK?' in SQLite? I currently have 'SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has most number of arriving flights?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.' in SQLite? I currently have 'SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'In 1980, how many cars were made?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Year = 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is total bonus given in all evaluations?' in SQLite? I currently have 'SELECT SUM(Bonus) FROM evaluation', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the stadiums without any concerts?' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of makers of care in France?' in SQLite? I currently have 'SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first and second line for all addresses?' in SQLite? I currently have 'SELECT line_1, line_2 FROM Addresses', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.' in SQLite? I currently have 'SELECT T2.owner_id, T3.last_name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id JOIN Owners AS T3 ON T2.owner_id = T3.owner_id GROUP BY T2.owner_id, T3.last_name ORDER BY COUNT(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show titles of songs and names of singers.' in SQLite? I currently have 'SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?' in SQLite? I currently have 'SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id HAVING count(DISTINCT T2.Model) >= 2 AND count(T3.Make) > 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?' in SQLite? I currently have 'SELECT T1.MakeId, T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders < 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and descriptions.' in SQLite? I currently have 'SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id of the document with the fewest paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the count of singers?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owner owns the most dogs? List the owner id, first name and last name.' in SQLite? I currently have 'SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN (SELECT owner_id, count(*) as dog_count FROM Dogs GROUP BY owner_id) AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.dog_count DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of friends of the high school student Kyle.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle'))', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show me all grades that have at least 4 students.' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airports do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM airports', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRPORTS\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average horsepower for all cars produced before 1980 ?' in SQLite? I currently have 'SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(horsepower) from cars_data where year  <  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of tournaments that have more than 10 matches?' in SQLite? I currently have 'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the number of high schoolers for each grade.' in SQLite? I currently have 'SELECT COUNT(*) ,  grade FROM Highschooler GROUP BY grade', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights arriving in Aberdeen.' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of the dogs who have gone through any treatments?' in SQLite? I currently have 'SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total amount of bonus given in all the evaluations.' in SQLite? I currently have 'SELECT sum(Bonus) FROM evaluation', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the birth year and citizenship of singers?' in SQLite? I currently have 'SELECT Birth_Year, Citizenship FROM singer', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high school students and their corresponding number of friends.' in SQLite? I currently have 'SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the abbreviation of the airilne has the fewest flights and what country is it in?' in SQLite? I currently have 'SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name and theme for all concerts and the number of singers in each concert.' in SQLite? I currently have 'SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of continents?' in SQLite? I currently have 'SELECT COUNT(*) FROM continents', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the number of concerts that occurred in the stadium with the largest capacity ?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and the number of documents using each type.' in SQLite? I currently have 'SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the major and age of students who do not have a cat pet.' in SQLite? I currently have 'SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the distinct breed type and size type combinations for dogs.' in SQLite? I currently have 'SELECT DISTINCT T1.breed_name, T2.size_description FROM Dogs AS T3 JOIN Breeds AS T1 ON T3.breed_code = T1.breed_code JOIN Sizes AS T2 ON T3.size_code = T2.size_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the airport name for airport 'AKO'?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode = 'AKO'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \\\"AKO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of players.' in SQLite? I currently have 'SELECT COUNT(*) FROM players', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?' in SQLite? I currently have 'SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each hometown, how many teachers are there?' in SQLite? I currently have 'SELECT COUNT(Teacher_ID), Hometown FROM teacher GROUP BY Hometown', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average GNP and total population in all nations whose government is US territory?' in SQLite? I currently have 'SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many documents do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM Documents', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average weight for each pet type.' in SQLite? I currently have 'SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different hometown of teachers and the number of teachers from each hometown.' in SQLite? I currently have 'SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What's the name of the course with most number of enrollments?' in SQLite? I currently have 'SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all the student details in reversed lexicographical order.' in SQLite? I currently have 'SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT other_student_details FROM Students ORDER BY other_student_details DESC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.' in SQLite? I currently have 'SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many friends does the high school student Kyle have?' in SQLite? I currently have 'SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of the dogs who have gone through a treatment?' in SQLite? I currently have 'SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are in each grade?' in SQLite? I currently have 'SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of poker players ordered by the final tables made in ascending order.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many 'United Airlines' flights depart from Airport 'AHD'?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the program which most number of students are enrolled in. List both the id and the summary.' in SQLite? I currently have 'SELECT T1.degree_program_id, T2.degree_summary_name, count(T1.student_id) as num_students FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T2.degree_summary_name ORDER BY num_students DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the years in which orchestras that have given more than one performance are founded.' in SQLite? I currently have 'SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and grades for each high schooler?' in SQLite? I currently have 'SELECT name, grade FROM Highschooler', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  grade FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.' in SQLite? I currently have 'SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the money rank of the poker player with the greatest height.' in SQLite? I currently have 'SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of likes that the high schooler named Kyle has.' in SQLite? I currently have 'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id and name of the museum visited most times?' in SQLite? I currently have 'SELECT T1.Museum_ID, T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID, T1.Name HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM visit         GROUP BY Museum_ID     ) AS T3 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the contestant numbers and names of the contestants who had at least two votes?' in SQLite? I currently have 'SELECT T2.contestant_number, T2.contestant_name  FROM CONTESTANTS AS T2  WHERE T2.contestant_number IN (     SELECT T1.contestant_number      FROM VOTES AS T1      GROUP BY T1.contestant_number      HAVING count(*) >= 2 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average edispl for all volvos?' in SQLite? I currently have 'SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'volvo'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights fly from Aberdeen to Ashley?' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are 3 most highly rated episodes in the TV series table and what were those ratings?' in SQLite? I currently have 'SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the grade that has the greatest number of high schoolers.' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of high schoolers in grades 9 or 10.' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have likes, and numbers of likes for each.' in SQLite? I currently have 'SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the total surface area covered by countries in Asia or Europe.' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the singer with the largest net worth?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of the contestants whose names contain the substring 'Al' .' in SQLite? I currently have 'SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select contestant_name from contestants where contestant_name like \\\"%al%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total surface area of the continents Asia and Europe?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the arriving date and the departing date of the dogs that received a treatment.' in SQLite? I currently have 'SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the region and population of Angola?' in SQLite? I currently have 'SELECT Region, Population FROM country WHERE Name = 'Angola'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have a flight with source airport AHD?' in SQLite? I currently have 'SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For the countries founded before 1930, what is the total number of distinct official languages?' in SQLite? I currently have 'SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T1.IndepYear < 1930', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the type and weight of the youngest pet.' in SQLite? I currently have 'SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium name and capacity with most number of concerts in year 2014 or after.' in SQLite? I currently have 'SELECT T2.Name, T2.Capacity FROM (SELECT T1.Stadium_ID, COUNT(T1.concert_ID) as num_concerts FROM concert AS T1 WHERE T1.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY num_concerts DESC LIMIT 1) AS T3 JOIN stadium AS T2 ON T3.Stadium_ID = T2.Stadium_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many teachers are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM teacher', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM teacher\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights arriving in ASY Airport.' in SQLite? I currently have 'SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.DestAirport  =  \\\"ASY\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different forms of governments are there in Africa?' in SQLite? I currently have 'SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries in europe have at least 3 car manufacturers?' in SQLite? I currently have 'SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN continents AS T3 ON T1.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T1.CountryName HAVING count(*)  >=  3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the template type descriptions for template type code \"AD\".' in SQLite? I currently have 'SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the accelerate of the car make amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For all of the 4 cylinder cars, which model has the most horsepower?' in SQLite? I currently have 'SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.' in SQLite? I currently have 'SELECT Dogs.name, Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from City Aberdeen?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average rank for winners in all matches?' in SQLite? I currently have 'SELECT AVG(winner_rank) FROM matches', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with at least 2 courses listed?' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id, T1.transcript_date  HAVING count(*) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Sort all the shops by number products in descending order, and return the name, location and district of each shop.' in SQLite? I currently have 'SELECT Name, Location, District FROM shop ORDER BY Number_products DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the name of the high school student with the most friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(T2.friend_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'list all cartoon titles and their directors ordered by their air date' in SQLite? I currently have 'SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the feature type name of feature AirCon?' in SQLite? I currently have 'SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \\\"AirCon\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors, sorted descending by the number of years they have worked?' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Year_of_Work DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and id of courses having at most 2 sections?' in SQLite? I currently have 'SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) <= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of employees hired in each shop; show the shop name as well.' in SQLite? I currently have 'SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average ranking for each player and their first name.' in SQLite? I currently have 'SELECT avg(T1.ranking), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name, T1.player_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of templates of the type CV.' in SQLite? I currently have 'SELECT count(*) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the makers and models?' in SQLite? I currently have 'SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Maker ,  Model FROM MODEL_LIST;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many available features are there in total?' in SQLite? I currently have 'SELECT COUNT(*) FROM Other_Available_Features', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Other_Available_Features\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what are all the addresses including line 1 and line 2?' in SQLite? I currently have 'SELECT line_1, line_2 FROM Addresses', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the code of the airport with the least flights.' in SQLite? I currently have 'SELECT AirportCode FROM (SELECT AirportCode, count(*) as num_flights FROM (SELECT SourceAirport as AirportCode FROM flights UNION ALL SELECT DestAirport as AirportCode FROM flights) AS T1 GROUP BY AirportCode) AS T2 ORDER BY num_flights ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are different nationalities of people and the corresponding number of people from each nation?' in SQLite? I currently have 'SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which country has the most of TV Channels? List the country and number of TV Channels it has.' in SQLite? I currently have 'SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of tourney that has more than 10 matches.' in SQLite? I currently have 'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon(mpg) of the cars with 4 cylinders?' in SQLite? I currently have 'SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner who has won the most matches, and how many rank points does this player have?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and capacity of the stadium with the most concerts after 2013 ?' in SQLite? I currently have 'SELECT T2.Name, T2.Capacity FROM stadium AS T2 WHERE T2.Stadium_ID IN (SELECT T1.Stadium_ID FROM concert AS T1 WHERE T1.Year > 2013 GROUP BY T1.Stadium_ID HAVING count(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) as concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) as subquery) LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of car models that are produced by each maker and what is the id and full name of each maker?' in SQLite? I currently have 'SELECT count(T1.Model), T2.Id, T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.Id, T2.FullName', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which makers designed more than 3 car models? List full name and the id.' in SQLite? I currently have 'SELECT T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING count(T2.Model) > 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models created by either the car maker General Motors or weighed more than 3500?' in SQLite? I currently have 'SELECT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'General Motors' OR T4.Weight > 3500', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the sections in reverse alphabetical order?' in SQLite? I currently have 'SELECT section_name FROM Sections ORDER BY section_name DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name FROM Sections ORDER BY section_name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the number of votes from state 'NY' or 'CA'?' in SQLite? I currently have 'SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Weekly_Rank FROM TV_series WHERE Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the year that has the most number of matches.' in SQLite? I currently have 'SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different series and contents are listed in the TV Channel table?' in SQLite? I currently have 'SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum accelerate for different number of cylinders?' in SQLite? I currently have 'SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of countries with English and French as official languages.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of employees' in SQLite? I currently have 'SELECT COUNT(*) FROM employee', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of all the dogs?' in SQLite? I currently have 'SELECT date_arrived, date_departed FROM Dogs', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT date_arrived ,  date_departed FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the record companies of orchestras, sorted descending by the years in which they were founded.' in SQLite? I currently have 'SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of templates with template type code PP or PPT?' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the email, cell phone and home phone of each professional?' in SQLite? I currently have 'SELECT email_address, cell_number, home_phone FROM Professionals', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights leaving from APG.' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many matches were played in 2013 or 2016?' in SQLite? I currently have 'SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose courses have not been arranged?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of conductors and the orchestras they have conducted.' in SQLite? I currently have 'SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List each language and the number of TV Channels using it.' in SQLite? I currently have 'SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and capacity for the stadium with the highest average attendance?' in SQLite? I currently have 'SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the version numbers and template type codes of templates with a version number greater than 5.' in SQLite? I currently have 'SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of distinct store locations.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Location) FROM shop', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LOCATION) FROM shop\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the manager name and district of the shop whose number of products is the largest.' in SQLite? I currently have 'SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT max(Number_products) FROM shop)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the airport code of the airport with the most flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON (T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport) GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the full name of each car maker, along with its id and how many models it produces?' in SQLite? I currently have 'SELECT T1.FullName, T1.Id, count(T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName, T1.Id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which department offers the most number of degrees? List department name and id.' in SQLite? I currently have 'SELECT T1.department_name, T1.department_id, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which grade has the most high schoolers?' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?' in SQLite? I currently have 'SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which employee received the biggest bonus? Give me the employee name.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = (SELECT max(Bonus) FROM evaluation)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shops run with no employees? Find the shop names' in SQLite? I currently have 'SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cartoons were written by \"Joseph Kuhr\"?' in SQLite? I currently have 'SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.' in SQLite? I currently have 'SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different loser names are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT loser_name) FROM matches', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the airline names and abbreviations for airlines in the USA?' in SQLite? I currently have 'SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all document ids with at least two paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  >=  2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first name of all the professionals along with the description of the treatment they have done.' in SQLite? I currently have 'SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id JOIN Treatment_Types AS T2 ON T3.treatment_type_code = T2.treatment_type_code', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers that have more than one song.' in SQLite? I currently have 'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name HAVING count(*) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the names of stores whose number products is more than the average number of products.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'how many countries are in Asia?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE Continent = 'Asia'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dogs have not gone through any treatment?' in SQLite? I currently have 'SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which abbreviation corresponds to Jetblue Airways?' in SQLite? I currently have 'SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all stadiums that did not have a concert in 2014?' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  =  2014)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For students who have pets , how many pets does each student have ? list their ids instead of names .' in SQLite? I currently have 'SELECT StuID, count(PetID) FROM Has_Pet GROUP BY StuID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many documents are using the template with type code 'PPT'?' in SQLite? I currently have 'SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of unique official languages spoken in the countries that are founded before 1930?' in SQLite? I currently have 'SELECT count(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers are from each country?' in SQLite? I currently have 'SELECT COUNT(Singer_ID) AS NumberOfSingers, Country FROM singer GROUP BY Country', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the ID of the high schooler named Kyle.' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of concerts happened in the stadium with the highest capacity .' in SQLite? I currently have 'SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age for all students who do not own any pets ?' in SQLite? I currently have 'SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(age) from student where stuid not in (select stuid from has_pet)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes for countries that do not speak English?' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers and number of concerts for each person?' in SQLite? I currently have 'SELECT T1.Name, count(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name, T2.Singer_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each singer name, what is the total sales for their songs?' in SQLite? I currently have 'SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of every student who has a cat or dog as a pet?' in SQLite? I currently have 'SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.' in SQLite? I currently have 'SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of the countries that do not speak English and whose government forms are not Republic?' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Code FROM country WHERE GovernmentForm != \\\"Republic\\\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many visitors below age 30 are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM visitor WHERE Age < 30', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE age  <  30\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id, line 1, and line 2 of the address with the most students?' in SQLite? I currently have 'SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2 ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights arriving in Aberdeen city?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of car models created by the car maker American Motor Company?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many official languages are spoken in Afghanistan?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Afghanistan\\\" AND IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries having at least one car maker? List name and id.' in SQLite? I currently have 'SELECT DISTINCT T2.CountryName, T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many type of governments are in Africa?' in SQLite? I currently have 'SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with the least number of results?' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date, COUNT(T2.student_course_id) AS num_results FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY num_results ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the model for the car with a weight smaller than the average?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id with 1 to 2 paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all European countries with at least 3 manufacturers?' in SQLite? I currently have 'SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?' in SQLite? I currently have 'SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each stadium, how many concerts play there?' in SQLite? I currently have 'SELECT T1.Stadium_ID, T1.Name, COUNT(T2.concert_ID)  FROM stadium AS T1  JOIN concert AS T2  ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Stadium_ID, T1.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the student with the most likes.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.liked_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is the first student to register? List the first name, middle name and last name.' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of each document, as well as the number of paragraphs in each?' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the descriptions for all the math courses?' in SQLite? I currently have 'SELECT course_description FROM Courses WHERE course_name LIKE '%math%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT course_description FROM Courses WHERE course_name  =  'math'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of teachers in ascending order of age.' in SQLite? I currently have 'SELECT Name FROM teacher ORDER BY Age ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher ORDER BY Age ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airport names at City 'Aberdeen'?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE City = 'Aberdeen'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE City = \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.' in SQLite? I currently have 'SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the mobile phone number of the student named Timmothy Ward ?' in SQLite? I currently have 'SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?' in SQLite? I currently have 'SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \\\"The Rise of the Blue Beetle!\\\";\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of teachers whose hometown is not `` Little Lever Urban District '' .' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are years of founding for orchestras that have had more than a single performance?' in SQLite? I currently have 'SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the language spoken by the largest percentage of people in each country?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN (SELECT CountryCode, max(Percentage) AS max_percentage FROM countrylanguage GROUP BY CountryCode) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.max_percentage', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is all the information about hiring?' in SQLite? I currently have 'SELECT * FROM hiring', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the maximum and minimum values of area codes?' in SQLite? I currently have 'SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(area_code) ,  min(area_code) FROM area_code_state\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which grades have 4 or more high schoolers?' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade HAVING count(ID) >= 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights land in Aberdeen or Abilene?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \\\"Aberdeen\\\" OR T2.city  =  \\\"Abilene\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the languages used by the least number of TV Channels and how many channels use it?' in SQLite? I currently have 'SELECT Language, count(*) AS num_channels FROM TV_Channel GROUP BY Language HAVING count(*) = (SELECT min(count(*)) FROM TV_Channel GROUP BY Language)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city and country is the Alton airport at?' in SQLite? I currently have 'SELECT City, Country FROM airports WHERE AirportName = 'Alton'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model of the car has the minimum horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = (SELECT min(Horsepower) FROM cars_data)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers who are not French citizens?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Citizenship != 'French'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Citizenship != \\\"France\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of all the dogs?' in SQLite? I currently have 'SELECT AVG(age) FROM Dogs', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?' in SQLite? I currently have 'SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Describe the section h.' in SQLite? I currently have 'SELECT section_description FROM Sections WHERE section_name = 'h'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_description FROM Sections WHERE section_name  =  'h'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different templates do all document use?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name of the student whose permanent address is different from his or her current one?' in SQLite? I currently have 'SELECT first_name FROM Students WHERE permanent_address_id != current_address_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the record company used by the greatest number of orchestras?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id and name with greatest number of paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY count(T2.Paragraph_ID) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of students who have 2 or more likes?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How long is the peopleâ€™s average life expectancy in Central Africa?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name, population, and head of state for the country that has the largest area.' in SQLite? I currently have 'SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of airport that has fewest number of flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 LEFT JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of all the poker players.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars have more than 4 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the name of the conductor that has conducted orchestras founded after 2008.' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What country is Jetblue Airways affiliated with?' in SQLite? I currently have 'SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What grade is Kyle in?' in SQLite? I currently have 'SELECT grade FROM Highschooler WHERE name = 'Kyle'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum horsepower and the make of the car models with 3 cylinders?' in SQLite? I currently have 'SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the most expensive charge type costs?' in SQLite? I currently have 'SELECT MAX(charge_amount) FROM Charges', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(charge_amount) FROM Charges\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the weight of the youngest dog.' in SQLite? I currently have 'SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the African countries that have a  population less than any country in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \\\"Asia\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the ids of templates that have the code PP or PPT.' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from 'APG'?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the last name of the student who has a cat that is 3 years old?' in SQLite? I currently have 'SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the description of the treatment type that costs the least money in total?' in SQLite? I currently have 'SELECT T2.treatment_type_description FROM Treatment_Types AS T2 JOIN (SELECT T1.treatment_type_code, SUM(T1.cost_of_treatment) as total_cost FROM Treatments AS T1 GROUP BY T1.treatment_type_code) AS T3 ON T2.treatment_type_code = T3.treatment_type_code ORDER BY T3.total_cost ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'which countries' tv channels are playing some cartoon written by Todd Casey?' in SQLite? I currently have 'SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of students who have at least 2 likes.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When is the first transcript released? List the date and details.' in SQLite? I currently have 'SELECT transcript_id, transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".' in SQLite? I currently have 'SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the towns from which at least two teachers come from?' in SQLite? I currently have 'SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(Teacher_ID) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of all high school students who do not have any friends.' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries are listed?' in SQLite? I currently have 'SELECT COUNT(*) FROM countries', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and gender of the all the students who have more than one pet?' in SQLite? I currently have 'SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM players', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country codes for countries that do not speak English.' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the smallest weight of the car produced with 8 cylinders on 1974 ?' in SQLite? I currently have 'SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of all high schoolers in grade 10.' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE grade = 10', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler WHERE grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me all the information about hiring.' in SQLite? I currently have 'SELECT * FROM hiring', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name of students who have cat or dog pet.' in SQLite? I currently have 'SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.' in SQLite? I currently have 'SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all distinct template type codes for all templates.' in SQLite? I currently have 'SELECT DISTINCT Template_Type_Code FROM Templates', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of airports which do not have any flight in and out.' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have at least 3 friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  >=  3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does each charge type costs? List both charge type and amount.' in SQLite? I currently have 'SELECT charge_type, charge_amount FROM Charges', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT charge_type ,  charge_amount FROM Charges\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many distinct countries do players come from?' in SQLite? I currently have 'SELECT COUNT(DISTINCT country_code) FROM players', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?' in SQLite? I currently have 'SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is minimum and maximum share of TV series?' in SQLite? I currently have 'SELECT MIN(Share), MAX(Share) FROM TV_series', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What the smallest version number and its template type code?' in SQLite? I currently have 'SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Version_Number ASC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the name, location and district of all shops in descending order of number of products.' in SQLite? I currently have 'SELECT Name, Location, District FROM shop ORDER BY Number_products DESC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is the most popular on the Asian continent?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY sum(T1.Percentage) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \\\"Asia\\\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name, country code, and birth date of the player with the most winner rank points across all matches?' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  ORDER BY T2.winner_rank_points DESC  LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the last name of the students who live in North Carolina but have not registered in any degree programs?' in SQLite? I currently have 'SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who both have friends and are liked?' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of dog pets that are raised by female students (with sex F).' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'F'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two treatments? List the professional's id, role, and first name.' in SQLite? I currently have 'SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the number of dogs that have not received any treatment .' in SQLite? I currently have 'SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from dogs where dog_id not in ( select dog_id from treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight and year for each year?' in SQLite? I currently have 'SELECT AVG(Weight), Year FROM cars_data GROUP BY Year', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are names of countries with the top 3 largest population?' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population DESC LIMIT 3', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population DESC LIMIT 3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium names without any concert.' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all airline names and their abbreviations in \"USA\".' in SQLite? I currently have 'SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the student IDs and numbers of friends corresponding to each.' in SQLite? I currently have 'SELECT T1.ID, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the player who did the most number of tours.' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.tours = (SELECT max(tours) FROM rankings)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many courses are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM Courses', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most common nationality of people?' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?' in SQLite? I currently have 'SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have less than 200 flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the population and life expectancies in Brazil?' in SQLite? I currently have 'SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which semesters do not have any student enrolled? List the semester name.' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the semester with no students enrolled?' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the pixel aspect ratio and nation of the tv channels that do not use English.' in SQLite? I currently have 'SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many contestants did not get voted?' in SQLite? I currently have 'SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which cities do more than one employee under age 30 come from?' in SQLite? I currently have 'SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(Employee_ID) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who owns the youngest dog? Give me his or her last name.' in SQLite? I currently have 'SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each shop, return the number of employees working there and the name of the shop.' in SQLite? I currently have 'SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and age of the visitor who bought the most tickets at once.' in SQLite? I currently have 'SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Num_of_Ticket = (SELECT max(Num_of_Ticket) FROM visit)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of students who have a grade higher than 5 and have at least 2 friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models were produced by the maker with full name American Motor Company?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?' in SQLite? I currently have 'SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the singer who is worth the most?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?' in SQLite? I currently have 'SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3  UNION  SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  JOIN model_list AS T3 ON T2.Id = T3.Maker  WHERE T3.Model = 'fiat'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.' in SQLite? I currently have 'SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the makers that produced some cars in the year of 1970?' in SQLite? I currently have 'SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the record formats of orchestras in ascending order of count.' in SQLite? I currently have 'SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of players who won in both 2013 and 2016?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013 ', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of matches.' in SQLite? I currently have 'SELECT COUNT(*) FROM matches', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted orchestras founded after the year 2008?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the continent name which Anguilla belongs to?' in SQLite? I currently have 'SELECT Continent FROM country WHERE Name = 'Anguilla'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have either English or Dutch as an official language?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND IsOfficial  =  \\\"T\\\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\" AND IsOfficial  =  \\\"T\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the most recent treatment cost?' in SQLite? I currently have 'SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models are produced in the usa?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the minimum grade of students who have no friends.' in SQLite? I currently have 'SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the Asian countries which have a population larger than that of any country in Africa?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \\\"Africa\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average and maximum age for each pet type?' in SQLite? I currently have 'SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the conductor who has conducted the most orchestras?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID, T1.Name ORDER BY count(*) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the kind of program which most number of students are enrolled in?' in SQLite? I currently have 'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the nationalities that are shared by at least two people?' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many orchestras does each record company manage?' in SQLite? I currently have 'SELECT COUNT(*) , Record_Company FROM orchestra GROUP BY Record_Company', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the sname of every sing that does not have any song?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the countries with no car makers?' in SQLite? I currently have 'SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many continents are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM continents', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date and id of the transcript with at least 2 course results.' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING count(*) >= 2', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have governments that are republics?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the template ids of any templates used in more than a single document?' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(*) > 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the content of the series Sky Radio?' in SQLite? I currently have 'SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the content of TV Channel with serial name \"Sky Radio\"?' in SQLite? I currently have 'SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the name of employee who was awarded the most times in the evaluation.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(count_eval) FROM (SELECT count(*) as count_eval FROM evaluation GROUP BY Employee_ID) AS subquery)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name, population, and life expectancy of the largest Asian country by land?' in SQLite? I currently have 'SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities of conductors.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM conductor', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Whose permanent address is different from his or her current address? List his or her first name.' in SQLite? I currently have 'SELECT first_name FROM Students WHERE permanent_address_id != current_address_id', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt and a sample SQL query. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of people who do not play poker?' in SQLite? I currently have 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)', and if this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of high school students who do not have friends?' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', which outputs [(1025,), (1641,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?' in SQLite? I currently have 'SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72', which outputs [('Africa', 784475000, 52.571929824561394), ('Asia', 3705025700, 67.44117647058825), ('Oceania', 30401150, 69.715), ('South America', 345780000, 70.94615384615386)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?' in SQLite? I currently have 'SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72', which outputs [(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what is the name and nation of the singer who have a song having 'Hey' in its name?' in SQLite? I currently have 'SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'', which outputs [('Justin Brown', 'France')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all cartoons directed by Ben Jones?' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'', which outputs [('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of the visitors whose membership level is not higher than 4?' in SQLite? I currently have 'SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4', which outputs [(36.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the greatest accelerate?' in SQLite? I currently have 'SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)', which outputs [('71',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has the most frequent destination airport?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(T2.DestAirport) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of poker players sorted by their earnings descending.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC', which outputs [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of flights arriving in Aberdeen.' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different templates used for documents.' in SQLite? I currently have 'SELECT count(DISTINCT Template_ID) FROM Documents', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many friends does each student have?' in SQLite? I currently have 'SELECT T1.ID, T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', which outputs [(1101, 'Haley', 1), (1247, 'Alexis', 2), (1304, 'Jordan', 1), (1316, 'Austin', 1), (1381, 'Tiffany', 1), (1468, 'Kris', 2), (1501, 'Jessica', 1), (1510, 'Jordan', 2), (1661, 'Logan', 1), (1689, 'Gabriel', 2), (1709, 'Cassandra', 1), (1782, 'Andrew', 3), (1911, 'Gabriel', 1), (1934, 'Kyle', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many friends does each student have?' in SQLite? I currently have 'SELECT student_id ,  count(*) FROM Friend GROUP BY student_id', which outputs [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the birth years and citizenships of the singers?' in SQLite? I currently have 'SELECT Birth_Year, Citizenship FROM singer', which outputs [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many unique languages are spoken in the world?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Language) FROM countrylanguage', which outputs [(457,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.' in SQLite? I currently have 'SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders <= 3', which outputs [(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all cartoons in alphabetical order.' in SQLite? I currently have 'SELECT Title FROM Cartoon ORDER BY Title ASC', which outputs [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the government form name and total population for each government form whose average life expectancy is longer than 72.' in SQLite? I currently have 'SELECT GovernmentForm, sum(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72) GROUP BY GovernmentForm', which outputs [('Commonwealth of the US', 3947000), ('Constitutional Monarchy (Emirate)', 1972000), ('Constitutional Monarchy, Federation', 82516000), ('Dependent Territory of the UK', 193050), ('Emirate Federation', 2441000), ('Federation', 7160400), ('Monarchy (Emirate)', 617000), ('Monarchy (Sultanate)', 2870000), ('Nonmetropolitan Territory of France', 464000), ('Nonmetropolitan Territory of The Netherlands', 320000), ('Overseas Department of France', 1731000), ('Parliamentary Coprincipality', 78000), ('Part of Denmark', 99000), ('Socialistic Republic', 115072000), ('Socialistic State', 5605000), ('Special Administrative Region of China', 7255000), ('US Territory', 329000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the government form name and total population for each government form whose average life expectancy is longer than 72.' in SQLite? I currently have 'SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72', which outputs [(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the language used least number of TV Channel. List language and number of TV Channel.' in SQLite? I currently have 'SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1', which outputs [('English', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all countries and the number of singers in each country.' in SQLite? I currently have 'SELECT Country, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Country', which outputs [('France', 4), ('Netherlands', 1), ('United States', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car makers are there in each continents? List the continent name and the count.' in SQLite? I currently have 'SELECT count(T1.Id), T3.Continent FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId GROUP BY T3.Continent', which outputs [(4, 'america'), (7, 'asia'), (11, 'europe')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car makers are there in each continents? List the continent name and the count.' in SQLite? I currently have 'SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;', which outputs [('america', 4), ('asia', 7), ('europe', 11)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What type of pet is the youngest animal, and how much does it weigh?' in SQLite? I currently have 'SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)', which outputs [('dog', 9.3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each continent, list its id, name, and how many countries it has?' in SQLite? I currently have 'SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent', which outputs [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the distinct states and create time of all votes?' in SQLite? I currently have 'SELECT DISTINCT state, created FROM VOTES', which outputs [('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\\n', '2018-03-09 19:03:40')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT state ,  created FROM votes\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of tours for each ranking date.' in SQLite? I currently have 'SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date', which outputs [(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30), (19901210, 30), (19901217, 30), (19901224, 30), (19901231, 30), (19910101, 29), (19910107, 30), (19910114, 30), (19910121, 30), (19910128, 30), (19910204, 30), (19910211, 30), (19910218, 30), (19910225, 30), (19910304, 30), (19910311, 29), (19910318, 29), (19910325, 29), (19910401, 29), (19910408, 29), (19910415, 29), (19910422, 29), (19910429, 29), (19910506, 29), (19910513, 29), (19910520, 29), (19910527, 29), (19910603, 29), (19910610, 29), (19910617, 29), (19910624, 29), (19910701, 29), (19910708, 30), (19910715, 29), (19910722, 29), (19910729, 29), (19910805, 29), (19910812, 29), (19910819, 29), (19910826, 30), (19910902, 30), (19910909, 30), (19910916, 30), (19910923, 30), (19910930, 30), (19911007, 31), (19911014, 31), (19911021, 31), (19911028, 31), (19911104, 44), (19911111, 44), (19911118, 44), (19911125, 44), (19911202, 31), (19911209, 44), (19911216, 45), (19911223, 45), (19911230, 45), (19920101, 44), (19920106, 45), (19920113, 45), (19920120, 45), (19920127, 45), (19920203, 45), (19920210, 29), (19920217, 45), (19920224, 45), (19920302, 45), (19920309, 45), (19920316, 45), (19920323, 45), (19920330, 45), (19920406, 45), (19920413, 45), (19920420, 45), (19920427, 45), (19920504, 45), (19920511, 45), (19920518, 45), (19920525, 45), (19920601, 45), (19920608, 45), (19920615, 45), (19920622, 45), (19920629, 45), (19920706, 45), (19920713, 46), (19920720, 46), (19920727, 45), (19920803, 73), (19920810, 73), (19920817, 73), (19920824, 119), (19920831, 90), (19920907, 90), (19920914, 90), (19920921, 90), (19920928, 90), (19921005, 62), (19921012, 62), (19921019, 62), (19921026, 62), (19921102, 62), (19921109, 62), (19921116, 62), (19921123, 62), (19921130, 62), (19921207, 62), (19921214, 62), (19921221, 62), (19921228, 45), (19930101, 44), (19930104, 45), (19930111, 45), (19930118, 45), (19930125, 45), (19930201, 45), (19930208, 32), (19930215, 45), (19930222, 45), (19930301, 45), (19930308, 45), (19930315, 45), (19930322, 45), (19930329, 45), (19930405, 45), (19930412, 62), (19930419, 62), (19930426, 62), (19930503, 62), (19930510, 62), (19930517, 44), (19930524, 44), (19930531, 44), (19930607, 44), (19930614, 44), (19930621, 44), (19930628, 44), (19930705, 62), (19930712, 62), (19930719, 62), (19930726, 62), (19930802, 43), (19930809, 43), (19930816, 43), (19930823, 43), (19930830, 43), (19930906, 43), (19930913, 43), (19930920, 76), (19930927, 75), (19931004, 58), (19931011, 58), (19931018, 58), (19931025, 58), (19931101, 58), (19931108, 58), (19931115, 75), (19931122, 75), (19931129, 75), (19931206, 75), (19931213, 75), (19931220, 75), (19931227, 75), (19940101, 73), (19940103, 75), (19940110, 75), (19940117, 75), (19940124, 75), (19940131, 62), (19940207, 63), (19940214, 63), (19940221, 63), (19940228, 62), (19940307, 62), (19940314, 62), (19940321, 62), (19940328, 61), (19940404, 62), (19940411, 61), (19940418, 44), (19940425, 57), (19940502, 57), (19940509, 57), (19940516, 57), (19940523, 57), (19940530, 57), (19940606, 65), (19940613, 65), (19940620, 65), (19940627, 65), (19940704, 67), (19940711, 67), (19940718, 60), (19940725, 60), (19940801, 60), (19940808, 60), (19940815, 60), (19940822, 60), (19940829, 60), (19940905, 60), (19940912, 68), (19940919, 68), (19940926, 69), (19941003, 69), (19941010, 69), (19941017, 69), (19941024, 59), (19941031, 59), (19941107, 69), (19941114, 69), (19941121, 69), (19941128, 69), (19941205, 69), (19941212, 69), (19941219, 69), (19941226, 69), (19950101, 69), (19950102, 69), (19950109, 69), (19950116, 69), (19950123, 69), (19950130, 69), (19950206, 69), (19950213, 69), (19950220, 69), (19950227, 69), (19950306, 69), (19950313, 69), (19950320, 69), (19950327, 69), (19950403, 69), (19950410, 69), (19950417, 69), (19950424, 69), (19950501, 69), (19950508, 69), (19950515, 69), (19950522, 69), (19950529, 69), (19950605, 69), (19950612, 96), (19950619, 96), (19950626, 96), (19950703, 96), (19950710, 97), (19950717, 118), (19950724, 118), (19950731, 118), (19950807, 118), (19950814, 118), (19950821, 131), (19950828, 131), (19950904, 131), (19950911, 131), (19950918, 131), (19950925, 131), (19951002, 131), (19951009, 131), (19951016, 131), (19951023, 131), (19951030, 131), (19951106, 131), (19951113, 138), (19951120, 138), (19951127, 138), (19951204, 138), (19951211, 138), (19951218, 138), (19951225, 138), (19960101, 138), (19960108, 125), (19960115, 125), (19960122, 125), (19960129, 125), (19960205, 125), (19960212, 125), (19960219, 125), (19960226, 147), (19960304, 147), (19960311, 147), (19960318, 147), (19960325, 147), (19960401, 147), (19960408, 147), (19960415, 147), (19960422, 147), (19960429, 147), (19960506, 147), (19960513, 147), (19960520, 147), (19960527, 147), (19960603, 147), (19960610, 147), (19960617, 147), (19960624, 147), (19960701, 147), (19960708, 171), (19960715, 171), (19960722, 171), (19960729, 171), (19960805, 171), (19960812, 171), (19960819, 171), (19960826, 171), (19960902, 171), (19960909, 194), (19960916, 172), (19960923, 172), (19960930, 172), (19961007, 172), (19961014, 175), (19961021, 175), (19961028, 191), (19961104, 191), (19961111, 213), (19961118, 213), (19961125, 213), (19961202, 213), (19961209, 213), (19961216, 213), (19961223, 185), (19961230, 185), (19970101, 185), (19970106, 185), (19970113, 185), (19970120, 185), (19970127, 209), (19970203, 209), (19970210, 209), (19970217, 209), (19970224, 223), (19970303, 223), (19970310, 223), (19970317, 223), (19970324, 223), (19970331, 223), (19970407, 223), (19970414, 225), (19970421, 225), (19970428, 225), (19970505, 225), (19970512, 225), (19970519, 225), (19970526, 225), (19970602, 225), (19970609, 225), (19970616, 225), (19970623, 225), (19970630, 225), (19970707, 164), (19970714, 257), (19970721, 257), (19970728, 257), (19970804, 273), (19970811, 273), (19970818, 273), (19970825, 273), (19970901, 273), (19970908, 273), (19970915, 273), (19970922, 273), (19970929, 273), (19971006, 273), (19971013, 299), (19971020, 314), (19971027, 314), (19971103, 337), (19971110, 337), (19971117, 363), (19971124, 363), (19971201, 363), (19971208, 394), (19971215, 394), (19971222, 394), (19971229, 394), (19980101, 394), (19980105, 394), (19980112, 394), (19980119, 394), (19980126, 394), (19980202, 394), (19980209, 394), (19980216, 394), (19980223, 394), (19980302, 394), (19980309, 394), (19980316, 394), (19980323, 394), (19980330, 426), (19980406, 426), (19980413, 459), (19980420, 459), (19980427, 459), (19980504, 459), (19980511, 459), (19980518, 459), (19980525, 459), (19980601, 459), (19980608, 543), (19980615, 569), (19980622, 590), (19980629, 590), (19980706, 633), (19980713, 633), (19980720, 633), (19980727, 634), (19980803, 634), (19980810, 634), (19980817, 631), (19980824, 631), (19980831, 660), (19980907, 660), (19980914, 663), (19980921, 663), (19980928, 683), (19981005, 688), (19981012, 688), (19981019, 696), (19981026, 693), (19981102, 693), (19981109, 692), (19981116, 692), (19981123, 692), (19981130, 709), (19981207, 703), (19981214, 703), (19981221, 703), (19981228, 703), (19990101, 703), (19990104, 722), (19990111, 722), (19990118, 722), (19990125, 722), (19990201, 728), (19990208, 723), (19990215, 723), (19990222, 723), (19990301, 723), (19990308, 723), (19990315, 728), (19990322, 728), (19990329, 728), (19990405, 728), (19990412, 728), (19990419, 728), (19990426, 752), (19990503, 761), (19990510, 761), (19990517, 777), (19990524, 777), (19990531, 777), (19990607, 804), (19990614, 804), (19990621, 804), (19990628, 804), (19990705, 804), (19990712, 829), (19990719, 829), (19990726, 829), (19990802, 829), (19990809, 870), (19990816, 873), (19990823, 853), (19990830, 861), (19990906, 861), (19990913, 879), (19990920, 879), (19990927, 899), (19991004, 927), (19991011, 941), (19991018, 964), (19991025, 941), (19991101, 941), (19991108, 941), (19991115, 941), (19991122, 941), (19991129, 966), (19991206, 966), (19991213, 989), (19991220, 989), (19991227, 989), (20000101, 989), (20000103, 989), (20000110, 989), (20000117, 989), (20000124, 989), (20000131, 1013), (20000207, 1038), (20000214, 1038), (20000221, 1038), (20000228, 1038), (20000306, 1065), (20000313, 1065), (20000320, 1065), (20000327, 1065), (20000403, 1065), (20000410, 1093), (20000417, 1093), (20000424, 1093), (20000501, 1122), (20000508, 1122), (20000515, 1106), (20000522, 1106), (20000529, 1106), (20000605, 1106), (20000612, 1160), (20000619, 1160), (20000626, 1188), (20000703, 1188), (20000710, 1204), (20000717, 1205), (20000724, 1212), (20000731, 1276), (20000807, 1276), (20000814, 1224), (20000821, 1224), (20000828, 1224), (20000904, 1224), (20000911, 1241), (20000918, 1265), (20000925, 1231), (20001002, 1223), (20001009, 1232), (20001016, 1253), (20001023, 1245), (20001030, 1247), (20001106, 1173), (20001113, 964), (20001120, 961), (20001127, 961), (20001204, 961), (20001211, 964), (20001218, 964), (20001225, 964), (20010101, 964), (20010108, 964), (20010115, 964), (20010122, 964), (20010129, 977), (20010205, 977), (20010212, 1004), (20010219, 1027), (20010226, 1027), (20010305, 1027), (20010312, 1027), (20010319, 1101), (20010326, 1101), (20010402, 914), (20010409, 930), (20010416, 952), (20010423, 961), (20010430, 988), (20010507, 1011), (20010514, 1011), (20010521, 1029), (20010528, 1067), (20010604, 1067), (20010611, 1094), (20010618, 1094), (20010625, 1073), (20010702, 1073), (20010709, 1113), (20010716, 1135), (20010723, 1149), (20010730, 1149), (20010806, 1175), (20010813, 1175), (20010820, 1175), (20010827, 1201), (20010903, 1201), (20010910, 1228), (20010917, 1231), (20010924, 1263), (20011001, 1287), (20011008, 1267), (20011015, 1288), (20011022, 1291), (20011029, 1312), (20011105, 1312), (20011112, 1412), (20011119, 1412), (20011126, 1437), (20011203, 1437), (20011210, 1437), (20011217, 1430), (20011224, 1430), (20011231, 1430), (20020101, 1430), (20020107, 1430), (20020114, 1430), (20020121, 1430), (20020128, 1430), (20020204, 1422), (20020211, 1422), (20020218, 1422), (20020225, 1424), (20020304, 1424), (20020311, 1424), (20020318, 1448), (20020325, 1448), (20020401, 1573), (20020408, 1574), (20020415, 1574), (20020422, 1574), (20020429, 1577), (20020506, 1730), (20020513, 1577), (20020520, 1577), (20020527, 1577), (20020603, 1577), (20020610, 1783), (20020617, 1803), (20020624, 1783), (20020701, 1783), (20020708, 1834), (20020715, 1835), (20020722, 1828), (20020729, 1853), (20020805, 1853), (20020812, 1925), (20020819, 1915), (20020826, 2111), (20020902, 2111), (20020909, 2451), (20020916, 2457), (20020923, 2462), (20020930, 2496), (20021007, 2526), (20021014, 2520), (20021021, 2505), (20021028, 2505), (20021104, 2498), (20021111, 2497), (20021118, 2497), (20021125, 2497), (20021202, 2497), (20021209, 2497), (20021216, 2497), (20021223, 2497), (20021230, 2497), (20030101, 2497), (20030106, 2497), (20030113, 2497), (20030120, 2497), (20030127, 2497), (20030203, 2517), (20030210, 2507), (20030217, 2490), (20030224, 2528), (20030303, 2549), (20030310, 2549), (20030317, 2571), (20030324, 2571), (20030331, 2614), (20030407, 2587), (20030414, 2587), (20030421, 2608), (20030428, 2719), (20030505, 2652), (20030512, 2671), (20030519, 2728), (20030526, 1860), (20030602, 2728), (20030609, 2753), (20030616, 2753), (20030623, 2731), (20030630, 2731), (20030707, 2730), (20030714, 2755), (20030721, 2759), (20030728, 2777), (20030804, 2732), (20030811, 2734), (20030818, 2755), (20030825, 2801), (20030901, 2801), (20030908, 2798), (20030915, 2847), (20030922, 2862), (20030929, 2930), (20031006, 2961), (20031013, 2966), (20031020, 3035), (20031027, 3020), (20031103, 3038), (20031110, 3052), (20031117, 3065), (20031124, 3092), (20031201, 3120), (20031208, 3190), (20031215, 3211), (20031222, 3211), (20031229, 3214), (20040101, 3214), (20040105, 3206), (20040112, 3206), (20040119, 3206), (20040126, 3206), (20040202, 3257), (20040209, 3265), (20040216, 3282), (20040223, 3282), (20040301, 3279), (20040308, 3286), (20040315, 3286), (20040322, 3286), (20040329, 3286), (20040405, 3277), (20040412, 3286), (20040419, 1489), (20040426, 3379), (20040503, 2613), (20040510, 1187), (20040517, 2361), (20040524, 2955), (20040531, 2535), (20040607, 3433), (20040614, 3456), (20040621, 3492), (20040628, 3492), (20040705, 3498), (20040712, 3516), (20040719, 3587), (20040726, 3592), (20040802, 3592), (20040809, 3645), (20040816, 3647), (20040823, 3661), (20040830, 3705), (20040906, 3705), (20040913, 3785), (20040920, 3831), (20040927, 3913), (20041004, 3957), (20041011, 3986), (20041018, 3987), (20041025, 3968), (20041101, 4011), (20041108, 4071), (20041115, 4124), (20041122, 4145), (20041129, 4147), (20041206, 4160), (20041213, 4160), (20041220, 4160), (20041227, 4160), (20050101, 4160), (20050103, 4160), (20050110, 4160), (20050117, 4160), (20050124, 4160), (20050131, 4198), (20050207, 4198), (20050214, 4211), (20050221, 4286), (20050228, 4286), (20050307, 4313), (20050314, 4313), (20050321, 4333), (20050328, 4333), (20050404, 4362), (20050411, 4371), (20050418, 4379), (20050425, 4379), (20050502, 4379), (20050509, 4470), (20050516, 4489), (20050523, 4522), (20050530, 4522), (20050606, 4682), (20050613, 4705), (20050620, 4727), (20050627, 4727), (20050704, 4792), (20050711, 4816), (20050718, 4847), (20050725, 4859), (20050801, 4926), (20050808, 4982), (20050815, 5020), (20050822, 5090), (20050829, 5100), (20050905, 5100), (20050912, 5187), (20050919, 5173), (20050926, 5175), (20051003, 5215), (20051010, 5249), (20051017, 5237), (20051024, 5257), (20051031, 5331), (20051107, 5362), (20051114, 5357), (20051121, 5391), (20051128, 5401), (20051205, 5452), (20051212, 5452), (20051219, 5452), (20051226, 5452), (20060101, 5452), (20060102, 5452), (20060109, 5452), (20060116, 5452), (20060123, 5452), (20060130, 5441), (20060206, 5425), (20060213, 5441), (20060220, 5478), (20060227, 5528), (20060306, 5548), (20060313, 5548), (20060320, 5559), (20060327, 5559), (20060403, 5626), (20060410, 5626), (20060417, 5644), (20060424, 5658), (20060501, 5656), (20060508, 5654), (20060515, 5683), (20060522, 5721), (20060529, 5798), (20060605, 5798), (20060612, 5862), (20060619, 5897), (20060626, 5944), (20060703, 5944), (20060710, 5983), (20060717, 6026), (20060724, 6065), (20060731, 6133), (20060807, 6151), (20060814, 6226), (20060821, 6289), (20060828, 6284), (20060904, 6284), (20060911, 6304), (20060918, 6347), (20060925, 6376), (20061002, 6436), (20061009, 6520), (20061016, 6629), (20061023, 6730), (20061030, 6808), (20061106, 6816), (20061113, 6807), (20061120, 6893), (20061127, 6896), (20061204, 6931), (20061211, 6953), (20061218, 6953), (20061225, 6953), (20070101, 6953), (20070108, 6926), (20070115, 6926), (20070122, 6926), (20070129, 6925), (20070205, 6925), (20070212, 6930), (20070219, 6942), (20070226, 6988), (20070305, 7017), (20070312, 7017), (20070319, 7058), (20070326, 7058), (20070402, 7139), (20070409, 7175), (20070416, 7197), (20070423, 7197), (20070430, 7197), (20070507, 7233), (20070514, 7317), (20070521, 7341), (20070528, 7365), (20070604, 7365), (20070611, 7448), (20070618, 7448), (20070625, 7473), (20070702, 7473), (20070709, 7495), (20070716, 7478), (20070723, 7470), (20070730, 7528), (20070806, 7522), (20070813, 7527), (20070820, 7503), (20070827, 7504), (20070903, 7504), (20070910, 7602), (20070917, 7643), (20070924, 7686), (20071001, 7697), (20071008, 7707), (20071015, 7687), (20071022, 7638), (20071029, 7711), (20071105, 7677), (20071112, 7664), (20071119, 7666), (20071126, 7674), (20071203, 7650), (20071210, 7659), (20071217, 7659), (20071224, 7682), (20071231, 7682), (20080101, 7682), (20080107, 7682), (20080114, 7711), (20080121, 7711), (20080128, 7691), (20080204, 7716), (20080211, 7743), (20080218, 7742), (20080225, 7731), (20080303, 7761), (20080310, 7790), (20080317, 7790), (20080324, 7832), (20080331, 7832), (20080407, 7873), (20080414, 7889), (20080421, 7917), (20080428, 7917), (20080505, 7929), (20080512, 8002), (20080519, 8022), (20080526, 8090), (20080602, 8090), (20080609, 8030), (20080616, 7970), (20080623, 7966), (20080630, 7966), (20080707, 8089), (20080714, 8113), (20080721, 8235), (20080728, 8280), (20080804, 8325), (20080811, 8372), (20080818, 8387), (20080825, 8417), (20080901, 8417), (20080908, 8527), (20080915, 8639), (20080922, 8690), (20080929, 8731), (20081006, 8762), (20081013, 8794), (20081020, 8836), (20081027, 8898), (20081103, 8956), (20081110, 8996), (20081117, 9003), (20081124, 9019), (20081201, 9050), (20081208, 9076), (20081215, 9077), (20081222, 9070), (20081229, 9070), (20090101, 9070), (20090105, 9064), (20090112, 9064), (20090119, 9064), (20090126, 9064), (20090202, 9087), (20090209, 9087), (20090216, 9059), (20090223, 9063), (20090302, 9063), (20090309, 9053), (20090316, 9053), (20090323, 9057), (20090330, 9057), (20090406, 9066), (20090413, 9121), (20090420, 9110), (20090427, 9111), (20090504, 9094), (20090511, 9143), (20090518, 9140), (20090525, 9153), (20090601, 9153), (20090608, 9203), (20090615, 9239), (20090622, 9255), (20090629, 9255), (20090706, 9310), (20090713, 9376), (20090720, 9474), (20090727, 9589), (20090803, 9611), (20090810, 9598), (20090817, 9642), (20090824, 9682), (20090831, 9682), (20090907, 9682), (20090914, 9808), (20090921, 9856), (20090928, 9918), (20091005, 9929), (20091012, 9925), (20091019, 10003), (20091026, 10025), (20091102, 10061), (20091109, 10116), (20091116, 10137), (20091123, 10204), (20091130, 10238), (20091207, 10221), (20091214, 10272), (20091221, 10272), (20091228, 10318), (20100101, 10318), (20100104, 10318), (20100111, 10320), (20100118, 10329), (20100125, 10329), (20100201, 10373), (20100208, 10372), (20100215, 10389), (20100222, 10404), (20100301, 10430), (20100308, 10442), (20100315, 10442), (20100322, 10412), (20100329, 10412), (20100405, 10481), (20100412, 10515), (20100419, 10543), (20100426, 10580), (20100503, 10590), (20100510, 10576), (20100517, 10593), (20100524, 10634), (20100531, 10634), (20100607, 10613), (20100614, 10630), (20100621, 10634), (20100628, 10634), (20100705, 10685), (20100712, 10726), (20100719, 10756), (20100726, 10817), (20100802, 10835), (20100809, 10937), (20100816, 10999), (20100823, 11026), (20100830, 11125), (20100906, 11125), (20100913, 11256), (20100920, 11290), (20100927, 11339), (20101004, 11460), (20101011, 11566), (20101018, 11594), (20101025, 11617), (20101101, 11687), (20101108, 11735), (20101115, 11814), (20101122, 11845), (20101129, 11877), (20101206, 11888), (20101213, 11907), (20101220, 11913), (20101227, 11904), (20110101, 11904), (20110103, 12060), (20110110, 12067), (20110117, 12094), (20110124, 12094), (20110131, 12143), (20110207, 12181), (20110214, 12204), (20110221, 12201), (20110228, 12254), (20110307, 12267), (20110314, 12267), (20110321, 12303), (20110328, 12303), (20110404, 12343), (20110411, 12398), (20110418, 12434), (20110425, 12422), (20110502, 12438), (20110509, 12482), (20110516, 12467), (20110523, 12522), (20110530, 12522), (20110606, 12659), (20110613, 12682), (20110620, 12686), (20110627, 12686), (20110704, 12867), (20110711, 12895), (20110718, 12927), (20110725, 13006), (20110801, 12999), (20110808, 13081), (20110815, 13129), (20110822, 13140), (20110829, 13174), (20110905, 13174), (20110912, 13299), (20110919, 13342), (20110926, 13382), (20111003, 13372), (20111010, 13382), (20111017, 13411), (20111024, 13443), (20111031, 13465), (20111107, 13443), (20111114, 13482), (20111121, 13518), (20111128, 13517), (20111205, 13542), (20111212, 13536), (20111219, 13565), (20111226, 13603), (20120101, 13603), (20120102, 13610), (20120109, 13628), (20120116, 13618), (20120123, 13618), (20120130, 13667), (20120206, 13666), (20120213, 13674), (20120220, 13719), (20120227, 13788), (20120305, 13791), (20120312, 13791), (20120319, 13818), (20120326, 13818), (20120402, 13881), (20120409, 13902), (20120416, 13938), (20120423, 13964), (20120430, 13983), (20120507, 14016), (20120514, 14015), (20120521, 14034), (20120528, 14087), (20120604, 14087), (20120611, 14072), (20120618, 14138), (20120625, 14172), (20120702, 14172), (20120709, 14180), (20120716, 14223), (20120723, 14250), (20120730, 14264), (20120806, 14286), (20120813, 14331), (20120820, 14361), (20120827, 14389), (20120903, 14389), (20120910, 14389), (20120917, 14402), (20120924, 14438), (20121001, 14472), (20121008, 14480), (20121015, 14513), (20121022, 14525), (20121029, 14547), (20121105, 14585), (20121112, 14621), (20121119, 14624), (20121126, 14612), (20121203, 14610), (20121210, 14639), (20121217, 14633), (20121224, 14649), (20121231, 13949), (20130101, 14648), (20130107, 13966), (20130114, 14667), (20130121, 14667), (20130128, 14667), (20130204, 14652), (20130211, 14651), (20130218, 14649), (20130225, 14554), (20130304, 14695), (20130311, 14727), (20130318, 13048), (20130401, 6790), (20130408, 14591), (20130415, 14449), (20130422, 14451), (20130429, 14462), (20130506, 14487), (20130513, 14516), (20130520, 14531), (20130527, 14545), (20130603, 14545), (20130610, 14553), (20130617, 14569), (20130624, 14650), (20130708, 14651), (20130715, 14689), (20130722, 14751), (20130729, 14766), (20130805, 14679), (20130812, 14599), (20130819, 14740), (20130826, 14714), (20130902, 14796), (20130909, 14820), (20130916, 14866), (20130923, 14878), (20130930, 14885), (20131007, 15028), (20131014, 15072), (20131021, 15025), (20131028, 15071), (20131104, 15098), (20131111, 15101), (20131118, 15151), (20131125, 15337), (20131202, 15334), (20131209, 15512), (20131216, 15540), (20131223, 15701), (20131230, 15708), (20140106, 15703), (20140113, 15637), (20140120, 8585), (20140127, 15646), (20140203, 15632), (20140210, 15637), (20140217, 8565), (20140224, 15659), (20150302, 15557), (20150406, 15578), (20150413, 15545), (20150420, 15568), (20150427, 15475), (20150511, 15710), (20150518, 15623), (20150525, 15741), (20150608, 15741), (20150622, 15810), (20150803, 15761), (20150810, 15776), (20150824, 15908), (20150831, 16184), (20150914, 15832), (20150921, 15800), (20151005, 16178), (20151012, 16191), (20151019, 16138), (20151102, 16293), (20160111, 4812), (20160118, 16518), (20160201, 16629), (20160208, 16586), (20160215, 16529), (20160222, 16454), (20160229, 16515), (20160307, 16517), (20160411, 16446), (20160418, 16454), (20160425, 16489), (20160502, 16388), (20160509, 16374), (20160523, 16351), (20160606, 16361), (20160620, 16314), (20160627, 16293), (20160815, 16325), (20160919, 16316), (20160926, 16305), (20161010, 16233), (20161031, 16349), (20161107, 16364), (20161114, 16249), (20161121, 16345), (20161128, 16294), (20161205, 16336), (20161212, 16387), (20170102, 16372), (20170109, 16406), (20170116, 16379), (20170213, 16305), (20170220, 16207), (20170306, 16111), (20170320, 16230), (20170417, 16270), (20170424, 16226), (20170501, 16303), (20170508, 16124), (20170515, 16204), (20170522, 16290), (20170529, 16649), (20170612, 16157), (20170619, 16189), (20170626, 16184), (20170703, 16597), (20170717, 15983), (20170724, 16138), (20170731, 16145), (20170807, 16147), (20170814, 16268), (20170821, 16279), (20170828, 16301), (20170911, 16161)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of tours for each ranking date.' in SQLite? I currently have 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', which outputs [(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203), (30, 19901210), (30, 19901217), (30, 19901224), (30, 19901231), (29, 19910101), (30, 19910107), (30, 19910114), (30, 19910121), (30, 19910128), (30, 19910204), (30, 19910211), (30, 19910218), (30, 19910225), (30, 19910304), (29, 19910311), (29, 19910318), (29, 19910325), (29, 19910401), (29, 19910408), (29, 19910415), (29, 19910422), (29, 19910429), (29, 19910506), (29, 19910513), (29, 19910520), (29, 19910527), (29, 19910603), (29, 19910610), (29, 19910617), (29, 19910624), (29, 19910701), (30, 19910708), (29, 19910715), (29, 19910722), (29, 19910729), (29, 19910805), (29, 19910812), (29, 19910819), (30, 19910826), (30, 19910902), (30, 19910909), (30, 19910916), (30, 19910923), (30, 19910930), (31, 19911007), (31, 19911014), (31, 19911021), (31, 19911028), (44, 19911104), (44, 19911111), (44, 19911118), (44, 19911125), (31, 19911202), (44, 19911209), (45, 19911216), (45, 19911223), (45, 19911230), (44, 19920101), (45, 19920106), (45, 19920113), (45, 19920120), (45, 19920127), (45, 19920203), (29, 19920210), (45, 19920217), (45, 19920224), (45, 19920302), (45, 19920309), (45, 19920316), (45, 19920323), (45, 19920330), (45, 19920406), (45, 19920413), (45, 19920420), (45, 19920427), (45, 19920504), (45, 19920511), (45, 19920518), (45, 19920525), (45, 19920601), (45, 19920608), (45, 19920615), (45, 19920622), (45, 19920629), (45, 19920706), (46, 19920713), (46, 19920720), (45, 19920727), (73, 19920803), (73, 19920810), (73, 19920817), (119, 19920824), (90, 19920831), (90, 19920907), (90, 19920914), (90, 19920921), (90, 19920928), (62, 19921005), (62, 19921012), (62, 19921019), (62, 19921026), (62, 19921102), (62, 19921109), (62, 19921116), (62, 19921123), (62, 19921130), (62, 19921207), (62, 19921214), (62, 19921221), (45, 19921228), (44, 19930101), (45, 19930104), (45, 19930111), (45, 19930118), (45, 19930125), (45, 19930201), (32, 19930208), (45, 19930215), (45, 19930222), (45, 19930301), (45, 19930308), (45, 19930315), (45, 19930322), (45, 19930329), (45, 19930405), (62, 19930412), (62, 19930419), (62, 19930426), (62, 19930503), (62, 19930510), (44, 19930517), (44, 19930524), (44, 19930531), (44, 19930607), (44, 19930614), (44, 19930621), (44, 19930628), (62, 19930705), (62, 19930712), (62, 19930719), (62, 19930726), (43, 19930802), (43, 19930809), (43, 19930816), (43, 19930823), (43, 19930830), (43, 19930906), (43, 19930913), (76, 19930920), (75, 19930927), (58, 19931004), (58, 19931011), (58, 19931018), (58, 19931025), (58, 19931101), (58, 19931108), (75, 19931115), (75, 19931122), (75, 19931129), (75, 19931206), (75, 19931213), (75, 19931220), (75, 19931227), (73, 19940101), (75, 19940103), (75, 19940110), (75, 19940117), (75, 19940124), (62, 19940131), (63, 19940207), (63, 19940214), (63, 19940221), (62, 19940228), (62, 19940307), (62, 19940314), (62, 19940321), (61, 19940328), (62, 19940404), (61, 19940411), (44, 19940418), (57, 19940425), (57, 19940502), (57, 19940509), (57, 19940516), (57, 19940523), (57, 19940530), (65, 19940606), (65, 19940613), (65, 19940620), (65, 19940627), (67, 19940704), (67, 19940711), (60, 19940718), (60, 19940725), (60, 19940801), (60, 19940808), (60, 19940815), (60, 19940822), (60, 19940829), (60, 19940905), (68, 19940912), (68, 19940919), (69, 19940926), (69, 19941003), (69, 19941010), (69, 19941017), (59, 19941024), (59, 19941031), (69, 19941107), (69, 19941114), (69, 19941121), (69, 19941128), (69, 19941205), (69, 19941212), (69, 19941219), (69, 19941226), (69, 19950101), (69, 19950102), (69, 19950109), (69, 19950116), (69, 19950123), (69, 19950130), (69, 19950206), (69, 19950213), (69, 19950220), (69, 19950227), (69, 19950306), (69, 19950313), (69, 19950320), (69, 19950327), (69, 19950403), (69, 19950410), (69, 19950417), (69, 19950424), (69, 19950501), (69, 19950508), (69, 19950515), (69, 19950522), (69, 19950529), (69, 19950605), (96, 19950612), (96, 19950619), (96, 19950626), (96, 19950703), (97, 19950710), (118, 19950717), (118, 19950724), (118, 19950731), (118, 19950807), (118, 19950814), (131, 19950821), (131, 19950828), (131, 19950904), (131, 19950911), (131, 19950918), (131, 19950925), (131, 19951002), (131, 19951009), (131, 19951016), (131, 19951023), (131, 19951030), (131, 19951106), (138, 19951113), (138, 19951120), (138, 19951127), (138, 19951204), (138, 19951211), (138, 19951218), (138, 19951225), (138, 19960101), (125, 19960108), (125, 19960115), (125, 19960122), (125, 19960129), (125, 19960205), (125, 19960212), (125, 19960219), (147, 19960226), (147, 19960304), (147, 19960311), (147, 19960318), (147, 19960325), (147, 19960401), (147, 19960408), (147, 19960415), (147, 19960422), (147, 19960429), (147, 19960506), (147, 19960513), (147, 19960520), (147, 19960527), (147, 19960603), (147, 19960610), (147, 19960617), (147, 19960624), (147, 19960701), (171, 19960708), (171, 19960715), (171, 19960722), (171, 19960729), (171, 19960805), (171, 19960812), (171, 19960819), (171, 19960826), (171, 19960902), (194, 19960909), (172, 19960916), (172, 19960923), (172, 19960930), (172, 19961007), (175, 19961014), (175, 19961021), (191, 19961028), (191, 19961104), (213, 19961111), (213, 19961118), (213, 19961125), (213, 19961202), (213, 19961209), (213, 19961216), (185, 19961223), (185, 19961230), (185, 19970101), (185, 19970106), (185, 19970113), (185, 19970120), (209, 19970127), (209, 19970203), (209, 19970210), (209, 19970217), (223, 19970224), (223, 19970303), (223, 19970310), (223, 19970317), (223, 19970324), (223, 19970331), (223, 19970407), (225, 19970414), (225, 19970421), (225, 19970428), (225, 19970505), (225, 19970512), (225, 19970519), (225, 19970526), (225, 19970602), (225, 19970609), (225, 19970616), (225, 19970623), (225, 19970630), (164, 19970707), (257, 19970714), (257, 19970721), (257, 19970728), (273, 19970804), (273, 19970811), (273, 19970818), (273, 19970825), (273, 19970901), (273, 19970908), (273, 19970915), (273, 19970922), (273, 19970929), (273, 19971006), (299, 19971013), (314, 19971020), (314, 19971027), (337, 19971103), (337, 19971110), (363, 19971117), (363, 19971124), (363, 19971201), (394, 19971208), (394, 19971215), (394, 19971222), (394, 19971229), (394, 19980101), (394, 19980105), (394, 19980112), (394, 19980119), (394, 19980126), (394, 19980202), (394, 19980209), (394, 19980216), (394, 19980223), (394, 19980302), (394, 19980309), (394, 19980316), (394, 19980323), (426, 19980330), (426, 19980406), (459, 19980413), (459, 19980420), (459, 19980427), (459, 19980504), (459, 19980511), (459, 19980518), (459, 19980525), (459, 19980601), (543, 19980608), (569, 19980615), (590, 19980622), (590, 19980629), (633, 19980706), (633, 19980713), (633, 19980720), (634, 19980727), (634, 19980803), (634, 19980810), (631, 19980817), (631, 19980824), (660, 19980831), (660, 19980907), (663, 19980914), (663, 19980921), (683, 19980928), (688, 19981005), (688, 19981012), (696, 19981019), (693, 19981026), (693, 19981102), (692, 19981109), (692, 19981116), (692, 19981123), (709, 19981130), (703, 19981207), (703, 19981214), (703, 19981221), (703, 19981228), (703, 19990101), (722, 19990104), (722, 19990111), (722, 19990118), (722, 19990125), (728, 19990201), (723, 19990208), (723, 19990215), (723, 19990222), (723, 19990301), (723, 19990308), (728, 19990315), (728, 19990322), (728, 19990329), (728, 19990405), (728, 19990412), (728, 19990419), (752, 19990426), (761, 19990503), (761, 19990510), (777, 19990517), (777, 19990524), (777, 19990531), (804, 19990607), (804, 19990614), (804, 19990621), (804, 19990628), (804, 19990705), (829, 19990712), (829, 19990719), (829, 19990726), (829, 19990802), (870, 19990809), (873, 19990816), (853, 19990823), (861, 19990830), (861, 19990906), (879, 19990913), (879, 19990920), (899, 19990927), (927, 19991004), (941, 19991011), (964, 19991018), (941, 19991025), (941, 19991101), (941, 19991108), (941, 19991115), (941, 19991122), (966, 19991129), (966, 19991206), (989, 19991213), (989, 19991220), (989, 19991227), (989, 20000101), (989, 20000103), (989, 20000110), (989, 20000117), (989, 20000124), (1013, 20000131), (1038, 20000207), (1038, 20000214), (1038, 20000221), (1038, 20000228), (1065, 20000306), (1065, 20000313), (1065, 20000320), (1065, 20000327), (1065, 20000403), (1093, 20000410), (1093, 20000417), (1093, 20000424), (1122, 20000501), (1122, 20000508), (1106, 20000515), (1106, 20000522), (1106, 20000529), (1106, 20000605), (1160, 20000612), (1160, 20000619), (1188, 20000626), (1188, 20000703), (1204, 20000710), (1205, 20000717), (1212, 20000724), (1276, 20000731), (1276, 20000807), (1224, 20000814), (1224, 20000821), (1224, 20000828), (1224, 20000904), (1241, 20000911), (1265, 20000918), (1231, 20000925), (1223, 20001002), (1232, 20001009), (1253, 20001016), (1245, 20001023), (1247, 20001030), (1173, 20001106), (964, 20001113), (961, 20001120), (961, 20001127), (961, 20001204), (964, 20001211), (964, 20001218), (964, 20001225), (964, 20010101), (964, 20010108), (964, 20010115), (964, 20010122), (977, 20010129), (977, 20010205), (1004, 20010212), (1027, 20010219), (1027, 20010226), (1027, 20010305), (1027, 20010312), (1101, 20010319), (1101, 20010326), (914, 20010402), (930, 20010409), (952, 20010416), (961, 20010423), (988, 20010430), (1011, 20010507), (1011, 20010514), (1029, 20010521), (1067, 20010528), (1067, 20010604), (1094, 20010611), (1094, 20010618), (1073, 20010625), (1073, 20010702), (1113, 20010709), (1135, 20010716), (1149, 20010723), (1149, 20010730), (1175, 20010806), (1175, 20010813), (1175, 20010820), (1201, 20010827), (1201, 20010903), (1228, 20010910), (1231, 20010917), (1263, 20010924), (1287, 20011001), (1267, 20011008), (1288, 20011015), (1291, 20011022), (1312, 20011029), (1312, 20011105), (1412, 20011112), (1412, 20011119), (1437, 20011126), (1437, 20011203), (1437, 20011210), (1430, 20011217), (1430, 20011224), (1430, 20011231), (1430, 20020101), (1430, 20020107), (1430, 20020114), (1430, 20020121), (1430, 20020128), (1422, 20020204), (1422, 20020211), (1422, 20020218), (1424, 20020225), (1424, 20020304), (1424, 20020311), (1448, 20020318), (1448, 20020325), (1573, 20020401), (1574, 20020408), (1574, 20020415), (1574, 20020422), (1577, 20020429), (1730, 20020506), (1577, 20020513), (1577, 20020520), (1577, 20020527), (1577, 20020603), (1783, 20020610), (1803, 20020617), (1783, 20020624), (1783, 20020701), (1834, 20020708), (1835, 20020715), (1828, 20020722), (1853, 20020729), (1853, 20020805), (1925, 20020812), (1915, 20020819), (2111, 20020826), (2111, 20020902), (2451, 20020909), (2457, 20020916), (2462, 20020923), (2496, 20020930), (2526, 20021007), (2520, 20021014), (2505, 20021021), (2505, 20021028), (2498, 20021104), (2497, 20021111), (2497, 20021118), (2497, 20021125), (2497, 20021202), (2497, 20021209), (2497, 20021216), (2497, 20021223), (2497, 20021230), (2497, 20030101), (2497, 20030106), (2497, 20030113), (2497, 20030120), (2497, 20030127), (2517, 20030203), (2507, 20030210), (2490, 20030217), (2528, 20030224), (2549, 20030303), (2549, 20030310), (2571, 20030317), (2571, 20030324), (2614, 20030331), (2587, 20030407), (2587, 20030414), (2608, 20030421), (2719, 20030428), (2652, 20030505), (2671, 20030512), (2728, 20030519), (1860, 20030526), (2728, 20030602), (2753, 20030609), (2753, 20030616), (2731, 20030623), (2731, 20030630), (2730, 20030707), (2755, 20030714), (2759, 20030721), (2777, 20030728), (2732, 20030804), (2734, 20030811), (2755, 20030818), (2801, 20030825), (2801, 20030901), (2798, 20030908), (2847, 20030915), (2862, 20030922), (2930, 20030929), (2961, 20031006), (2966, 20031013), (3035, 20031020), (3020, 20031027), (3038, 20031103), (3052, 20031110), (3065, 20031117), (3092, 20031124), (3120, 20031201), (3190, 20031208), (3211, 20031215), (3211, 20031222), (3214, 20031229), (3214, 20040101), (3206, 20040105), (3206, 20040112), (3206, 20040119), (3206, 20040126), (3257, 20040202), (3265, 20040209), (3282, 20040216), (3282, 20040223), (3279, 20040301), (3286, 20040308), (3286, 20040315), (3286, 20040322), (3286, 20040329), (3277, 20040405), (3286, 20040412), (1489, 20040419), (3379, 20040426), (2613, 20040503), (1187, 20040510), (2361, 20040517), (2955, 20040524), (2535, 20040531), (3433, 20040607), (3456, 20040614), (3492, 20040621), (3492, 20040628), (3498, 20040705), (3516, 20040712), (3587, 20040719), (3592, 20040726), (3592, 20040802), (3645, 20040809), (3647, 20040816), (3661, 20040823), (3705, 20040830), (3705, 20040906), (3785, 20040913), (3831, 20040920), (3913, 20040927), (3957, 20041004), (3986, 20041011), (3987, 20041018), (3968, 20041025), (4011, 20041101), (4071, 20041108), (4124, 20041115), (4145, 20041122), (4147, 20041129), (4160, 20041206), (4160, 20041213), (4160, 20041220), (4160, 20041227), (4160, 20050101), (4160, 20050103), (4160, 20050110), (4160, 20050117), (4160, 20050124), (4198, 20050131), (4198, 20050207), (4211, 20050214), (4286, 20050221), (4286, 20050228), (4313, 20050307), (4313, 20050314), (4333, 20050321), (4333, 20050328), (4362, 20050404), (4371, 20050411), (4379, 20050418), (4379, 20050425), (4379, 20050502), (4470, 20050509), (4489, 20050516), (4522, 20050523), (4522, 20050530), (4682, 20050606), (4705, 20050613), (4727, 20050620), (4727, 20050627), (4792, 20050704), (4816, 20050711), (4847, 20050718), (4859, 20050725), (4926, 20050801), (4982, 20050808), (5020, 20050815), (5090, 20050822), (5100, 20050829), (5100, 20050905), (5187, 20050912), (5173, 20050919), (5175, 20050926), (5215, 20051003), (5249, 20051010), (5237, 20051017), (5257, 20051024), (5331, 20051031), (5362, 20051107), (5357, 20051114), (5391, 20051121), (5401, 20051128), (5452, 20051205), (5452, 20051212), (5452, 20051219), (5452, 20051226), (5452, 20060101), (5452, 20060102), (5452, 20060109), (5452, 20060116), (5452, 20060123), (5441, 20060130), (5425, 20060206), (5441, 20060213), (5478, 20060220), (5528, 20060227), (5548, 20060306), (5548, 20060313), (5559, 20060320), (5559, 20060327), (5626, 20060403), (5626, 20060410), (5644, 20060417), (5658, 20060424), (5656, 20060501), (5654, 20060508), (5683, 20060515), (5721, 20060522), (5798, 20060529), (5798, 20060605), (5862, 20060612), (5897, 20060619), (5944, 20060626), (5944, 20060703), (5983, 20060710), (6026, 20060717), (6065, 20060724), (6133, 20060731), (6151, 20060807), (6226, 20060814), (6289, 20060821), (6284, 20060828), (6284, 20060904), (6304, 20060911), (6347, 20060918), (6376, 20060925), (6436, 20061002), (6520, 20061009), (6629, 20061016), (6730, 20061023), (6808, 20061030), (6816, 20061106), (6807, 20061113), (6893, 20061120), (6896, 20061127), (6931, 20061204), (6953, 20061211), (6953, 20061218), (6953, 20061225), (6953, 20070101), (6926, 20070108), (6926, 20070115), (6926, 20070122), (6925, 20070129), (6925, 20070205), (6930, 20070212), (6942, 20070219), (6988, 20070226), (7017, 20070305), (7017, 20070312), (7058, 20070319), (7058, 20070326), (7139, 20070402), (7175, 20070409), (7197, 20070416), (7197, 20070423), (7197, 20070430), (7233, 20070507), (7317, 20070514), (7341, 20070521), (7365, 20070528), (7365, 20070604), (7448, 20070611), (7448, 20070618), (7473, 20070625), (7473, 20070702), (7495, 20070709), (7478, 20070716), (7470, 20070723), (7528, 20070730), (7522, 20070806), (7527, 20070813), (7503, 20070820), (7504, 20070827), (7504, 20070903), (7602, 20070910), (7643, 20070917), (7686, 20070924), (7697, 20071001), (7707, 20071008), (7687, 20071015), (7638, 20071022), (7711, 20071029), (7677, 20071105), (7664, 20071112), (7666, 20071119), (7674, 20071126), (7650, 20071203), (7659, 20071210), (7659, 20071217), (7682, 20071224), (7682, 20071231), (7682, 20080101), (7682, 20080107), (7711, 20080114), (7711, 20080121), (7691, 20080128), (7716, 20080204), (7743, 20080211), (7742, 20080218), (7731, 20080225), (7761, 20080303), (7790, 20080310), (7790, 20080317), (7832, 20080324), (7832, 20080331), (7873, 20080407), (7889, 20080414), (7917, 20080421), (7917, 20080428), (7929, 20080505), (8002, 20080512), (8022, 20080519), (8090, 20080526), (8090, 20080602), (8030, 20080609), (7970, 20080616), (7966, 20080623), (7966, 20080630), (8089, 20080707), (8113, 20080714), (8235, 20080721), (8280, 20080728), (8325, 20080804), (8372, 20080811), (8387, 20080818), (8417, 20080825), (8417, 20080901), (8527, 20080908), (8639, 20080915), (8690, 20080922), (8731, 20080929), (8762, 20081006), (8794, 20081013), (8836, 20081020), (8898, 20081027), (8956, 20081103), (8996, 20081110), (9003, 20081117), (9019, 20081124), (9050, 20081201), (9076, 20081208), (9077, 20081215), (9070, 20081222), (9070, 20081229), (9070, 20090101), (9064, 20090105), (9064, 20090112), (9064, 20090119), (9064, 20090126), (9087, 20090202), (9087, 20090209), (9059, 20090216), (9063, 20090223), (9063, 20090302), (9053, 20090309), (9053, 20090316), (9057, 20090323), (9057, 20090330), (9066, 20090406), (9121, 20090413), (9110, 20090420), (9111, 20090427), (9094, 20090504), (9143, 20090511), (9140, 20090518), (9153, 20090525), (9153, 20090601), (9203, 20090608), (9239, 20090615), (9255, 20090622), (9255, 20090629), (9310, 20090706), (9376, 20090713), (9474, 20090720), (9589, 20090727), (9611, 20090803), (9598, 20090810), (9642, 20090817), (9682, 20090824), (9682, 20090831), (9682, 20090907), (9808, 20090914), (9856, 20090921), (9918, 20090928), (9929, 20091005), (9925, 20091012), (10003, 20091019), (10025, 20091026), (10061, 20091102), (10116, 20091109), (10137, 20091116), (10204, 20091123), (10238, 20091130), (10221, 20091207), (10272, 20091214), (10272, 20091221), (10318, 20091228), (10318, 20100101), (10318, 20100104), (10320, 20100111), (10329, 20100118), (10329, 20100125), (10373, 20100201), (10372, 20100208), (10389, 20100215), (10404, 20100222), (10430, 20100301), (10442, 20100308), (10442, 20100315), (10412, 20100322), (10412, 20100329), (10481, 20100405), (10515, 20100412), (10543, 20100419), (10580, 20100426), (10590, 20100503), (10576, 20100510), (10593, 20100517), (10634, 20100524), (10634, 20100531), (10613, 20100607), (10630, 20100614), (10634, 20100621), (10634, 20100628), (10685, 20100705), (10726, 20100712), (10756, 20100719), (10817, 20100726), (10835, 20100802), (10937, 20100809), (10999, 20100816), (11026, 20100823), (11125, 20100830), (11125, 20100906), (11256, 20100913), (11290, 20100920), (11339, 20100927), (11460, 20101004), (11566, 20101011), (11594, 20101018), (11617, 20101025), (11687, 20101101), (11735, 20101108), (11814, 20101115), (11845, 20101122), (11877, 20101129), (11888, 20101206), (11907, 20101213), (11913, 20101220), (11904, 20101227), (11904, 20110101), (12060, 20110103), (12067, 20110110), (12094, 20110117), (12094, 20110124), (12143, 20110131), (12181, 20110207), (12204, 20110214), (12201, 20110221), (12254, 20110228), (12267, 20110307), (12267, 20110314), (12303, 20110321), (12303, 20110328), (12343, 20110404), (12398, 20110411), (12434, 20110418), (12422, 20110425), (12438, 20110502), (12482, 20110509), (12467, 20110516), (12522, 20110523), (12522, 20110530), (12659, 20110606), (12682, 20110613), (12686, 20110620), (12686, 20110627), (12867, 20110704), (12895, 20110711), (12927, 20110718), (13006, 20110725), (12999, 20110801), (13081, 20110808), (13129, 20110815), (13140, 20110822), (13174, 20110829), (13174, 20110905), (13299, 20110912), (13342, 20110919), (13382, 20110926), (13372, 20111003), (13382, 20111010), (13411, 20111017), (13443, 20111024), (13465, 20111031), (13443, 20111107), (13482, 20111114), (13518, 20111121), (13517, 20111128), (13542, 20111205), (13536, 20111212), (13565, 20111219), (13603, 20111226), (13603, 20120101), (13610, 20120102), (13628, 20120109), (13618, 20120116), (13618, 20120123), (13667, 20120130), (13666, 20120206), (13674, 20120213), (13719, 20120220), (13788, 20120227), (13791, 20120305), (13791, 20120312), (13818, 20120319), (13818, 20120326), (13881, 20120402), (13902, 20120409), (13938, 20120416), (13964, 20120423), (13983, 20120430), (14016, 20120507), (14015, 20120514), (14034, 20120521), (14087, 20120528), (14087, 20120604), (14072, 20120611), (14138, 20120618), (14172, 20120625), (14172, 20120702), (14180, 20120709), (14223, 20120716), (14250, 20120723), (14264, 20120730), (14286, 20120806), (14331, 20120813), (14361, 20120820), (14389, 20120827), (14389, 20120903), (14389, 20120910), (14402, 20120917), (14438, 20120924), (14472, 20121001), (14480, 20121008), (14513, 20121015), (14525, 20121022), (14547, 20121029), (14585, 20121105), (14621, 20121112), (14624, 20121119), (14612, 20121126), (14610, 20121203), (14639, 20121210), (14633, 20121217), (14649, 20121224), (13949, 20121231), (14648, 20130101), (13966, 20130107), (14667, 20130114), (14667, 20130121), (14667, 20130128), (14652, 20130204), (14651, 20130211), (14649, 20130218), (14554, 20130225), (14695, 20130304), (14727, 20130311), (13048, 20130318), (6790, 20130401), (14591, 20130408), (14449, 20130415), (14451, 20130422), (14462, 20130429), (14487, 20130506), (14516, 20130513), (14531, 20130520), (14545, 20130527), (14545, 20130603), (14553, 20130610), (14569, 20130617), (14650, 20130624), (14651, 20130708), (14689, 20130715), (14751, 20130722), (14766, 20130729), (14679, 20130805), (14599, 20130812), (14740, 20130819), (14714, 20130826), (14796, 20130902), (14820, 20130909), (14866, 20130916), (14878, 20130923), (14885, 20130930), (15028, 20131007), (15072, 20131014), (15025, 20131021), (15071, 20131028), (15098, 20131104), (15101, 20131111), (15151, 20131118), (15337, 20131125), (15334, 20131202), (15512, 20131209), (15540, 20131216), (15701, 20131223), (15708, 20131230), (15703, 20140106), (15637, 20140113), (8585, 20140120), (15646, 20140127), (15632, 20140203), (15637, 20140210), (8565, 20140217), (15659, 20140224), (15557, 20150302), (15578, 20150406), (15545, 20150413), (15568, 20150420), (15475, 20150427), (15710, 20150511), (15623, 20150518), (15741, 20150525), (15741, 20150608), (15810, 20150622), (15761, 20150803), (15776, 20150810), (15908, 20150824), (16184, 20150831), (15832, 20150914), (15800, 20150921), (16178, 20151005), (16191, 20151012), (16138, 20151019), (16293, 20151102), (4812, 20160111), (16518, 20160118), (16629, 20160201), (16586, 20160208), (16529, 20160215), (16454, 20160222), (16515, 20160229), (16517, 20160307), (16446, 20160411), (16454, 20160418), (16489, 20160425), (16388, 20160502), (16374, 20160509), (16351, 20160523), (16361, 20160606), (16314, 20160620), (16293, 20160627), (16325, 20160815), (16316, 20160919), (16305, 20160926), (16233, 20161010), (16349, 20161031), (16364, 20161107), (16249, 20161114), (16345, 20161121), (16294, 20161128), (16336, 20161205), (16387, 20161212), (16372, 20170102), (16406, 20170109), (16379, 20170116), (16305, 20170213), (16207, 20170220), (16111, 20170306), (16230, 20170320), (16270, 20170417), (16226, 20170424), (16303, 20170501), (16124, 20170508), (16204, 20170515), (16290, 20170522), (16649, 20170529), (16157, 20170612), (16189, 20170619), (16184, 20170626), (16597, 20170703), (15983, 20170717), (16138, 20170724), (16145, 20170731), (16147, 20170807), (16268, 20170814), (16279, 20170821), (16301, 20170828), (16161, 20170911)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airports do not have departing or arriving flights?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)', which outputs [('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and directors of all the cartoons that are ordered by air date?' in SQLite? I currently have 'SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date', which outputs [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of all winners who played in both 2013 and 2016.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013 ', which outputs [('Serena', 'Williams'), ('Serena', 'Williams'), ('Serena', 'Williams'), ('Petra', 'Kvitova'), ('Angelique', 'Kerber'), ('Petra', 'Kvitova'), ('Na', 'Li'), ('Victoria', 'Azarenka'), ('Jelena', 'Jankovic'), ('Na', 'Li'), ('Na', 'Li'), ('Sara', 'Errani')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of all winners who played in both 2013 and 2016.' in SQLite? I currently have 'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016', which outputs [('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the document id, template id, and description for the document with the name Robbin CV.' in SQLite? I currently have 'SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'', which outputs [(76, 20, 'y')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \\\"Robbin CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers whose birth years are either 1948 or 1949?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)', which outputs [('Christy Walton',), ('Alice Walton',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of owners who do not own any dogs at this moment.' in SQLite? I currently have 'SELECT count(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of dogs that went through a treatment.' in SQLite? I currently have 'SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT dog_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of flights departing from Aberdeen.' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many concerts are there in year 2014 or 2015?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of cartoons directed by each of the listed directors.' in SQLite? I currently have 'SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by', which outputs [('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of cartoons directed by each of the listed directors.' in SQLite? I currently have 'SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by', which outputs [(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)', which outputs [('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', \"O'Reilly\"), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Monte', 'Kshlerin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.' in SQLite? I currently have 'SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )', which outputs [('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', \"O'Reilly\"), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average number of staff working for the museums that were open before 2009.' in SQLite? I currently have 'SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009', which outputs [(31.333333333333332,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which year had the most matches?' in SQLite? I currently have 'SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1', which outputs [(2016,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the shops that do not hire any employee.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)', which outputs [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of students who have no friends?' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID NOT IN (SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id OR T1.ID  =  T2.friend_id)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of students who have no friends?' in SQLite? I currently have 'SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id', which outputs [('Brittany',), ('John',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average and maximum age for each type of pet.' in SQLite? I currently have 'SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType', which outputs [(3.0, 3, 'cat'), (1.5, 2, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the maximum weight for each type of pet. List the maximum weight and pet type.' in SQLite? I currently have 'SELECT MAX(weight), PetType FROM Pets GROUP BY PetType', which outputs [(12.0, 'cat'), (13.4, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(weight) ,  petType FROM pets GROUP BY petType\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which country does Airline \"JetBlue Airways\" belong to?' in SQLite? I currently have 'SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'', which outputs [('USA',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of distinct name of losers.' in SQLite? I currently have 'SELECT COUNT(DISTINCT loser_name) FROM matches', which outputs [(49,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of nations where both English and French are official languages?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'', which outputs [('Canada',), ('Seychelles',), ('Vanuatu',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the count of the car models produced in the United States?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'United States'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the count of the car models produced in the United States?' in SQLite? I currently have 'SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';', which outputs [(13,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which district has both stores with less than 3000 products and stores with more than 10000 products?' in SQLite? I currently have 'SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different first names and ages of the students who do have pets?' in SQLite? I currently have 'SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID', which outputs [('Linda', 18), ('Tracy', 19)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the youngest dog weigh?' in SQLite? I currently have 'SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'', which outputs [(9.3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the ship id and name that caused most total injuries?' in SQLite? I currently have 'SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T2.injured) = (SELECT max(sum_injured) FROM (SELECT sum(T3.injured) AS sum_injured FROM death AS T3 GROUP BY T3.caused_by_ship_id) AS T4)', which outputs [(4, 'HMS Avon')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the ship id and name that caused most total injuries?' in SQLite? I currently have 'SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1', which outputs [(5, 'Three Brothers')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of employees from each city?' in SQLite? I currently have 'SELECT COUNT(*) ,  City FROM employee GROUP BY City', which outputs [(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  city FROM employee GROUP BY city\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted at more than one orchestra?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the mean GNP and total population of nations which are considered US territory.' in SQLite? I currently have 'SELECT AVG(GNP), SUM(Population) FROM country WHERE Code2 = 'US'', which outputs [(8510700.0, 278357000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the mean GNP and total population of nations which are considered US territory.' in SQLite? I currently have 'SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"', which outputs [(510.3333333333333, 329000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the official language used in the country the name of whose head of state is Beatrix.' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix'', which outputs [('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \\\"Beatrix\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the type code of the template type that the most templates belong to.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Template_ID) DESC LIMIT 1', which outputs [('PP',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of the students who do not own cats as pets?' in SQLite? I currently have 'SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat')', which outputs [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the maximum and minimum shares for performances that do not have the type \"Live final\".' in SQLite? I currently have 'SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'', which outputs [('44.7%', '22.7%')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \\\"Live final\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many pets are owned by students that have an age greater than 20?' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all paragraph ids and texts for the document with name 'Welcome to NY'.' in SQLite? I currently have 'SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'', which outputs [(16615, 'Japan'), (608931827, 'Micronesia')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different winners both participated in the WTA Championships and were left handed?' in SQLite? I currently have 'SELECT count(DISTINCT winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of all countries with at least one car maker?' in SQLite? I currently have 'SELECT DISTINCT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country', which outputs [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of people whose nationality is not \"Russia\".' in SQLite? I currently have 'SELECT Name FROM people WHERE Nationality != 'Russia'', which outputs [('Teodor Salparov',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?' in SQLite? I currently have 'SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'', which outputs [('GER', 'Angelique'), ('USA', 'Serena')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the average attendance across all shows.' in SQLite? I currently have 'SELECT AVG(Attendance) FROM show', which outputs [(1326.4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Attendance) FROM SHOW\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the possible breed type and size type combinations?' in SQLite? I currently have 'SELECT breed_name, size_description FROM Breeds, Sizes', which outputs [('Eskimo', 'Small'), ('Eskimo', 'Medium'), ('Eskimo', 'Large'), ('Husky', 'Small'), ('Husky', 'Medium'), ('Husky', 'Large'), ('Bulldog', 'Small'), ('Bulldog', 'Medium'), ('Bulldog', 'Large')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the possible breed type and size type combinations?' in SQLite? I currently have 'SELECT DISTINCT breed_code ,  size_code FROM dogs', which outputs [('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names and template ids for documents that contain the letter w in their description.' in SQLite? I currently have 'SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'', which outputs [('Data base', 11), ('How to read a book', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon of all the cards with 4 cylinders?' in SQLite? I currently have 'SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4', which outputs [(28.862318840579714,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all song names by singers above the average age.' in SQLite? I currently have 'SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)', which outputs [('You',), ('Sun',), ('Gentleman',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For model volvo, how many cylinders does the car with the least accelerate have?' in SQLite? I currently have 'SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T3.Accelerate  =  (SELECT min(T3.Accelerate) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T1.Model  =  'volvo') AND T1.Model  =  'volvo'', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the template type code of the template used by document with the name \"Data base\"?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight of cars each year?' in SQLite? I currently have 'SELECT AVG(Weight), Year FROM cars_data GROUP BY Year', which outputs [(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many pets have a greater weight than 10?' in SQLite? I currently have 'SELECT COUNT(*) FROM Pets WHERE weight > 10', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM pets WHERE weight  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airlines that have flights arriving at airport 'AHD'?' in SQLite? I currently have 'SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average transcript date?' in SQLite? I currently have 'SELECT AVG(transcript_date) FROM Transcripts', which outputs [(1989.9333333333334,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have at least 10 flights.' in SQLite? I currently have 'SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) >= 10', which outputs [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all of the episodes ordered by ratings?' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY Rating DESC', which outputs [('A Love of a Lifetime',), ('Friendly Skies',), ('Game Three',), ('The Year of the Rabbit',), ('Winterland',), ('The Legend of Dylan McCleen',), ('Keepers',), ('Emily',), ('Blowback',), ('Home By Another Way',), ('Double Down',), ('The Hanged Man',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all of the episodes ordered by ratings?' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY rating', which outputs [('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many matches were played in each year?' in SQLite? I currently have 'SELECT count(*) ,  year FROM matches GROUP BY year', which outputs [(12, 2013), (158, 2016), (108, 2017)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of singers whose birth year is either 1948 or 1949?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)', which outputs [('Christy Walton',), ('Alice Walton',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of singers ordered by ascending net worth?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC', which outputs [('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the high schooler who has the greatest number of friends?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  =  (SELECT max(count_friends) FROM (SELECT count(*) AS count_friends FROM Friend GROUP BY student_id) AS T3)', which outputs [('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?' in SQLite? I currently have 'SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING count(*) = (     SELECT min(count_votes)     FROM (         SELECT count(*) AS count_votes         FROM VOTES         GROUP BY contestant_number     ) AS subquery )', which outputs [(2, 'Tabatha Gehling'), (5, 'Alana Bregman')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?' in SQLite? I currently have 'SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1', which outputs [(2, 'Tabatha Gehling')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many templates have template type code CV?' in SQLite? I currently have 'SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me the description of the treatment type whose total cost is the lowest.' in SQLite? I currently have 'SELECT T2.treatment_type_description FROM Treatment_Types AS T2 WHERE T2.treatment_type_code = (SELECT T1.treatment_type_code FROM Treatments AS T1 GROUP BY T1.treatment_type_code ORDER BY sum(T1.cost_of_treatment) ASC LIMIT 1)', which outputs [('Take for a Walk',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?' in SQLite? I currently have 'SELECT T1.CountryCode, T1.Language, max(T1.Percentage) FROM countrylanguage AS T1 GROUP BY T1.CountryCode', which outputs [('ABW', 'Papiamento', 76.7), ('AFG', 'Pashto', 52.4), ('AGO', 'Ovimbundu', 37.2), ('AIA', 'English', 0.0), ('ALB', 'Albaniana', 97.9), ('AND', 'Spanish', 44.6), ('ANT', 'Papiamento', 86.2), ('ARE', 'Arabic', 42.0), ('ARG', 'Spanish', 96.8), ('ARM', 'Armenian', 93.4), ('ASM', 'Samoan', 90.6), ('ATG', 'Creole English', 95.7), ('AUS', 'English', 81.2), ('AUT', 'German', 92.0), ('AZE', 'Azerbaijani', 89.0), ('BDI', 'Kirundi', 98.1), ('BEL', 'Dutch', 59.2), ('BEN', 'Fon', 39.8), ('BFA', 'Mossi', 50.2), ('BGD', 'Bengali', 97.7), ('BGR', 'Bulgariana', 83.2), ('BHR', 'Arabic', 67.7), ('BHS', 'Creole English', 89.7), ('BIH', 'Serbo-Croatian', 99.2), ('BLR', 'Belorussian', 65.6), ('BLZ', 'English', 50.8), ('BMU', 'English', 100.0), ('BOL', 'Spanish', 87.7), ('BRA', 'Portuguese', 97.5), ('BRB', 'Bajan', 95.1), ('BRN', 'Malay', 45.5), ('BTN', 'Dzongkha', 50.0), ('BWA', 'Tswana', 75.5), ('CAF', 'Gbaya', 23.8), ('CAN', 'English', 60.4), ('CCK', 'English', 0.0), ('CHE', 'German', 63.6), ('CHL', 'Spanish', 89.7), ('CHN', 'Chinese', 92.0), ('CIV', 'Akan', 30.0), ('CMR', 'Fang', 19.7), ('COD', 'Luba', 18.0), ('COG', 'Kongo', 51.5), ('COK', 'English', 0.0), ('COL', 'Spanish', 99.0), ('COM', 'Comorian', 75.0), ('CPV', 'Crioulo', 100.0), ('CRI', 'Spanish', 97.5), ('CUB', 'Spanish', 100.0), ('CXR', 'Chinese', 0.0), ('CYM', 'English', 0.0), ('CYP', 'Greek', 74.1), ('CZE', 'Czech', 81.2), ('DEU', 'German', 91.3), ('DJI', 'Somali', 43.9), ('DMA', 'Creole English', 100.0), ('DNK', 'Danish', 93.5), ('DOM', 'Spanish', 98.0), ('DZA', 'Arabic', 86.0), ('ECU', 'Spanish', 93.0), ('EGY', 'Arabic', 98.8), ('ERI', 'Tigrinja', 49.1), ('ESH', 'Arabic', 100.0), ('ESP', 'Spanish', 74.4), ('EST', 'Estonian', 65.3), ('ETH', 'Oromo', 31.0), ('FIN', 'Finnish', 92.7), ('FJI', 'Fijian', 50.8), ('FLK', 'English', 0.0), ('FRA', 'French', 93.6), ('FRO', 'Faroese', 100.0), ('FSM', 'Trukese', 41.6), ('GAB', 'Fang', 35.8), ('GBR', 'English', 97.3), ('GEO', 'Georgiana', 71.7), ('GHA', 'Akan', 52.4), ('GIB', 'English', 88.9), ('GIN', 'Ful', 38.6), ('GLP', 'Creole French', 95.0), ('GMB', 'Malinke', 34.1), ('GNB', 'Crioulo', 36.4), ('GNQ', 'Fang', 84.8), ('GRC', 'Greek', 98.5), ('GRD', 'Creole English', 100.0), ('GRL', 'Greenlandic', 87.5), ('GTM', 'Spanish', 64.7), ('GUF', 'Creole French', 94.3), ('GUM', 'English', 37.5), ('GUY', 'Creole English', 96.4), ('HKG', 'Canton Chinese', 88.7), ('HND', 'Spanish', 97.2), ('HRV', 'Serbo-Croatian', 95.9), ('HTI', 'Haiti Creole', 100.0), ('HUN', 'Hungarian', 98.5), ('IDN', 'Javanese', 39.4), ('IND', 'Hindi', 39.9), ('IRL', 'English', 98.4), ('IRN', 'Persian', 45.7), ('IRQ', 'Arabic', 77.2), ('ISL', 'Icelandic', 95.7), ('ISR', 'Hebrew', 63.1), ('ITA', 'Italian', 94.1), ('JAM', 'Creole English', 94.2), ('JOR', 'Arabic', 97.9), ('JPN', 'Japanese', 99.1), ('KAZ', 'Kazakh', 46.0), ('KEN', 'Kikuyu', 20.9), ('KGZ', 'Kirgiz', 59.7), ('KHM', 'Khmer', 88.6), ('KIR', 'Kiribati', 98.9), ('KNA', 'Creole English', 100.0), ('KOR', 'Korean', 99.9), ('KWT', 'Arabic', 78.1), ('LAO', 'Lao', 67.2), ('LBN', 'Arabic', 93.0), ('LBR', 'Kpelle', 19.5), ('LBY', 'Arabic', 96.0), ('LCA', 'Creole French', 80.0), ('LIE', 'German', 89.0), ('LKA', 'Singali', 60.3), ('LSO', 'Sotho', 85.0), ('LTU', 'Lithuanian', 81.6), ('LUX', 'Luxembourgish', 64.4), ('LVA', 'Latvian', 55.1), ('MAC', 'Canton Chinese', 85.6), ('MAR', 'Arabic', 65.0), ('MCO', 'French', 41.9), ('MDA', 'Romanian', 61.9), ('MDG', 'Malagasy', 98.9), ('MDV', 'Dhivehi', 100.0), ('MEX', 'Spanish', 92.1), ('MHL', 'Marshallese', 96.8), ('MKD', 'Macedonian', 66.5), ('MLI', 'Bambara', 31.8), ('MLT', 'Maltese', 95.8), ('MMR', 'Burmese', 69.0), ('MNG', 'Mongolian', 78.8), ('MNP', 'Philippene Languages', 34.1), ('MOZ', 'Makua', 27.8), ('MRT', 'Hassaniya', 81.7), ('MSR', 'English', 0.0), ('MTQ', 'Creole French', 96.6), ('MUS', 'Creole French', 70.6), ('MWI', 'Chichewa', 58.3), ('MYS', 'Malay', 58.4), ('MYT', 'Mahoré', 41.9), ('NAM', 'Ovambo', 50.7), ('NCL', 'Malenasian Languages', 45.4), ('NER', 'Hausa', 53.1), ('NFK', 'English', 0.0), ('NGA', 'Joruba', 21.4), ('NIC', 'Spanish', 97.6), ('NIU', 'English', 0.0), ('NLD', 'Dutch', 95.6), ('NOR', 'Norwegian', 96.6), ('NPL', 'Nepali', 50.4), ('NRU', 'Nauru', 57.5), ('NZL', 'English', 87.0), ('OMN', 'Arabic', 76.7), ('PAK', 'Punjabi', 48.2), ('PAN', 'Spanish', 76.8), ('PCN', 'Pitcairnese', 0.0), ('PER', 'Spanish', 79.8), ('PHL', 'Pilipino', 29.3), ('PLW', 'Palau', 82.2), ('PNG', 'Papuan Languages', 78.1), ('POL', 'Polish', 97.6), ('PRI', 'Spanish', 51.3), ('PRK', 'Korean', 99.9), ('PRT', 'Portuguese', 99.0), ('PRY', 'Spanish', 55.1), ('PSE', 'Arabic', 95.9), ('PYF', 'Tahitian', 46.4), ('QAT', 'Arabic', 40.7), ('REU', 'Creole French', 91.5), ('ROM', 'Romanian', 90.7), ('RUS', 'Russian', 86.6), ('RWA', 'Rwanda', 100.0), ('SAU', 'Arabic', 95.0), ('SDN', 'Arabic', 49.4), ('SEN', 'Wolof', 48.1), ('SGP', 'Chinese', 77.1), ('SHN', 'English', 0.0), ('SJM', 'Norwegian', 0.0), ('SLB', 'Malenasian Languages', 85.6), ('SLE', 'Mende', 34.8), ('SLV', 'Spanish', 100.0), ('SMR', 'Italian', 100.0), ('SOM', 'Somali', 98.3), ('SPM', 'French', 0.0), ('STP', 'Crioulo', 86.3), ('SUR', 'Sranantonga', 81.0), ('SVK', 'Slovak', 85.6), ('SVN', 'Slovene', 87.9), ('SWE', 'Swedish', 89.5), ('SWZ', 'Swazi', 89.9), ('SYC', 'Seselwa', 91.3), ('SYR', 'Arabic', 90.0), ('TCA', 'English', 0.0), ('TCD', 'Sara', 27.7), ('TGO', 'Ewe', 23.2), ('THA', 'Thai', 52.6), ('TJK', 'Tadzhik', 62.2), ('TKL', 'English', 0.0), ('TKM', 'Turkmenian', 76.7), ('TMP', 'Portuguese', 0.0), ('TON', 'Tongan', 98.3), ('TTO', 'English', 93.5), ('TUN', 'Arabic', 69.9), ('TUR', 'Turkish', 87.6), ('TUV', 'Tuvalu', 92.5), ('TWN', 'Min', 66.7), ('TZA', 'Nyamwesi', 21.1), ('UGA', 'Ganda', 18.1), ('UKR', 'Ukrainian', 64.7), ('UMI', 'English', 0.0), ('URY', 'Spanish', 95.7), ('USA', 'English', 86.2), ('UZB', 'Uzbek', 72.6), ('VAT', 'Italian', 0.0), ('VCT', 'Creole English', 99.1), ('VEN', 'Spanish', 96.9), ('VGB', 'English', 0.0), ('VIR', 'English', 81.7), ('VNM', 'Vietnamese', 86.8), ('VUT', 'Bislama', 56.6), ('WLF', 'Futuna', 0.0), ('WSM', 'Samoan-English', 52.0), ('YEM', 'Arabic', 99.6), ('YUG', 'Serbo-Croatian', 75.2), ('ZAF', 'Zulu', 22.7), ('ZMB', 'Bemba', 29.7), ('ZWE', 'Shona', 72.1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?' in SQLite? I currently have 'SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode', which outputs [('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the template type description of the template type with the code AD.' in SQLite? I currently have 'SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'', which outputs [('Advertisement',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each owner's first name, last name, and the size of their dog?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code', which outputs [('Jaclyn', 'Stoltenberg', 'Large'), ('Gay', 'Feil', 'Large'), ('Nora', 'Haley', 'Medium'), ('Rachelle', 'Funk', 'Large'), ('Emelie', 'Mertz', 'Medium'), ('Johann', 'Fisher', 'Medium'), ('Jaclyn', 'Stoltenberg', 'Medium'), ('Rachelle', 'Funk', 'Small'), ('Melisa', 'DuBuque', 'Medium'), ('Kade', 'Rippin', 'Medium'), ('Cindy', 'Schmitt', 'Large'), ('Orlando', 'Price', 'Medium'), ('Rolando', 'Prohaska', 'Small'), ('Rachelle', 'Funk', 'Medium'), ('Lorenz', 'Nicolas', 'Medium')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each owner's first name, last name, and the size of their dog?' in SQLite? I currently have 'SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id', which outputs [('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average and maximum capacities for all stadiums ?' in SQLite? I currently have 'SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium', which outputs [(10621.666666666666, 52500)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(capacity) ,  max(capacity) from stadium\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of professionals who have ever treated dogs.' in SQLite? I currently have 'SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the airport code and airport name corresonding to the city Anthony.' in SQLite? I currently have 'SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of orchestras that have CD or DVD as their record format.' in SQLite? I currently have 'SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'', which outputs [(11,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the template type code of the template that is used by a document named Data base.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \\\"Data base\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of flights into ATO.' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE DestAirport = 'ATO'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of all of the high schooler Kyle's friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle'))', which outputs [('Jordan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many likes does Kyle have?' in SQLite? I currently have 'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes that are not used by any document.' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID)', which outputs [('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show ids for all templates that are used by more than one document.' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(T2.Document_ID) > 1', which outputs [(11,), (14,), (25,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have at least 10 flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10', which outputs [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have at least 10 flights?' in SQLite? I currently have 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10', which outputs [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are from each country?' in SQLite? I currently have 'SELECT count(*) ,  country_code FROM players GROUP BY country_code', which outputs [(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?' in SQLite? I currently have 'SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980', which outputs [('null',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airlines do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.' in SQLite? I currently have 'SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1', which outputs [(3, '02647')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(MPG) FROM cars_data)', which outputs [('citroen',), ('chevrolet',), ('ford',), ('plymouth',), ('amc',), ('ford',), ('volkswagen',), ('saab',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model saves the most gasoline? That is to say, have the maximum miles per gallon.' in SQLite? I currently have 'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;', which outputs [('citroen',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document name and template id for document with description with the letter 'w' in it?' in SQLite? I currently have 'SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'', which outputs [('Data base', 11), ('How to read a book', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \\\"%w%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of conductors in ascending order of age.' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Age ASC', which outputs [('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Age ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name, year of independence, and surface area of the country that has the lowest population.' in SQLite? I currently have 'SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)', which outputs [('Antarctica', None, 13120000.0), ('French Southern territories', None, 7780.0), ('Bouvet Island', None, 59.0), ('Heard Island and McDonald Islands', None, 359.0), ('British Indian Ocean Territory', None, 78.0), ('South Georgia and the South Sandwich Islands', None, 3903.0), ('United States Minor Outlying Islands', None, 16.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name, year of independence, and surface area of the country that has the lowest population.' in SQLite? I currently have 'SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1', which outputs [('Antarctica', 13120000.0, None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of templates.' in SQLite? I currently have 'SELECT COUNT(*) FROM Templates', which outputs [(20,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id of the pet owned by the student whose last name is 'Smith'?' in SQLite? I currently have 'SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'', which outputs [(2001,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and areas of countries with the top 5 largest area?' in SQLite? I currently have 'SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5', which outputs [('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of template types that are not used for any document?' in SQLite? I currently have 'SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID)', which outputs [('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most commmon hometowns for teachers?' in SQLite? I currently have 'SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1', which outputs [('Turton Urban District', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most commmon hometowns for teachers?' in SQLite? I currently have 'SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1', which outputs [('Turton Urban District',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the city and country for the Alton airport.' in SQLite? I currently have 'SELECT City, Country FROM airports WHERE AirportName = 'Alton'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of teachers aged either 32 or 33?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Age = 32 OR Age = 33', which outputs [('Joseph Huts',), ('John Deloor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the age and hometown of teachers?' in SQLite? I currently have 'SELECT Age, Hometown FROM teacher', which outputs [('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Age ,  Hometown FROM teacher\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many likes correspond to each student id?' in SQLite? I currently have 'SELECT student_id, count(liked_id) FROM Likes GROUP BY student_id', which outputs [(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which regions speak Dutch or English?' in SQLite? I currently have 'SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' OR T2.Language = 'English'', which outputs [('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first names of owners living in Virginia and the names of dogs they own.' in SQLite? I currently have 'SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'', which outputs [('Melisa', 'Bessie')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List top 3 highest Rating  TV series. List the TV series's Episode and Rating.' in SQLite? I currently have 'SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3', which outputs [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the series that has the episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'', which outputs [('Sky Radio',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name and tonnage ordered by in descending alphaetical order for the names.' in SQLite? I currently have 'SELECT name, tonnage FROM ship ORDER BY name DESC', which outputs [('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  tonnage FROM ship ORDER BY name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many concerts occurred in 2014 or 2015?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the nationality that is most common across all people.' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1', which outputs [('Russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of distinct continents where Chinese is spoken?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'', which outputs [(4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What region does Angola belong to and what is its population?' in SQLite? I currently have 'SELECT Region, Population FROM country WHERE Name = 'Angola'', which outputs [('Central Africa', 12878000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What region does Angola belong to and what is its population?' in SQLite? I currently have 'SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"', which outputs [(12878000, 'Central Africa')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights landing at APG.' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE DestAirport = 'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have fewer than 200 flights.' in SQLite? I currently have 'SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) < 200', which outputs [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the number of different series names and contents in the TV Channel table.' in SQLite? I currently have 'SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel', which outputs [(15, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List singer names and number of concerts for each singer.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.concert_ID)  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Singer_ID, T1.Name', which outputs [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and gender of student who have more than one pet.' in SQLite? I currently have 'SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)', which outputs [('Tracy', 'F')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars have a larger accelerate than the car with the largest horsepower?' in SQLite? I currently have 'SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars have a larger accelerate than the car with the largest horsepower?' in SQLite? I currently have 'SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );', which outputs [(39,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total surface area of the countries in the Caribbean region?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'', which outputs [(234423.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes with less than three templates.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3', which outputs [('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are there in grade 9 or 10?' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of players for each hand type.' in SQLite? I currently have 'SELECT count(*) , hand FROM players GROUP BY hand', which outputs [(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all the countries that became independent after 1950?' in SQLite? I currently have 'SELECT Name FROM country WHERE IndepYear > 1950', which outputs [('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE IndepYear  >  1950\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models are produced by each maker ? Only list the count and the maker full name .' in SQLite? I currently have 'SELECT count(T1.Model) ,  T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.Id, T2.FullName', which outputs [(1, 'American Motor Company'), (2, 'Volkswagen'), (1, 'BMW'), (5, 'General Motors'), (3, 'Ford Motor Company'), (4, 'Chrysler'), (1, 'Citroen'), (2, 'Nissan Motors'), (1, 'Fiat'), (1, 'Honda'), (1, 'Mazda'), (2, 'Daimler Benz'), (1, 'Opel'), (1, 'Peugeaut'), (1, 'Renault'), (1, 'Saab'), (1, 'Subaru'), (2, 'Toyota'), (1, 'Triumph'), (1, 'Volvo'), (1, 'Kia Motors'), (1, 'Hyundai')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner with the most rank points who participated in the Australian Open tournament?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1', which outputs no such column: T2.rank_points. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner with the most rank points who participated in the Australian Open tournament?' in SQLite? I currently have 'SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1', which outputs [('Serena Williams',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the document id with paragraph text 'Brazil' and 'Ireland'.' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Brazil%' OR T2.Paragraph_Text LIKE '%Ireland%'', which outputs [(16514113,), (16514113,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the document id with paragraph text 'Brazil' and 'Ireland'.' in SQLite? I currently have 'SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'', which outputs [(16514113,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the Episode of all TV series sorted by rating.' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY Rating DESC', which outputs [('A Love of a Lifetime',), ('Friendly Skies',), ('Game Three',), ('The Year of the Rabbit',), ('Winterland',), ('The Legend of Dylan McCleen',), ('Keepers',), ('Emily',), ('Blowback',), ('Home By Another Way',), ('Double Down',), ('The Hanged Man',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the Episode of all TV series sorted by rating.' in SQLite? I currently have 'SELECT Episode FROM TV_series ORDER BY rating', which outputs [('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode FROM TV_series ORDER BY rating\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first names that are used for professionals or owners but are not used as dog names.' in SQLite? I currently have 'SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs)', which outputs [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries exist?' in SQLite? I currently have 'SELECT COUNT(*) FROM countries', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the death and injury situations caused by the ship with tonnage 't'?' in SQLite? I currently have 'SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'', which outputs [(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the oldest player.' in SQLite? I currently have 'SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1', which outputs [('Thelma', 'AUS')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have greater area than that of any country in Europe?' in SQLite? I currently have 'SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \\\"Europe\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have greater area than that of any country in Europe?' in SQLite? I currently have 'SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")', which outputs [('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Turks and Caicos Islands',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Tokelau',), ('Turkmenistan',), ('East Timor',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('United States Minor Outlying Islands',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vietnam',), ('Vanuatu',), ('Wallis and Futuna',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \\\"Europe\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the birth date of the poker player with the lowest earnings.' in SQLite? I currently have 'SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1', which outputs [('August 8, 1986',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers who are aged either 32 or 33?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Age = 32 OR Age = 33', which outputs [('Joseph Huts',), ('John Deloor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many TV Channels use the English language?' in SQLite? I currently have 'SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \\\"English\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id and weight of every pet who is older than 1?' in SQLite? I currently have 'SELECT PetID, weight FROM Pets WHERE pet_age > 1', which outputs [(2001, 12.0), (2002, 13.4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1', which outputs no such column: T2.rank_points. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.' in SQLite? I currently have 'SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1', which outputs [('Serena Williams',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which models are lighter than 3500 but not built by the 'Ford Motor Company'?' in SQLite? I currently have 'SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName != 'Ford Motor Company'', which outputs [('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('plymouth',), ('amc',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('volkswagen',), ('amc',), ('plymouth',), ('chevrolet',), ('amc',), ('amc',), ('chevrolet',), ('pontiac',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('plymouth',), ('chevrolet',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('dodge',), ('saab',), ('toyota',), ('plymouth',), ('amc',), ('chevrolet',), ('datsun',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('plymouth',), ('chevrolet',), ('buick',), ('chevrolet',), ('toyota',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('amc',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('dodge',), ('renault',), ('plymouth',), ('chevrolet',), ('amc',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('amc',), ('volkswagen',), ('datsun',), ('toyota',), ('volvo',), ('peugeot',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('buick',), ('volkswagen',), ('pontiac',), ('toyota',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('mazda',), ('datsun',), ('honda',), ('oldsmobile',), ('chevrolet',), ('plymouth',), ('amc',), ('buick',), ('amc',), ('chevrolet',), ('buick',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('volvo',), ('saab',), ('peugeot',), ('volkswagen',), ('honda',), ('pontiac',), ('amc',), ('dodge',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('peugeot',), ('oldsmobile',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('amc',), ('dodge',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('mercedes-benz',), ('honda',), ('renault',), ('subaru',), ('datsun',), ('mazda',), ('triumph',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('peugeot',), ('saab',), ('volvo',), ('toyota',), ('datsun',), ('buick',), ('chrysler',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('amc',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('oldsmobile',), ('chrysler',), ('toyota',), ('dodge',), ('chevrolet',), ('volkswagen',), ('dodge',), ('chevrolet',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which models are lighter than 3500 but not built by the 'Ford Motor Company'?' in SQLite? I currently have 'SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';', which outputs [('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For the cars with 4 cylinders, which model has the largest horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1', which outputs [('ford',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have departing flights from both APG and CVO airports?' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of airlines?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the Package Option of TV Channel with serial name \"Sky Radio\"?' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'', which outputs [('Sky Famiglia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Package_Option FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the breed with the most dogs?' in SQLite? I currently have 'SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1', which outputs [('Bulldog',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the earnings of poker players, ordered descending by value?' in SQLite? I currently have 'SELECT Earnings FROM poker_player ORDER BY Earnings DESC', which outputs [(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Earnings FROM poker_player ORDER BY Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the code of the template type that is most commonly used in documents.' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many transcripts are released?' in SQLite? I currently have 'SELECT COUNT(*) FROM Transcripts', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.' in SQLite? I currently have 'SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2)', which outputs near \"(\": syntax error. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.' in SQLite? I currently have 'SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2', which outputs [(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of every course with less than 2 sections?' in SQLite? I currently have 'SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) < 2', which outputs [(2, 'math'), (4, 'en'), (6, 'la'), (7, 'cal'), (9, 'dl'), (10, 'ml'), (12, 'db')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and ids of every course with less than 2 sections?' in SQLite? I currently have 'SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2', which outputs [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the song titles and singer names?' in SQLite? I currently have 'SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID', which outputs [(\"Do They Know It's Christmas\", 'Liliane Bettencourt'), (\"F**k It (I Don't Want You Back)\", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the grade of each high schooler?' in SQLite? I currently have 'SELECT ID, name, grade FROM Highschooler', which outputs [(1510, 'Jordan', 9), (1689, 'Gabriel', 9), (1381, 'Tiffany', 9), (1709, 'Cassandra', 9), (1101, 'Haley', 10), (1782, 'Andrew', 10), (1468, 'Kris', 10), (1641, 'Brittany', 10), (1247, 'Alexis', 11), (1316, 'Austin', 11), (1911, 'Gabriel', 11), (1501, 'Jessica', 11), (1304, 'Jordan', 12), (1025, 'John', 12), (1934, 'Kyle', 12), (1661, 'Logan', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the grade of each high schooler?' in SQLite? I currently have 'SELECT grade FROM Highschooler', which outputs [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the horsepower of the car with the largest accelerate?' in SQLite? I currently have 'SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)', which outputs [('71',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many degrees does the engineering department offer?' in SQLite? I currently have 'SELECT count(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the major record formats of orchestras, sorted by their frequency?' in SQLite? I currently have 'SELECT Major_Record_Format, COUNT(*) as frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC', which outputs [('CD', 10), ('DVD', 1), ('CD / LP', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the major record formats of orchestras, sorted by their frequency?' in SQLite? I currently have 'SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC', which outputs [('CD / LP',), ('DVD',), ('CD',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different names of cities that are in Asia and for which Chinese is the official language.' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'', which outputs [('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui´an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji´an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu´an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da´an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai´an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan´an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong´an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu´an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya´an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of the cars with horsepower more than 150?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150', which outputs [(281,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the full names of all players, sorted by birth date?' in SQLite? I currently have 'SELECT first_name, last_name FROM players ORDER BY birth_date', which outputs [('Thelma', 'Long'), ('Pauline', 'Addie'), ('Milly', 'Vagn Nielsen'), ('Vera', 'Johansen'), ('Reiko', 'Miyagi'), ('Louise', 'Brown'), ('Gertrude', 'Moran'), ('Zsuzsa', 'Kormoczy'), ('Peggy', 'Brixhe'), ('Betty', 'Pratt'), ('Doris', 'Hart'), ('Dorothy', 'Knode'), ('Ruth', 'Hauknes'), ('Althea', 'Gibson'), ('Suzanne', 'Le Besnerais'), ('Margarita', 'De Zuleta'), ('Helen', 'Parez'), ('Beverley', 'Rae'), ('Nora', 'Somoza'), ('Vera', 'Sukova'), ('Rita', 'Lauder'), ('Heather', 'Segal'), ('Benita', 'Senn'), ('Christiane', 'Mercelis'), ('Angela', 'Barrett'), ('Monique', 'Bedoret'), ('Florence', 'De La Courtie Billat'), ('Lorna', 'Greville Collins'), ('Shiu Man', 'Chan'), ('Tova', 'Epstein'), ('Nancy', 'Reed'), ('Ana Maria', 'Estalella Manso'), ('Sylvana', 'Lazzarino'), ('Jennifer', 'Hoad'), ('Shirley', 'Brasher'), ('Pat', 'Stewart'), ('Renee', 'Richards'), ('Yolande', 'Ramirez'), ('Lea', 'Pericoli'), ('Zsofia', 'Broszmann'), ('Yu Lan', 'Liu'), ('Jeanne', 'Arth'), ('Margot', 'Dittmeyer'), ('Francoise', 'Repoux'), ('Jacqueline', 'Rees Lewis'), ('Darlene', 'Hard'), ('Norma', 'Marsh'), ('Ruia', 'Morrison Davy'), ('Irene', 'Fraisse'), ('Jelena', 'Gencic'), ('Jenny', 'Ridderhof'), ('Edda', 'Buding'), ('Lucia', 'Bassi'), ('Patricia', 'Mattes'), ('Renata', 'Ostermann'), ('Lorraine', 'Robinson'), ('Judy', 'Dalton'), ('Bernice', 'Vukovich'), ('Anne Marie', 'Rouchon'), ('Maria', 'Chakarova'), ('Susan', 'Butt'), ('Janine', 'Lieffrig'), ('Roberta', 'Beltrame'), ('Elizabeth', 'Starkie'), ('Danuta', 'Rylska'), ('Ann', 'Jones'), ('Michele', 'Kahn'), ('Rosy', 'Darmon'), ('Claudine', 'Rouire'), ('Mimi', 'Kanarek'), ('Jean', 'Drysdale'), ('Maria', 'Bueno'), ('Renee', 'Schuurman'), ('Patricia', 'Cody'), ('Ann', 'Barclay'), ('Helga', 'Hosl'), ('Edda', 'Herdy'), ('Carmen', 'Mandarino'), ('Pia', 'Balling'), ('Deidre', 'Keller'), ('Andrea', 'Winkler'), ('Daniele', 'Bouteleux'), ('Anna', 'Dmitrieva'), ('Christine', 'Janes'), ('Katarina', 'Bartholdson'), ('Almut', 'Sturm'), ('Yohko', 'Obata'), ('Sonja', 'Pachta'), ('Tone', 'Schirmer'), ('Yuen Yuen', 'Ling'), ('Jan', 'Oneill'), ('Virginia', 'Caceres'), ('Kazuko', 'Kuromatsu'), ('Patricia', 'Reese'), ('Brenda', 'Dale'), ('Charleen', 'Hillebrand'), ('Gillian', 'Kay'), ('Helga', 'Masthoff'), ('Mary', 'Puljak'), ('Joyce', 'Davenport'), ('Jacqueline', 'Le Boubennec'), ('Margaret', 'Hunt'), ('Lynne', 'Nette'), ('Margaret', 'Court'), ('Tory Ann', 'Fretz'), ('Heide', 'Schildknecht'), ('Lesley', 'Bowrey'), ('Nancy', 'Richey'), ('Vincerzo', 'Napolio'), ('Geraldine', 'Barniville'), ('Alice', 'Tym'), ('Karen', 'Susman'), ('Francoise', 'Durr'), ('Ulla', 'Sandulf'), ('Liv', 'Jagge'), ('Carol Ann', 'Kalogeropoulos'), ('Judy', 'Alvarez'), ('Maria Jose', 'Aubet'), ('Carole', 'Graebner'), ('Maylis', 'Burel'), ('Kerstin', 'Seelbach'), ('Jennifer', 'Waggott'), ('Leena', 'Mutanen'), ('Annette', 'Du Plooy'), ('Billie Jean', 'King'), ('Maria Victoria', 'De Moggio'), ('Barbara', 'Olszewska'), ('Gill', 'Butterfield'), ('Ingrid', 'Bentzer'), ('Elsie', 'Veentjer Spruyt'), ('Faye', 'Moore'), ('Ana Maria', 'Bocio'), ('Frances', 'Maclennan'), ('Gitte', 'Ejlerskov'), ('Gertruida', 'Walhof'), ('Sally', 'Holdsworth'), ('Robin', 'Lloyd'), ('Monique', 'Krecke'), ('Vlasta', 'Kodesova'), ('Marketa', 'Wallenfels'), ('Kimiyo', 'Yagahara'), ('Joy', 'Emerson'), ('Robyn', 'Ebbern'), ('Madeleine', 'Pegel'), ('Joyce', 'Williams'), ('Maryna', 'Proctor'), ('Evelyne', 'Terras'), ('Yulia', 'Berberian'), ('Nadine', 'Netter'), ('Marijke', 'Schaar'), ('Maria Carmen', 'Arnoso'), ('Pamela', 'Brand'), ('Eva', 'Lundquist'), ('Liv', 'Hubert'), ('Elizabeth', 'Terry'), ('Alena', 'Palmeova West'), ('Hsiu', 'Lee'), ('Margaret', 'Harris'), ('Lubka', 'Radkova'), ('Gail', 'Benedetti'), ('Christiane', 'Spinoza'), ('Kerryl', 'Chute'), ('Kirsten', 'Robsahm'), ('Judith', 'Gohn'), ('Monique', 'Di Maso'), ('Betty', 'Stove'), ('Greta', 'Delport'), ('Virginia', 'Wade'), ('Galina', 'Baksheeva'), ('Vicky', 'Berner'), ('Patricia', 'Faulkner'), ('Maria Eugenia', 'Guzman'), ('Nancy', 'Spelman'), ('Brenda', 'Nunns'), ('Mary', 'Mclean'), ('Christina', 'Lindstrom'), ('Faye', 'Urban'), ('Eva', 'Szabo'), ('Glenda', 'Swan'), ('Erzsebet', 'Szell'), ('Julie', 'Heldman'), ('Lloyd', 'Hatcher'), ('Nell', 'Truman'), ('Johanne', 'Venturino'), ('Monica', 'Giorgi'), ('Irena', 'Skulj'), ('Marilyn', 'Greenwood'), ('Mabel', 'Vrancovich'), ('Patricia', 'Walkden'), ('Lita', 'Sugiarto'), ('Martha', 'Wolf Peterdy'), ('Stephanie', 'Johnson'), ('Dianne', 'Berkinshaw'), ('Patricia', 'Reyes'), ('Mara', 'Cohen Mintz'), ('Helen', 'Lennon'), ('Elizabeth', 'James'), ('Fiona', 'Mckenzie'), ('Susi', 'Eichenberger'), ('Laura', 'Rossouw'), ('Ana Maria', 'Arias'), ('Bunny', 'Smith'), ('Yolanda', 'Sumarno'), ('Ellen', 'Grindvold'), ('Ingrid', 'Sadlon'), ('Marie', 'Pinterova'), ('Lidy', 'Venneboer'), ('Marta', 'Galli'), ('Carol', 'Zeeman'), ('Lucia', 'Gongora'), ('Kathleen', 'Harter'), ('Mary Ann', 'Beattie'), ('Elizabeth', 'Allan'), ('Kathy', 'Blake'), ('Helen', 'Cawley'), ('Rita', 'Felix'), ('Estela', 'Benavides'), ('Gail', 'Falkenberg'), ('Winnie', 'Wooldridge'), ('Karen', 'Krantzcke'), ('Astrid', 'Suurbeck'), ('Jeong Soon', 'Yang'), ('Penelope', 'Hardgrave'), ('Toshiko', 'Sade'), ('Louise', 'Gonnerman'), ('Wendy', 'Overton'), ('Mari Ann', 'Klougart'), ('Edith', 'Winkens'), ('Alex', 'Cowie'), ('Cecilia', 'Martinez'), ('Janice', 'Wainwright'), ('Esme', 'Emanuel'), ('Tine', 'Zwaan'), ('Conceicao', 'Rio'), ('Anne Mette', 'Sorensen'), ('Sue', 'Mappin'), ('Maria Teresa', 'Nasuelli'), ('Kerry', 'Reid'), ('Beverley', 'Billington'), ('Suzana', 'Gesteira'), ('Loanita', 'Rachman'), ('Violette', 'Percy'), ('Leonora', 'Peralta'), ('Elena', 'Subirats'), ('Christina', 'Sandberg'), ('Ingrid', 'Palmieri'), ('Julie', 'Anthony'), ('Birgitta', 'Lindstrom'), ('Graciela', 'Moran'), ('Marilyn', 'Aschner'), ('Ada', 'Bakker'), ('Junko', 'Sawamatsu'), ('Josiane', 'Graas'), ('Evagreth', 'Emmenegger'), ('Katja', 'Ebbinghaus'), ('Daphne', 'Pattison'), ('Helen', 'Amos'), ('Marianne', 'Kindler'), ('Barbara', 'Kral'), ('Monique', 'Van Haver'), ('Rosie', 'Casals'), ('Nicole', 'Bimes'), ('Odile', 'De Roubin'), ('Ching Ling', 'Chang'), ('Leyla', 'Musalem'), ('Mona', 'Guerrant'), ('Judy', 'Congdon'), ('Peggy', 'Michel'), ('Ivona', 'Matulikova'), ('Judith', 'Salome'), ('Maria Teresa', 'Salvidea Diaz'), ('Olga', 'Morozova'), ('Andree', 'Martin'), ('Veronika', 'Buche'), ('Hideko', 'Goto'), ('Jill', 'Cooper'), ('Peaches', 'Bartkowicz'), ('Lany', 'Kaligis'), ('Danuta', 'Wieczorek'), ('Laura', 'Du Pont'), ('Raquel', 'Giscafre'), ('Gina', 'Genovese'), ('Roylee', 'Bailey'), ('Wanda', 'Ferraz De Oliveira'), ('Di', 'Riste'), ('Corinne', 'Molesworth'), ('Valerie', 'Ziegenfuss'), ('Kayoko', 'Fukuoka'), ('Judy', 'Dixon'), ('Biljana', 'Kostic'), ('Sonoe', 'Yonezawa'), ('Alex', 'Rotas'), ('Kerry', 'Harris'), ('Miroslava', 'Holubova'), ('Sue', 'Roux'), ('Heidi', 'Eisterlehner'), ('Susie', 'Witwer'), ('Marianna', 'Brummer'), ('Judith', 'Szorenyi'), ('Kerry', 'Ballard'), ('Patti', 'Hogan'), ('Elvira', 'Weisenberger'), ('Lindsey', 'Beaven'), ('Louise', 'Bysiek'), ('Diana', 'Moskova'), ('Susan', 'Stone'), ('Ines', 'Roget'), ('Betty Ann', 'Dent'), ('Yoshiro', 'Tanaka'), ('Pamela', 'Austin'), ('Vera Lucia', 'Giugni'), ('Margaret', 'Cooper'), ('Paulina', 'Peled'), ('Agnes', 'Graczol'), ('Helen', 'Worland'), ('Wendy', 'Gilchrist'), ('Lesley', 'Hunt'), ('Daniela', 'Marzano'), ('Jenny', 'Helliar'), ('Shelby', 'Torrance'), ('Stephanie', 'Grant'), ('Janice', 'Tindle'), ('Mary', 'Struthers'), ('Denise', 'Carter Triolo'), ('Flore', 'Wagner'), ('Kristy', 'Pigeon'), ('Wendy', 'Tomlinson'), ('Isabel', 'Fernandez De Soto'), ('Kerry', 'Young'), ('Ana', 'Cavadini'), ('Alenka', 'Pipan'), ('Barbara', 'Hawcroft'), ('Christina', 'Sotirova'), ('Linda', 'Tuero'), ('Carol', 'Baily'), ('Patricia', 'Rivera'), ('Pam', 'Richmond'), ('Adrienne', 'Avis'), ('Janine', 'Strauss'), ('Marlie', 'Buehler'), ('Robyn', 'Hunt'), ('Kazuko', 'Sawamatsu'), ('Brenda', 'Kirk'), ('Zaiga', 'Yansone'), ('Vicki', 'Lancaster Kerr'), ('Cynthia', 'Doerner'), ('Jane', 'Kincaid'), ('Nora', 'Lauteslager'), ('Anne Marie', 'Cassaigne'), ('Margareta', 'Forsgardh'), ('Pam', 'Teeguarden'), ('Gail', 'Hansen'), ('Dorte', 'Ekner'), ('Marjorie', 'Gengler'), ('Ann', 'Lebedeff'), ('Ana Maria', 'Ycaza'), ('Connie', 'Capozzi'), ('Janice', 'Rapp'), ('Jackie', 'Fayter'), ('Laila', 'Pirila'), ('Maria Cristina', 'Borba Dias'), ('Penny', 'Moor'), ('Jane', 'Ohara'), ('Evonne', 'Cawley'), ('Cathy', 'Beene'), ('Lucia', 'Bruce'), ('Eva', 'Fridenzi'), ('Janet', 'Young'), ('Christine', 'Dorey'), ('Rita', 'Krombach'), ('Patricia', 'Bostrom'), ('Miroslava', 'Bendlova'), ('Fiorella', 'Bonicelli'), ('Nellemieke', 'Brouwer'), ('Susan', 'Hagey'), ('Mi Ok', 'Lee'), ('Gilda', 'Robleto'), ('Katalin', 'Borka'), ('Veronica', 'Burton'), ('Tam', 'Oshaughnessy'), ('Clare', 'Colman'), ('Sharon', 'Walsh Pete'), ('Wendy', 'Appleby'), ('Lotte', 'Solbeck'), ('Carmen', 'Perea Alcala'), ('Marilyn', 'Pryde'), ('Ann', 'Flint'), ('Janice', 'Metcalf'), ('Maria', 'Geyer'), ('Lesley', 'Charles'), ('Lucinda', 'Crosby'), ('Kristien', 'Shaw'), ('Elly', 'Appel'), ('Nancy', 'Ornstein'), ('Patricia', 'Montano'), ('Nathalie', 'Fuchs'), ('Helena', 'Laitinen'), ('Barbara', 'Brankovska'), ('Cecilia', 'Rosado'), ('Kate', 'Latham'), ('Linda', 'Thomas'), ('Cynthia Ann', 'Thomas'), ('Tina', 'Mochizuki'), ('Wendy', 'Turnbull'), ('Michele', 'Gurdal'), ('Eugenia', 'Birioukova'), ('Kathy', 'Kraft'), ('Angelina', 'Colquitt'), ('Eliza', 'Pande'), ('Rosalba', 'Vido'), ('Maya', 'Kerschbaum'), ('Margaret', 'Riley'), ('Beatrix', 'Klein'), ('Beverly', 'Buckley'), ('Maria Victoria', 'Baldovinos Cibeira'), ('Beatrice', 'Chrystman'), ('Lindsay', 'Blachford'), ('Marina', 'Kroschina'), ('Yvona', 'Brzakova'), ('Yoko', 'Kobayashi'), ('Patricia', 'Coleman'), ('Karin', 'Boshoff'), ('Janet', 'Haas'), ('Rowena', 'Sanders'), ('Duk Hee', 'Lee'), ('Sabine', 'Lavrerotte'), ('Alcira', 'Acevedo'), ('Janet', 'Wright'), ('Anna', 'Nemeth'), ('Silvia', 'Blume Bruns'), ('Jane', 'Stratton'), ('Nancy', 'Weigel'), ('Marcie', 'Harper'), ('Sirikanya', 'Hoonsiri'), ('Soon Oh', 'Lee'), ('Patricia', 'Brailsford'), ('Sally', 'Hudson Beck'), ('Suthasini', 'Sirikaya'), ('Susan', 'Vinton'), ('Judy', 'Chaloner'), ('Pam', 'Whytcross'), ('Jane', 'Preyer'), ('Marion', 'De Witte'), ('Jan', 'Blackstad'), ('Elzbieta', 'Slesicka'), ('Brenda', 'Garcia'), ('Walena', 'White'), ('Glynis', 'Coles'), ('Barbara', 'Downs'), ('Annette', 'Coe'), ('Patricia', 'Bianchi'), ('Iris', 'Riedel Kuhn'), ('Lucy', 'Fendig'), ('Rosa Maria', 'Togores Colom'), ('Mihoka', 'Matshushima'), ('Mimi', 'Wikstedt'), ('Betsy', 'Blaney'), ('Glaucia', 'Langela'), ('Daryl', 'Gralka'), ('Jill', 'Schwikert'), ('Joy', 'Schwikert'), ('Frederique', 'Thibault'), ('Sue', 'Stap'), ('Linda', 'Geeves'), ('Amy', 'Goldfarb'), ('Maria', 'Mendonca'), ('Valerie', 'Franta'), ('Deborah', 'Fiuza'), ('Sabine', 'Bernegger'), ('Mary', 'Hamm'), ('Jill', 'Hamilton'), ('Robin', 'Khan'), ('Joanne', 'Russell'), ('Donna', 'Ganz'), ('Elizabeth', 'Vlotman'), ('Debra', 'Darrell'), ('Kiyoko', 'Nomura'), ('Susan', 'Minford'), ('Florence', 'Guedy'), ('Renata', 'Tomanova'), ('Chris', 'Evert'), ('Yolanda', 'Vallejo'), ('Naoko', 'Sato'), ('Lindsay', 'Morse'), ('Virginia', 'Ruzici'), ('Susana Maria', 'Villaverde'), ('Silvana', 'Urroz'), ('Michiko', 'Saji'), ('Candy', 'Reynolds'), ('Sally', 'Greer'), ('Jane', 'Plackett'), ('Kyeong Mi', 'Choi'), ('Bente', 'Kjolstad'), ('Silvana', 'Belardinelli'), ('Andrea', 'Whitmore'), ('Nancy', 'Yeargin'), ('Dominique', 'Beillan'), ('Jean', 'Nachand'), ('Magdalena', 'Gual Pascual'), ('Laurie', 'Rowley'), ('Diane', 'Desfor'), ('Aleida', 'Spex'), ('Donna', 'Stockton'), ('Beatriz', 'Araujo'), ('Kym', 'Ruddell'), ('Carol', 'Draper'), ('Erin', 'Dignam'), ('Ann', 'Kiyomura Hayashi'), ('Carrie', 'Meyer'), ('Penny', 'Johnson'), ('Florenta', 'Mihai'), ('Elsa', 'Rodriguez'), ('Elizabeth', 'Freeman Young'), ('Gina', 'Diaz Ponce'), ('Anabel', 'Luna De Infante'), ('Martha', 'Morrison'), ('Jutta', 'Diesslin'), ('Ann', 'Etheredge'), ('Pauline', 'Elliott'), ('Joni', 'Van Ryck De Groot'), ('Monica', 'Rho'), ('Gwynn', 'Sammel'), ('Maria Julia', 'Roverano'), ('Laurie', 'Tenney'), ('Jenny', 'Dimond'), ('Ruta', 'Gerulaitis'), ('Terry', 'Holladay'), ('Marcela Viviana', 'Cataldi'), ('Brigette', 'Cuypers'), ('Monica', 'Alvarez'), ('Genevieve', 'Etienne'), ('Vera', 'Tere'), ('Kiyomi', 'Nakagawa'), ('Ros', 'Lewis'), ('Sylvia', 'Koning'), ('Gretchen', 'Galt'), ('Carla', 'Guarino De Galeazzi'), ('Chris', 'Newton'), ('Irina', 'Shevchenko'), ('Marita', 'Redondo'), ('Brenda', 'Remilton'), ('Ilana', 'Kloss'), ('Birgitte', 'Hermansen'), ('Chris', 'Oneil'), ('Stephanie', 'Tolleson'), ('Jenny', 'Walker'), ('Robin', 'Harris'), ('Sue', 'Barker'), ('Mary Ann', 'Colville'), ('Sandy', 'Stap'), ('Belinda', 'Thompson'), ('Nerida', 'Gregory'), ('Beatrice', 'Guery'), ('Rayni', 'Fox'), ('Elena', 'Samoilo'), ('Kathy', 'May Teacher Paben'), ('Caroline', 'Lane'), ('Courtney', 'Lord'), ('Helle', 'Viragh'), ('Roberta', 'Stark'), ('Jody', 'Appelbaum'), ('Marillia', 'Matte'), ('Mima', 'Jausovec'), ('Annina', 'Von Planta'), ('Adriana', 'Villagran Reami'), ('Dianne', 'Balestrat'), ('Lea', 'Plchova'), ('Cathy', 'Griffiths'), ('Lele', 'Forood'), ('Bernadette', 'Davy'), ('Helena', 'Anliot'), ('Kim', 'Sands'), ('Martina', 'Navratilova'), ('Betsy', 'Nagelsen'), ('Chris', 'Penn'), ('Brigitte', 'Simon Glinel'), ('Diane', 'Evers'), ('Linky', 'Boshoff'), ('Kathy', 'Kuykendall'), ('Elina', 'Durchman'), ('Patricia', 'Medrado'), ('Katerleen', 'Szeman'), ('Mariana', 'Simionescu'), ('Iluminada', 'Concepcion'), ('Andrea', 'Galloway'), ('Simone', 'Wolter'), ('Sylvie', 'Rual Faulty'), ('Yvonne', 'Vermaak'), ('Susan', 'Zaro'), ('Paula', 'Smith'), ('Ponamporn', 'Samawanthana'), ('Antonella', 'Rosa'), ('Lotta', 'Stenberg'), ('Greer', 'Stevens'), ('Eva', 'Rozsavolgyi'), ('Dora', 'Alavantic'), ('Leslie', 'Allen'), ('Mary', 'Carillo'), ('Cathleen', 'Farrell'), ('Kaye', 'Hallam'), ('Vicki', 'Beggs'), ('Phyllis', 'Blackwell'), ('Ludmila', 'Makarova'), ('Barbara', 'Jordan'), ('Anna', 'Iuale'), ('Karen', 'Feldman'), ('Margaret', 'Lumia'), ('Jan', 'Wilton'), ('Barbara', 'Hallquist'), ('Marjorie', 'Blackwood'), ('Rene', 'Blount'), ('Linda', 'Mottram'), ('Christine', 'Gimmig'), ('Lorna', 'Whitfield'), ('Mary', 'Sawyer'), ('Beth', 'Norton'), ('Julie', 'Filkoff'), ('Maria', 'Mateo'), ('Linda', 'Siegleman'), ('Felicia', 'Hutnick'), ('Lorna', 'Simmons'), ('Huey Ying', 'Chen'), ('Yoon Ja', 'Han'), ('Malgorzata', 'Rejdych'), ('Bunny', 'Bruning'), ('Susie', 'Mehmedbasich'), ('Donna', 'Bradshaw'), ('Kay', 'Mcdaniel'), ('Kay', 'McDaniel'), ('Kim', 'Jones Shaefer'), ('Veronica', 'Martinez'), ('Brenda', 'Perry'), ('Jeanne', 'Evert'), ('Sue', 'Saliba'), ('Carrie', 'Fleming'), ('Maria', 'Bolster'), ('Li Qiao', 'Yu'), ('Antonella', 'Canapi'), ('Alina', 'Baraldi'), ('Emilse', 'Rapponi Longo'), ('Kim', 'Steinmetz'), ('Eiko', 'Katayama'), ('Katerina', 'Bohmova'), ('Yukie', 'Koizumi'), ('Elisabeth', 'Ekblom'), ('Mara', 'Eijkenboom'), ('Sheila', 'Mcinerney'), ('Naoko', 'Matsuki'), ('Yasuka', 'Shiba'), ('Cathy', 'Fink'), ('Lisette', 'Senn'), ('Jan', 'Bardot'), ('Jo', 'Sheridan'), ('Sue', 'Bartlett'), ('Gleici', 'Silva Do Espirito Santo'), ('Lynne', 'Epstein'), ('Anne Marie', 'Ruegg'), ('Leanne', 'Harrison Austin'), ('Perrine', 'Du Puy'), ('Nancy', 'Neviaser'), ('Viviana', 'Segal'), ('Nina', 'Bohm'), ('Joyce', 'Portman'), ('Robin', 'Tenney'), ('Lisa', 'Yap Sam'), ('Patricia', 'Shoolman'), ('Chalada', 'Wattana'), ('Natasha', 'Chmyreva'), ('Beatriz', 'Villaverde'), ('Cynthia', 'Ashling'), ('Michelle', 'Tyler'), ('Monica', 'Simmen'), ('Marise', 'Kruger'), ('Dianne', 'Morrison'), ('Christine', 'Ricour Catella'), ('Helena', 'Wimmer'), ('Nosheen', 'Ehtesham'), ('Mariette', 'Pakker'), ('Sandy', 'Collins'), ('Alejandra', 'Vallejo'), ('Jean', 'Hepner'), ('Pat', 'Henderson'), ('Nam Sook', 'Kim'), ('Pamela', 'Baily'), ('Lindsay', 'Standen'), ('Roberta', 'Mccallum'), ('Judita', 'Papista'), ('Eun Jeong', 'Cha'), ('Tanya', 'Harford'), ('Regina', 'Marsikova'), ('Helene', 'Pelletier'), ('Lea', 'Antonoplis'), ('Dewonder', 'Davis'), ('Anthea', 'Stewart'), ('Lisa', 'Moldrem'), ('Ellinore', 'Lightbody'), ('Elke', 'Renz'), ('Sally Ann', 'Lewis'), ('Lisa', 'Doherty'), ('Eleni', 'Pilava Papanikolaou'), ('Petra', 'Delhees Jauch'), ('Stacy', 'Margolin'), ('Susan', 'Rimes'), ('Zhen Zhen', 'Xiang'), ('Froydis', 'Forberg'), ('Nina', 'Bland'), ('Fumiko', 'Furuhashi'), ('Liliana', 'Giussani'), ('Lucia', 'Romanov'), ('Maria', 'Romanov'), ('Elena', 'Eliseenko'), ('Marcella', 'Mesker'), ('Clare', 'Harrison'), ('Helen', 'Park'), ('Sherry', 'Acker'), ('Keryn', 'Pratt'), ('Christa', 'Pickwick'), ('Sedigheh', 'Hassani'), ('Anne', 'Smith'), ('Annette', 'Smith'), ('Patricia', 'Armet Sanpere'), ('Uschi', 'Ulrich'), ('Anne', 'Hobbs'), ('Kristin', 'Kinney'), ('Elfia', 'Nizarwan'), ('Graciela', 'Peraza'), ('Brigitte', 'Lorang'), ('Catherine', 'Suire'), ('Caroline', 'Young'), ('Donna', 'Rubin'), ('Xin Fen', 'Pu'), ('Qing Qing', 'Gong'), ('Ann', 'Henricksson'), ('Soon Ho', 'Shin'), ('Masako', 'Yanagi'), ('Tamar', 'Levin'), ('Carol', 'Daniels'), ('Dana', 'Gilbert'), ('Trey', 'Lewis'), ('Sylvia', 'Hanika'), ('Ingrid', 'Willems'), ('Kathy', 'Jordan'), ('Graca', 'Cardoso'), ('Jeanne', 'Duvall'), ('Cindy', 'Davis'), ('Zenda', 'Liess'), ('Sharon', 'Green'), ('Kathy', 'Obrien'), ('Cissie', 'Donigan'), ('Lori', 'Robertson'), ('Hagit', 'Zubary'), ('Fiona', 'Moffitt'), ('Michelle', 'Berrigan'), ('Silvia', 'Campius Pinas'), ('Claudia', 'Casabianca'), ('Cathy', 'Drury'), ('Kate', 'Glancy'), ('Jennifer', 'Balent'), ('Wendy', 'Burkhart'), ('Debbie', 'Stewart'), ('Gabriela', 'Dinu'), ('Sabina', 'Simmonds'), ('Tiffany', 'Silveria'), ('Maria', 'Rothschild'), ('Betsy', 'Heidenberger'), ('Wendy', 'Barlow'), ('Deborah', 'Jevans'), ('Suzanne', 'Bakewell'), ('Amanda', 'Tobin Dingwall'), ('Debbie', 'Chesterton'), ('Jill', 'Davis'), ('Helen', 'Davis'), ('Martine', 'Bureau'), ('Maria Manuel', 'Cabral Lencastre'), ('Hamidan', 'Bibi'), ('Lynn', 'Jacobs'), ('Judy', 'Rich'), ('Danielle', 'Meunier'), ('Jo', 'Durie'), ('Iva', 'Budarova'), ('Teng Lian', 'Kwong'), ('Lisa', 'Wilcox'), ('Lani', 'Wilcox'), ('Mareen', 'Louie Harper'), ('Betona', 'Pellon Fernandez'), ('Beatriz', 'Pellon'), ('Saida', 'Berthe'), ('Wendy', 'Prausa'), ('Elizabeth', 'Little'), ('Heidi', 'Allsmiller'), ('Denise', 'Parnell'), ('Manuela', 'Zoni'), ('Margaret', 'Redfearn'), ('Lorrie', 'Zacharias'), ('Marcelle', 'Voyame'), ('Rita', 'Agassi'), ('Themis', 'Zambrzycki'), ('Anna Maria', 'Fernandez'), ('Lucia', 'Fernandez'), ('Amreeta', 'Ahluwalia'), ('Rosalyn', 'Nideffer'), ('Caroline', 'Stoll'), ('Min Kyung', 'Seol'), ('Micki', 'Schillig'), ('Angela', 'Walker'), ('Marianne', 'De Crop'), ('Hana', 'Strachonova'), ('Michelle', 'Weiss'), ('Tracie', 'Blumentritt'), ('Caroline', 'Franch'), ('Ivanna', 'Madruga Osses'), ('Helena', 'Manset'), ('Nina', 'Voydat'), ('Neissa', 'Doumbia'), ('Eva', 'Pfaff'), ('Maria Paula', 'Abreu'), ('Marcela', 'Skuherska'), ('Alycia', 'Moulton'), ('Iwona', 'Kuczynska'), ('Jeong Soon', 'Lee'), ('Karin', 'Moos'), ('Cornelia', 'Dries'), ('Caryn', 'Copeland Wilson'), ('Nicole', 'Mabille'), ('Mariela', 'Clavijo'), ('Sylvia', 'Clayton'), ('Petra', 'Van Oyen'), ('Cricket', 'Manuel'), ('Claudia', 'Monteiro'), ('Christi', 'Turdo'), ('Barbara', 'Rossi'), ('Kylie', 'Copeland'), ('Simonetta', 'Bozzano'), ('Julie', 'Walther'), ('Joy', 'Tacon'), ('Linda', 'Siegel'), ('Lena', 'Sandin'), ('Myke', 'Loomis'), ('Heather', 'Ludloff'), ('Beverly', 'Corbie'), ('Hillery', 'Royer'), ('Carol', 'Watson'), ('Chris', 'Payne'), ('Heather', 'Crowe'), ('Eun Sook', 'Han'), ('Helga', 'Lutten'), ('Lone', 'Vandborg'), ('Mary Lou', 'Daniels'), ('Hyacinth', 'Yorke'), ('Pirjo', 'Ojala'), ('Soo Ok', 'Kim'), ('Marianne', 'Van Der Torre'), ('Susan', 'Rollinson'), ('Angel', 'Cobbs'), ('Louise', 'Tuff'), ('Kathleen', 'Cummings'), ('Nicole', 'Lorenzetti'), ('Christiane', 'Jolissaint'), ('Jacquie', 'Dobson'), ('Anne', 'White'), ('Jaime', 'Kaplan'), ('Nancy', 'Loeffler Caro'), ('Patricia', 'Hermeda'), ('Patricia', 'Alvarenga'), ('Karen', 'Smith'), ('Sri', 'Utaminingsih'), ('Tracy', 'Houk'), ('Barbara', 'Potter'), ('Andrea', 'Pesak'), ('Ingrid', 'Sommerauer'), ('Diane', 'Farrell'), ('Lisa', 'Dunner'), ('Blanca', 'Borbolla'), ('Claudia', 'Van Der Weck'), ('Caren', 'Schindler'), ('Susan', 'Pendo'), ('Felicia', 'Raschiatore'), ('Brenda', 'Catton'), ('Louise', 'Allen'), ('Christine', 'Lukalo'), ('Lisa', 'Seemann'), ('Malgorzata', 'Sieradzka'), ('Marina', 'Kondova'), ('Sriningdiah', 'Sutarniati'), ('Jennifer', 'Mundel'), ('Jillian', 'Muller'), ('Jamie', 'Golder'), ('Jane', 'Forman'), ('Mary', 'Dailey'), ('Emmanuelle', 'Folcher'), ('Jeom Re', 'Park'), ('Pia', 'Tamayo'), ('Julie', 'Harrington'), ('Dorota', 'Dziekonska'), ('Hana', 'Mandlikova'), ('Xiao Yu', 'Zhu'), ('Elise', 'Burgin'), ('Olga', 'Zaitseva'), ('Beverly', 'Mould'), ('Florence', 'Gauvain'), ('Patrizia', 'Murgo'), ('Susie', 'Jaeger'), ('Jacqueline', 'Geller'), ('Gloria', 'Escobar'), ('Nanette', 'Schutte'), ('Natalia', 'Leipus'), ('Kelly', 'Henry'), ('Eun Ok', 'Cho'), ('Linda', 'Cassell'), ('Jennifer', 'Goodling'), ('Linley', 'Tanner'), ('Mesenbete', 'Shenkutee'), ('Judy', 'Newman'), ('Isabel', 'Moure'), ('Ni', 'Zhong'), ('Chongrak', 'Sri Ud'), ('Debbie', 'Freeman'), ('Carol', 'Neeld Lang'), ('Liliana', 'Fernandez'), ('Dee Ann', 'Hansel'), ('Xin Yi', 'Li'), ('Li Lan', 'Duan'), ('Pam', 'Shriver'), ('Ilse', 'De Ruysscher'), ('Lisa', 'Spain Short'), ('Caitriona', 'Ruane'), ('Debbie', 'Robb'), ('Carin', 'Bakkum'), ('Nora', 'Bajchikova'), ('Lindsay', 'Bartlett'), ('Kate', 'Brasher'), ('Maluca', 'Llamas'), ('Susan', 'Leo'), ('Maria Elena', 'Ruiz'), ('Chiu Mei', 'Ho'), ('Mari Carmen', 'Espinosa'), ('Karen', 'Dewis'), ('Sylvia', 'Vay'), ('Vicki', 'Nelson Dunbar'), ('Joy', 'Cummings'), ('Svetlana', 'Cherneva'), ('Carol', 'Christian'), ('Christina', 'Rozwadowski'), ('Eve', 'Zimmerman'), ('Luciana', 'Alfaro'), ('Anne', 'Happonen'), ('Jo', 'Griffiths'), ('Laura', 'Murgo'), ('Sally Anne', 'Mcdonald'), ('Isabelle', 'Villiger'), ('Irma', 'Novakova Spurny'), ('Kathrin', 'Keil'), ('Germaine', 'Ohaco'), ('Tracy', 'Austin'), ('Stina', 'Almgren'), ('Ginette', 'Kaempf'), ('Ginette', 'Huberty'), ('Karla', 'Umana'), ('Raquel', 'Contreras'), ('Kate', 'Gompert'), ('Linda', 'Stewart'), ('Alita', 'Rumsey'), ('Michaela', 'Pazderova'), ('Jane', 'Jarosz'), ('Helen', 'Asciak'), ('Li Chuan', 'Hsieh'), ('Molly', 'Mcgrath'), ('Asa', 'Flodin'), ('Catrin', 'Jexell'), ('Marlene', 'De Wouters'), ('Lisa', 'Sassano'), ('Lisa', 'Pennington'), ('King See', 'Lee'), ('Maria', 'Lindstrom'), ('Karla', 'Lehnoff'), ('Sylma', 'Phillip'), ('Lily', 'Aguirre'), ('Laura', 'Bernstein'), ('Sadia', 'Berthe Hoffman'), ('Anne', 'Minter'), ('Liz', 'Smylie'), ('Ruth', 'Seeman'), ('Hu', 'Na'), ('Anne', 'Moller'), ('Nadine', 'Schmit'), ('Karin', 'Hinterwirth'), ('Pilar', 'Vasquez'), ('Barbara', 'Pollet'), ('Berit', 'Bjork'), ('Anneli', 'Bjork'), ('Sylvie', 'Tetreault'), ('Claudia', 'Pasquale'), ('Virginia', 'Oteiza'), ('Jamie', 'Pisarcik'), ('Sylvie', 'Gardette'), ('Adriana', 'Velcheva'), ('Lisa', 'Lusteg'), ('Natasha', 'Piskakova'), ('Ionita', 'Nesti'), ('Jan', 'Martin'), ('Clare', 'Thompson'), ('Bettina', 'Bunge'), ('Catarina', 'Lindqvist Ryan'), ('Shelley', 'Solomon'), ('June', 'Ferestein'), ('Cecilia', 'Fernandez Parker'), ('Pamela', 'Jung'), ('Cheryl', 'Lewis'), ('Karen', 'Buchholz'), ('Julia', 'Kashevarova'), ('Elizabeth', 'Burger'), ('Ann', 'Gabriel'), ('Genevieve', 'Greiwe'), ('Hatsuhi', 'Isowa'), ('Kazuko', 'Ito'), ('Hsiu Tsuan', 'Wen'), ('Ana', 'Almansa'), ('Lise', 'Gregory'), ('Karin', 'Stampfli'), ('Bonnie', 'Gadusek'), ('Carina', 'Karlsson'), ('Corinne', 'Vanier'), ('Jacinta', 'Ayers'), ('Kathy', 'Holton'), ('Allyson', 'Ingram'), ('Erika', 'Smith'), ('Begonia', 'Erana'), ('Linda', 'Howell'), ('Sophie', 'Amiach'), ('Elizabeth', 'Cameron'), ('Liza', 'Riefkohl'), ('Lynn', 'Lewis'), ('Zina', 'Garrison'), ('Ivana', 'Jankovska'), ('Shelley', 'Aguero'), ('Suzanna', 'Anggarkusuma'), ('Yan', 'Sun'), ('Miranda', 'Yates'), ('Robin', 'White'), ('Claudia', 'Kohde Kilsch'), ('Hiromi', 'Yoshihara'), ('Lori', 'Mcneil'), ('Rebecca', 'Bryant'), ('Pam', 'Casale Telford'), ('Karina', 'Heck'), ('Robyn', 'Lamb'), ('Jackie', 'Joseph'), ('Leigh Anne', 'Thompson'), ('Adriana', 'Florido'), ('Laura', 'Gildemeister'), ('Marie Christine', 'Calleja'), ('Andrea', 'Leand'), ('Jackie', 'Castillejo'), ('Sylvia', 'Schenck'), ('Qin Di', 'Weng'), ('Sherri', 'Norris'), ('Sharon', 'Norgren'), ('Cristina', 'Wallis'), ('Tita', 'Zea'), ('Gretchen', 'Magers'), ('Hana', 'Fukarkova'), ('Britta', 'Schneider'), ('Gigi', 'Fernandez'), ('Annette', 'Gulley'), ('Astrid', 'Sunde'), ('Anita', 'Aggarwal'), ('Kelly', 'Holland'), ('Sharon', 'Hodgkin'), ('Karen', 'Huebner'), ('Cynthia', 'Macgregor'), ('Collette', 'Oreilly'), ('Elizabeth', 'Jones'), ('Marisa', 'Sanchez Vicario'), ('Eun Sook', 'Huang'), ('Manon', 'Bollegraf'), ('Penny', 'Barg Mager'), ('Molly', 'Ulvin'), ('Wendy', 'Wood'), ('Liz', 'Wachter'), ('Sue', 'Hatch'), ('Mayumi', 'Yamada'), ('Cheryl', 'Jones'), ('Heidi', 'Rosenbaum'), ('Sara', 'Gomer'), ('Isabel', 'Casso'), ('Diane', 'Craig'), ('Kjersti', 'Jensen'), ('Catherine', 'Berry'), ('Beth', 'Herr'), ('Socorro', 'Trumpeta'), ('Renata', 'Sasak'), ('Denise', 'Panagopoulou'), ('Therese', 'Arildsen'), ('Susan', 'Mascarin'), ('Carol', 'Bertrand'), ('Barbara', 'Gerken'), ('Sally', 'Reeves'), ('Isabelle', 'Vernhes'), ('Heliane', 'Steden'), ('Maya', 'Hajjar'), ('Fiona', 'Martin'), ('Rene', 'Uys'), ('Becky', 'Brown'), ('Lisa', 'Bobby'), ('Nancy', 'Arendt'), ('Julia', 'Apostoli'), ('Marlene', 'Zuleta'), ('Frederique', 'Mauger'), ('Jill', 'Smoller'), ('Klaartje', 'Van Baarle'), ('Barbi', 'Bramblett'), ('Rafeket', 'Binyamini'), ('Orly', 'Bialistozky'), ('Millie', 'Didio'), ('Etsuko', 'Inoue'), ('Nicola', 'Lusty'), ('Jill', 'Hetherington'), ('Jackie', 'Van Wijk'), ('Shari', 'Bucklin'), ('Kathy', 'Foxworth'), ('Maeve', 'Quinlan'), ('Monica', 'Weber'), ('Vicki', 'Marler'), ('Kim', 'Cartwright'), ('Andrea', 'Tiezzi'), ('Simone', 'Vasconcellos Calves'), ('Daniela', 'Moise'), ('Immaculada', 'Varas Caro'), ('Katherine', 'Camilleri'), ('Angela', 'Farley Wilson'), ('Leigh Anne', 'Eldredge'), ('Emiko', 'Okagawa'), ('Emiko', 'Sakaguchi'), ('Helena', 'Olsson'), ('Stephanie', 'Sipe'), ('Barbara', 'Romano'), ('Jeanette', 'Gomez'), ('Svetlana', 'Sinitsyna'), ('Silvana', 'Casaretto'), ('Stephanie', 'Savides'), ('Rina', 'Caniza'), ('Kumiko', 'Okamoto'), ('Melissa', 'Nodvin'), ('Jeong Ok', 'Choi'), ('Marilda', 'Julia'), ('Helena', 'Sukova'), ('Lorena', 'Sandoval'), ('Renata', 'Baranski'), ('Renata', 'Marcinkowska'), ('Sandra', 'Cecchini'), ('Catherine', 'Bonnet'), ('Akemi', 'Nishiya'), ('Masako', 'Nishina'), ('Molly', 'Van Nostrand'), ('Fiona', 'Keasberry'), ('Rhona', 'Howett'), ('Maria Jose', 'Paniagua'), ('Helene', 'Cedet'), ('Petra', 'Keppeler'), ('Judith', 'Warringa'), ('Susanne', 'Schmid'), ('Rina', 'Einy'), ('Lori', 'Kosten'), ('Patty', 'Fendick'), ('Annelie', 'Bjork'), ('Terri', 'Gaskill'), ('Amy', 'Holton'), ('Haruko', 'Shigekawa'), ('Jenny', 'Klitch'), ('Shelley', 'Bartlett'), ('Carmela', 'Vitali'), ('Sagit', 'Doron'), ('Amanda', 'Brown'), ('Monty', 'Morrison'), ('Kim', 'Simmons'), ('Miki', 'Mizokuchi'), ('Belkis', 'Rodriguez'), ('Lilian', 'Kelaidis'), ('Anne', 'Chevalier'), ('Maija', 'Suonpaa'), ('Martina', 'Reinhardt'), ('Catherine', 'Tanvier'), ('Jane', 'Young'), ('Sabrina', 'Goles'), ('Andrea', 'Jaeger'), ('Marianne', 'Groat'), ('Jane', 'Porfirio'), ('Gretchen', 'Doninger'), ('Diane', 'Donnelly'), ('Jennifer', 'Thornton'), ('Julie', 'Salmon'), ('Mal Sim', 'Park'), ('Lucila', 'Becerra'), ('Urmi', 'Negi'), ('Reeka', 'Szikszay'), ('Wei', 'Hua'), ('Ruth', 'Sverdloff'), ('Natasha', 'Reva'), ('Andrea', 'Muller'), ('Natalia', 'Riva'), ('Patricia', 'Hy Boulais'), ('Elizabeth', 'Minter'), ('Kathy', 'Horvath'), ('Naoko', 'Kinoshita'), ('Yvette', 'Flu'), ('Beverly', 'Bowes Hackney'), ('Monica', 'Kowalewski'), ('Dyan', 'Castillejo'), ('Shelly', 'Walpole'), ('Belinda', 'Cordwell'), ('Elizabeth', 'Daly'), ('Karin', 'Dallwitz'), ('Liz', 'Finlayson'), ('Bernadette', 'Randall'), ('Dena', 'Levy'), ('Emiko', 'Takahashi'), ('Marta', 'Varanda'), ('Margarita', 'Vaquero'), ('Tammy', 'Whittington'), ('Lisa', 'Bonder Kreiss'), ('Yvonne', 'Der Kinderen'), ('Ann', 'Hulbert'), ('Sobhini', 'De Silva'), ('Lesley', 'OHalloran'), ('Andrea', 'Ritecz'), ('Jean Marie', 'Sterling'), ('Jana', 'Koran'), ('Mary', 'Stevens'), ('Susan', 'Russo'), ('Joni', 'Urban'), ('Raffaella', 'Reggi Concato'), ('Caroline', 'Hagey'), ('Debbie', 'Ladig'), ('Lorrie', 'Major'), ('Angelika', 'Kanellopoulou'), ('Maricela', 'Morales'), ('Heidi', 'Narborough'), ('Tamaka', 'Takagi'), ('Ilana', 'Berger'), ('Ku Maizan', 'Shak'), ('Hemel', 'Meghani'), ('Rosa', 'Bielsa Hierro'), ('Ann', 'Ehrmann'), ('Masako', 'Morikawa'), ('Linda', 'Ferrando'), ('Sarah', 'Sullivan'), ('Rene', 'Collins'), ('Eva', 'Krapl'), ('Anna', 'Ivan'), ('Angela', 'Longo'), ('Claudia', 'Hernandez Salas'), ('Luciana', 'Corsato Owsianka'), ('Ivonne', 'Lorher'), ('Sook Ja', 'Im'), ('Elizma', 'Nortje'), ('Teresa', 'Dobson'), ('Lisa', 'Lillemoe'), ('Anne', 'Grousbeck'), ('Claudia', 'Borgiani'), ('Marianna', 'Ansio'), ('Petra', 'Huber'), ('Dai Hwa', 'Wang'), ('Kilmeny', 'Waterman'), ('Michaela', 'Washington'), ('Judith', 'Wiesner'), ('Tine', 'Scheuer Larsen'), ('Ralene', 'Fourie'), ('Alice', 'Danila'), ('Carin', 'Anderholm'), ('Kim', 'Staunton'), ('Jane', 'Thomas'), ('Nathalie', 'Herreman'), ('Csilla', 'Cserepy'), ('Susanna', 'Lee'), ('Elizabeth', 'Alexander'), ('Renata', 'Skrzypczynska'), ('Sarit', 'Shalev'), ('Maria Antonietta', 'Trupia'), ('Pascale', 'Paradis Mangon'), ('Andrea', 'Temesvari'), ('Myriam', 'Schropp'), ('Catherine', 'Odea'), ('Mary', 'Norwood'), ('Ronni', 'Reis'), ('Silvana', 'Campos'), ('Rita', 'Winebarger'), ('Shu Shin', 'Kam'), ('Lourdes', 'Manulat'), ('Rene', 'Mentz'), ('Karolina', 'Karlsson'), ('Camille', 'Benjamin'), ('Pascale', 'Etchemendy'), ('Michele', 'Wreem'), ('Siobhan', 'Nicholson'), ('Veronica', 'Platz'), ('Jennifer', 'Prah'), ('Silvia', 'Ludorf'), ('Shonette', 'Wilson'), ('Elena', 'Guerra'), ('Mercedes', 'Paz'), ('Robyn', 'Field'), ('Kathleen', 'Schuurmans'), ('Andrea', 'Betzner'), ('Olga', 'Votavova'), ('Colette', 'Sely'), ('Gabriela', 'Castro'), ('Annabel', 'Croft'), ('Stefania', 'Dalla Valle'), ('Tory', 'Plunkett'), ('Anne Marie', 'Walson'), ('Larisa', 'Savchenko'), ('Merike', 'Stamberg'), ('Mei Chu', 'Hsu'), ('Allison', 'Cooper'), ('Claire', 'Pollard'), ('Michelle', 'Garth'), ('Miriam', 'Ponce De Leon'), ('Lynn', 'Henderson'), ('Vincenza', 'Procacci'), ('Caroline', 'Kuhlman'), ('Vanya', 'Kelleher'), ('Leslie', 'Hakala'), ('Valerie', 'Ledroff'), ('Natalia', 'Egorova'), ('Maria Marta', 'Gallinal'), ('Isabelle', 'Demongeot'), ('Sharon', 'Mcnamara'), ('Lucia', 'Peria'), ('Monica', 'Reinach'), ('Sabine', 'Krein Auer'), ('Annika', 'Karlsson'), ('Maria Josefina', 'Rojo'), ('Stephanie', 'Givens'), ('Lynn', 'Nabors'), ('Michelle', 'Parun'), ('Cackie', 'Germic'), ('Belinda', 'Borneo'), ('Cornelia', 'Lechner'), ('Ginny', 'Purdy'), ('Eileen', 'Tell'), ('Neige', 'Dias'), ('Monica', 'Munoz'), ('Maria Christine', 'Damas'), ('Terry', 'Phelps'), ('Maria Ines', 'Leal'), ('Jane', 'Holden'), ('Nora', 'Kovarcikova'), ('Jennifer', 'Larking Dawson'), ('Beate', 'Knauber'), ('Agnes', 'Lempereur'), ('Edna', 'Olivarez'), ('Colleen', 'Carney'), ('Su Lin', 'Lai'), ('Masami', 'Nakai'), ('Nicole', 'Simon'), ('Silvia', 'Batista'), ('Manuela', 'Maleeva Fragniere'), ('Annette', 'Singer'), ('Jenny', 'Byrne'), ('Louise', 'Field'), ('Philippa', 'Palmer'), ('Amanda', 'Grunfeld'), ('Magdalena', 'Wiese'), ('Celine', 'Cohen'), ('Carrie Lynn', 'Cohen'), ('Araceli', 'Montero'), ('Kathy', 'Rinaldi Stunkel'), ('Tessa', 'Price'), ('Julie', 'Richardson'), ('Nathalie', 'Phan Thanh'), ('Janet', 'Craig'), ('Yasuyo', 'Kajita'), ('Simone', 'Schilder'), ('Irina', 'Zvereva'), ('Monica', 'Lundqvist'), ('Fukiko', 'Osawa'), ('Monika', 'Lundqvist'), ('Viktoria', 'Milvidskaia'), ('Lydie', 'Van Hille'), ('Sonia', 'Tiberi'), ('Joanne', 'Louis'), ('Anke', 'Marchl'), ('Lupita', 'Novelo'), ('Nathalie', 'Ballet'), ('Pauline', 'Chan'), ('Virginie', 'Paquet'), ('Aida', 'Khalatian'), ('Monika', 'Waniek'), ('Anna Karin', 'Olsson'), ('Fatima', 'Santiago'), ('Laura', 'Glitz'), ('Beate', 'Reinstadler'), ('Laura', 'Falconieri'), ('Karen', 'Schimper'), ('Lisa', 'Gould'), ('Shannon', 'Gordon'), ('Kellie', 'Dorman Tyrone'), ('Josephine', 'Paguyo'), ('Amy', 'Jonsson Raaholt'), ('Reka', 'Monoki'), ('Lukky', 'Tedjamukti'), ('Alice', 'Nohacova'), ('Juliet', 'Drew'), ('Louise', 'Pleming'), ('Jackie', 'Holden'), ('Michelle', 'Torres'), ('Caterina', 'Nozzoli'), ('Kaja', 'Kond'), ('Jennifer', 'Fuchs'), ('Loretta', 'Sheales'), ('Hester', 'Witvoet'), ('Ledna', 'Martin'), ('Caroline', 'Billingham'), ('Anne', 'Aallonen'), ('Monique', 'Javer'), ('Nicole', 'Krijger Jagerman'), ('Ana Luiza', 'Alencar'), ('Debbie', 'Spence Nasim'), ('Digna', 'Ketelaar'), ('Christine', 'Iandolo'), ('Chris Anne', 'Aston'), ('Ann', 'Stephenson'), ('Sonya', 'Hahn'), ('Florentina', 'Curpene'), ('Linda', 'Harley'), ('Dora', 'Rangelova'), ('Kathy', 'Hofer'), ('Jeong Myung', 'Lee'), ('Ei', 'Iida'), ('Kim', 'Labuschagne'), ('Janine', 'Tremelling'), ('Lilia Carla', 'Azevedo'), ('Ingelise', 'Driehuis'), ('Cynthia', 'Mitchell'), ('Michelle', 'Turk'), ('Ewa', 'Zerdecka'), ('Ana', 'Larrakoetxea'), ('Claire', 'Wegink'), ('Alejandra', 'Perez Jimenez'), ('Annette', 'Gerber'), ('Mariana', 'Perez Roldan'), ('Clare', 'Evert'), ('Carling', 'Bassett Seguso'), ('Simona', 'Isidori'), ('Jill', 'Waldman'), ('Nathalie', 'Tauziat'), ('Marianne', 'Werdel Witmeyer'), ('Amanda', 'Tate'), ('Kirsty', 'Wenzel'), ('Yvonne', 'Klompenhouver'), ('Myriam', 'Berthe'), ('Jean Marie', 'Lozano'), ('Eleni', 'Rossides'), ('Nahia', 'Abou Khalil'), ('Silvia', 'La Fratta'), ('Laura', 'Garrone'), ('Federica', 'Bonsignori'), ('Janet', 'Souto Garcia'), ('Maite', 'Martinez Perez'), ('Karmen', 'Skulj'), ('Suzie', 'Mair'), ('Atsuko', 'Shima'), ('Laura', 'Golarsa'), ('Betsy', 'Somerville'), ('Katrina', 'Crawford'), ('Karen', 'Fodera'), ('Alissa', 'Finerman'), ('Milena', 'Leiva'), ('Tracey', 'Morton Rodgers'), ('Jane', 'Morro'), ('Shawn', 'Foltz'), ('Denisa', 'Kristofova'), ('Stine', 'Vogt Andersen'), ('Leila', 'Meskhi'), ('Sohini', 'Kumari'), ('Anna', 'Benzon'), ('Su Jen', 'Lai'), ('Andrea', 'Holikova'), ('Regina', 'Wieser'), ('Laurence', 'Garcia Clement'), ('Patty', 'Oreilly'), ('Christine', 'Oreilly'), ('Terri', 'Oreilly'), ('Kersten', 'Renneissen'), ('Kristina', 'Grunberg'), ('Claudia', 'Inchanstegui'), ('Regina', 'Rajchrtova'), ('Yu Yu', 'Zhu'), ('Alison', 'Scott'), ('Adriana', 'Sandoval'), ('Henrietta', 'Harris'), ('Fang Ling', 'Lin'), ('Lisa', 'Weerasekera'), ('Cristina', 'Casini'), ('Dianne', 'Van Rensburg'), ('Isabelle', 'Crudo'), ('Fiona', 'Long'), ('Mi Jeong', 'Lee'), ('Clare', 'Wood'), ('Elizabeth', 'Gibson'), ('Pascalle', 'Druyts'), ('Karin', 'Oberleitner'), ('Chanrisa', 'Rareang'), ('Stacey', 'Schefflin'), ('Jane', 'Wood'), ('Yoshiko', 'Wauke'), ('Jenny', 'Reeves'), ('Jillian', 'Alexander Brower'), ('Caroline', 'Bhaguandas'), ('Dina', 'Basil'), ('I Jin', 'Chew'), ('Diana', 'Valenti'), ('Mayuko', 'Ebina'), ('Melissa', 'Brown'), ('Justine', 'Brown'), ('Grace', 'Kim'), ('Adriana', 'Isaza'), ('Akiko', 'Kijimuta'), ('Yael', 'Shavit'), ('Madeline', 'Sanchez'), ('Helena', 'Dahlstrom'), ('Eugenia', 'Maniokova'), ('Shandra', 'Livingston'), ('Tanya', 'Soemarno'), ('Mi Ae', 'Sohn'), ('Lisa', 'Harding'), ('Dorothy Jane', 'Suarez'), ('Jackie', 'Masters'), ('Kerry', 'Kendrick'), ('Claudia', 'Piccini'), ('Happy', 'Ho'), ('Jodi', 'Saunders'), ('Luciene', 'Sapienza Muro'), ('Olga', 'Tsarbopoulou'), ('Hellas', 'Ter Riet'), ('Cecille', 'Calmette'), ('Karen', 'Shin'), ('Nathalie', 'Guerree Spitzer'), ('Annette', 'Patchen'), ('Silke', 'Meier'), ('Mimouschka', 'Kion'), ('Jeom Sang', 'Choi'), ('Wendy', 'Ouwendijk'), ('In Sook', 'Park'), ('Lisa', 'Green'), ('Grazia', 'Greco'), ('Cecilia', 'Dahlman'), ('Carol', 'Cassar Torreggiani'), ('Christina', 'Singer'), ('Nicolette', 'Rooimans'), ('Marielle', 'Rooimans'), ('Nathalie', 'Housset Gilbert'), ('Katrina', 'Adams'), ('Paola', 'Voli'), ('Patricia', 'Tarabini'), ('Lisa', 'Oneill'), ('Maria Jose', 'Olave'), ('Linda', 'Barnard'), ('Yan Ling', 'Li'), ('Laura', 'Liong'), ('Agustina', 'Wibisono'), ('Augustina', 'Wibisono'), ('Voralak', 'Vichienchai'), ('Tania', 'Zaitouni'), ('Sabrina', 'Lucchi'), ('Gisele', 'Faria'), ('Julie', 'De Armond'), ('Katie', 'Rickett'), ('Elizabeth', 'Galphin'), ('Karen', 'Hunter'), ('Jolene', 'Watanabe Giltz'), ('Adrienne', 'Green'), ('Edith', 'Tatana'), ('Sarah', 'Mitten'), ('Karin', 'Kschwendt'), ('Ginger', 'Helgeson Nielsen'), ('Paulina', 'Sepulveda'), ('Allison', 'Tolson'), ('Xochitl', 'Escobedo'), ('Lettica', 'Venter'), ('Suzanne', 'White'), ('Norzahara', 'Zainal'), ('Dagmar', 'Schafer'), ('Teodora', 'Tache'), ('Kerri', 'Reiter'), ('Titia', 'Wilmink'), ('Wendy', 'Nelson'), ('Eun Young', 'Kim'), ('Jana', 'Novotna'), ('Kaye', 'Marfini Hand'), ('Amy', 'De Lone'), ('Marlene', 'Chumbez'), ('Cammy', 'Macgregor'), ('Valda', 'Lake'), ('Petra', 'Holubova'), ('Denisa', 'Krajcovicova'), ('Nozelina', 'Lukeman'), ('Bettina', 'Fulco Villella'), ('Lorenza', 'Jachia'), ('Tossaporn', 'Summa'), ('Karen', 'Deed'), ('Gisele', 'Miro'), ('Heike', 'Thoms'), ('Katrina', 'Greenman'), ('Yuko', 'Hosoki'), ('Tami', 'Whitlinger Jones'), ('Claudia', 'Porwik'), ('Xanthe', 'Adams'), ('Kana', 'Hatakeyama'), ('Denisa', 'Szabova'), ('Sylvie', 'Baccarani'), ('Elna', 'Reinach'), ('Isabel', 'Cueto'), ('Ninoska', 'Souto'), ('Henriette', 'Gemer'), ('Laura', 'Hudson'), ('Christiane', 'Hofmann'), ('Shaun', 'Stafford'), ('Amy', 'Alcini'), ('Anabella', 'Radics'), ('Carla', 'Bazzon'), ('Tara', 'Collins'), ('Heidi', 'Sprung'), ('Sylvie', 'Metlef'), ('Katarzyna', 'Nowak'), ('Jennifer', 'Saberon'), ('Ayako', 'Hirose'), ('Katrin', 'Scheer'), ('Il Soon', 'Kim'), ('Genevieve', 'Dwyer'), ('Paulette', 'Roux'), ('Frederique', 'Martin'), ('Flora', 'Perfetti'), ('Simona', 'Dandrea'), ('Sally', 'Godman'), ('Kay', 'Louthian'), ('Julie', 'Scott'), ('Trisha', 'Laux'), ('Donna', 'Millington'), ('Ana Maria', 'Segura Perez'), ('Tracey', 'Moyle'), ('Andrea', 'Martinelli'), ('Isabela', 'Listowska'), ('Rachel', 'Gale'), ('Susannah', 'Dart'), ('Teresa', 'Edgar'), ('Cecile', 'Bourdais'), ('Anya', 'Kochoff'), ('Marie', 'Croin'), ('Jennifer', 'Santrock'), ('Malin', 'Nilsson'), ('Cristina', 'Cavina'), ('Tanya', 'Stasiuk'), ('Danielle', 'Jones'), ('Stella', 'Sampras'), ('Agnes', 'Romand'), ('Cornelia', 'Marty'), ('Hijiri', 'Nakazaka'), ('Paulette', 'Moreno'), ('Tessa', 'Shapovalova'), ('Emilie', 'Viqueira'), ('Kirsten', 'Dreyer'), ('Renata', 'Smekalova'), ('Esmir', 'Hoogendoorn'), ('Anne', 'Meredith'), ('Astrid', 'Ruhr'), ('Sally', 'McCann'), ('Elvira', 'Yussupova'), ('Miyako', 'Ataka'), ('Maria Elena', 'Gittens'), ('Alison', 'Fleming'), ('Niurka', 'Sodupe'), ('Elena', 'Ordinaga'), ('Alexia', 'Gera'), ('Julie', 'Coles'), ('Sally', 'Mccann'), ('Danila', 'Imbriani'), ('Claudia', 'Faillace'), ('Linda', 'Allred'), ('Vera Carina', 'Elter'), ('Susan', 'Gadroen'), ('Michelle', 'Jaggard Lai'), ('Fumiko', 'Yamazaki'), ('Katerina', 'Maleeva'), ('Shannon', 'Peters'), ('Alexia Llysel', 'Marquez'), ('Stephanie', 'Faulkner'), ('Andrea', 'Vopat'), ('Maya', 'Kidowaki'), ('Roberta', 'Caldas'), ('Amy', 'Van Buuren'), ('Wendy', 'Frazer'), ('Marina', 'Bottazzi'), ('Wiltrud', 'Probst'), ('Andrea', 'Kohrt'), ('Florea De Maria', 'Urrea'), ('Hana', 'Adamkova Guy'), ('Mahela', 'Gartner Ockernahl'), ('Steffi', 'Graf'), ('Melissa', 'Gurney'), ('Natalie', 'Rodriguez'), ('Pauline', 'Rodriguez'), ('Amy', 'Dillingham'), ('Sheri', 'Yandle'), ('Birgit', 'Dopfer'), ('Li Hua', 'Yang'), ('Louise', 'Wekesa'), ('Rona', 'Daniels'), ('Eva Lena', 'Olsson'), ('Sabine', 'Hack'), ('Lorna May', 'Lewis'), ('Jennifer', 'Young'), ('Lisa', 'Keller'), ('Erica', 'Adams'), ('Jonna', 'Jonerup'), ('Aila', 'Winkler'), ('Sally', 'Timms'), ('Chris Lynne', 'Kuhlke'), ('Zelda', 'Kuhn'), ('Halle', 'Cioffi'), ('Petra', 'Thoren'), ('Holly', 'Danforth'), ('Gabriela', 'Mosca'), ('Susan', 'King'), ('Giovanna', 'Carotenuto'), ('Maria', 'Strandlund Tomsvik'), ('Gail', 'Boon'), ('Stephanie', 'London'), ('Heike', 'Roloff'), ('Virginie', 'Buisson'), ('Tonya', 'Evans'), ('Elly', 'Hakami'), ('Carolina', 'Espinoza'), ('Nicole', 'Arendt'), ('Antonia', 'Homolya'), ('Amy', 'Schwartz'), ('Sandra', 'Birch'), ('Federica', 'Lentini'), ('Kristi', 'Bastian'), ('Liliana', 'Rodriguez'), ('Nicole', 'Bradtke'), ('Yeon Sook', 'Kim'), ('Silvia', 'Freye Steur'), ('Evelyn', 'Larwig'), ('Renate', 'Wachtler'), ('Mandy', 'Wilson'), ('Caroline', 'Delisle'), ('Daniela', 'Ivana'), ('Jin', 'Choi'), ('Valerie', 'Batut'), ('Sybille', 'Niox Chateau'), ('Karine', 'Quentrec'), ('Donna', 'Littleton'), ('Jamie', 'Henikoff'), ('Irawati', 'Moerid'), ('Irawati', 'Iskandar'), ('Karim', 'Strohmeier Merino'), ('Cecilia', 'Bargagni'), ('Stephanie', 'Rehe'), ('Dalia', 'Koriat'), ('Cornelia', 'Grunes'), ('Tonya', 'Fuller'), ('Helen', 'Kelesi'), ('Paula', 'Parentich'), ('Pilar', 'Santibanez Gomez Ull'), ('Gaby', 'Coorengel'), ('Monica', 'Wiese'), ('Ivonne', 'Sonderegger'), ('Ya Hui', 'Lin'), ('Martina', 'Pawlik'), ('Eva Maria', 'Schurhoff'), ('Rita', 'Kowacsics'), ('Michelle', 'Beadman'), ('Martha', 'Garzon Elkins'), ('Mayuko', 'Koshiba'), ('Jennifer', 'Obrien'), ('Caroline', 'Bodart'), ('Gisela', 'Quental'), ('Marianne', 'Colon'), ('Linda', 'Gates'), ('Luciana', 'Tella'), ('Sandra', 'Bernal'), ('Henriette', 'Kjaer Nielsen'), ('Andrea', 'Noszaly'), ('Laurence', 'Bois'), ('Denia', 'Salu'), ('Sarah', 'Rafael'), ('Helen', 'Odea'), ('Andrea', 'Berger'), ('Lorena', 'Rodriguez Di Laura'), ('Cora', 'Linneman'), ('Maria', 'Ekstrand'), ('Amanda', 'Gesualdi'), ('Alice', 'Lamport'), ('Bettina', 'Diesner'), ('Ying', 'Bi'), ('Susie', 'Scott'), ('Paula', 'Iversen'), ('Eva', 'Melicharova'), ('Corinne', 'Bousmans'), ('Ann', 'Devries'), ('Claudine', 'Toleafoa'), ('Maria', 'Capistrano Bjorklund'), ('Ning', 'Lin'), ('Corinne Marie', 'Demey Bousm'), ('Kristine', 'Kunce'), ('Maria Jose', 'Llorca'), ('Maria Elena', 'Llamas'), ('Caroline', 'Vis'), ('Sylvia', 'Stefkova'), ('Sandra', 'Wasserman'), ('Helen', 'Jonsson'), ('Amanda', 'Gregory'), ('Monika', 'De Lenart'), ('Kate', 'Mcdonald'), ('Metamin', 'Sharijah'), ('Danielle', 'Scott'), ('Lisa', 'Kwok'), ('Jana', 'Pospisilova'), ('Ryoko', 'Yamaguchi'), ('Lisa', 'Albano'), ('Ingrid', 'Peltzer'), ('Kelly', 'Story'), ('Marie Jose', 'Llorca'), ('Barbara', 'Oddone'), ('Lindsay', 'Matthews'), ('Cathrin', 'Caspary'), ('Leona', 'Laskova'), ('Alison', 'Smith'), ('Hind', 'Tajeddine'), ('Rosa Maria', 'Llaneras'), ('Pascale', 'Welter'), ('Emanuela', 'Zardo'), ('Michelle', 'Strebel'), ('Stephanie', 'Reece'), ('Sylvia', 'Czopek'), ('Silvana Lorena', 'Celorio'), ('Emmanuelle', 'Derly'), ('Stela', 'Penciu'), ('Alexia', 'Dechaume Balleret'), ('Elba', 'Pinero'), ('Jorgelina', 'Moreno'), ('Ruth Ann', 'Escobedo'), ('Kim Trang', 'Nguyen'), ('Kylie', 'Johnson'), ('Jean', 'Ceniza'), ('Sabina', 'Pellas'), ('Nicole', 'Welte'), ('Cristina', 'Salvi'), ('Su Ying', 'Lai'), ('Gabriela', 'Sabatini'), ('Anissa', 'Groves'), ('Silvia Carina', 'Mazzeo Da Silva'), ('Maider', 'Laval'), ('Shannan', 'Mccarthy'), ('Nicole', 'Wagstaff'), ('Rita', 'Pichardo'), ('Sandra', 'Dopfer'), ('Orawan', 'Thampensri'), ('Sophie', 'Didelot'), ('Ayoola', 'Shelle'), ('Ayoola', 'Odiah'), ('Claire', 'Sessions Bailey'), ('Silke', 'Frankl'), ('Katalin', 'Darvas'), ('Ouarda', 'Bouchabou'), ('Yvette', 'Castillejo'), ('Catherine', 'Mothes Jobkel'), ('Rosa Maria', 'Peso Aldaz'), ('Nina', 'Erickson'), ('Zarina', 'Galvan'), ('Susan', 'Katzen'), ('Pascal', 'Engel'), ('Piret', 'Ilves'), ('Joanna', 'Rossi'), ('Vita', 'Kaminskiate'), ('Bong Soon', 'Choi'), ('Petra', 'Pichalova Langrova'), ('Anat', 'Varon'), ('Laura', 'Mannisto'), ('Nadja', 'Beik'), ('Michelle', 'Bowrey'), ('Su Chen', 'Lin'), ('Anja', 'Elsen'), ('Shiho', 'Okada'), ('Hye Jeong', 'Pyo'), ('Maria', 'Salsgard'), ('Gudrun', 'Levers'), ('Louise', 'Fitzgerald'), ('Maria Eugenia', 'Vento'), ('Louise', 'Venter'), ('Els', 'Callens'), ('Magdalena', 'Feistel'), ('Alexandra', 'Niepel'), ('Debbie', 'Graham'), ('Gail', 'Biggs'), ('Alessia', 'Vesuvio'), ('Ivana', 'Ratkovic'), ('Claudia', 'Brause'), ('Kateryna', 'Filyus'), ('Talina', 'Beiko'), ('Barbara', 'Paulus'), ('Marzia', 'Grossi'), ('Rosario', 'Barea De Lara'), ('Tania', 'Everoll'), ('Corina', 'Martinez Pastur'), ('Nanne', 'Dahlman'), ('Julie', 'Halard Decugis'), ('Laura', 'Lapi'), ('Karen', 'Losch'), ('Karen', 'Theck'), ('Jessica', 'Emmons'), ('Jane', 'Yates'), ('Michaela', 'Frimmelova'), ('Yumi', 'Kitano'), ('Agnes', 'Anwar'), ('Natasha', 'Marcucci'), ('Joanna', 'Meagher'), ('Kimiko', 'Date Krumm'), ('Rita', 'Degliesposti'), ('Hagit', 'Ohayon'), ('Renata', 'Della'), ('Gigi', 'Gonzalez'), ('Tanti', 'Trayono'), ('Mary', 'Innes'), ('Patricia', 'Valadas'), ('Ann', 'Wunderlich'), ('Anna', 'Mirza'), ('Alison', 'Hill'), ('Kathryn', 'Katibi'), ('Lori', 'Feingold'), ('Tunecia', 'Sheffield'), ('Ying', 'Wu'), ('Karen', 'Gallego'), ('Theresa', 'Anderson'), ('Leisa', 'Dunn'), ('Stacey', 'Martin'), ('Julia', 'Muir'), ('Paola', 'De Cunto'), ('Stefanie', 'Rehmke'), ('Deborah', 'Edelman'), ('Yayuk', 'Basuki'), ('Susan', 'Sloane Lundy'), ('Merete', 'Stockmann Balling'), ('Jeri', 'Ingram'), ('Dyphany', 'Wilkinson'), ('Tanja', 'Weigl'), ('Naoko', 'Kurimata'), ('Noelle', 'Porter'), ('Holly Ann', 'Lloyd'), ('Dorien', 'Wamelink'), ('Cammy', 'Foley'), ('Radomira', 'Zrubakova'), ('Caroline', 'Stassen'), ('Elaine', 'Gibrayl'), ('Brenda', 'Schultz Mccarthy'), ('Steffi', 'Menning'), ('Fiona', 'Reid'), ('Michaela', 'Kriebel'), ('Silvia', 'Correa'), ('Bilynda', 'Potter'), ('Jo Anne', 'Faull'), ('Zuzana', 'Witzova'), ('Diane', 'Mckeon'), ('Min', 'Tang'), ('Pretty', 'Marot'), ('Tracey', 'Hiete'), ('Kim', 'Brandford'), ('Simone', 'Hermann'), ('Alysia', 'May'), ('Rachel', 'King'), ('Varmila', 'Trneckova'), ('Andrea', 'Vieira'), ('Waya', 'Walalangi'), ('Mana', 'Endo'), ('Eun Ju', 'Han'), ('Susan', 'Sommerville'), ('Susan', 'Klingenberg'), ('Francesca', 'Romano'), ('Karla', 'Golfin'), ('Katja', 'Oeljeklaus'), ('Linda', 'Wild'), ('Lesley', 'Barbour'), ('Chrystalla', 'Tritti'), ('Naira', 'Santrosian'), ('Luciana', 'Della Casa'), ('Annalia', 'Dellorso'), ('Jenny', 'Whalen'), ('Roseann', 'Alva'), ('Celine', 'Menain'), ('Yukiko', 'Fukuzawa'), ('Stephanie', 'Mayorkis'), ('Samantha', 'Ewart'), ('Kerstin', 'Taube'), ('Li Ling', 'Chen'), ('Claudia', 'Chabalgoity'), ('Anne', 'Degioanni'), ('Anne', 'Larsen'), ('Magdalena', 'Simkova'), ('Mariaan', 'De Swardt'), ('Susheel', 'Gulati'), ('Cristina', 'Beber'), ('Maureen', 'Drake'), ('Angie', 'Ealy'), ('Tomoko', 'Ishida'), ('Jing', 'Sung'), ('Rennae', 'Stubbs'), ('Monica', 'Aguero'), ('Reiko', 'Noguchi'), ('Dewi', 'Fortuna'), ('Laurence', 'Neuville'), ('Kirsten', 'Moeller'), ('Yuko', 'Miyajima'), ('Andrea', 'Paredes'), ('Agnese', 'Gustmane'), ('Katja', 'Kokko'), ('Nana', 'Smith'), ('Tanja', 'Cerne'), ('Cinda', 'Gurney'), ('Susan', 'Gilchrist'), ('Vanessa', 'Erlan'), ('Ingrid', 'Gonzalez'), ('Sandrine', 'Jaquet'), ('Mirijam', 'Schweda'), ('Natalia', 'Zvereva'), ('Yumiko', 'Kitamura'), ('Vlasta', 'Dammova'), ('Margarita', 'Andonegui'), ('Anjy', 'Fahmy'), ('Meredith', 'Mcgrath'), ('Kim', 'Grant'), ('Margherita', 'Naso'), ('Tomoko', 'Tazawa'), ('Robyn', 'Mawdsley'), ('Raminta', 'Mackeviciute'), ('Machika', 'Tsuji'), ('Karin', 'Lusnic'), ('Yasmin', 'Kaya'), ('Elizabeth', 'Nieto'), ('Ana', 'Carotini'), ('Julie', 'Fidler'), ('Patricia', 'Quisoboni'), ('Nathalie', 'Van Dierendonck'), ('Pamela', 'Wallenfels'), ('Henrike', 'Kadzidroga'), ('Evica', 'Koljanin'), ('Teresa', 'Stromberg'), ('Mari Liis', 'Parmas'), ('Gabrielle', 'Villiger'), ('Elena', 'Brioukhovets'), ('Julie', 'McKeon'), ('Julie', 'Mckeon'), ('Florencia', 'Labat'), ('Nora', 'Koves'), ('Sarah', 'Loosemore'), ('Iwalani', 'Mccalla'), ('Trisha', 'Holloway'), ('Jitka', 'Dubcova'), ('Sandra', 'Reichel'), ('Laura', 'Ritchey'), ('Sandra', 'De Rafael Esteban'), ('Yoannis', 'Montesino'), ('Debora', 'Garat'), ('Quynh', 'Le'), ('Janine', 'Humphreys'), ('Caroline', 'Wuillot'), ('Solihati', 'Moerid'), ('Donna', 'Faber'), ('Eva', 'Sviglerova'), ('Tracey', 'King'), ('Hiromi', 'Nagano'), ('Fumiko', 'Masuda'), ('Ralitza', 'Milorieva'), ('Marianne', 'Vallin'), ('Neus', 'Avila Bonastre'), ('Donna', 'Fields Gibbs'), ('Macarena', 'Miranda'), ('Tzvetelina', 'Havren'), ('Marie Pierre', 'Villani'), ('Pamela', 'Buehler'), ('Nanette', 'Flichtbeil'), ('Natalia', 'Bogacova'), ('Anu', 'Varpula'), ('Kawana', 'Ishijima'), ('Mary Joe', 'Fernandez'), ('Gillian', 'Smith'), ('Tracy', 'Smith'), ('Vickie', 'Paynter'), ('Sabrina', 'Giusto'), ('Samantha', 'Knight'), ('Rikki', 'Gaddie'), ('Marta', 'Alastruez Ruiz'), ('Karen', 'Van Der Merwe'), ('Misumi', 'Miyauchi'), ('Erda', 'Crous'), ('Monica', 'Rey'), ('Rita', 'Cruz Lima'), ('Jackie', 'Moe'), ('Allison', 'Kinsey'), ('Sanna', 'Miestamo'), ('Andrea', 'Farley'), ('Ismet Duygu', 'Aksit Oal'), ('Caryn', 'Moss'), ('Shira', 'Gafni'), ('Annika', 'Narbe'), ('Diedre', 'Herman'), ('Heather', 'Willens'), ('Eugenia', 'Escarate'), ('Carolina', 'Boscardin'), ('Natalie', 'Tschan'), ('Simone', 'Eberlein'), ('Lisa', 'Low'), ('Shi Min', 'Lin'), ('Hui', 'Zhang'), ('Kimberly', 'Po Messerli'), ('Amanda', 'Coetzer'), ('Nelly', 'Pardo'), ('Ana Belen', 'Quintana'), ('Petra', 'Schmitt'), ('Andrea', 'Peterman'), ('Maria Teresa', 'Ruiz'), ('Emma', 'Taikie'), ('Juliana', 'Gorka'), ('Mareke', 'Plocher'), ('Elizabeth', 'Osborne'), ('Orathai', 'Thampensri'), ('Amalia', 'Mitropoulou'), ('Seiko', 'Ichioka'), ('Nao', 'Akahori'), ('Natalia', 'Medvedeva'), ('Sabine', 'Gerke'), ('Audra', 'Keller'), ('Aida', 'Khalatyan'), ('Helen', 'Crook'), ('Yone', 'Kamio'), ('Jody', 'Yin'), ('Samantha', 'Smith'), ('Rachel', 'Mcquillan'), ('Kat', 'Bailey'), ('Rika', 'Hiraki'), ('Cinzia', 'Coppini'), ('Sarah', 'Castillejo'), ('Dina', 'Mcbride'), ('Claudia', 'Mucino'), ('Sofia', 'Kelbert'), ('Arantxa', 'Sanchez Vicario'), ('Karin', 'Ptaszek'), ('Michelle', 'Mair'), ('Birgit', 'Arming'), ('Regina', 'Chladkova'), ('Nadine', 'Batliner'), ('Adriana', 'Gonzalez'), ('Karen', 'Fisher'), ('Li', 'Liu'), ('Maria Pilar', 'Valls'), ('Virginia', 'Humphreys Davies'), ('Alessandra', 'Kaul'), ('Louise', 'Stacey'), ('Stacey', 'Anderson'), ('Gabriella', 'Boschiero'), ('Evangeline', 'Olivarez'), ('Giulia', 'Toschi'), ('Allegra', 'Milholland'), ('Roongnapha', 'Surachet'), ('Angela', 'Kerek'), ('Atsuko', 'Shintani'), ('Michelle', 'Anderson'), ('Julie', 'Sinkins'), ('Kirsi', 'Lampinen'), ('Kelly', 'Press'), ('Caroline', 'Van Renterghem'), ('Patricia', 'Miller'), ('Sara', 'Valverde'), ('Esther', 'Markenstein'), ('Kristin', 'Osmond'), ('Isabela', 'Martin'), ('Kristin', 'Reed'), ('Anja', 'Kostecki'), ('Amanda', 'Trail'), ('Leslie', 'Cavanaugh   Rose'), ('Hiroko', 'Hara'), ('Catarina', 'Bernstein'), ('Rachel', 'Viollet'), ('Darija', 'Deskovic'), ('Akiko', 'Gooden'), ('Laura', 'Randmaa'), ('Sylvie', 'Sabas'), ('Lihini', 'Weerasuriya'), ('Helen', 'Van Den Berg'), ('Giuliana', 'Atzori'), ('Sandra', 'Begijn'), ('Janice', 'Tilbrook'), ('Susanna', 'Modric'), ('Tonia', 'Cook'), ('Justine', 'Hodder'), ('Angela', 'Bernal'), ('Petra', 'Winzenholler'), ('Yoriko', 'Yamagishi'), ('Tatiana', 'Buss'), ('Cami', 'Stewart'), ('Rosario', 'Gracia Abad'), ('Helena', 'Vildova'), ('Gaobolae', 'Seleka'), ('Gabriela', 'Vesela'), ('Mindy', 'Weiner'), ('Gesualda', 'Marra'), ('Evelia', 'Alvarez'), ('Naoko', 'Kijimuta'), ('Yvonne', 'Grubben'), ('Natasha', 'Sciolti'), ('Kirsten', 'Joern'), ('Michelle', 'Oldham'), ('Sandrine', 'Testud'), ('Veronika', 'Martinek'), ('Brenda', 'Thomas'), ('Ainhoa', 'Torrens'), ('Angela', 'Lettiere'), ('Anja', 'Franken'), ('Lucie', 'Schmidhauser'), ('Aki', 'Fujii'), ('Ashley', 'Miller'), ('Lela', 'Zainal'), ('Katia', 'Labourey'), ('Sara', 'Migliori'), ('Conchita', 'Martinez'), ('Jennifer', 'Callen'), ('Simone', 'Hoormaert'), ('Lorrae', 'Guse'), ('Lily', 'Nejasmic'), ('Mary', 'Nejasmic'), ('Claudia', 'Rodriguez'), ('Maria', 'Hardling'), ('Cara', 'Abe'), ('Sabine', 'Appelmans'), ('Elke', 'Escreet'), ('Laura', 'Richards'), ('Hortensia', 'Hernandez'), ('Silvia', 'Farina Elia'), ('Nicole', 'Gadanyi'), ('Carrie', 'Cunningham'), ('Yiching', 'Wu'), ('Petra', 'Johansson'), ('Marja Liisa', 'Kuurne'), ('Elitza', 'Paunova'), ('Alison', 'Reid'), ('Hye Jin', 'Park'), ('Barbara', 'Garassino'), ('Julie', 'Exum'), ('Kelli Ann', 'Johnston'), ('Tatiana', 'Matohniuk'), ('Agnes', 'Zugasti'), ('Erika', 'Kuttler'), ('Elena', 'Pampoulova'), ('Elena', 'Wagner'), ('Olivia', 'De Camaret'), ('Olivia', 'Ponchet'), ('Barbara', 'Griffiths'), ('Pavlina', 'Rajzlova'), ('Petra', 'Schwarz'), ('Jana', 'Strnadova'), ('Lizette', 'Roncagliolo'), ('Andrea', 'Strnadova'), ('Carla', 'Rodriguez'), ('Medi', 'Dadoch'), ('Meredith', 'Geiger'), ('Audra', 'Brannon'), ('Heather', 'Lockhart'), ('Valerie', 'Tan'), ('Nuria', 'Niemes'), ('Karen', 'Bacon'), ('Nathalie', 'Leschi'), ('Melissa', 'Mazzotta'), ('Kristine', 'Kurth'), ('Loredana', 'Bujor'), ('Kerstin', 'Kretschmann'), ('Megali', 'Gence'), ('Hye Jeong', 'Kim'), ('Tanja', 'Stegkamper'), ('Sandra', 'Van Der Aa'), ('Tania', 'Couto'), ('Noelle', 'Van Lottum'), ('Natalia', 'Baudone Furlan'), ('Ana', 'Salas Lozano'), ('Heidi', 'Djanogly'), ('Christine', 'Neuman'), ('Olivia', 'Cappelletti'), ('Anouschka', 'Popp'), ('Stefania', 'Casi'), ('Cristina', 'Tessi'), ('Yael', 'Segal'), ('Eva', 'Haslinghuis'), ('Caroline', 'Schuck'), ('Lorenza', 'Romano'), ('Gabriella', 'Molnaar'), ('Natasha', 'Villarroel'), ('Mika', 'Todo'), ('Shahira', 'Tawfik'), ('Victoria', 'Davies'), ('Kiyoko', 'Yazawa'), ('Nadia', 'Choqri'), ('Leena', 'Singarajah'), ('Silvia', 'Ramon Cortes'), ('Gemma', 'Magin'), ('Jane', 'Harper'), ('Paula', 'Cabezas'), ('Natalia', 'Chasovaya'), ('Ellen', 'Nelissen'), ('Paloma', 'Collantes'), ('Issem', 'Essaies'), ('Katrina', 'Saarinen'), ('Melisa', 'Castro'), ('Denise', 'Sukup'), ('Katarina', 'Studenikova'), ('Brenda', 'Rojas'), ('Manuela', 'Bargis'), ('Yamile', 'Cordova'), ('Sabrina', 'Favini'), ('Caroline', 'Marchetti'), ('Aranka', 'Huyberts'), ('Miriam', 'Oremans'), ('Cora', 'Hofmann'), ('Marilia', 'Andrade'), ('Amy', 'Frazier'), ('Sofie', 'Albinus'), ('Gina', 'Niland'), ('Rosalba', 'Caporuscio'), ('Cathy', 'Caverzasio'), ('Julie', 'Shiflet'), ('Aurelia', 'Gheorghe'), ('Diana', 'Gardner'), ('Agata', 'Werblinska'), ('Maria Claudia', 'Negri'), ('Maria', 'Purcell'), ('Mmaphala', 'Letsatle'), ('Erika', 'De Lone'), ('Junko', 'Watanabe'), ('Helma', 'Leeuwen'), ('Merete', 'Lindahl'), ('Julia', 'Boden'), ('Alix', 'Creek'), ('Ruxandra', 'Dragomir Ilie'), ('Brenda', 'Santos'), ('Edna', 'Espinosa'), ('Natalia', 'Biletskaia'), ('Jane', 'Taylor'), ('Nimota', 'Kadiri'), ('Svenja', 'Truelsen'), ('Toni', 'Gaddie'), ('Laxmi', 'Poruri'), ('Virag', 'Csurgo'), ('Galia', 'Angelova'), ('Elena', 'Savoldi'), ('Desiree', 'Leupold'), ('Plamena', 'Gogovska'), ('Amy', 'Mascotti'), ('Karin', 'Balekova'), ('Rachel Ann', 'Jensen'), ('Rebecca', 'Jensen'), ('Su Peng', 'Ng'), ('Melissa', 'McFarlane'), ('Carole', 'Lucarelli'), ('Margarita', 'Amelina'), ('Jindra', 'Gabrisova'), ('Katarzyna', 'Teodorowicz Lisowska'), ('Erica', 'Oneill'), ('Kerry Anne', 'Guse'), ('Federica', 'Haumuller'), ('Noelia', 'Perez Penate'), ('Catherine', 'Turinsky'), ('Susie', 'Starrett'), ('Lidia', 'Soulti'), ('Marion', 'Maruska'), ('Stacey', 'Sheppard'), ('Monika', 'Starosta'), ('Wendy', 'Brown'), ('Luanne', 'Spadea'), ('Tanja', 'Hauschildt'), ('Catalina', 'Ramirez'), ('Courtney', 'Roberts'), ('Fang', 'Li'), ('Natalia', 'Noreiko'), ('Patricia', 'Rogulski'), ('Kara', 'Schertzer'), ('Il Sook', 'Kim'), ('Katja', 'Meichelbock'), ('Julie', 'Foillard'), ('Alexandra', 'Scheider'), ('Ulrike', 'Priller'), ('Mika', 'Kanaya'), ('Vajira', 'Premaratne'), ('Olga', 'Cosic'), ('Robyn', 'Farrington'), ('Daniella', 'Blanke'), ('Helga', 'Grille'), ('Eva', 'Bes Ostariz'), ('Katia', 'Piccolini'), ('Jennifer', 'Baker'), ('Sherri', 'Vitale'), ('Eleonora', 'Agnolozzi'), ('Janaina', 'Mercadante'), ('Cristina', 'Casale'), ('Camille', 'Walter'), ('Natalia', 'Anisimova'), ('Janaki', 'Krishnamoorthy'), ('Elena', 'Makarova'), ('Petra', 'Crimmel'), ('Pernilla', 'Sorensen'), ('Nadin', 'Ercegovic'), ('Angie', 'Woolcock'), ('Krisna', 'Summa'), ('Kristin', 'Godridge'), ('Greta', 'Schmitt'), ('Rachel', 'Clark'), ('Paula', 'Boccia'), ('Gabriela', 'Calderon'), ('Camille', 'Baldrich'), ('Radka', 'Bobkova'), ('Ivona', 'Horvat'), ('Maria', 'Marfina'), ('Elana', 'Clark'), ('Marina', 'Stets'), ('Christine', 'Njeuma'), ('Christina', 'Papadaki'), ('Nicoletta', 'Iaccarino'), ('Kirrily', 'Sharpe'), ('Natalia', 'Narenko'), ('Petra', 'Raclavska'), ('Nicole', 'Pratt'), ('Susanna', 'Attili'), ('Sarah', 'Bentley'), ('Jenny', 'Klemm'), ('Sabine', 'Lohmann'), ('Joelle', 'Schad'), ('Elke', 'Juul'), ('Helene', 'Kappler'), ('Francesca', 'Morini'), ('Nicole', 'Kenneally'), ('Suzanne', 'Italiano'), ('Francine', 'Harvey'), ('Naoko', 'Sawamatsu'), ('Maribel', 'Amadeo'), ('Maja', 'Palaversic Cooper Smith'), ('Elena', 'Pogorelova'), ('Farah', 'Mahmood'), ('Jette', 'Wilhelmsen'), ('Irina', 'Stoilova'), ('Marie Christine', 'Goy'), ('Kimberly', 'Kessaris'), ('Susi', 'Fortun Lohrmann'), ('Ines', 'Drumond'), ('Mariana', 'Randrup'), ('Diana', 'Mills'), ('Ilona', 'Poljakova'), ('Klara', 'Blahova'), ('Ginevra', 'Mugniani'), ('Klara', 'Tomsu'), ('Keiko', 'Ishida'), ('Claudia', 'Timm'), ('Alexandra', 'Henningsson'), ('Katharina', 'Duell'), ('Barbara', 'Navarro'), ('Francesca', 'Guardigli'), ('Ulrike', 'Przysucha'), ('Lisa', 'Poole'), ('Renata', 'Kochta'), ('Katherine', 'Gladding'), ('Esther', 'Rekasch'), ('Claire', 'Adamini'), ('Eva', 'Borras'), ('Tzipi', 'Obziler'), ('Emanuela', 'Brusati'), ('Cristina', 'Lopez De Subijana'), ('Masami', 'Nakamura'), ('Danielle', 'Thomas'), ('Cara', 'Robinette'), ('Barbara', 'Rittner'), ('Olivia', 'Fery'), ('Rieneke', 'Kusters'), ('Claudia', 'Hoffmann Timm'), ('Liat', 'Cohen'), ('Anna Laura', 'Baraldi'), ('Marlies', 'Reinders'), ('Rima', 'Taki'), ('Theresa', 'Swart'), ('Anne Marie', 'Mikkers'), ('Laurence', 'Andretto'), ('Roberta', 'Burzagli'), ('Lamsriati', 'Moerid'), ('Daniela', 'Cigna'), ('Maria Jose', 'Gaidano'), ('Alicia', 'Meraz'), ('Dominique', 'Monami'), ('Helene', 'Holter'), ('Caroline', 'Schneider'), ('Ingrid', 'Kurta'), ('Christelle', 'Fauche'), ('Isabela', 'Petrov'), ('Catherine', 'Barclay'), ('Ines', 'Gorrochategui'), ('Caroline', 'Dhenin'), ('Patrizia', 'Mirtillo'), ('Alison', 'Moverley'), ('Vera', 'Turkhaneli'), ('Vanina', 'Casanova'), ('Galina', 'Misiuriova'), ('Nancy', 'Van Erp'), ('Kaoru', 'Shibata'), ('Wendy', 'Shipp'), ('Carolina', 'Torres'), ('Irene', 'Gonzalez Gonzalez'), ('Hikari', 'Abe'), ('Siri', 'Mittet'), ('Colette', 'Caple'), ('Alison', 'Vaughan'), ('Monica', 'Mraz'), ('Katrien', 'De Craemer'), ('Limor', 'Zaltz'), ('Sussy', 'Boyanovich'), ('Cristina', 'Sanz Aguirre'), ('Rona', 'Mayer'), ('Ma Carmen', 'Garcia'), ('Fiona', 'Stoner'), ('Oksana', 'Bushevitsa'), ('Eleonora', 'Vegliante'), ('Barrie', 'Bernstein'), ('Dana', 'Evans'), ('Anna', 'Anastasiou'), ('Helena', 'Franko'), ('Gillian', 'Carter'), ('Dilshani', 'Manawadu'), ('Karina', 'Habsudova'), ('Anneli', 'Ornstedt'), ('Lisa', 'Raymond'), ('Cristina', 'Rodriguez'), ('Natsuko', 'Kurita'), ('Mareze', 'Joubert'), ('Elexia', 'Stivala'), ('Ivana', 'Havrlikova'), ('Heidi', 'Hogh'), ('Elissa', 'Burton'), ('Rebecca', 'Edwards'), ('Caroline', 'Hunt'), ('Astrid', 'Parlachy'), ('Joannette', 'Kruger'), ('Sophie', 'Woorons'), ('Kelly S', 'Wilson'), ('Caroline', 'Herbert'), ('Mary', 'Quasney'), ('Alexandra', 'Kelly'), ('Anique', 'Snijders'), ('Keirsten', 'Alley'), ('Reyna', 'Alvarado'), ('Virginia', 'Ruano Pascual'), ('Pilar', 'Perez'), ('Natalja', 'Vojinovic'), ('Soon Mi', 'Kim'), ('Maja', 'Zivec Skulj'), ('Sasano', 'Yoshiko'), ('Stefania', 'Indemini'), ('Patricia', 'Sandagorda'), ('Patty', 'Murren'), ('Aranzazu', 'Gallardo'), ('Tanja', 'Tsiganii'), ('Stephanie', 'Martin'), ('Alexandra', 'Schmitt'), ('Su Haiza', 'Wan'), ('Angelica', 'Gavaldon'), ('Andreea', 'Ehritt Vanc'), ('Ana', 'Perez'), ('Tracee', 'Lee'), ('Natasha', 'Giles Mellon'), ('Shieh Yen', 'Leong'), ('Holyn', 'Lord'), ('Michelle', 'Likibi'), ('Emily', 'Bond'), ('Christina', 'Fischler'), ('Anzela', 'Zguna'), ('Yoshiko', 'Sasano'), ('Shi Ting', 'Wang'), ('Nuria', 'Tabernero Garin'), ('Marianne', 'Ward'), ('Gorana', 'Matic'), ('Marcia', 'Paganini'), ('Kori', 'Davidson'), ('Paula', 'Astrini'), ('Amy', 'Chiminello'), ('Claire', 'Gatt'), ('Martie', 'De Villiers'), ('Kerry Ann', 'Lim'), ('Michelle', 'Morris Berg'), ('Maria De Los Angeles', 'Ycaza'), ('Ana', 'Rojas'), ('Ninel', 'Barkan'), ('Carolina', 'Conte'), ('Ingrid', 'Lucak'), ('Alexandra', 'Fusai'), ('Cathrine', 'Instebo'), ('Valerie', 'De La Noye'), ('Monica', 'Seles'), ('Nike', 'Dobrovits'), ('Annette', 'Falkenberg'), ('Nabila', 'Bouchabou'), ('Kyung Sook', 'Yoo'), ('Miyako', 'Nakanishi'), ('Miki', 'Miyauchi'), ('Svetlana', 'Komleva'), ('Kristie', 'Boogert'), ('Anori', 'Fukuda'), ('Yuki', 'Fujii'), ('Gala', 'Leon Garcia'), ('Amanda', 'Parson Siegel'), ('Gianfranca', 'Devercelli'), ('Jill', 'Brenner'), ('Michelle', 'Jackson Nobrega'), ('Jennifer', 'Poulos'), ('Valerie', 'Poulos'), ('Svetlana', 'Krivencheva'), ('Lisa', 'Annebro'), ('Sofia', 'Hiort'), ('Valentina', 'Balzotti'), ('Altie', 'Barnard'), ('Olga', 'Lugina'), ('Camilla', 'Persson'), ('Mia', 'Leino'), ('Mirielle', 'Dittmann'), ('Geraldine', 'Ibrac'), ('Marilyn', 'Baker'), ('Patricia', 'Zerdan'), ('Candida', 'Beaumont'), ('Stephanie', 'Rottier'), ('Li Yao', 'Tang'), ('Catriona', 'Mccarthy'), ('Min Hui', 'Chan'), ('Liako', 'Selokoma'), ('Maria Florencia', 'Cianfagna'), ('Maryla', 'Madura'), ('Katerina', 'Vlckova'), ('Estefania', 'Bottini'), ('Aicha', 'Ferjani'), ('Lucy', 'Needham'), ('Alessia', 'Sciarpelletti'), ('Joana', 'Pedroso'), ('La Shawnn', 'Jones'), ('Bridget', 'Mikysa'), ('Viviana', 'Valdovinos'), ('Irina', 'Sukhova'), ('Lea', 'Ghirardi'), ('Barbara', 'Collet'), ('Kaisaran', 'Siewrattan'), ('Stephanie', 'Gomperts'), ('Karen', 'Cross'), ('Beatriz', 'Luna'), ('Johanna', 'Pana'), ('Katerina', 'Kroupova'), ('Lisa', 'Pugliese'), ('Kyoko', 'Nagatsuka'), ('Niki', 'Ninaus'), ('Kati', 'Kocsis'), ('Shu Ping', 'Lin'), ('Maja', 'Muric'), ('Monika', 'Kratochvilova'), ('Jing Qian', 'Yi'), ('Nadia', 'Streltsova'), ('Dyane', 'Aixendri'), ('Cecile', 'Dorey'), ('Karina', 'Kuregian'), ('Jeanette', 'Bhaguandas'), ('Maria Alejandra', 'Quezada'), ('Simona', 'Petru'), ('Yee Hong', 'Tan'), ('Shareen', 'Bottrell'), ('Laurence', 'Giroud'), ('Limor', 'Gabai'), ('Petra', 'Kamstra'), ('Tina', 'Krizan'), ('Raphaella', 'Liziero'), ('Sumara', 'Passos'), ('Maria Virginia', 'Francesca'), ('Irina', 'Spirlea'), ('Joanne', 'Limmer'), ('Ngozi', 'Okwudike'), ('Line', 'Ullring'), ('Germana', 'Di Natale'), ('Melissa', 'Zimpfer'), ('Silvia', 'Plasin Peral'), ('Gulberk', 'Gultekin'), ('Kaoru', 'Yagi'), ('Vera', 'Vitels'), ('Lee Ann', 'Van Den Berg'), ('Amy', 'Berthe'), ('Marketa', 'Stuskova'), ('Suvimol', 'Duangchan'), ('Danica', 'Kovacova'), ('Samantha', 'Etienne'), ('Svetlana', 'Zakharchenko'), ('Valeria', 'Madaro'), ('Hanneke', 'Ketelaars'), ('Caterina', 'Cerquaglia'), ('Eugenia', 'Maia'), ('Terry Ann', 'Zawacki'), ('Beatriz', 'Andonegui'), ('Helena', 'Nordwall'), ('Keri', 'Phebus'), ('Vanessa', 'Matthys'), ('Melissa', 'Golfin'), ('Vicky', 'Maes'), ('Anna Karin', 'Svensson'), ('Esther', 'Ruiz De Ona Plaza'), ('Kathleen', 'Odaly'), ('Jane', 'Legge'), ('Nipada', 'Kaewborisut'), ('Tamsin', 'Wainwright'), ('Anna', 'Moll'), ('Gabriela', 'Villanueva'), ('Riei', 'Kawamata'), ('Seda', 'Noorlander'), ('Axelle', 'Thomas'), ('Chinatsu', 'Ito'), ('Maria', 'Zsoldos'), ('Carolina', 'Somalo'), ('Maria', 'Vento Kabchi'), ('Emily', 'Leonardi'), ('Ana Karina', 'Saldivar'), ('Barbara', 'Mulej'), ('Rosabel', 'Moyen'), ('Marisa', 'Georgitsi'), ('Jan', 'Barrett'), ('Lashawnn', 'Jones'), ('Janette', 'Husarova'), ('Alejandra', 'Gomez'), ('Joice Riana', 'Sutedja'), ('Jean', 'Okada'), ('Jana', 'Nejedly'), ('Tatiana', 'Ignatieva'), ('Alexia', 'Ferrand'), ('Shizuka', 'Tokiwa'), ('Stephanie', 'Devisme'), ('Ching Li', 'Chen'), ('Barbara', 'Bathory'), ('Sofia', 'Prazeres'), ('Katharina', 'Buche'), ('Shirli Ann', 'Siddall'), ('Jane', 'Chi'), ('Florence', 'Mbugua'), ('Page', 'Bartelt'), ('Martine', 'Vosseberg'), ('Mariko', 'Kaneko'), ('Ljudmila', 'Pavlov'), ('Ninfa', 'Marra'), ('Jill', 'Craybas'), ('Jacqueline', 'Dickinson'), ('Pavlina', 'Nola'), ('Paige', 'Yaroshuk'), ('Maja', 'Wittke'), ('Daniela', 'Or Shahar'), ('Michaela', 'Soukupova Peterova'), ('Daphne', 'Van De Zande'), ('Renata', 'Diez'), ('Anna Maria', 'Hollo'), ('Hui Na', 'Liu'), ('Lucie', 'Ahl'), ('Arthi', 'Venkataraman'), ('Tina', 'Samara'), ('Lamia', 'Hameurlaine'), ('Marie', 'Linusson'), ('Nicole', 'Hummel'), ('Dominika', 'Gorecka'), ('Satoko', 'Nakano'), ('Kazue', 'Takuma'), ('Monique', 'Kiene'), ('Franke', 'Joosten'), ('Natsumi', 'Yuki'), ('Sabine', 'Pawelec'), ('Yu Hsien', 'Liu'), ('Simona', 'Nedorostova'), ('Yuka', 'Tanaka'), ('Anna', 'Foldenyi Dicker'), ('Marie', 'Arkbrant'), ('Bixia', 'Li'), ('Elizabeth', 'Alina'), ('Lebogang', 'Seitshiro'), ('Tracy', 'Schroeder'), ('Christina', 'Zachariadou'), ('Agnes', 'Gee'), ('Lauren', 'Gavaris'), ('Cecilia', 'Ampuero'), ('Monica', 'Guglielmi'), ('Yuki', 'Kitamura'), ('Sandra', 'Cacic'), ('Linda', 'Jansson'), ('Paula', 'Umana'), ('Cristina', 'Torrens Valero'), ('Maria Carmen', 'Leon'), ('Melanie', 'Bernard'), ('Luciana', 'Barbosa'), ('Delene', 'Ackron'), ('Sally', 'Boulding'), ('Evonne', 'Allerkamp'), ('Yoke', 'Virliana'), ('Akiko', 'Kazama'), ('Federica', 'Fortuni'), ('Nicole', 'Elliott'), ('Chie', 'Kudo'), ('Alaa', 'A A Ali'), ('Anousjka', 'Van Exel'), ('Jayne', 'Demichele'), ('Sarah', 'Brown'), ('Anouska', 'Van Exel'), ('Celine', 'Regnier'), ('Cindy', 'Summers'), ('Tatjana', 'Vuckovic'), ('Sofia', 'Kalavria'), ('Lisa', 'Mcshea'), ('Kathy', 'ODaly'), ('Aurora', 'Gima'), ('Laura', 'Medei'), ('Mimma', 'Chernovita'), ('Stephanie', 'Content Tardieu'), ('Marie Pierre', 'Attali'), ('Eleni', 'Kangalou'), ('Martine', 'Bunschoten'), ('Elisabeth', 'Habeler'), ('Hitomi', 'Isomura'), ('Meike', 'Babel'), ('Keiko', 'Nagatomi'), ('Divya', 'Merchant'), ('Alison', 'Cohen'), ('Susan', 'Bowman'), ('Jenny', 'Sotomayor'), ('Valentina', 'Bonacorsi'), ('Marcela', 'Demilio'), ('Anke', 'Huber'), ('Shiri', 'Burstein'), ('Maria', 'Popescu'), ('Yvonne', 'Doyle'), ('Julia', 'Mertins'), ('Anne', 'Mall'), ('Linda', 'Niemantsverdriet'), ('Jennifer', 'Saret'), ('Farley', 'Taylor'), ('Sheung', 'Pang'), ('Tanja', 'Lang'), ('Simone', 'Bock'), ('Paiao Asinata', 'Short'), ('Lee', 'Whitwell'), ('Akemi', 'Hasegawa'), ('Kylie', 'Gottsche'), ('Evelyn', 'Otula'), ('Margaret', 'Olagundoye'), ('Kristy', 'Bayer'), ('Daria', 'Chernova'), ('Kimberley', 'Risson'), ('Stacey', 'Jellen'), ('Carina', 'Lopez'), ('Simona', 'Galik'), ('Caroline', 'Gideskog'), ('Julia', 'Lutrova'), ('Ayako', 'Noda'), ('Asami', 'Tsuda'), ('Benjamas', 'Sangaram'), ('Mary', 'Pierce'), ('Susanna', 'Locher'), ('Sandra', 'De Silva'), ('Marjorie', 'Ferrand'), ('Zdenka', 'Malkova'), ('Antonela', 'Voina Timmerbeil'), ('Aiko', 'Suzuki'), ('Martina', 'Hautova'), ('Alexandra', 'Rentzoula'), ('Kelesitse', 'Makgale'), ('Lamia', 'Alami'), ('Gabriela', 'Beleni'), ('Melanie', 'Kay'), ('Wendy', 'Fix'), ('Mair', 'Hughes'), ('Virginie', 'Van Der Meersch'), ('Katrin', 'Kilsch'), ('Sara', 'Tse'), ('Paola', 'Cespedes'), ('Uju', 'Ben'), ('Stephanie', 'Barfeld'), ('Hong Lan', 'Liu'), ('Aafje', 'Evers'), ('Susanne', 'Depka'), ('Karolina', 'Bulat'), ('Kyoko', 'Hirano'), ('Sung Hee', 'Park'), ('Claire', 'Taylor'), ('Zsofia', 'Csapo'), ('Patricia', 'Aznar'), ('Aiko', 'Matsuda'), ('Bi Xia', 'Li'), ('Edith', 'Nunes Bersot'), ('Anne', 'Ollevier'), ('Laura', 'Olave'), ('Michele', 'Wagner'), ('Celine', 'Beigbeder'), ('Celine', 'Bannmeyer'), ('Stephanie', 'Tibbits'), ('Stephania', 'Gehrke'), ('Maria Fernanda', 'Sainz'), ('Hiromi', 'Sasano'), ('Hyun A', 'Shin'), ('Eva', 'Martincova'), ('Sandra', 'Waechtershauser'), ('Hwa Ju', 'Jeung'), ('Maite', 'Vila'), ('Alona', 'Nakamura'), ('Lubomira', 'Bacheva'), ('Eun Ha', 'Kim'), ('Mami', 'Donoshiro'), ('Andrea', 'Tunko'), ('Sophie', 'Cortina'), ('Caroline', 'Hora'), ('Yi', 'Liu'), ('Ande', 'Tulp'), ('Mariana', 'Eberle'), ('Hyun Hee', 'Sohn'), ('Stefania', 'Pifferi'), ('Saira', 'Sanchinelli'), ('Rita', 'Grande'), ('Patricia', 'Rodriguez'), ('Valeria', 'Valente'), ('Amanda', 'Weinhold'), ('Mette', 'Sigmundstad'), ('Julia', 'Jehs'), ('Magdalena', 'Maleeva'), ('Amanda', 'Browne'), ('Estelle', 'Gevers'), ('Beatriz', 'Miravete'), ('Maria Dolores', 'Campana'), ('Yumiko', 'Nakazima'), ('Sherry', 'Buller'), ('Kelly', 'Duns'), ('Maija', 'Avotins'), ('Olga', 'Hostakova'), ('Alexandra', 'Scholer'), ('Petra', 'Begerow'), ('Vlada', 'Kirilovska'), ('Larissa', 'Schaerer'), ('Eva', 'Diez'), ('Tomoe', 'Hotta'), ('Ai', 'Haigo'), ('Victoria', 'Voznesenskaya'), ('Rieko', 'Noda'), ('Sabine', 'Haas'), ('Lara', 'Bitter'), ('Yolanda', 'Clemot Lerendegui'), ('Paola', 'Tampieri'), ('Carine', 'Bornu'), ('Shanna', 'Strong'), ('Katie', 'Schlukebir'), ('Imogen', 'Wyatt'), ('Debbie', 'Carr'), ('Marjorie', 'Gantman'), ('Rita', 'Degli Esposti'), ('Christine', 'Joseph'), ('Jennie', 'McMahon'), ('Laurence', 'Duffaud'), ('Stefanie', 'Meyer'), ('Kate', 'Warne Holland'), ('Sandra', 'Olsen'), ('Branislava', 'Ivanovic'), ('Johanna', 'Sones'), ('Eva', 'Jimenez Sanz'), ('Maja', 'Ipsa'), ('Magdalena', 'Gargulakova'), ('Martina', 'Nejedly'), ('Linda', 'Engblom'), ('Nicole', 'Strnadova'), ('Kirstin', 'Freye'), ('Maggie', 'Harris'), ('Young Ja', 'Choi'), ('Esra', 'Bayburt'), ('Sang Hoon', 'Chung'), ('Catalina', 'Cristea'), ('Nicole', 'Roth'), ('Sylva', 'Nesvadbova'), ('Gabriela', 'Radu'), ('Nejla', 'Gunay Karoglu'), ('Farah', 'Dayoub'), ('Andrea', 'Bilic'), ('Tze May', 'Lee'), ('Ayami', 'Akiyama'), ('Natalia', 'Nemchinova'), ('Maria Jose', 'Capuano'), ('Daniela', 'Agostinone'), ('Angelique', 'Olivier'), ('Suzanne', 'Olson'), ('Noriko', 'Miyamoto'), ('Asa', 'Svensson'), ('Lesia', 'Bilak'), ('Julie Ann', 'Baird'), ('Petra', 'Hradecka'), ('Petra', 'Douderova'), ('Maaike', 'Koutstaal'), ('Dominique', 'Bovey'), ('Alison', 'Bell'), ('Joanne', 'Ward'), ('Bontshetse', 'Seleka'), ('Eliana', 'Della Vedova'), ('Marcia', 'Senn'), ('Pam', 'Nelson'), ('Marta', 'Cruells Lopez'), ('Ai', 'Sugiyama'), ('Johanna', 'Bihr'), ('Kveta', 'Peschke'), ('Christina', 'Habernigg'), ('Marketa', 'Kochta'), ('Olga', 'Arevalo'), ('Hiroko', 'Ishizaki'), ('Angie', 'Guillette'), ('Melody', 'Falco'), ('Tiffini', 'Huggins'), ('Maria Lovella', 'Catalan'), ('Nathaly', 'Tijssen'), ('Ryouko', 'Yamada'), ('Hiroko', 'Mochizuki'), ('Gloria', 'Pizzichini'), ('Katerina', 'Zajacova'), ('Hye Jin', 'Seo'), ('Marijana', 'Randjelovic'), ('Cynthia', 'Ojeda'), ('Maria Fernanda', 'Landa'), ('Melissa', 'Beadman'), ('Sandra', 'Costa Corral'), ('Khristen', 'Pietrucha'), ('Sandrella', 'Droubi'), ('Angeles', 'Montolio'), ('Lara', 'Howes'), ('Zara', 'Wolseley'), ('Jasmine', 'Angeli'), ('Joanna', 'Bauza'), ('Maria', 'Hernandez'), ('Mariela', 'Marinaro'), ('Michaela', 'Seibold'), ('Katarzyna', 'Malec'), ('Jing Jing', 'Chen'), ('Zorica', 'Glisic'), ('Jennifer', 'Fiers'), ('Valeria', 'Strappa'), ('Cristina', 'Caparis'), ('Kylie', 'Hunt'), ('Carla', 'Santini'), ('Claudia', 'Harrison'), ('Ma Eugenia', 'Abrate'), ('Patamika', 'Phongsuramas'), ('Tina', 'Vukasovic'), ('Elena', 'Likhovtseva'), ('Heather', 'Bates'), ('Barbara', 'Castro'), ('Kata', 'Gyorke'), ('Petra', 'Studnicka'), ('Rosana', 'De Los Rios'), ('Natalia', 'Bondarenko'), ('Dina', 'Dajani'), ('Maylani', 'Ah Hoy'), ('Marta', 'Cano'), ('Margarita', 'Mejia'), ('Karen', 'Anderson'), ('Dewi', 'Wijayanthi'), ('Manuela', 'Grosskopf'), ('Olesya', 'Artemeva'), ('Kym', 'Hazzard'), ('Tankiso', 'Letseka'), ('Natalie', 'Adsuar'), ('Karine', 'Preaud'), ('Monica', 'Chornet Velasco'), ('Julie', 'Thu'), ('Anne', 'Kremer'), ('Berengere', 'Karpenschif'), ('Monique', 'Fitters'), ('Christina', 'Weiss'), ('Soon Nam', 'Kim'), ('Pao Hua', 'Huang'), ('Sue', 'Kocsis'), ('Diana', 'Spadea'), ('Valerie', 'Feger'), ('Leanne', 'Melgaard'), ('Julie', 'Pullin'), ('Angie', 'Marik'), ('Kelly', 'Rudolph'), ('Alena', 'Nesticka'), ('Ines', 'Heise'), ('Cristina', 'Cortes'), ('Suzana', 'Rodrigues'), ('Gabriela Aura', 'Zarnoveanu'), ('Denisa', 'Legac'), ('Mihaela', 'Ghica'), ('Sarah', 'Pitkowski Malcor'), ('Aradhana', 'Reddy'), ('Anne', 'Puissant'), ('Ju Yeon', 'Choi'), ('Natalia', 'De Cola'), ('Yasmin', 'Attia Abdalla'), ('Yoriko', 'Kokubun'), ('Betsy', 'Miringoff'), ('Natalie', 'Nagyova'), ('Emanuela', 'Falleti'), ('Martina', 'Schiavo'), ('Ana', 'Laso'), ('Anna', 'Klim'), ('Lorena', 'Romano'), ('Magali', 'Benitez'), ('Isabell', 'Quast'), ('Jeong Hee', 'Paek'), ('Ana', 'Gasparyan'), ('Soumia', 'Islami'), ('Ana Maria', 'Hartweg'), ('Martina', 'Zichova'), ('Laura', 'Nurminen'), ('Ditta', 'Huber'), ('Akemi', 'Sato'), ('Sissy', 'Carvin'), ('Jutta', 'Ribitsch'), ('Lucinda', 'Gibbs'), ('Sophie', 'De Taxis'), ('Shaila', 'Ali'), ('Esme', 'De Villiers'), ('Yeon Hee', 'Cho'), ('Ana Valeria', 'Rolon'), ('Natalia', 'Soetrisno'), ('Sonal', 'Marker'), ('Martina', 'Crha'), ('Alenka', 'Ovin'), ('Floor', 'Vioen'), ('Claudia', 'Marsili'), ('Miia', 'Kohtala'), ('Dora', 'Djilianova'), ('Cristiana', 'Marradi'), ('Katherine', 'Costain'), ('Audrey', 'Ludwig'), ('Laurence', 'Courtois'), ('Conchita', 'Martinez Granados'), ('Marie Christine', 'Caron'), ('Ma Llanos', 'Soriano'), ('Vanessa', 'Webb'), ('Olga', 'Vymetalkova'), ('Ai', 'Ozawa'), ('Subhra', 'Shukla'), ('Lusy', 'Kumala'), ('Hanako', 'Kamiya'), ('Nicole', 'London'), ('Nancy', 'Feber'), ('Katarina', 'Misic'), ('Linda Beate', 'Andersen'), ('Silvia', 'Aneiros'), ('Evelyn', 'Platzer'), ('Nina', 'Murn'), ('Eiko', 'Toba'), ('Maria Luciana', 'Reynares'), ('Viktoria', 'Gimberg'), ('Amanda', 'Hopmans'), ('Thea', 'De Weerd'), ('Elpis', 'Alexandrou'), ('Dionne', 'Lim'), ('Tomoko', 'Sekiguchi'), ('Chanda', 'Rubin'), ('Giorgia', 'Capanni'), ('Charlotte', 'Ruitenberg'), ('Stefanie', 'Kolar'), ('Cindy', 'Xu'), ('Tasha', 'Jackson'), ('Audrey', 'Cocuaud'), ('Maria Noel', 'Losada'), ('Severine', 'Augros'), ('Valentina', 'Terio'), ('Carolina', 'Azcui'), ('Saranga', 'Sangakkara'), ('Mariam', 'Rahim'), ('Catrin', 'Mueller'), ('Mireille', 'Bink'), ('Adriana', 'Serra Zanetti'), ('Seon Young', 'Park'), ('Natascha', 'De Kramer'), ('Joanne', 'Moore'), ('Marielle', 'Bruens'), ('Cheah Sui', 'Kim'), ('Barbara', 'Schett'), ('Asli', 'Kocaoemer'), ('Mariana', 'Diaz Oliva'), ('Severine', 'Arpajou'), ('Caroline', 'Rossel'), ('Elena', 'Tsagalidou'), ('Csilla', 'Dobo'), ('Caroline', 'Germar'), ('Corinne', 'Ng Tung Hing'), ('Miho', 'Saeki'), ('Catrin', 'Muller'), ('Vera', 'Zhukovets'), ('Rurika', 'Maruse'), ('Amanda', 'Wainwright'), ('Meang', 'Liew'), ('Mariska', 'Steenkamp'), ('Andrea', 'Behalova'), ('Ellen', 'Muller'), ('Jennifer', 'Capriati'), ('Laura', 'Montalvo'), ('Elisa', 'Penalvo'), ('Mary Beth', 'Maggart'), ('Manuela', 'Kostner'), ('Yuka', 'Yoshida'), ('Sudsobhi', 'Chatsuthiphan'), ('Oksana', 'Yarikova'), ('Pia Lena', 'Ander'), ('Nadine', 'Plaizier'), ('Jennifer', 'Carter'), ('Lei', 'Chen'), ('Eugenia', 'Lopez Ascarte'), ('Edita', 'Liachoviciute'), ('Noa', 'Horovitz'), ('Ralitza', 'Doneva'), ('Gabriele', 'Masiliunaite'), ('Kim', 'De Weille'), ('Lorena', 'Brain'), ('Ines', 'Buermeyer'), ('Geraldine', 'Dondit'), ('Caroline', 'Toyre'), ('Henriette', 'Van Aalderen'), ('Manon', 'Savelkouls'), ('Eva', 'Erbova'), ('Barbara', 'De Wilde'), ('Roberta', 'Zandarin'), ('Virginie', 'Massart'), ('Laura', 'Sham'), ('Lenka', 'Nemeckova'), ('Sharon', 'Russell'), ('Alessaundra', 'De Perini'), ('Karen', 'Gebauer'), ('Sonya', 'Jeyaseelan'), ('Julie', 'Steven'), ('Alexandra', 'Schneider'), ('Sara', 'Ventura'), ('Maia', 'Stankova'), ('Alicia', 'Ortuno'), ('Varalee', 'Sureephong'), ('Svetlana', 'Soldatenkova'), ('Gisela', 'Riera Roura'), ('Francesca', 'LaO'), ('Patricia', 'Segala'), ('Ursula', 'Svetlik'), ('Cristina', 'Portas Soy'), ('Sally Ann', 'Cuttler'), ('Natalie', 'Frawley'), ('Simona', 'Porchia'), ('Vanessa', 'Rooks'), ('Annette', 'Zweck'), ('Carolina', 'Molins'), ('Yael', 'Beckman'), ('Niki', 'Tippins'), ('Sofia', 'Finer'), ('Maria Jose', 'Likibi'), ('Milena', 'Kornil'), ('Divina', 'Escala'), ('Julia', 'Abe'), ('Motoe', 'Uchida'), ('An Qi', 'Ge'), ('Alessia', 'Lombardi'), ('Natalia', 'Gonzalez Quintero'), ('Pingkan', 'Lumenta'), ('Dawn', 'Buth'), ('Katrin', 'Ittensohn'), ('Ekaterina', 'Nossik'), ('Giana', 'Gutierrez'), ('Mashona', 'Washington'), ('Sabina', 'Radevicova'), ('Chamsi', 'Filali'), ('Gabriela', 'Chmelinova'), ('Ryoko', 'Takemura'), ('Antonella', 'Pozzi'), ('Lindsay', 'Davenport'), ('Jodie', 'Lynn'), ('Shizu', 'Katsumi'), ('Sylwia', 'Rynarzewska'), ('Nina', 'Nittinger'), ('Karin', 'Asberg'), ('Magda', 'Leal'), ('Madoka', 'Kuki'), ('Katja', 'Pohlmann'), ('Irina', 'Komarova'), ('Andrea', 'Montoya'), ('Nadia', 'Bibarss'), ('Kendra', 'Howard'), ('Blanka', 'Kumbarova'), ('Christina', 'Ferreira'), ('Peggy', 'Rouquier'), ('Paola', 'Suarez'), ('Suvikukka', 'Forsius'), ('Adriana', 'Gersi'), ('Nicole', 'Funk'), ('Malgorzata', 'Jankowska'), ('Shinobu', 'Asagoe'), ('Valentina', 'Murgo'), ('Karen', 'Nugent'), ('Natalia', 'Garcia'), ('Karoline', 'Borgersen'), ('Anita', 'Buggins'), ('Heike', 'Rusch'), ('Helena', 'Fremuthova'), ('Margaret', 'Schnakenburg'), ('Emmanuelle', 'Gagliardi'), ('Audrey', 'Pierrich'), ('Sandra', 'Kellemberger'), ('Helen', 'Parsons'), ('Anna', 'Smashnova'), ('Andrea', 'Glass'), ('Romana', 'Tedjakusuma'), ('Stephanie', 'De Ville'), ('Anke', 'Roos'), ('Amanda', 'Dundas'), ('Lizzy', 'Jelfs'), ('Khady NDeye', 'Diop'), ('Renata', 'Kolbovic'), ('Arati', 'Ponnappa'), ('Yuan', 'Wen'), ('Valeria', 'Cecchetti'), ('Manuela', 'Schwerzmann'), ('Katalin', 'Miskolczi'), ('Carmina', 'Giraldo'), ('Pavlina', 'Bartunkova'), ('Jane', 'White'), ('Soon Hye', 'Lee'), ('Tatiana', 'Panova'), ('Virginia', 'Gollut'), ('Thea', 'Ivanisevic'), ('Emanuela', 'Sangiorgi'), ('Julie', 'Mansour'), ('Emmanuelle', 'Zowczak'), ('Maren', 'Muller'), ('Lorna', 'Woodroffe'), ('Diana', 'Foldenyi'), ('Jennifer', 'Duncan'), ('Liezel', 'Huber'), ('Monita', 'Horn'), ('Elena', 'Tatarkova'), ('Sabine', 'Resch'), ('Jarita', 'Selenius'), ('Alica', 'Herda'), ('Mariam', 'Ramon Climent'), ('Mihaela', 'Vulpe'), ('Helen', 'Laupa'), ('Sarka', 'Snorova'), ('Gabija', 'Talberga'), ('Nicole', 'Wist'), ('Martina', 'Schaller'), ('Nina', 'Miu'), ('Annie', 'Trepanier'), ('Sandra', 'Angerer'), ('Lucie', 'Steflova'), ('Saori', 'Honda'), ('Satoko', 'Kurioka'), ('Tonka', 'Doric'), ('Rieka', 'Ito'), ('Nozipho Gloria', 'Sithole'), ('Melitta', 'Miklosi'), ('Lauren', 'Nikolaus Zink'), ('Vanessa', 'Castellano'), ('Ana Carola', 'Guzman'), ('Zuzana', 'Nemsakova'), ('Julie', 'Hanger'), ('Ximena', 'Rodriguez'), ('Ingy', 'El Taweel'), ('Ella', 'Ionescu'), ('Manisha', 'Malhotra'), ('Nicoletta', 'Pericleous'), ('Maria Ines', 'Araiz'), ('Tina Helen', 'Soderstrom'), ('Jana', 'Kandarr'), ('Vicky', 'Barker'), ('Michaela', 'Hasanova'), ('Noriko', 'Miyazaki'), ('Patricia', 'Camina'), ('Yu Chun', 'Huang'), ('Michaila', 'Hasanova'), ('Liora', 'Levin'), ('Gaye', 'Mcmanus'), ('Mina', 'Abdul Rahman'), ('Li', 'Li'), ('Lonny', 'Young'), ('Magdalena', 'Kucerova'), ('Stephanie', 'Testard'), ('Sandrine', 'Chevy'), ('Maria Laura', 'Bertolo'), ('Bridget', 'Merrick'), ('Guadalupe', 'Bugallo'), ('Vanessa', 'Menga'), ('Manuela', 'Costa'), ('Patty', 'Van Acker'), ('Anna', 'Bleszynski'), ('Janet', 'Lee'), ('Deepa', 'Engade'), ('Masako', 'Naito'), ('Kerstin', 'Marent'), ('Eun Jeong', 'Lee'), ('Helina', 'Lill'), ('Jana', 'Dorodnova'), ('Rachel', 'Dive'), ('Maria Teresa', 'Guell'), ('Natalie', 'Dittmann'), ('Pamela', 'Zingman'), ('Mariela', 'Cornejo'), ('Andrea', 'Hoch'), ('Marwa', 'El Wany'), ('Rachael', 'Mcardle'), ('Carlotta', 'Stasi'), ('Eva', 'Krejcova'), ('Elena', 'Krutko'), ('Karolina', 'Petrikova'), ('Michaela', 'Lincoln'), ('Marissa', 'Lincoln'), ('Cecilia', 'Hincapie'), ('Evelyn', 'Fauth'), ('Cecile', 'De Winne'), ('Anouschka', 'Boralessa'), ('Stephanie', 'Chi'), ('Nirupama', 'Sanjeev'), ('Aminat', 'Balogun'), ('Ishraq', 'Salman'), ('Cintia', 'Tortorella'), ('Alex', 'Napier'), ('Daria', 'Turpak'), ('Madalina', 'Niculaita'), ('Tumeka', 'Harris'), ('Victoria', 'Hunt'), ('Elise', 'Crozier'), ('Carine', 'Maisonnave'), ('Marina', 'Novelli'), ('Yumi', 'Yokoi'), ('Seung Yeon', 'Kang'), ('Vanessa', 'Brilleman'), ('Wei', 'Qie'), ('Sybil', 'Parker'), ('Lotty', 'Seelen'), ('Julia', 'Carballal Fernandez'), ('Sara', 'Pritchard'), ('Miriam', 'Schnitzer'), ('Susana', 'De Andres Therond'), ('Lisa', 'Camenzuli'), ('Caroline', 'Hall'), ('Alina', 'Jidkova'), ('Ana Paula', 'Zannoni'), ('Margarita', 'Medina'), ('Anne', 'Miller'), ('Jennifer', 'Hall'), ('Delphine', 'Costantini Benoit'), ('Daniela', 'Cocos'), ('Anna', 'Linkova'), ('Monika', 'Mastalirova'), ('Lenka', 'Cenkova'), ('Maria Francesca', 'Bentivoglio'), ('Ruta', 'Deduraite'), ('Kum Ok', 'Im'), ('Mai', 'Tanii'), ('Cindy', 'Dock'), ('Nadine', 'Van De Walle'), ('Lee', 'Chan'), ('Marina', 'Escobar Martinez'), ('Aarthi', 'Venkatesan'), ('Nino', 'Louarsabishvili'), ('Olga', 'Ivanova'), ('Amira', 'Segaoula'), ('Ana Elizabeth', 'Jimenez Garcia'), ('Candida', 'Reid'), ('Frances', 'Hearn'), ('Ditte', 'Hougaard'), ('Sophie', 'Georges'), ('Charlotta', 'Aronsson'), ('Anthonia', 'Onwochie'), ('Cristina', 'Moros'), ('Norma', 'Aules'), ('Petra', 'Gaspar'), ('Sai Jayalakshmy', 'Jayaram'), ('Monica', 'Bonilla'), ('Barbara', 'Urbanska'), ('Amaranta', 'Spinelli'), ('Diana', 'Sutedja'), ('Kandiss', 'Creighton'), ('Melanie', 'Schnell'), ('Dally', 'Randriantefy'), ('Silvia', 'Schiavetti'), ('Clelia', 'Anfuso'), ('Raffaella', 'Valentino'), ('Debby', 'Haak'), ('Misae', 'Sakai'), ('Courtenay', 'Chapman'), ('Courtenay', 'Middleton'), ('Zoe', 'Mellis'), ('Ana Paula', 'Mores'), ('Arthi', 'Venkatesan'), ('Jennifer', 'Aubernon'), ('Ludmila', 'Richterova'), ('Audrey', 'Sidot'), ('Siobhan', 'Munro'), ('Mehry', 'Shawki'), ('Mirela', 'Vladulescu'), ('Camila', 'Andolfato'), ('Tamara', 'Rollenberg'), ('Maria', 'Geznenge'), ('Tanja', 'Karsten'), ('Maria', 'Gusheva'), ('Anat', 'Ashtamkar'), ('Ludivine', 'Laville'), ('Karla', 'Porter'), ('Jennifer', 'Ligator'), ('Oksana', 'Enik'), ('Kyoko', 'Kojima'), ('Ivana', 'Beli'), ('Celeste', 'Frey'), ('Monika', 'Kasianiuk'), ('Timea', 'Ferenczy'), ('Kirsten', 'Schenk'), ('Susanna', 'Bostanjyan'), ('Yolanda', 'Civit Canals'), ('Kristina', 'Brandi'), ('Karine', 'Gallet'), ('Ivana', 'Belancic'), ('Radka', 'Pelikanova'), ('Adriana', 'Mingireanu'), ('Juliana', 'Piumatti'), ('Jenny', 'Rolf'), ('Laura', 'Austin'), ('Rosa Maria', 'Perez'), ('Hsueh Li', 'Hsu'), ('Stephanie', 'Nickitas'), ('Linda', 'Smaira'), ('Noelia', 'Serra'), ('Sasha', 'Mattu'), ('Yan', 'Chen'), ('Bonnie', 'Bleecker'), ('Sasha', 'Hanna'), ('Ciska', 'Kramer'), ('Keiko', 'Tameishi'), ('Teodora', 'Nedeva'), ('Georgia', 'Fernandes'), ('Yi Ching', 'Wu'), ('Zuzana', 'Hejdova'), ('Alina', 'Wyganowska'), ('Jiang', 'Yu'), ('Chin Bee', 'Khoo'), ('Freekje', 'Maas'), ('Kelly', 'Callahan'), ('Kelly', 'Brown'), ('Katia', 'Altilia'), ('Rosanna', 'Valerio'), ('Laura', 'Garcia Pacual'), ('Milena', 'Nekvapilova'), ('Cristina', 'Portas'), ('Chie', 'Nagano'), ('Yamile', 'Fors Guerra'), ('Monica', 'Rebolledo'), ('Shalini', 'Perera'), ('Sara', 'Haider'), ('Patrycja', 'Gajdzik'), ('Manisha', 'Patel'), ('Anca', 'Barna'), ('Karolina', 'Bakalarova'), ('Carmen', 'Madden'), ('Tomomi', 'Sumi'), ('Kristen', 'Sanderson'), ('Jumoke', 'Ajulo'), ('Carlijn', 'Buis'), ('Janina', 'Tajkovsky'), ('Katrin', 'Meiss'), ('Lenka', 'Humenikova'), ('Surabhi', 'Singh'), ('Francois', 'Ramos'), ('Tamarine', 'Tanasugarn'), ('Polina', 'Galanina'), ('Melissa', 'Avants'), ('Anna', 'Mogilnicka'), ('Dominika', 'Gerwin'), ('Coral', 'Orpi'), ('Tara', 'Snyder'), ('Ruth', 'Diaz'), ('Katie', 'Mcglennen'), ('Rosa Maria', 'Andres Rodriguez'), ('Nathalie', 'Callen'), ('Metasebeya', 'Temesgen'), ('Anna Sabrina', 'Ferrari'), ('Kumi', 'Hagino'), ('Nezha', 'Saber'), ('Tanja', 'Buchheim'), ('Irene', 'Macia'), ('Maria Paola', 'Zavagli'), ('Cintia', 'Seaton'), ('Haruka', 'Inoue'), ('Victoria', 'Courmes Benedetti'), ('Yvette', 'Basting'), ('Angelika', 'Roesch'), ('Dorota', 'Glowacka'), ('Hadas', 'Ronen'), ('Nadine', 'Raidt'), ('Sachiyo', 'Hirayama'), ('Temesgen', 'Metasebeya'), ('Andressa', 'Bornschein'), ('Brandi', 'Freudenberg'), ('Katya', 'Zenklusen'), ('Alena', 'Havrlikova'), ('Michelle', 'Smith'), ('Ruth Tekle', 'Andemariam'), ('Tjasa', 'Jezernik'), ('Chern Yi', 'Chiew'), ('Mariana', 'Lopez Palacios'), ('Raluca', 'Gheorghe'), ('Maria Eliana', 'Castro'), ('Antoaneta', 'Pandjerova'), ('Inga', 'Bertschmann'), ('Virginia', 'Tournebise'), ('Amira', 'El Borolossy'), ('Claudia', 'Reimering'), ('Valentina', 'Solari'), ('Kym', 'Laver'), ('Lindsay', 'Lee Waters'), ('Graciela', 'Velez'), ('Tathiana', 'Garbin'), ('Athina', 'Briegel'), ('Lana', 'Scardigno'), ('Lobena', 'Cherif'), ('Federica', 'Maldini'), ('Andrea', 'Piski'), ('Adriana', 'Thaggard'), ('Petra', 'Spaar'), ('Selima', 'Sfar'), ('Cristina', 'Lopez Santos'), ('Fernanda', 'Tsucamoto'), ('Eleonora', 'Dickinger'), ('Callie', 'Creighton'), ('Francesca', 'Lubiani'), ('Laura Mirabela', 'Teodorescu'), ('Mirabela', 'Teodorescu'), ('Nicole', 'Kaiser'), ('Samira', 'Takourabet'), ('Georgina', 'Palombo'), ('Frida', 'Flores'), ('Sylvia', 'Plischke'), ('Paula', 'Racedo'), ('Nicola', 'Kaiwai'), ('Assmae', 'Jabri'), ('Barbara', 'Fuzesi'), ('Joana', 'Manta'), ('Megumi', 'Katakura'), ('Yvonne', 'Flynn'), ('Mariana', 'Moreno'), ('Barbara', 'Lado'), ('Olga', 'Ivlieva'), ('Zuzana', 'Lesenarova'), ('Dragana', 'Zaric'), ('Mira', 'Veghova'), ('Massoumeh', 'Emami'), ('Eva', 'Teruel Jover'), ('Maria Elena', 'Jimenez'), ('Iva', 'Majoli'), ('Jodi', 'Richardson'), ('Mariana', 'Faustinelli'), ('Li', 'Chen'), ('Gabriela', 'Lancman'), ('Giselle', 'Swart'), ('Jenny Ann', 'Fetch'), ('Elizabeth', 'Schmidt'), ('Veronika', 'Safarova'), ('Sasithorn', 'Tangthienkul'), ('Tari Ann', 'Toro'), ('Alice', 'Rangsithienchai'), ('Milena', 'Stanoycheva'), ('Nicole', 'Oomens'), ('Victoria', 'Bakhtadze'), ('Hila', 'Rosen'), ('Sanaa', 'Ziadi'), ('Sirilux', 'Mingmolee'), ('Noelia', 'Serra Djamdjean'), ('Trudi', 'Musgrave'), ('Sandrine', 'Bouilleau'), ('Hiroko', 'Komori'), ('Brigitte', 'Loogen'), ('Maria Soledad', 'Coppari'), ('Leyla', 'Ogan'), ('Ajda', 'Klevisar'), ('Vanessa', 'Kendall'), ('Megan', 'Miller'), ('Elizabeth', 'Fletcher'), ('Saida', 'Hared'), ('Emi', 'Sakurai'), ('Carolina', 'Melicoff'), ('Dominique', 'Glinzler'), ('Paola', 'Martinez'), ('Radka', 'Surova'), ('Lilly', 'Raffa'), ('Nicola', 'Payne'), ('Miranda', 'Ball'), ('Julie', 'Huang'), ('Hsiao Chuan', 'Fan'), ('Esther', 'Knox'), ('Rushmi', 'Chakravarthi'), ('Karina', 'Miguenz'), ('Jorgelina', 'Torti'), ('Rute', 'Almeida'), ('Ji Young', 'Yoo'), ('Yu Min', 'Fan Chiang'), ('Mariela', 'Brunello'), ('Paola', 'Almeida'), ('Martina', 'Nedelkova'), ('Martina', 'Somoano'), ('Andrea', 'Hardegger'), ('Shivani', 'Bhatt'), ('Nadia', 'Johnston'), ('Akiko', 'Kinebuchi'), ('Paula', 'Hermida Velo'), ('Cecilia', 'Simon'), ('Lenka', 'Zacharova'), ('Camilla', 'Kremer'), ('Kaori', 'Kuki'), ('Katerina', 'Hladka'), ('Linda', 'Sentis'), ('Lilian', 'Ighodaro'), ('Miroslava', 'Veghova'), ('Monica', 'Toledo'), ('Anastasia', 'Pozdnyakova'), ('Maria', 'Sanchez Lorenzo'), ('Lucie', 'Dvorakova'), ('Eva', 'Slaninkova'), ('Maria Veronica', 'Widyadharma'), ('Sadiya', 'Pathan'), ('Mirva', 'Maenpaa'), ('Gaelle', 'Adda'), ('Yu Mei', 'Chen'), ('Stefanie', 'Haidner'), ('Veronica', 'Stele'), ('Gabriela', 'Netikova'), ('Sandra', 'Deamelio'), ('Anne Sophie', 'Bittighoffer'), ('Birgit', 'Riederer'), ('Tara Deen', 'Moore'), ('Alison', 'Nash'), ('Pimpisamai', 'Kansuthi'), ('Gabriela', 'Kucerova'), ('Charlotte', 'Aagaard'), ('Kara', 'Warkentin'), ('Anna Maria', 'Doan'), ('Sidonia', 'Wolfinger'), ('Veronica', 'Goude'), ('Marta', 'Peman'), ('Patricia', 'Mongauzi'), ('Gabriella', 'Somers'), ('Aleksandra', 'Olsza'), ('Vanessa', 'Caddick'), ('Karin', 'Miller'), ('Nena', 'Vukasovic'), ('Ana', 'Friganovic'), ('Ivona', 'Mihailova'), ('Irena', 'Mihailova'), ('Fiona', 'Barrett'), ('Diana', 'Escalante'), ('Imen', 'Ben Larbi'), ('Murjana', 'Boskova'), ('Magali', 'Partyka'), ('Leloba', 'Seitshiro'), ('Jung Hua', 'Kuo'), ('Sandra', 'Mantler'), ('Pei Jung', 'Wu'), ('Gaelle', 'Widmer'), ('Adrienn', 'Hegedus'), ('Karin', 'Palme'), ('Maria Eugenia', 'Rojas'), ('Sarah', 'Stanley'), ('Tanja', 'Magoc'), ('Shareen Rena', 'Lai'), ('Kyra', 'Nagy'), ('Hrafuhildur', 'Hannesdotter'), ('Julia', 'Adlbrecht'), ('You Shu', 'Wu'), ('Oshri', 'Shashua'), ('Eugenia', 'Silantieva'), ('Josien', 'Boverhof'), ('Lilit', 'Teloumian'), ('Isabel', 'Horkmans'), ('Inga', 'Albers'), ('Vanessa', 'Basora'), ('Laura', 'Fodorean'), ('Daniela', 'Forti'), ('Susana', 'Carreras'), ('Lucia', 'Curielli'), ('Lucy', 'Altman'), ('Jana', 'Staskova'), ('Lui Li', 'Shen'), ('Lorena', 'Martinez'), ('Upeka', 'Wijeratne'), ('Lydia', 'Perkins'), ('Silvija', 'Talaja'), ('Marie Ange', 'Koami'), ('Mercedes', 'Del Valle Prieto'), ('Amanda', 'Keen'), ('Aurea', 'Castella'), ('Irina', 'Kornienko'), ('Angela', 'Geib'), ('Petra', 'Mandula'), ('Meilen', 'Tu'), ('Yin', 'Chen'), ('Louise', 'Latimer'), ('Michelle', 'Faucher'), ('Amanda', 'Augustus'), ('Alexandra', 'Guzman'), ('Zuzana', 'Rakicka'), ('Yenny', 'Kumalawati'), ('Biljana', 'Pawlowa Dimitrova'), ('Maria', 'Pavlidou'), ('Nadia', 'Chvanova'), ('Sylvia', 'Lokollo'), ('Lizeth', 'Asuaje'), ('Daria', 'Ovsyannikova'), ('Petra', 'Plackova'), ('Yumi', 'Kawakita'), ('Olga', 'Glouschenko'), ('Maria Rene', 'Espinosa'), ('Joanna', 'Gozdek'), ('Corina', 'Morariu'), ('Laura', 'Bernal'), ('Geraldine', 'Aizenberg'), ('Claudia', 'Oliveira'), ('Clara', 'Udofa'), ('Annabel', 'Ellwood'), ('Ingrid', 'Meeus'), ('Jolanda', 'Mens'), ('Andrea', 'Nathan'), ('Jenny', 'Falcon Manrique'), ('Mi Ra', 'Jeon'), ('Tu', 'Dong'), ('Anne', 'Stueckle'), ('Karina', 'Karner'), ('Maria Florica', 'Pandele'), ('Michaela', 'Lazerova'), ('Jana', 'Bourova'), ('Isabella', 'Kling'), ('Rita', 'Kuti Kis'), ('Valentine', 'Vernaz'), ('Hiromi', 'Okazaki'), ('Celeste', 'Contin'), ('Isil', 'Cayirli'), ('Cristina', 'Bengzon'), ('Futaba', 'Kubota'), ('Shalini', 'Thakar'), ('Agata', 'Odachowska'), ('Maiken', 'Pape'), ('Adeyinka Elisabeth', 'Thompson'), ('Magali', 'Lamarre'), ('Claudia', 'Perolini'), ('Natyanee', 'Tanawsri'), ('Kylie', 'Moulds'), ('Dorothee', 'Kurz'), ('Luisa', 'Fantola'), ('Nina', 'Wenger'), ('Joanna', 'Phang'), ('Stephanie', 'Koderisch'), ('Habiba', 'Ifrakh'), ('Iva', 'Berankova'), ('Tagifano', 'Soonalole'), ('Alexandra', 'Kleffel'), ('Akiko', 'Gunji'), ('Claire', 'Curran'), ('Antonina', 'Grib'), ('Izaskun', 'Bernal'), ('Seiko', 'Okamoto'), ('Natacha', 'Randriantefy'), ('Lauren', 'Rose'), ('Vivian', 'Acra'), ('Marissa', 'Gildemeister'), ('Anca', 'Vasiloaica'), ('Alexandra', 'Charles'), ('Adriana', 'Lopez'), ('Cindy', 'Watson'), ('Zuzana', 'Demeterova'), ('Zuzana', 'Lindner'), ('Katarina', 'Lindner'), ('Ludivine', 'Nicolas'), ('Caroline', 'Marret'), ('Segolene', 'Berger'), ('Amelie', 'Cocheteux'), ('Agustina', 'Saenz'), ('Tina', 'Plivelitsch'), ('Aoife', 'ONeill'), ('Kim', 'Kelly'), ('Cassia', 'Sigle'), ('Tsarina', 'Domacasse'), ('Fiana', 'Meineck'), ('Saskia', 'Meineck'), ('Miroslava', 'Vavrinec'), ('Aurelie', 'Freysz'), ('Giulia', 'De Muro'), ('Na', 'Fan'), ('Beatriz', 'Aguilar'), ('Melinda', 'Glenister'), ('Jasmine', 'Choudhury'), ('Natalia', 'Nikitina'), ('Lilia', 'Osterloh'), ('Siobhan', 'Drake Brockman'), ('Bojana', 'Borovnica'), ('Geraldine', 'Figueiredo'), ('Amelie', 'Castera'), ('Anne Laurence', 'Bilenne'), ('Gisele', 'Ferreira'), ('Spela', 'Kobetic'), ('Hana', 'Sromova'), ('Reiko', 'Ino'), ('Leonie', 'Odriscoll'), ('Galina', 'Dimitrova'), ('Katarina', 'Markovski'), ('Guadalupe', 'Hernandez'), ('Bianca', 'Cremer'), ('Camilla', 'Hsu'), ('Annica', 'Lindstedt'), ('Hye Young', 'Bae'), ('Yi Dan', 'Liu'), ('Brooke', 'Siebel'), ('Grace', 'Sorbello'), ('Petrona', 'Bantay'), ('Lindsay', 'Bruce'), ('Qi', 'Tuo'), ('Belen', 'Berbel Soriano'), ('Natalia', 'Pellegrini'), ('Giulia', 'Casoni'), ('Stephanie', 'Sheppard'), ('Monica', 'Scartoni'), ('Isabelle', 'Taesch'), ('Anja', 'Tragardh'), ('Luciana', 'Ullmann'), ('Eva', 'Sestakova'), ('Saori', 'Obata'), ('Kingkaew', 'Niroj'), ('Olga', 'Timofeeva'), ('Tamara', 'Aranda Nunez'), ('Milena', 'Gadjanova'), ('Megan', 'Dorney'), ('Irina', 'Zhdanova'), ('Nicole', 'Melch'), ('Alice', 'Canepa'), ('Eva', 'Belbl'), ('Michelle', 'Summerside'), ('Vladimira', 'Uhlirova'), ('Chantal', 'Reuter'), ('Hye Jeong', 'Chang'), ('Laura', 'Frias'), ('Sara', 'Bonomi'), ('Sandra', 'Kleinova'), ('Mirja', 'Wagner'), ('Orit', 'Strauss'), ('Laura', 'Rossi'), ('Anna', 'Kazakevitch'), ('Monica', 'Baez'), ('Jana', 'Ondrouchova'), ('Ewa', 'Grusiecka'), ('Sarah', 'Scaringe'), ('Yoko', 'Torii'), ('Ana Paola', 'Gonzalez Diaz'), ('Magdelena', 'Zdenovcova'), ('Kirsty', 'Blumberg'), ('Lynette', 'Tay'), ('Anne', 'Plessinger'), ('Adriana', 'Barna'), ('Magdalena', 'Rejniak'), ('Typhaine', 'Cottenier'), ('Michelle', 'Buess'), ('Anna', 'White'), ('Hanna Katri', 'Aalto'), ('Ambreen', 'Rana'), ('Jana', 'Benova'), ('Katia', 'Roubanova'), ('Raquel', 'Ortega Herran'), ('Tamara', 'Pavlov'), ('Kristina', 'Pojatina'), ('Eva', 'Januskova'), ('Andreea', 'Petrisor'), ('Nathalie', 'Jarlan'), ('Renee', 'Reid'), ('Izumi', 'Sugimoto'), ('Karolina', 'Glowacka'), ('Moriyo', 'Adachi'), ('Marina', 'Petrovic'), ('Karina', 'Rinaldi'), ('Anna', 'Persson'), ('Desislava', 'Topalova'), ('Sofia', 'Managadze'), ('Eveline', 'Wouters'), ('Sofia', 'Quaglia'), ('Marissa', 'Catlin'), ('Laura', 'Gotarredona'), ('Kyoko', 'Iida'), ('Romina', 'Ottoboni'), ('Melinda', 'Petkes'), ('Laura', 'Aguero'), ('Amanda', 'Basica'), ('Stefania', 'Stefansdottir'), ('Linda', 'Mattsson'), ('Maria Andrea', 'Quintero'), ('Hong Hui', 'Liu'), ('Biljana', 'Joketovic'), ('Anita', 'Kurimay'), ('Veneta', 'Karatchomakova'), ('Monika', 'Pimentel'), ('Surina', 'De Beer'), ('Tokiyo', 'Ikeda'), ('Ana Maria', 'Moura'), ('Yasuko', 'Nishimata'), ('Tzu Ting', 'Weng'), ('Tatjana', 'Jecmenica'), ('Selin', 'Nassi Tekikbas'), ('Meirav', 'Duek'), ('Lindsay', 'Alpert'), ('Melania', 'Mirambell'), ('Matilda', 'David'), ('Si Yiah', 'Ling'), ('Mary Carlisle', 'White'), ('Natasha', 'Papadopoulou'), ('Marijana', 'Kovacevic'), ('Dalia', 'El Sheikh'), ('Maria', 'Lindberg'), ('Lilian', 'Silva'), ('Melanie', 'Schneider'), ('Katherine', 'Tessier'), ('Kiriaki', 'Karaproimou'), ('Carolina', 'Kanacri'), ('Shelley', 'Bryce'), ('Marina', 'Lazarovska'), ('Ivona', 'Grujic'), ('Mamotebang', 'Molise'), ('Amy', 'Jensen'), ('Hisayo', 'Unno'), ('Emeka', 'Mayes'), ('Carolina', 'Mayorga'), ('Monica', 'Massarella'), ('Adriana', 'Rodriguez'), ('Edurne', 'Tabernero'), ('Sabine', 'Oristil'), ('Tatiana', 'Babina'), ('Agustine', 'Limanto'), ('Ekaterina', 'Kavoun'), ('Kaoutar', 'Yazghi'), ('Nadeja', 'Karpol'), ('Patricia', 'Wartusch'), ('Traci', 'Green'), ('Jessica', 'Steck'), ('Laurence', 'Combes'), ('Veronika', 'Jakimicova'), ('Jennifer', 'Russell'), ('Sun Young', 'Kim'), ('Nuria', 'Martinez'), ('Jana', 'Sokolenko'), ('Maria', 'Persson'), ('Keiko', 'Nagai'), ('Irina', 'Kakoulia'), ('Veronica', 'Castro'), ('Maria Shirley', 'Valler'), ('Martini', 'Pospisilova'), ('Miriam', 'Dagostini'), ('Darina', 'Mecova'), ('Zana', 'Zlebnik'), ('Ann', 'Simons'), ('Ding', 'Ding'), ('Silvina', 'Saulo'), ('Tamami', 'Kamiyama'), ('Jenny', 'Kuhlin'), ('Phorhathai', 'Suksamran'), ('Caroline', 'Leens'), ('Marina', 'Raic'), ('Maria', 'Rasmussen'), ('Laura', 'Smith'), ('Sonja', 'Foks'), ('Lechia', 'Trewick'), ('Susan', 'Huang'), ('Irina', 'Nossenko'), ('Nina', 'Schwarz'), ('Julieta', 'Calabrese'), ('So Yeon', 'Im'), ('Maria Julieta', 'Lillo'), ('Nami', 'Urabe'), ('Sara', 'Taweel'), ('Carla', 'Jimenez'), ('Annica', 'Cooper'), ('Virginia', 'Sadi'), ('Adriana', 'Garuolis'), ('Isabel', 'Santos'), ('Priyanka', 'Contractor'), ('Nikoleta', 'Pritargova'), ('Padma Preetham', 'Mahalingam'), ('Kyung Joo', 'Won'), ('Charlotte', 'Feasby'), ('Ya Chi', 'Yang'), ('Wei', 'Ni'), ('Shera', 'Wiegler'), ('Carolina', 'Gago Fuentes'), ('Delphine', 'Baudin'), ('Electra', 'Henry'), ('Denisa', 'Sobotkova'), ('Alina', 'Stroiu'), ('Sally', 'Bogaert Morel'), ('Barbora', 'Zahnova'), ('Ana Catarina', 'Nogueira'), ('Renata', 'Brito'), ('Maria Fernanda', 'Carrillo'), ('Gizella', 'Turbok'), ('Isabel', 'Dominguez Munaiz'), ('Kibibi', 'Moseley'), ('Claire', 'Lyte'), ('Dominika', 'Olszewska'), ('Marine', 'Nizri Spiegel'), ('Jody', 'Anglin'), ('Mi Ok', 'Kim'), ('Chia Yi', 'Wu'), ('Kristen', 'Radford'), ('Ana', 'Sans'), ('Romina', 'Labrador'), ('Kristina', 'Irwan'), ('Nuria', 'Montero'), ('Renata', 'Martins'), ('Evi', 'Murtiningsih'), ('Kadi', 'Hilpus'), ('Archana', 'Venkataraman'), ('Lesley', 'Kramer'), ('Yun Ning', 'Fu'), ('Nosa', 'Esorae'), ('Jana', 'Macurova'), ('Marieke', 'Gunawan'), ('Sylvie', 'Sallaberry'), ('Reina', 'Oda'), ('Phyllis', 'Wilunda'), ('Maja', 'Mise'), ('Sona', 'Saringulyan'), ('Jennifer', 'De Spain'), ('Ariadne', 'Katsouli'), ('Eve', 'Langley'), ('Zsofia', 'Golopencza'), ('Catherine', 'Valantin'), ('Carolina', 'Sanabria'), ('Anne Laure', 'Le Guennec'), ('Helene', 'Louvet'), ('Rafaela', 'Boero'), ('Sarah', 'Gillespie Jones'), ('Anneliese', 'Rose'), ('Fotini', 'Kapetanaki'), ('Stephanie', 'Lobner'), ('Marina', 'Andreoni'), ('Naoko', 'Ishikawa'), ('Paola', 'Gonzales'), ('Alida', 'Gallovits'), ('Yang Jin', 'Chung'), ('Juthika', 'Chokshi'), ('Zhi Rong', 'Liu'), ('Danielle', 'Lund'), ('Ingrid', 'Siegrist'), ('Monica', 'Saffie'), ('Alessandra', 'Dellaversana'), ('Carole', 'Soubis'), ('Deborah', 'Gaviria'), ('Marilia', 'Fritelli'), ('Kim', 'Niggemeyer'), ('Pamela', 'Gonzalez'), ('Hanna', 'Puustinen'), ('Brankica', 'Stankovic'), ('Syna', 'Schreiber'), ('Magdalena', 'Grzybowska'), ('Francesca', 'Maggi'), ('Patricia', 'Marci'), ('Denise', 'Doring'), ('Sachie', 'Umehara'), ('Ya Fang', 'Tsai'), ('Eszter', 'Molnar'), ('April', 'Gabler'), ('Paula', 'Cantarutti'), ('Reetu', 'Sethi'), ('Eun Kyung', 'Kim'), ('Natalie', 'Cahana'), ('Luciana', 'Masante'), ('Jahnavi', 'Parekh'), ('Ninani', 'Coyne'), ('Magdalena', 'Taltavull Fernandez'), ('Ilda', 'Saulic'), ('Andrea', 'Schwarz'), ('Chotika', 'Wannachinda'), ('Nanely', 'Vallejo'), ('Teryn', 'Ashley'), ('Kalina', 'Diankova'), ('Onalenna', 'Leepile'), ('Ayami', 'Takase'), ('Patty', 'Schnyder'), ('Henrieta', 'Nagyova'), ('Emmanuelle', 'Curutchet'), ('Eugenia', 'Kulikovskaya'), ('Audrey', 'Wilmart'), ('Briana', 'Harris'), ('Manuela', 'Borzi'), ('Chiho', 'Kobayashi'), ('Megan', 'Russell'), ('Asja', 'Tankic'), ('Szandra', 'Fuzesi'), ('Beauty', 'Macleod'), ('Jennifer', 'Sans'), ('Steffi', 'Keim'), ('Aneta', 'Soukup'), ('Maria Alejandra', 'Claure'), ('Brooke', 'Skeen'), ('Olga', 'Teplynska'), ('Berenice', 'Alvarez'), ('Irina', 'Anikina'), ('Julie', 'Ditty'), ('Monique', 'Le Sueur'), ('Monica', 'Poveda'), ('Alena', 'Paulenkova'), ('Rebecca', 'Spurr'), ('Fabiola', 'Zuluaga'), ('Jheni', 'Osman'), ('Tatiana', 'Poutchek'), ('Yessica', 'Garcia'), ('Tabitha', 'Blackburn'), ('Vinitha', 'Dikshit'), ('Monika', 'Vinterova'), ('Irene', 'Fernandez Cabe'), ('Joana', 'Cortez'), ('Sabina', 'Da Ponte'), ('Oksana', 'Melnichenko'), ('Etsuko', 'Yamada'), ('Stephanie', 'Sajbert'), ('Morya', 'Peres'), ('Cindy', 'Schuurmans'), ('Christa', 'Grey'), ('Caroline', 'Christian'), ('Adriana', 'Radic'), ('Monica', 'Amador Pons'), ('Barbara', 'Keller'), ('Samantha', 'Reeves'), ('Spela', 'Rajh'), ('Laurence', 'Pont'), ('Daria', 'Soukirno'), ('Elisabeth', 'Unge'), ('Lenka', 'Novotna'), ('Irma', 'Vizcaino'), ('Nannette', 'Duxin'), ('Alejandra', 'Hernandez Quiroz'), ('Kelly', 'Toa'), ('Karen', 'Black'), ('Virginia', 'Colmenero'), ('Axelle', 'Alquier'), ('Amy', 'Newman'), ('Amanda', 'Peros'), ('Barbara', 'Schwartz'), ('Laura', 'Andrei'), ('Ursula', 'Albizuri'), ('Stephanie', 'Hazlett'), ('Ana', 'Knezovic'), ('Celena', 'Mccoury'), ('Silvia', 'Sosnarova'), ('Lilia', 'Biktyakova'), ('Amelie', 'Philippe'), ('Noswazi', 'Tshabalala'), ('Kelly', 'Liggan'), ('Maiko', 'Inoue'), ('Katja', 'Kovac'), ('Denisa', 'Chladkova'), ('Holly', 'Parkinson'), ('Liliana', 'Avola'), ('Alexandra', 'Ramirez'), ('Olena', 'Kuzmyk'), ('Dee Dee', 'Herring'), ('Liza', 'Andriyani'), ('Natalie', 'Fracassi'), ('Colleen', 'Cheng'), ('Alena', 'Jecminkova'), ('Jie', 'Xu'), ('Asri Nursanti', 'Ebo'), ('Lucy', 'Mcdonald'), ('Cara', 'Black'), ('Eva', 'Doman'), ('Esther', 'Brunn'), ('Nicola', 'Woodhouse'), ('Lyndsay', 'Reilly'), ('Cristina', 'Correia'), ('Nathalie', 'Dechy'), ('Lisa', 'Sendelbach'), ('Maria Eugenia', 'Fernandez'), ('Francesca', 'Volonte'), ('Sheau Shan', 'Liew'), ('Ludmilla', 'Varmuza'), ('Kathryn', 'Sell'), ('Keiko', 'Taguchi'), ('Ana', 'Skafar'), ('Rosa Maria', 'Morazan'), ('Elena', 'Villatoro'), ('Kristin', 'Koenig'), ('Evgenia', 'Tarasova'), ('Chiaki', 'Nakajima'), ('Magui', 'Serna'), ('Evelyn', 'Moser'), ('Justyna', 'Richter'), ('Vanessa', 'Manya Arranz'), ('Silvia', 'Bayon'), ('Seden', 'Ozlu'), ('Saskia', 'Simon'), ('Julie', 'White'), ('Yu Jin', 'Wang'), ('Sophie', 'Turine'), ('Mandy', 'Carvalho'), ('Catherine', 'Campbell'), ('Carolina', 'Lillo Carrazon'), ('Johanna', 'Isokangas'), ('Paola', 'Palencia'), ('Pilar', 'Andres'), ('Silvana', 'Barna'), ('Kim', 'Gysbertse'), ('Julia', 'Kryoukova'), ('Maria', 'Wolfbrandt'), ('Raffaella', 'Bindi'), ('Laura', 'Tuzzi'), ('Paula', 'Garcia'), ('Olena', 'Antypina'), ('Maria De Los Angeles', 'Montoya'), ('Barbara', 'Privrel'), ('Christine', 'Vogt'), ('Stanka', 'Ilkova'), ('Irene', 'Stavridou'), ('Roberta', 'Lamagni'), ('Amy', 'Wachenheim'), ('Amanda', 'Grahame'), ('Janisse', 'Mota'), ('Ana Maria', 'Franco Lopez'), ('Virpi', 'John'), ('Paola', 'Arrangoiz'), ('Kim', 'Kilsdonk'), ('Simge', 'Resmor'), ('Viviana', 'Mracnova Burgess'), ('Fiona', 'Lishman'), ('Yoon Jeong', 'Cho'), ('Ikram', 'El Aarej'), ('Maria Carolina', 'Torres'), ('Julieta', 'Robin'), ('Eun Young', 'Ban'), ('Jyotsna', 'Vasisht'), ('Ana', 'Gaspar'), ('Romana', 'Cernoskova'), ('Julia', 'Freitas'), ('Sophie', 'Erre'), ('Nina', 'Wennerstrom'), ('Fabienne', 'Thill'), ('Francesca', 'Vaghetti'), ('Francesca', 'Guastella'), ('Naoko', 'Kanai'), ('Tina', 'Kotter'), ('Pauline', 'Trinchant'), ('Meghann', 'Shaughnessy'), ('Greta', 'Arn'), ('Marjorie', 'Muller'), ('Katarina', 'Balan'), ('Natalia', 'Rubio'), ('Anabella', 'Sansostri'), ('Solange', 'Rasoarivelo'), ('Janelle', 'Watson'), ('Mariola', 'Prado'), ('Nina', 'Janzekovic'), ('Fruzsina', 'Siklosi'), ('Cindy', 'Tow'), ('Laurence', 'Poujoulat'), ('Kristin', 'Gunnarsdottir'), ('Karem', 'Harboe'), ('Elisa', 'Scarpetta'), ('Katherine', 'Frame'), ('Ana', 'Katanic'), ('Marissa', 'Niroj'), ('Juliana', 'Jonsdottir'), ('Neza', 'Globocnik'), ('Chia Hui', 'Feng'), ('Meritxell', 'Mimo Bravo'), ('Magali', 'Denayer'), ('Petra', 'Russegger'), ('Silvana', 'Vargas'), ('Maria Elena', 'Torres'), ('Clarissa', 'Martinessi'), ('Elena', 'Arabadji'), ('Yvonne', 'Stratmann'), ('Veronika', 'Mayer'), ('Anna', 'Macia'), ('Lindsay', 'Rawling'), ('Min Fang', 'Chang'), ('Gloria', 'Guntinas'), ('Sonia', 'Perez'), ('Bettina', 'Horvath'), ('Fanny Fatima', 'Vasquez Soza'), ('Dita', 'Kochloffelova'), ('Marisue', 'Jacutin'), ('Monia', 'Belghith'), ('Rita', 'Horvath'), ('Elena', 'Salvador Reja'), ('Liana', 'Skordopoulou'), ('Maria', 'Chavez'), ('Angelika', 'Bachmann'), ('Evagelia', 'Roussi'), ('Alice', 'Pirsu'), ('Alla', 'Goncharenko'), ('Kristy', 'Dascoli'), ('Renata', 'Hlavova'), ('Natalia', 'Ganna'), ('Suzanne', 'Tolu'), ('Lucie', 'Vecerova'), ('Elena', 'Pioppo'), ('Marianne', 'Bakken'), ('Angelina', 'Zdorovitskaia'), ('Maria', 'Boboedova'), ('Sommer', 'Bisagas'), ('Carolina', 'Maurer'), ('Mei Hua', 'Hsu'), ('Janet', 'Walker'), ('Stephanie', 'Zenklusen'), ('Iva', 'Puflerova'), ('Lucie', 'Soumarova'), ('Kwon Hee', 'Kim'), ('Young Eun', 'Shin'), ('Min Hee', 'Lee'), ('Karolina', 'Jagieniak'), ('Ekaterina', 'Tikhankina'), ('Yi Chieh', 'Chen'), ('Maria', 'Goloviznina'), ('Shiho', 'Mochida'), ('Nikola', 'Hubnerova'), ('Yulia', 'Rudavska'), ('Ana', 'Alcazar'), ('Ipek', 'Senoglu'), ('Erika', 'Ohlsson'), ('Ayano', 'Oishi'), ('Emilie', 'Loit'), ('Francoise', 'Gillis'), ('Odeta', 'Naujokaite'), ('Carolina', 'Rojas Jimenez'), ('Irene', 'Adsuar'), ('Martina', 'Ondrejkova'), ('Katja', 'Karrento'), ('Berangere', 'Quillot'), ('Darian', 'Chappel'), ('Maria', 'Tasheva'), ('Sarah', 'Pestieau'), ('Tereza', 'Stenclava'), ('Andrea', 'Ho'), ('Carmen', 'Gajo Torrell'), ('Ianes', 'Moreira'), ('Sandra', 'Kloesel'), ('Dragana', 'Ilic'), ('Tamara', 'Davis'), ('Sofie', 'Werckx'), ('Ashleigh', 'Dolman'), ('Andrea', 'Van Den Hurk'), ('Ratricia', 'Diaz'), ('Annette', 'Oosters'), ('Isabella', 'Mitterlehner'), ('Amelie', 'Detriviere'), ('Erika', 'Pineider'), ('Krisztina', 'Kovacs'), ('Malika', 'Oberoi'), ('Mabel', 'Roviti'), ('Galina', 'Selyunina'), ('Shiho', 'Hisamatsu'), ('Diana', 'Ospina'), ('Amelie', 'Mauresmo'), ('Yan', 'Tang'), ('Ana Maria', 'Zarta'), ('Majdouline', 'Idrissi'), ('Kornelia', 'Varro'), ('Monika', 'Brzuskiewicz'), ('Catalina', 'Castano'), ('Candela', 'Novoa'), ('Meike', 'Frohlich'), ('Marina', 'Capin'), ('Juliana', 'Marques'), ('Libuse', 'Prusova'), ('Sorana', 'Mastan'), ('Zuzana', 'Prusova'), ('Renata', 'Kucerova'), ('Mami', 'Inoue'), ('Tarminder', 'Grover'), ('Jasleen', 'Randhawa'), ('Abigail', 'Tordoff'), ('Chia Hsuan', 'Fu'), ('Reka', 'Vidats'), ('Jessica', 'Fernandez'), ('Gaelle', 'Taton'), ('Linda', 'Faltynkova'), ('Anna', 'Bielen Zarska'), ('Maricris', 'Gentz'), ('Maija', 'Lamu'), ('Anne Gaelle', 'Sidot'), ('Tatiana', 'Kovaltchouk'), ('Verenisse', 'Munguia'), ('Kylene', 'Wong Simunyola'), ('Kimberly', 'Gates'), ('Zuzana', 'Filipova'), ('Lucie', 'Zaruba'), ('Zuzanna', 'Liskovcova'), ('Shubha', 'Srinivasan'), ('Geraldine', 'Bimes'), ('Jessica', 'Tribula'), ('Alena', 'Mitackova'), ('Liudmila', 'Nikoyan'), ('Christiane', 'Hoppmann'), ('Luisa Fernanda', 'Velez'), ('Sonia', 'Colomina'), ('Lianasari', 'Batubara'), ('Ainhoa', 'Goni Blanco'), ('Yaiza', 'Goni Blanco'), ('Kun', 'Zhang'), ('Vanessa', 'De Los Heros'), ('Anna', 'Zaporozhanova'), ('Seon Ja', 'Yoo'), ('Laura', 'Gatti'), ('Kristina', 'Kraszewski'), ('Johanna', 'Pesola'), ('Severine', 'Beltrame'), ('Susanne', 'Filipp'), ('Sabine', 'Neteler'), ('Frida', 'Engblom'), ('Pamela', 'Floro'), ('Sarah', 'Borwell'), ('Carmen', 'Gajo'), ('Marie Claude', 'Ostiguy'), ('Bahia', 'Mouhtassine'), ('Zuzana', 'Valekova'), ('Jin Young', 'Choi'), ('Rebeccah', 'Rosenfield'), ('Alejandra', 'Medrano'), ('Kendra', 'Segura'), ('Romina', 'Fonda'), ('Ana', 'Radeljevic'), ('Lisa', 'Mackey'), ('Rebecca', 'Leftherioti'), ('Mojca', 'Pavlinic'), ('Sabina', 'Kochan'), ('Diana', 'Vasquez'), ('Nana', 'Wada'), ('Mateja', 'Ogrizek'), ('Subhashini', 'Kalyanasundaram'), ('Elena', 'Juricich'), ('Susanne', 'Trik'), ('Karina', 'Maliska'), ('Cinta', 'Princep'), ('Fabienne', 'Gmeiner'), ('Martha', 'Montano'), ('Tamara', 'Mol'), ('Megumi', 'Todoroki'), ('Judit', 'Trunkos'), ('Alessia', 'Baracchini'), ('Natalia', 'Pishchaeva'), ('Delphine', 'De Winne'), ('Aleksandra', 'Radosavljevic'), ('Marina', 'Gojkovic'), ('Kara', 'Molony Hussey'), ('Milena', 'Stojanovic'), ('Marianne', 'Sibille'), ('Maria Cristina', 'Campana'), ('Tamara', 'Encina'), ('Danila', 'Prevuznakova'), ('Charlotta', 'Larsson'), ('Alexandra', 'Greabu'), ('Violette', 'Ahn'), ('Silvia', 'Navarro Orgilles'), ('Diana', 'Ramirez'), ('Andreia', 'Pires'), ('Louise', 'Lilleso'), ('Magdalena', 'Wojcik'), ('Lamia', 'Essaadi'), ('Sandra', 'Martinovic'), ('Anna', 'Barinova'), ('Florence', 'Boucard'), ('Helen', 'Richardson'), ('Tracy', 'Almeda Singian'), ('Marcela', 'Duarte'), ('Johanna', 'Engstrom'), ('Rebekah', 'Rhodes'), ('Juleya', 'Semenets'), ('Li', 'Tong'), ('Ludmila', 'Cervanova'), ('Francesca', 'Frappi'), ('Napaporn', 'Tongsalee'), ('Sally', 'Turner'), ('Eun Young', 'Ha'), ('Stephanie', 'Halsell'), ('Alina', 'Tecsor'), ('Rachel', 'Dean'), ('Rebecca', 'Turner'), ('Lenka', 'Vlachynska'), ('Tali', 'Fink'), ('Katarina', 'Valkyova'), ('Reina', 'Alexander'), ('Sujitra', 'Duangchan'), ('Tzveta', 'Panajotova'), ('Esther', 'Boyle'), ('Laura', 'Pena'), ('Min Jie', 'Shi'), ('Olga', 'Barabanschikova'), ('Angela', 'Buergis'), ('Diana', 'Gherghi'), ('Anouk', 'Sterk'), ('Assa', 'Berthe'), ('Maren', 'Haus'), ('Irina', 'Selyutina'), ('Simone', 'Jardim'), ('Vinca', 'Rampen'), ('Youliya', 'Dimitrova'), ('Stephanie', 'Schaer'), ('Mari', 'Toro'), ('Katalin', 'Marosi'), ('Naomi', 'Callow'), ('Meiling', 'Parks'), ('Josefina', 'Vega'), ('Lauren', 'Martin'), ('Daphne', 'Nicolatou'), ('Aurandrea', 'Narvaez'), ('Jana', 'Lubasova'), ('Ewa', 'Radzikowska'), ('Bianca', 'Catay'), ('Soledad', 'Lucero'), ('Maria Virginia', 'Moreno Heredia'), ('Katarzyna', 'Straczy'), ('Magalie', 'Portel'), ('Jovana', 'Krsikapa'), ('Minna', 'Rautajoki'), ('Alison', 'Ojeda'), ('Debora', 'Carvalho'), ('Claire', 'Jalade'), ('Jonni', 'Seymour'), ('Lara', 'Van Rooyen'), ('Anne', 'Jamers'), ('Marisol', 'Berengeno'), ('Sihem', 'Ben Youcef'), ('Ines', 'Zouabi'), ('Daniela', 'Bolanos'), ('Kristina', 'Curic'), ('Anna', 'Nordell'), ('Bryanne', 'Stewart'), ('Judith', 'Czigany'), ('Sabine', 'Lutter'), ('Krissy', 'Hamilton Heinberg'), ('Karolina', 'Zmyslowska'), ('Michelle', 'Dasso'), ('Leslie', 'Thile'), ('Valerie', 'Pavlickova'), ('Martina', 'Nedorostova'), ('Analia', 'Baca'), ('Lynn', 'Novack'), ('Vesna', 'Sevsek'), ('Daniela', 'Groseanu'), ('Tatiana', 'Semenova'), ('Michelle', 'Gough'), ('Christina', 'Popescu'), ('Adria', 'Engel'), ('Adria', 'Raines'), ('Jasmin', 'Halbauer'), ('Laila', 'Karim'), ('Ingrid', 'Peltier'), ('Jana', 'Sedivec'), ('Sian Arie', 'Staria'), ('Karina Ildor', 'Jacobsgaard'), ('Candace Olivia', 'Pedro'), ('Mette', 'Iversen'), ('Mehvish', 'Chishtie'), ('Nicole', 'Seitenbecher'), ('Claudia', 'Castro'), ('Maria Carmen', 'Escuder'), ('Eva', 'Escribano Poveda'), ('Ting', 'Li'), ('Sabrina', 'Valenti'), ('Phornsarin', 'Tovisitchai'), ('Chantel', 'Skulskyj'), ('Nicola', 'Seltenbecher'), ('Andrea', 'Masarykova'), ('Julia', 'Podgorochna'), ('Anna Patricia', 'Santos'), ('Diane', 'Asensio'), ('Gioconda', 'Pinzon'), ('Cristina', 'Fontelles'), ('Akiko', 'Morigami'), ('Faratiana', 'Rasoarilalao'), ('Bettina', 'Auer'), ('Martina', 'Miklosava'), ('Eny', 'Sulistyowati'), ('Melisa', 'Arevalo'), ('Wei Yen', 'Lai'), ('Romy', 'Hutchins'), ('Monthika', 'Anuchan'), ('Anna', 'Font Estrada'), ('Erin', 'Boisclair'), ('Kadija', 'Richards'), ('Gabriela Alejandra', 'Tamasi'), ('Magalie', 'Gaillot'), ('Daria', 'Neretina'), ('Petra', 'Rampre'), ('Brie', 'Rippner'), ('Catalina', 'Acosta'), ('Ana Lucia', 'Pereyra'), ('Diana', 'Monsivaiz'), ('Cristina', 'Coletto'), ('Anna', 'Savitskaya'), ('Roberta', 'Radin'), ('Katrina', 'Mihaere'), ('Miki', 'Kuramochi'), ('Nicole', 'Remis'), ('Diana', 'Majkic'), ('Sophie', 'Regnier'), ('Marcelle', 'Hirt'), ('Alexa', 'De Bont'), ('Marlene', 'Weingartner'), ('Naheeda', 'Noormohamed'), ('Yulia', 'Ikonnikova'), ('Lindsey', 'Stead'), ('Isabel', 'Fonts'), ('Verena', 'Cerny'), ('Raluca', 'Sandu'), ('Azra', 'Resic'), ('Tara', 'Kanbargimath'), ('Monica', 'Rincon'), ('Naoko', 'Horikawa'), ('Pallavi', 'Ravikumar'), ('Candice', 'De La Torre'), ('Katerina', 'Chuda'), ('Cintia', 'Perez'), ('Susanne', 'Losel'), ('Michou', 'Tulfer'), ('Laetitia', 'Renault'), ('Jung Chi', 'Tsai'), ('Silvia', 'Tozzi'), ('Elodie', 'Le Bescond'), ('Mariela', 'Salinas'), ('Brandis', 'Braverman'), ('Raluca', 'Ciulei'), ('Andrea', 'Rose'), ('Daniela', 'Muscolino'), ('Varsha', 'Reddy'), ('Pilar', 'Piana'), ('Marja', 'Znidar'), ('Simona', 'Krausova'), ('Eva', 'Dyrberg'), ('Antoaneta', 'Neykova'), ('Adisa', 'Salibasic'), ('Erica', 'Biro'), ('Mariel', 'Verban'), ('Kasturi', 'Bhat'), ('Maria Gabriela', 'Giacomin'), ('Inga', 'Mueller'), ('Paola', 'Stephen'), ('Elsa', 'Morel'), ('Sanja', 'Bajin'), ('Ana Carolina', 'Martinez'), ('Simone', 'Wichman'), ('Elodie', 'Rouzier'), ('Jeannine', 'Kuratli'), ('Marylene', 'Losey'), ('Minette', 'Weirich'), ('Lilivette', 'Rivera'), ('Kelly', 'Blanch'), ('Mindy', 'Salas'), ('Manisha', 'Abeywardene'), ('Stephanie', 'Kovacic'), ('Keiko', 'Fujiwara'), ('Szilvia', 'Kelemen'), ('Natalia', 'Jung'), ('Claudia', 'Herbas'), ('Kristina', 'Triska'), ('Petia', 'Marinova'), ('Lynn Yin', 'Tan'), ('Sarah', 'Kadi'), ('Marion', 'Walter'), ('Tamara', 'Kaftalovich'), ('Julie', 'Zanin'), ('Kika', 'Hogendoorn'), ('Marie Claire', 'Mathot'), ('Joanne', 'Keene'), ('Tiffany', 'Dabek'), ('Susan', 'Okocha'), ('Jessica', 'Lehnhoff'), ('Qin', 'Yang'), ('Lan', 'Yao'), ('Katrin', 'Gaber'), ('Karin', 'Cislikowski'), ('Alienor', 'Tricerri'), ('Ellen', 'Delie'), ('Cecilia', 'Ortiz'), ('Lioudmila', 'Skavronskaia'), ('Esther', 'Jimoh'), ('Carmen', 'Arredondo'), ('Alicia', 'Pillay'), ('Jil Lin', 'Leong'), ('Amanda', 'Reyes'), ('Abimbola', 'Showole'), ('Claudia', 'Cortes De Maldonado'), ('Michaela', 'Pastikova'), ('Sabrina', 'Corazza'), ('Ana', 'Serrot Geminelli'), ('Valentina', 'Ronchi'), ('Georgina', 'Dinham'), ('Natasha', 'Galouza'), ('Natalia', 'Galouza'), ('Mariana', 'Mesa'), ('Renata', 'Suarez'), ('Angela', 'Ruchin'), ('Emma', 'Kidd'), ('Haleema', 'Rahim'), ('Zuzanna', 'Liskocova'), ('Evy', 'Last'), ('Alberta', 'Brianti'), ('Francisca', 'Sintes Martin'), ('Talula', 'Guralnek'), ('Anda', 'Perianu'), ('Ewelina', 'Augustyniak'), ('Patrycja', 'Bandurowska'), ('Raquel', 'Rodrigues'), ('Indre', 'Kastanauskaite'), ('Karen', 'Butler'), ('Carmen', 'Linder'), ('Kaysie', 'Smashey'), ('Roberta', 'Borrelli'), ('Sandra', 'Gloria'), ('Anna', 'Mitina'), ('Sabrina', 'Lindemann'), ('Silvina', 'Ronsisvalli'), ('Jessica', 'Balbuena'), ('Patricia', 'Perez De Vinaspre'), ('Anne Laure', 'Brochard'), ('Catalina', 'Paz'), ('Patricia', 'Garcia'), ('Ana', 'Jagerfeld Juric'), ('Michaela', 'Tennant'), ('Capucine', 'Rousseau'), ('Alessia', 'Biffi'), ('Naoko', 'Teramachi'), ('Neus', 'Barbera Flores'), ('Irina', 'Yarikova'), ('Agata', 'Kurowska'), ('Yuko', 'Kurata'), ('Renate', 'Stoop'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Aleksandra', 'Durska'), ('Keiko', 'Tokuda'), ('Maria Cristina', 'Bentivoglio'), ('Angelika', 'Schadler'), ('Rochelle', 'Raiss'), ('Yu An', 'Chen'), ('Bree', 'Calderwood'), ('Mariana', 'Macia'), ('Zuzana', 'Ondraskova'), ('Rie', 'Saiki'), ('Jennifer', 'Radman'), ('Esther', 'Stasi'), ('Vida', 'Mulec'), ('Whitney', 'Laiho'), ('Dong Ling', 'Zou'), ('Jasmina', 'Davidovic'), ('Fleur', 'Broughton'), ('Alix', 'La Celarie'), ('Busrin', 'Boontemleaw'), ('Angela', 'Cardoso'), ('Tina', 'Parits'), ('Marketa', 'Langerova'), ('Sara', 'Grechi'), ('Mervana', 'Jugic Salkic'), ('Isabelle', 'Godfroy'), ('Virginie', 'Favory'), ('Susi', 'Bensch'), ('Paulina', 'Janus'), ('Cecile', 'Leclere'), ('Nuria', 'Llagostera Vives'), ('Marta', 'Jedrzejak'), ('Amie', 'Garcia'), ('Birgit', 'Pirker'), ('Lindsay', 'Blau'), ('Sophie', 'Cockell'), ('Manami', 'Tsuji'), ('Claire', 'Maiolini'), ('Lynsey', 'Davison'), ('Oana Elena', 'Golimbioschi'), ('Junko', 'Nishida'), ('Katerina', 'Zlebkova'), ('Michaela', 'Havelkova'), ('Magdalena', 'Cibils'), ('Marina', 'Caiazzo'), ('Ioana', 'Dragan'), ('Carmen', 'Maas'), ('Arina', 'Uratani'), ('Doriane', 'Caporusso'), ('Silvia', 'Urickova'), ('Vanessa', 'Lima'), ('Sara', 'Lydon'), ('Marketa', 'Blazkova'), ('Marcela', 'Monroy'), ('Christi', 'Wagenaar'), ('Evie', 'Dominikovic'), ('Emilia', 'Desiderio'), ('Katrina', 'Nimmers'), ('Maria Lorena', 'Alcetegaray'), ('Violetta', 'Rankic'), ('Maria', 'Galoustova'), ('Tamar', 'Keren'), ('Alessia', 'Risuleo'), ('Barbora', 'Machovska'), ('Araceli', 'Borbolla'), ('Gabriela', 'Lastra'), ('Melisa', 'Lemus'), ('Marcela', 'Gonzalez'), ('Argyro', 'Zika'), ('Jenny', 'Trettin'), ('Remi', 'Tezuka'), ('Elisa', 'Villa'), ('Lenka', 'Hladikova'), ('Maria Victoria', 'Beortegui'), ('Jeannine', 'Niedhardt'), ('Maja', 'Matevzic'), ('Kati', 'Wolner'), ('Sahan', 'Shetty'), ('Sonia', 'Delgado Tardif'), ('Venus', 'Williams'), ('Ilona', 'Kordonskaya'), ('Hilke', 'Wilt'), ('Karine', 'Etienne'), ('Nina', 'Aigner'), ('Tara', 'Reid'), ('Puja', 'Deshmukh'), ('Marissa', 'Gould'), ('Francesca', 'Schiavone'), ('Nina', 'Duebbers'), ('Marta', 'Kostrhounova'), ('Angie', 'Wilkinson'), ('Beau', 'Jones'), ('Jeanine', 'Baillie'), ('Ana Carolina', 'Santoro'), ('Carla', 'Bruno'), ('Rochelle', 'Goldthreate'), ('Elizabeth', 'Wright'), ('Janet', 'Bergman'), ('Monika', 'Horvath'), ('Joyce', 'Bergman'), ('Brenda', 'Martinez'), ('Kildine', 'Chevalier'), ('Vicky', 'Lee'), ('Rachmawati', 'Siregar'), ('Laura', 'White'), ('Cynthia', 'Perez Gil'), ('Orie', 'Sasaki'), ('Teodora', 'Doncheva'), ('Charlotte', 'Smith'), ('Leoni', 'Weirich'), ('Archana', 'Reddy'), ('Ana Maria', 'Viera Teixtera'), ('Magdalena', 'Kurzacz'), ('Elya', 'Constanta'), ('Desiree', 'Galvan Suarez'), ('Helga', 'Vieira'), ('Kago', 'Phatshwane'), ('Sarah', 'Wetz'), ('Valentina', 'Sassi'), ('Dorothy', 'Zerbst'), ('Paula', 'Iturbide'), ('Maria Belen', 'Rojas'), ('Elena', 'Fontelles'), ('Akila', 'Bouchabou'), ('Ying Shi', 'Huang'), ('Janine', 'Lanser'), ('Eldina', 'Fazlic'), ('Oindrila', 'Majumder'), ('Eun Sook', 'Kim'), ('Alessia', 'Ignatieva'), ('Sabrina', 'Moser'), ('Justyna', 'Wojas'), ('Eva', 'Sanz'), ('Weyli', 'Chang'), ('Raffaella', 'Gambadoro'), ('Sandra', 'Mihajlovic'), ('Antonella', 'Serra Zanetti'), ('Elena', 'Voropaeva'), ('Magdalena', 'Marszalek'), ('Maria Laura', 'Fernandez'), ('Lydia', 'Steinbach'), ('Louise', 'Herbert'), ('Karin', 'Schlapbach'), ('Agnes', 'Wiski'), ('Barbara', 'Brauchle'), ('Thamara', 'Jonkman'), ('Catherine', 'Henuzet'), ('Lauren', 'Rookledge'), ('Linda', 'Akkerman'), ('Jing Hua', 'He'), ('Coral', 'Silverstone'), ('Frances', 'Giron'), ('Sabine', 'Klaschka'), ('Lorena', 'Porras'), ('Jitka', 'Schonfeldova'), ('Maria Claudia', 'Alves'), ('Carolina', 'Uriarte'), ('Aurore', 'Esteve'), ('Mira', 'Radu'), ('Bretchtje', 'Bruls'), ('Tatiana', 'Lopez'), ('Sandra', 'Nacuk'), ('Karen', 'Faus'), ('Alanna', 'Broderick'), ('Meryem', 'El Haddad'), ('Edna', 'Vasquez'), ('Elena', 'Bouloux'), ('Jasmin', 'Woehr'), ('Shiri', 'Zlotikamin'), ('Nicola', 'Corn'), ('Fernanda', 'Sala'), ('Jessyca', 'Arthur'), ('Masika', 'Williams'), ('Alejandra', 'Lopez'), ('Rikke', 'Faurfelt'), ('Valeria', 'Dag'), ('Rocio', 'Mora'), ('Lauren', 'Kalvaria'), ('Florencia', 'Basile'), ('Simona', 'Petrutiu'), ('Chira', 'Niemela'), ('Diana', 'Bobkova'), ('Radoslava', 'Topalova'), ('Rosalie', 'Tranchot'), ('Kate', 'Elliott'), ('Pei Jyue', 'Lo'), ('Andrea', 'Sebova'), ('Shadi', 'Tabatabai'), ('Therina', 'Steenkamp'), ('Dearbhia', 'Kelly'), ('Jennifer', 'Thorpe'), ('Polina', 'Ordanskaya'), ('Jennifer', 'Adrien'), ('Renata', 'Dias'), ('Fatima', 'Olaso De La Rica'), ('Katie', 'Granson'), ('Julie Anne', 'Chidley'), ('Rewa', 'Harriman'), ('Daniela', 'Ilieva'), ('Viktoria', 'Bucalic'), ('May', 'Emara'), ('Mariana', 'Gonzalez Moreno'), ('Natalia', 'Testa'), ('Uzma', 'Khan'), ('Svetla', 'Bozicnik'), ('Barbora', 'Stejskalova'), ('Edit', 'Pakay'), ('Svenja', 'Weidemann'), ('Lia', 'Jackson'), ('Blotza', 'Gutierrez'), ('Katerina', 'Traykova'), ('Simona', 'Farenza'), ('Stutti', 'Smit'), ('Ninisita', 'Srihadi'), ('Vanessa', 'Devesa'), ('Iris', 'Staub'), ('Natasha', 'Kelly'), ('Hao', 'Zhang'), ('Said Basiuny', 'Hend'), ('Cassandra', 'Godfrey'), ('Martina', 'Hingis'), ('Milagros', 'Sequera'), ('Hiroko', 'Nishikawa'), ('Victoria', 'Hall'), ('Rani', 'Cestari Setia'), ('Danice', 'Shackelford'), ('Kyung Yee', 'Chae'), ('Michelle', 'Colaninni'), ('Caroline', 'Woerle'), ('Ikumi', 'Akasaka'), ('Petra', 'Puheloinen'), ('Carla', 'Arguelles'), ('Ashlee', 'Callahan'), ('Jun', 'Zhang'), ('Ivana', 'Visic'), ('Katie', 'Miles'), ('Anouk', 'Sinnige'), ('Satomi', 'Kinjo'), ('Bruna', 'Colosio'), ('Olga', 'Gorzelak'), ('Evelina', 'Scalise'), ('Julieta', 'Guimaraes'), ('Liina', 'Suurvarik'), ('Ana', 'Santelises'), ('Chutima', 'Toma'), ('Natalia', 'Romashina'), ('Eva Maria', 'Petschnig'), ('Nisha', 'Naraynsingh'), ('Ilona', 'Vichnevskaya'), ('Juliana', 'Garcia'), ('Ana', 'Viglione'), ('Anat', 'Katz'), ('Sara', 'Walker'), ('Claudia', 'Filippini'), ('Sabrina', 'Damario'), ('Silvana', 'Reis'), ('Catalina', 'Martinez'), ('Claire', 'Bourgault'), ('Nadejda', 'Ostrovskaya'), ('Delphine', 'Troch'), ('Marcia', 'Gaspar'), ('Kealy', 'Carter'), ('Natalie', 'Ayton'), ('Maria Rian', 'Pila'), ('Nhu Quynh', 'Phan'), ('Elena', 'Petrenko'), ('Emilie', 'Scribot'), ('Uta', 'Grabinger'), ('Kyla', 'Hunte'), ('Nathalie', 'Du Vigneaud'), ('Salima Esmat', 'Salman'), ('Gitte', 'Moeller'), ('Jamie', 'Macias'), ('Maribel', 'Ramirez'), ('Jessica', 'Johnson Guyaux'), ('Genevieve', 'Houle'), ('Penka', 'Fileva'), ('Radka', 'Hovorkova'), ('Joo Young', 'Woo'), ('Allison', 'Bradshaw'), ('Clementina', 'Rovere'), ('Laura', 'Cartwright'), ('Natasha', 'Watts'), ('Jacquelyn', 'Rosen'), ('Eman', 'Shahab'), ('Lisa', 'Broadie'), ('Martina', 'Sucha'), ('Wukirasih', 'Sawondari'), ('Sarah', 'Witten'), ('Rocio', 'Fantilli'), ('Chiara', 'Dal Bon'), ('Claudia', 'Candado'), ('Layla', 'Tohme'), ('Jacqueline', 'Trail'), ('Christina', 'Fusano'), ('Paula', 'Wakefield'), ('Bea', 'Bielik'), ('Lesedi', 'Ramocha'), ('Ngozi', 'Dirisu'), ('Britta', 'Mohlmann'), ('Claudia', 'Nieto'), ('Anna', 'Aggelopoulou'), ('Mutsuko', 'Hirose'), ('Tomoko', 'Sugano'), ('Leticia', 'Sobral'), ('Tina', 'Aryani'), ('Manana', 'Dueli'), ('Marie Eva', 'Vrba'), ('Valentina', 'Mortello'), ('Daniela', 'Olivera'), ('Susan', 'Cowan'), ('Sophie', 'Cremers'), ('Catherine', 'Alain'), ('Bao Wen', 'Pu'), ('Marta', 'Plumitallo'), ('Alexandra', 'Stevenson'), ('Yvona', 'Cindric'), ('Victoria', 'Hooper'), ('Veronica', 'Rizhik Urteaga'), ('Rebeca', 'Llorente'), ('Ioana', 'Plesu'), ('Virginia', 'Prato'), ('Nicola', 'Koopman'), ('Medina', 'Bajrambasic'), ('Olga', 'Nin'), ('Johanna', 'De Leon'), ('Senait', 'Gebreail'), ('Isabelle', 'Soucy'), ('Jovana', 'Stanisljevic'), ('Lizeth', 'Fourie'), ('Sabath', 'Ibrahim'), ('Mihaela', 'Stefan'), ('Tsedey', 'Kifle'), ('Trishna', 'Williams'), ('Flavia', 'Rezende'), ('Virginia', 'Zaffaroni'), ('Camille', 'Sesanker'), ('Marketa', 'Cizova'), ('Gemma', 'Selga'), ('Eudoxia', 'Karaproimou'), ('Cristina', 'Meilicke'), ('Jasmine', 'Wolcott'), ('Helena', 'Ejeson'), ('Nicole', 'Sewell'), ('Diana', 'Tchkouasselli'), ('Nicole', 'Havlicek'), ('Leanne', 'Baker'), ('Cynthia', 'Dewi'), ('Shweta', 'Ravji'), ('Paulina', 'Castillejos'), ('Shivani', 'Oberoi'), ('Vanessa', 'Henke'), ('Prim', 'Siripipat'), ('Kirsty', 'Thomas'), ('Anna', 'Komarova'), ('Anna', 'Wilander'), ('Tina', 'Hojnik'), ('Annette', 'Tronning'), ('Maria Noel', 'Ruiz'), ('Tina', 'Steinmetz'), ('Sofie', 'Borgions'), ('Meray', 'Malouf'), ('Eva', 'Trujillo'), ('Esther', 'Mbugua'), ('Alena', 'Scharfschwert'), ('Kari', 'Olsen'), ('Emelie', 'Akerbrandt Bengtsson'), ('Sara', 'Abaza'), ('Petra', 'Bercik'), ('Tiffany', 'Brymer'), ('Eka', 'Zhvania'), ('Alissa', 'Velts'), ('Charisma', 'Billings'), ('Marcela', 'Ferrari'), ('Ziva', 'Grasic'), ('Laetitia', 'Sanchez'), ('Sawitre', 'Naree'), ('Samantha', 'Schoeffel'), ('Cecilia', 'Guillenea'), ('Beata', 'Wajdzik'), ('Viktoria', 'Stoklasova'), ('Monica', 'Gonzalez Gordo'), ('Carolina', 'Aristimuno'), ('Susan', 'Durst'), ('Kanako', 'Yano'), ('Alicia', 'Molik'), ('Nuria', 'Rivas'), ('Simona', 'Graniceru'), ('Lucy', 'Wood'), ('Iva', 'Kirac'), ('Ekaterina', 'Paniouchkina'), ('Wei Na', 'Liu'), ('Maria Adelaida', 'Agudelo'), ('Shaza', 'Tinawi'), ('Monika', 'Gieczys'), ('Sonia', 'Shelar'), ('Yi Chun', 'Lan'), ('Sara', 'Mueller'), ('Bo Ra', 'Choi'), ('Ilona', 'Vishnevskaya'), ('Elizabeth', 'Meyer'), ('Andrea', 'Nickel'), ('Tereza', 'Sykorova'), ('Aurelie', 'Vedy'), ('Veronica', 'Sartini'), ('Jennifer', 'Hopkins'), ('Heather', 'Shelby'), ('Petra', 'Navratilova'), ('Anya', 'Loncaric'), ('Harisa', 'Delic'), ('Martina', 'Janska'), ('Milauni', 'Vibhakar'), ('Marta', 'Ribalta'), ('Luisa Elfride', 'Lopez'), ('Zheng', 'Wang'), ('Yulia', 'Davidyuk'), ('Sonia', 'Vickers'), ('Leonne', 'Muller Van Moppe'), ('Maria Elena', 'Del Valle'), ('Tina', 'Pisnik'), ('Rochelle', 'Rosenfield'), ('Ratih', 'Zanida'), ('Sasha', 'Edelstein'), ('Radhika', 'Mandke'), ('Gabriella', 'Reiner'), ('Meng', 'Wang'), ('Donna', 'Calvert'), ('Sophie', 'Lefevre'), ('Simona', 'Morici'), ('Anne', 'Valle'), ('Dorra', 'Hammami'), ('Natalie', 'Grandin'), ('Ildiko', 'Stadler'), ('Kate', 'Pinchbeck'), ('Karishma', 'Patel'), ('Agnes', 'Palvolgyi'), ('Min', 'Fan'), ('Hsiung Ching', 'Lin'), ('Emilie', 'Vanhuysberghe'), ('Valentina', 'Imperio'), ('Lana', 'Miholcek'), ('Radka', 'Sottova'), ('Jenny', 'Timoney'), ('Jennifer', 'Tinnacher'), ('Natacha', 'Gosset'), ('Natalia', 'Rojas'), ('Monika', 'Malinska'), ('Anca', 'Dumitrescu'), ('Serena', 'Carsughi'), ('Frederika', 'Girsang'), ('Mariana', 'Petrasova'), ('Gabriela', 'Volekova'), ('Gianina', 'Enuta'), ('Tatjana', 'Scheel'), ('Olivia', 'Dubovikov'), ('Claudia', 'Di Trapani'), ('Katarina', 'Srebotnik'), ('Theodora', 'Patsourakou'), ('Yanelis', 'Jimenez Estevez'), ('Daniela', 'Puplinkhuisen'), ('Elizabeth', 'Kaufman'), ('Katia', 'Ceracchi'), ('Eva', 'Fislova'), ('Ka Po', 'Tong'), ('Francesca', 'Agazzi'), ('Lara', 'De Angelis'), ('Eva', 'Alves Comesana'), ('Rotem', 'Tepperberg'), ('Ariadna', 'Junyent'), ('Anna', 'Sholuh'), ('Vilmarie', 'Castellvi'), ('Daniela', 'Torres'), ('Ina Maria', 'Range'), ('Stefanie', 'Hershfield'), ('Mihaela', 'Moldovan'), ('Annabel', 'Kelynack'), ('Julia', 'Kondratovskaia'), ('Igna', 'De Villiers'), ('Neha', 'Bhardwaj'), ('Daniela', 'Canepa'), ('Anne', 'Carmans'), ('Romana', 'Valenta'), ('Elena', 'Jirnova'), ('Viviana', 'Ferencak'), ('Karolina', 'Roubickova'), ('Lourdes', 'Dominguez Lino'), ('Alena', 'Bencova'), ('Valeria', 'Khazova'), ('Petra', 'Sedlmajerova'), ('Monica', 'Peets'), ('Agnieszka', 'Abram'), ('Emilia', 'Kopczynska'), ('Madita', 'Suer'), ('Monica', 'Ribero'), ('Vanessa', 'Rebelo'), ('Valeria', 'Lapis'), ('Anita', 'Loyola'), ('Yi Wei', 'Chen'), ('Anne', 'Bannfy'), ('Rakel', 'Petursdottir'), ('Laetitia', 'Bonny'), ('Mi Ran', 'Shin'), ('Elena', 'Stoilova'), ('Marta', 'Insausti'), ('Adrianna', 'Gallo'), ('Zsofia', 'Gubacsi'), ('Nazli', 'Gencsoy'), ('Patricia', 'Aburto'), ('Hyun Sook', 'Park'), ('Rotem', 'Magnagni'), ('Danielle', 'Paynter'), ('Perrine', 'Pernin'), ('Silke', 'Martin'), ('Jennifer', 'Black'), ('Glenny', 'Cepeda'), ('Anna', 'De Bruyn'), ('Amy', 'Burson'), ('Remi', 'Uda'), ('Tania', 'Martin'), ('Suzanne', 'Wright'), ('Anne', 'Nguyen'), ('Inga', 'Burger'), ('Stefania', 'Pacella'), ('Christine', 'Silaghi'), ('Marine', 'Piriou'), ('Silvia', 'Torne Ortiz'), ('Carien', 'Venter'), ('Gillian', 'Assad'), ('Bettina', 'Hafner'), ('Mugette', 'Ahn'), ('Wei', 'Na'), ('Ana', 'Buraku'), ('Johanna', 'Ingnas'), ('Tara', 'Lambert'), ('Wynne', 'Prakusya'), ('Julie', 'De Roo'), ('Kristin', 'Gyaki'), ('Aina', 'Rafolomanantsiatosika'), ('Khushcher', 'Italia'), ('Vania', 'Apodaca'), ('Laetitia', 'Gassis'), ('Karine', 'Redon'), ('Yolanda', 'Rowe'), ('Laurence', 'Jayet'), ('Cecilia', 'Perez'), ('Monica', 'Londono'), ('Yi Ying', 'Lai'), ('Kristen', 'Stubbs'), ('Zdenka', 'Videnova'), ('Celia', 'Sutton'), ('Stephanie', 'Foretz Gacon'), ('Elena', 'De Mendoza'), ('Zeynep', 'Gurkaynak'), ('Vanessa', 'Elmendorp'), ('Evelien', 'Bostyn'), ('Daniella', 'Kastamoniti'), ('Daniela', 'Peyrot'), ('Kinga', 'Berecz'), ('Mirte', 'Ros'), ('Olga', 'Nefedova'), ('Laura', 'Granville'), ('Kelly', 'Simkin'), ('Claudia', 'Lepore'), ('Katerina', 'Zupancic'), ('Carla', 'Tiene'), ('Natalia', 'Nusshold'), ('Anna', 'Andersson'), ('Vishnu Preetham', 'Mahalingam'), ('Gabriela', 'Duarte'), ('Laura', 'Dellangelo'), ('Julia', 'Scaringe'), ('Megan', 'Yeats'), ('Vanessa', 'Krauth'), ('Erica', 'Krauth'), ('Leigh', 'Bradwell'), ('Evangelina Silvia', 'Migliavacca'), ('Marta', 'Rubina'), ('Jana', 'Hlavackova'), ('Jelena', 'Ganic'), ('Madoka', 'Suzuki'), ('Raffaella', 'Coffa'), ('Svatava', 'Prorokova'), ('Geminesse', 'Co'), ('Marina', 'Tasheva'), ('Tania', 'Tzartzeva'), ('Patricia', 'Almudever Folch'), ('Marlene', 'Dirnstorfer'), ('Nabila', 'Yasri'), ('Irem', 'Saram'), ('Denise', 'Hofer'), ('Lia', 'Fabiano'), ('Agathe', 'Belibi'), ('Ekaterina', 'Sysoeva'), ('Alessia', 'Nikolaeva'), ('Delphine', 'Froidevaux'), ('Nazh', 'Gencsoy'), ('Natasha', 'Van Der Merwe'), ('Nicola', 'Manley'), ('Sheethal', 'Goutham'), ('Anna', 'Kournikova'), ('Maria', 'Djordjio'), ('Anne Marie', 'Hogan'), ('Erika', 'Venere'), ('Arianna', 'Di Gennaro'), ('Nicole', 'Rencken'), ('Sarah', 'Abaza'), ('Jin Hee', 'Kim'), ('Ines', 'Moura'), ('Fernanda', 'Vlasak'), ('Yonca', 'Gonen'), ('Rossi', 'Thomas'), ('Fanny', 'Cardenas'), ('Murielle', 'Methon'), ('Nora', 'Veiga Gil'), ('Dora', 'Krstulovic'), ('Napanant', 'Montkhongtham'), ('Emily', 'Haylock'), ('Tomoko', 'Dokei'), ('Dominique', 'Reynolds'), ('Vaida', 'Martinkute'), ('Emmanuelle', 'Duval'), ('Aline', 'Pinheiro'), ('Martine', 'Poos'), ('Sarah', 'Riske'), ('Mara', 'Santangelo'), ('Bucke Enda', 'Yavuz'), ('Anne', 'Meritel'), ('Francesca', 'Calabrese'), ('Lisa', 'Gebert'), ('Danira', 'Penic'), ('Chantal', 'Coombs'), ('Yanet', 'Nunez Mojarena'), ('Anna', 'Oehme'), ('Kirsten', 'Harris'), ('Dorothee', 'Buschhuter'), ('Elena', 'Cordano'), ('Bianca', 'Kamper'), ('Delila', 'Causevic'), ('Victoria', 'Livanova'), ('Kristin', 'Lam'), ('Cassandra', 'Swanepoel'), ('Jelena', 'Kostanic Tosic'), ('Magda', 'Mihalache'), ('Carolina', 'Aravena'), ('Laura', 'Mangunsong'), ('Stella', 'Kristjansdottir'), ('Jetpisit', 'Lertsirisumpan'), ('Anastasia', 'Myskina'), ('Tjasa', 'Suvak'), ('Chisayo', 'Ito'), ('Shizuko', 'Matsuda'), ('Natsuko', 'Matsuda'), ('Aitana', 'Minambres'), ('Wan Ting', 'Lin'), ('Abigail', 'Spears'), ('Claire', 'Carter'), ('Sabrina', 'Diniz'), ('Anastasia', 'Ponomarenko'), ('Hye Jeong', 'Yoo'), ('Zeynep', 'Inanli'), ('Ana', 'Martin Ramirez'), ('Jahnavi', 'Sunderarajan'), ('Valentina', 'Castro'), ('Natalie', 'Marz'), ('Xer Li', 'Woo'), ('Riina', 'Veiram'), ('Jennifer', 'Tuchband'), ('Giorgia', 'Poggi'), ('Leslie', 'Harvey'), ('Karin', 'Urbin'), ('Nazan', 'Arsal'), ('Pirada', 'Witoonpanich'), ('Lazarina', 'Sazdova'), ('Tomoko', 'Taira'), ('Maria Paola', 'Arcos'), ('Sheila', 'Guerberg'), ('Sonia', 'Lagos'), ('Ana', 'Sanz Castro'), ('Millie', 'Begovic'), ('Kit', 'Carson'), ('Deanna', 'Roberts'), ('Alexandra', 'Chong'), ('Lori', 'Grey'), ('Marlene', 'Mejia'), ('Ivana', 'Bracun'), ('Eriko', 'Mizuno'), ('Maria Claudia', 'Romo'), ('Ljiljana', 'Nanusevic'), ('Kyung Won', 'Kim'), ('Laila', 'Shetty'), ('Rebecca', 'Hawkins'), ('Yumi', 'Ueda'), ('Maria', 'Ilieva'), ('Lies', 'Budiharto'), ('Virginia', 'Varga'), ('Marie', 'Yamabe'), ('Visnja', 'Visnjic'), ('Stephanie', 'Kamberi'), ('Julia', 'Romanova'), ('Donna', 'Mcintyre'), ('Ana', 'Stiglic'), ('Maria Victoria', 'Domina'), ('Ines', 'Khelefi'), ('Rossana', 'Hidalgo'), ('Sedef', 'Ozkan'), ('Katia', 'Bogomolova'), ('Julia', 'Klein'), ('Jacqueline', 'Nieto'), ('Erika', 'Clarke Magana'), ('Nuraeni', 'Batubara'), ('Melissa', 'Mendieta'), ('Maria', 'Guijarro'), ('Sara', 'Pasquinoni'), ('Jodi', 'Kenoyer'), ('Stephanie', 'Rizzi'), ('Katarzyna', 'Kolodynska'), ('Mariana', 'Duarte'), ('Elizabeth', 'Schranz'), ('Natalia', 'Gussoni'), ('Eun Joo', 'Kang'), ('Chiara', 'Lucacchioni'), ('Camille', 'Pin'), ('Orawan', 'Wongkamalasai'), ('Francesca', 'Mancini'), ('Simona', 'Jozova'), ('Ivana', 'Mark'), ('Kaori', 'Aoyama'), ('Ayako', 'Suzuki'), ('Verica', 'Spirovska'), ('Marjorie', 'Ceppo'), ('Lara', 'Arnaout'), ('Clarisa', 'Fernandez'), ('Maria Karina', 'Lomena'), ('Oana', 'Creanga'), ('Daniela', 'Santamato'), ('Aleksandra', 'Vucenovic'), ('Monica', 'Mastan'), ('Kim', 'Freebairn'), ('Nanci', 'Lemuz'), ('Ji Sun', 'Ha'), ('Annika', 'Bengtsson'), ('Marialice', 'Alonso'), ('Melanie Ann', 'Clayton'), ('Pia', 'De Robertis'), ('Marinet', 'Morgan'), ('Victoria', 'Broyak'), ('Michino', 'Meguro'), ('Olga', 'Ramirez'), ('Oyuki', 'Cruz'), ('Andrea', 'Munch Hermansen'), ('Jewel', 'Peterson'), ('Ivona', 'Sereja'), ('Evelyne', 'Gmeiner'), ('Mikaele', 'Zaykine'), ('Yeon', 'Kim'), ('Giulia', 'Schivo'), ('Karla', 'Alvarado'), ('Linda', 'Tajnai'), ('Mandy', 'Stegman'), ('Carina', 'Kaempfer'), ('Nela', 'Bogdanovich'), ('Magdalena', 'Mrozek'), ('Cristina', 'Maiz'), ('Saloni', 'Kantaria'), ('Kristen', 'Van Elden'), ('Ina', 'Sartz'), ('Vroni', 'Hinterseer'), ('Rika', 'Fujiwara'), ('Elena', 'Rutigliano'), ('Agata', 'Cioroch'), ('Tanja', 'Schugt'), ('Nato', 'Kachkachishvili'), ('Sareewan', 'Wattanadechachan'), ('Serena', 'Williams'), ('May', 'Kabani'), ('Loni', 'Worsley'), ('Aileen', 'Rogan'), ('Kristina', 'Barrois'), ('Yu', 'Sun'), ('Carla', 'Bastos'), ('Anita', 'Csendes'), ('Wibeke', 'Clifford'), ('Amina', 'Choqri'), ('Osaro', 'Amadin'), ('Orawan', 'Lamangthong'), ('Sarah', 'Stallard'), ('Tian Tian', 'Sun'), ('Kristina', 'Pesatova'), ('Nadia', 'Dzuganova'), ('Elena', 'Dementieva'), ('Hanna', 'Krampe'), ('Imke', 'Kusgen'), ('Vanesa Rut', 'Ansotegui'), ('Julie', 'Tremblay'), ('Tina', 'Hergold'), ('Kavitha', 'Krishnamurthy'), ('Diana', 'Laksono'), ('Virginia', 'Trifonova'), ('Kaori', 'Goto'), ('Urska', 'Juric'), ('Lejla', 'Husic'), ('Monica', 'Canevaro'), ('Ekaterina', 'Makarenko'), ('Jennifer', 'Klaschka'), ('Julia', 'Henninger'), ('Ilke', 'Gers'), ('Lara', 'Ercegovic'), ('Evghenia', 'Ablovatchi'), ('Dayana', 'Mora'), ('Ana Paula', 'Novaes'), ('Ariadna', 'Berdala Grive'), ('Niyati', 'Shetty'), ('Denitza', 'Alexandrova'), ('Deniz', 'Emre'), ('Elena', 'Caldes Marques'), ('Montserrat', 'Palacios'), ('Carly', 'Homewood'), ('Sarah', 'Taylor'), ('Clare', 'Warner'), ('Sara', 'Martinez Martos'), ('Manon', 'Van Den Beek'), ('Renska', 'Hiemstra'), ('Adriana', 'Burz'), ('Olga', 'Duran'), ('Simmi', 'Rani'), ('Nathalie', 'Aizenberg'), ('Lisa', 'Damelio'), ('Paco', 'Heredia'), ('Maria Florencia', 'Rivolta'), ('Natalia', 'Stoudyanaya'), ('Yukiko', 'Yabe'), ('Natalia', 'Kostova'), ('Mobina', 'Saimwala'), ('Dorota', 'Zaboklicka'), ('Emily', 'Jacobs'), ('Jeong A', 'Cho'), ('I Ting', 'Wang'), ('Alenka', 'Kacunko'), ('Jennifer', 'Mcgaffigan'), ('Diana', 'De Salvador'), ('Stephanie', 'Kimura'), ('Cecilia', 'Wilander'), ('Hannah', 'Parker'), ('Dagmara', 'Bednarczyk'), ('Sonia', 'Orellana'), ('Sabaea', 'Carrington'), ('Amanda', 'Johnson'), ('Christin', 'Potsch'), ('Branka', 'Bojovic'), ('Jennifer', 'Mitchell'), ('Beatriz', 'Fraga'), ('Veronica', 'Garcia'), ('Katia', 'Rodrigues'), ('Olga', 'Lazarchuk'), ('Ana Luisa', 'Torres'), ('Paula', 'Oliveira'), ('Jacqueline', 'Lorne'), ('Anuja', 'Rithi'), ('Anujapathy', 'Pasupathy'), ('Denise', 'Vock'), ('Elena', 'Yaryshka'), ('Diana', 'Brunel'), ('Cacilia', 'Charbonnier'), ('Milangela', 'Morales'), ('Gabriela', 'Salloum'), ('Ariana', 'Rojas'), ('Tricia Ann', 'Greaves'), ('Estefania', 'Martinez'), ('Marina', 'Soukholitko'), ('Julie', 'Rotondi'), ('Jessica', 'Ferguson'), ('Patricia', 'Zurita'), ('Carolina', 'Rodriguez'), ('Gertruda', 'Nagtzaam'), ('Akane', 'Yasui'), ('Sanny', 'Harsono'), ('Alessandra', 'Gandossi'), ('Ines', 'Mzoughi'), ('Ansley', 'Cargill'), ('Carlota', 'Plantier Santos'), ('Aysu', 'Cuhaci'), ('Natalia', 'Savchenko'), ('Ida', 'Sutedja'), ('Iroda', 'Tulyaganova'), ('Boyana', 'Perich'), ('Visnja', 'Vuletic'), ('Ana', 'Radak Trampetic'), ('Ellen', 'Svensson'), ('Stephanie', 'Balzert'), ('Emma', 'Gott'), ('Daniela', 'Dessolis'), ('Christina', 'Fitz'), ('Francesca', 'Lorenzoni'), ('Aimee', 'Smith'), ('Maria', 'Gil'), ('Vadali', 'Kameswari'), ('Emily', 'Dowdeswell Koti'), ('Sylvie', 'Bohmova'), ('Fleida Jan', 'Pila'), ('Courtney', 'Steinbock'), ('Kristen', 'Steinbock'), ('Sarah', 'Gregg'), ('Sonora', 'Fontaine'), ('Jenny', 'Lindstrom'), ('Sandra', 'Leborgne'), ('Maria', 'Kondratieva'), ('Lisa', 'Quiller'), ('Ikuko', 'Hirata'), ('Anais Marie', 'Moreno'), ('Danielle', 'Spacek'), ('Ya Ming', 'Lin'), ('Rani Smita', 'Jain'), ('Kaori', 'Oishi'), ('Barbara', 'Soares'), ('Jorgelina', 'Cravero'), ('Veronika', 'Raimrova'), ('Paulina', 'Slitrova'), ('Camila', 'Sagae'), ('Inge', 'Weirich'), ('Fabienne', 'Vieille Grosjean'), ('Marielle', 'Hoogland'), ('Andria', 'Hadjioannou'), ('Mariona', 'Gallifa Puig Desens'), ('Natalia', 'Volcova'), ('Jimena', 'Fernandez'), ('Sonja', 'Vidas'), ('Laura', 'Lechi'), ('Svetlana', 'Mossiakova'), ('Analia', 'Longoni'), ('Nona', 'Wagh'), ('Sabine', 'Herdegen'), ('Laura', 'Cebrian'), ('Natasha', 'Van Jaarsveld'), ('Maret', 'Ani'), ('Silvia', 'Cribellati'), ('Heidi', 'Farr'), ('En Yue', 'Ma'), ('Emilia', 'Anderson'), ('Maria', 'Ruiz Fabrega'), ('Lucie', 'Mazinova'), ('Karolina', 'Sadaj'), ('Rekha', 'Natrajan'), ('Radhika', 'Tulpule'), ('Jacqueline', 'Hagen'), ('Carolina', 'Sadaj'), ('Ayca', 'Gumuscu'), ('Valerie', 'Menob'), ('Yolandi', 'Rogers'), ('Nathalie', 'Sienkob'), ('Magali', 'Risoleo'), ('Lenka', 'Tvaroskova'), ('Chrisdula', 'Kagga'), ('Kateryna', 'Vasylyeva'), ('Marcela', 'Evangelista'), ('Bojana', 'Damnjanovic'), ('Ying', 'Yu'), ('Darija', 'Klaic'), ('Jessica', 'Ortiz Diaz Oliver'), ('Adriana', 'Basaric'), ('Susanne', 'Kirsch'), ('Hannah', 'Collin'), ('Danielle', 'Hock'), ('Furuza', 'Gafurova'), ('Celine', 'Cattaneo'), ('Helen', 'Staresinic'), ('Victoria', 'Beck'), ('Dora', 'Bechliwanis'), ('Marta', 'Bechliwanis'), ('Katerina', 'Sevcikova'), ('Sai Swapna', 'Ramakrishnan'), ('Petra', 'Novotnikova'), ('Kelly', 'Schmandt'), ('Klara', 'Koukalova'), ('Stefanie', 'Weis'), ('Flavia', 'Pennetta'), ('Kyung Mi', 'Chang'), ('Gyorgyi', 'Zsiros'), ('Julia', 'Beconi'), ('Na', 'Li'), ('Anna', 'Dolinska'), ('Amira', 'Samara'), ('Cornelia', 'Villemur'), ('Helene', 'Mygind'), ('Mhairi', 'Brown'), ('Gorana', 'Marsic'), ('Barbara', 'Hellwig'), ('Eri', 'Ohmi'), ('Chloe', 'Carlotti'), ('Barbara', 'Rosenberger'), ('Elena', 'Manevska'), ('Mariam', 'Galal Hafez'), ('Dacil', 'Alvarado'), ('Diana', 'Olave'), ('Gemma', 'Gallo Gomez'), ('Ilge', 'Alpay'), ('Gretchen', 'Haynor'), ('Stephanie', 'Sagaspe'), ('Doris', 'Kurtela'), ('Dagmar', 'Denkova'), ('Laura', 'Pretin'), ('Laura', 'Bao'), ('Andrea', 'Plackova'), ('Sandra', 'Kvelstein'), ('Linn', 'Ronnberg'), ('Elena', 'Branker'), ('Mirjana', 'Lucic'), ('Katherine', 'Boyanovich'), ('Alexandra', 'Smith'), ('Ming Hui', 'Wu'), ('Lan Lan', 'Tai'), ('Diana', 'Muller'), ('Olga', 'Mikhailova'), ('Ana', 'Maslesa'), ('Anne Laure', 'Heitz'), ('Idalina', 'Franca'), ('Stanislava', 'Hrozenska'), ('Sricharanya', 'Thiagarajan'), ('Sumitra', 'Rao'), ('Angela', 'Szymanowski'), ('Yolandi', 'Beukes'), ('Meritxell', 'Balbas'), ('Manar', 'Akkar'), ('Nino', 'Chichinadze'), ('Maria Elena', 'Camerin'), ('Claire', 'Seal'), ('Amandine', 'Dulon'), ('Henrike', 'Voigt'), ('Sarah', 'Stone'), ('Veronika', 'Koksova'), ('Monika', 'Dybicz'), ('Aurore', 'Desert'), ('Nicole', 'Weber'), ('Magdalena', 'Wojdylok'), ('Petra', 'Halastova'), ('Dimana', 'Krastevitch'), ('Filipa', 'Gabrovska'), ('Monika', 'Serrano'), ('Cristina', 'Arribas'), ('Vanessa', 'Flores'), ('Shruti', 'Dhawan'), ('Barbora', 'Blahutiakova'), ('Emily Ann', 'Marker'), ('Biljana', 'Trpeska'), ('Agnes', 'Buronyi'), ('Pei Yuin', 'Keng'), ('Sabina', 'Mediano Alvarez'), ('Candice', 'Fuchs'), ('Joo Hee', 'Lee'), ('Marina', 'Cardoso'), ('Jenny', 'Zachrisson'), ('Vera', 'Kostelnikova'), ('Sato', 'Fujigo'), ('Gamze', 'Basaran'), ('Natalia', 'Yatsenka'), ('Gabriela', 'Coello'), ('Safae', 'Kchich'), ('Funke', 'Adekola'), ('Nicole', 'Angat'), ('Viktoria', 'Tepluk'), ('Stephanie', 'Gehrlein'), ('Sarah', 'Suitor'), ('Luiza', 'Biktyakova'), ('Megan', 'Marton'), ('Irina', 'Voskanyan'), ('Natalia', 'Drabova'), ('Christina', 'Wheeler'), ('Kate', 'Lutgert'), ('Milica', 'Stamenic'), ('Claudia', 'Salgues'), ('Bernadette', 'Audra'), ('Mirja', 'Cuntz'), ('Belen', 'Guajardo'), ('Hillary', 'Adams'), ('Lucia', 'Tallova'), ('Anna', 'Eriksson'), ('Tiziana', 'Iezza'), ('Po Kuen', 'Lam'), ('Fabiana', 'Taverna'), ('Vanessa', 'Wellauer'), ('Andrea', 'Hofinger'), ('Megan', 'Ferreira'), ('Rui Jing', 'Wong'), ('Dita', 'Hauerlandova'), ('Sandy', 'Lukowski'), ('Tarrin', 'Dougery'), ('Eva', 'Arteche'), ('Melissa', 'Dowse'), ('Aleke', 'Tsoubanos'), ('Ivana', 'Kekez'), ('Caroline', 'Tidemand'), ('Ksenia', 'Orehova'), ('Hyun Sook', 'Bae'), ('Pragya', 'Yadav'), ('Sandhya', 'Kanury'), ('Olivia', 'Tudor'), ('Mira', 'Rainshtein'), ('Courtney', 'Bergman'), ('Wan Ching', 'Tuan'), ('Helen', 'Lawson'), ('Laura', 'Bolet'), ('Kun', 'Deng'), ('Begona', 'De Toro Sanz'), ('Haruka', 'Yamamoto'), ('Atsumi', 'Mitsumine'), ('Ramona', 'But'), ('Elisa', 'Innocenti'), ('Alina', 'Bileca'), ('Jihan', 'Patel'), ('Lyndsey', 'Molony'), ('Amelia', 'Lincaru'), ('Martina', 'Strussova'), ('Anastasia', 'Rodionova'), ('Marinela', 'Antonic'), ('Anna', 'Floris'), ('Djamila', 'Khaldi'), ('Jenny', 'Andrade'), ('Shelley', 'Panford Gyaaba'), ('Carolina', 'Rodriguez Magdalena'), ('Marie Eve', 'Pelletier'), ('Karen', 'Paterson'), ('Minou', 'Jancso'), ('Stephanie', 'Serruys'), ('Ines', 'Trickovic'), ('Katharina', 'Scholtisek'), ('Karina', 'Gamonal'), ('Dikla', 'Dadon'), ('Lauren', 'Barnikow'), ('Maria', 'Rivas'), ('Elina', 'Bairos'), ('Jamie', 'Buterbaugh'), ('Ofra', 'Friedman'), ('Yang', 'Liu'), ('Mia', 'Buric'), ('Deborah', 'Saxer'), ('Nathalia', 'Bellizia'), ('Dragica', 'Joksimovic'), ('Daysi', 'Espinal'), ('Victoria', 'Cservenyak'), ('Marina', 'Samolenko'), ('Leslie', 'Butkiewicz'), ('Silvia', 'Hegedis'), ('Belinda', 'Kelly'), ('Se Na', 'Lee'), ('Maureen', 'Diaz'), ('Suzanne', 'Van Hartingsveldt'), ('Sivan', 'Ozana'), ('Carolyn', 'Mcgann'), ('Emily', 'Stellato'), ('Veronika', 'Ctvrtnickova'), ('Anastasia', 'Dvornikova'), ('Justine', 'Henin'), ('Jessica', 'Roland Rosario'), ('Jenny', 'Belobrajdic'), ('Hana', 'Debevec'), ('Hadjira', 'Slimani'), ('Frederica', 'Piedade'), ('Melissa', 'Middleton'), ('Maja', 'Pauk'), ('Noelia', 'Furno'), ('Nadia', 'Petrova'), ('Helen', 'Reesby'), ('Tuyet Minh', 'Tran'), ('Cristina', 'Madrid'), ('Karla', 'Mancinas'), ('Sonal', 'Phadke'), ('Nives', 'Culum'), ('Nathalie', 'Banday'), ('Tunde', 'Nemeth'), ('Diana', 'Quevedo'), ('Hanae', 'Rhazi'), ('Vanessa', 'Pallucci'), ('Mirina', 'Rajaoarisoa'), ('Anabelle', 'Espinosa Rodriguez'), ('Olivia', 'Crouchent'), ('Claudia', 'Ivone'), ('Biljana', 'Dimovska'), ('Claire', 'Webb'), ('Aniela', 'Mojzis'), ('Sasiwan', 'Pimonrat'), ('Sabrina', 'Jolk'), ('Dewi Monica', 'Siregar'), ('Amandine', 'Singla'), ('Kristel', 'Van Der Perre'), ('Valeria', 'Bondarenko'), ('Valeri', 'Zatulko'), ('Nadia', 'Kilani'), ('Karmelina', 'Rivera'), ('Anna', 'Cowan'), ('Nadine', 'Sanfilippo'), ('Maiko', 'Cook'), ('Zuzana', 'Kucova'), ('Valentina', 'Rossi'), ('Marisa', 'Tseng'), ('Tekeme', 'Ekios'), ('Lucy', 'Francis'), ('Sivan', 'Paz'), ('Dina', 'Khalil'), ('Tomoko', 'Yonemura'), ('Eun Mi', 'Oh'), ('Caylan', 'Leslie'), ('Magdalena', 'Bilova'), ('Michaela', 'Larsson'), ('Christine', 'Pape Nielsen'), ('Varita', 'Sureephong'), ('Ashley', 'Nations Raju'), ('Junri', 'Namigata'), ('Leonita', 'Girsang'), ('Aradhana', 'Sarohia'), ('Sanela', 'Kunovac'), ('Lucia', 'Halty Barrutieta'), ('Isha', 'Chopra'), ('Arithzi', 'Vanzzini'), ('Katherine', 'Laidler'), ('Ioana', 'Paun'), ('Katerina', 'Stamatopoulou'), ('Aparna', 'Singh'), ('Elizabeth', 'Brito'), ('Mariana', 'Quintanilla'), ('Daria', 'Panova'), ('Dominika', 'Luzarova'), ('Camille', 'Gely'), ('Bettina', 'Roberts'), ('Nelyuri', 'Calvo'), ('Marie', 'Combemorel'), ('Lucy', 'Ikic'), ('Harmonie', 'Fiacchi'), ('Nikhila', 'Palat'), ('Li', 'Huang'), ('Rosangela', 'Martinez'), ('Karla', 'Jana'), ('Alejandra', 'Franco'), ('Karla', 'Mraz'), ('Francesca', 'Tancredi'), ('Emily', 'Foster'), ('Anabel', 'Medina Garrigues'), ('Emily', 'Hewson'), ('Giulia', 'Meruzzi'), ('Elena', 'Kovalchuk'), ('Salma', 'Ben Mahmoud'), ('Sarah Jane', 'Connelly'), ('Natalie', 'Neri'), ('Jemima', 'King'), ('Audrey', 'Hernandez'), ('Carla', 'Prieto'), ('Barbara', 'Orlai'), ('Dominique', 'Rosenberg'), ('Nicola', 'Trinder'), ('Rosa', 'Gajic'), ('Lindsay', 'Ferrell'), ('Maria Jose', 'Martinez Sanchez'), ('Maria', 'Nieto'), ('Utako', 'Suzuki'), ('Celine', 'Francois'), ('Marine', 'Petit'), ('Anna', 'Pogosova'), ('Joanna', 'Furdyna'), ('Kasumi', 'Aiko'), ('Julia', 'Schruff'), ('Elodie', 'Naegellen'), ('Zerene', 'Reyes'), ('Mylie', 'Gillet'), ('Harsimran Kaur', 'Bedi'), ('Rocio', 'Cupeiro'), ('Eka', 'Vepkhvadze'), ('Katerina', 'Romanenko'), ('Charlotte', 'Wallace'), ('Cattaleeya', 'Wisesrat'), ('Bianka', 'Lamade'), ('Veronika', 'Subertova'), ('Tereza', 'Simonian'), ('In Young', 'Chang'), ('Jinal', 'Patel'), ('Lama', 'Daouk'), ('Yulia', 'Mirna'), ('Nadine', 'Schlotterer'), ('Sarah', 'Dinkelmann'), ('Despina', 'Toulgaridou'), ('Beatriz', 'Cabrera Rosendo'), ('Edit', 'Bagoly'), ('Thu Tuyen', 'Pham Nhu'), ('Lucie', 'Ruskova'), ('Anna', 'Markovich'), ('Emma', 'Tullett'), ('Tiffany', 'Eklov'), ('Claudia', 'Oliva'), ('Sanja', 'Jukic'), ('Urska', 'Vesenjak'), ('Masa', 'Vesenjak'), ('Catherine', 'Hortala'), ('Elisa', 'Belleri'), ('Lauren', 'Fisher'), ('An Na', 'Lee'), ('Jennifer', 'Longin'), ('Maike', 'Kampschulte'), ('Rachel', 'Shweky'), ('Kathleen', 'Blaszak'), ('Sabrina', 'Vogt'), ('Samantha', 'Lucas'), ('Ilona', 'Jarkova'), ('Eleni', 'Daniilidou'), ('Elsa', 'Oriain'), ('Niki', 'Williams'), ('Neus', 'Sole'), ('Stephanie', 'Price'), ('Xia', 'Sheng'), ('Tracey', 'Oconnor'), ('Marina', 'Fileva'), ('Bridget', 'Chidi'), ('Davina', 'Mendiburu'), ('Mounia', 'Hassib'), ('Courtney', 'Nagle'), ('Eunice', 'Paravicini'), ('Tereza', 'Szafnerova'), ('Jasmin', 'Notdurfter'), ('Alexandra', 'Zotta'), ('Chattida', 'Thimjapo'), ('Francesca', 'Cicciu'), ('Maja', 'Mlakar'), ('Lucia', 'Halty'), ('Dominika', 'Nemcovicova'), ('Lucia', 'Struharova'), ('Annat', 'El Azari'), ('Blessing', 'Anuna'), ('Wendy', 'Galan Dominguez'), ('Dolunay', 'Soykan'), ('Mayumi', 'Yamamoto'), ('Carolina', 'Guilliano'), ('Martina', 'Muller'), ('Razalia', 'Phethu'), ('Katarina', 'Basternakova'), ('Goulnara', 'Fattakhetdinova'), ('Vlatka', 'Jovanovic'), ('Valeria', 'Macloughlin'), ('Etsuko', 'Kitazaki'), ('Albertina', 'Gandara'), ('Mudarwati', 'Mudarwati'), ('Rakha', 'Mohan'), ('Nathalie', 'Vierin'), ('Stephanie', 'Bernadel'), ('Bernadette', 'Bayani'), ('Isabel', 'Collischonn'), ('Raadhae', 'Svarupa'), ('Cassandra', 'Barr'), ('Pamela', 'Van Boekel'), ('Pascale', 'Veraverbeke'), ('Yasmin', 'El Kashef'), ('Amanda', 'Mang'), ('Diana', 'Martin'), ('Melinda', 'Czink'), ('Kumiko', 'Iijima'), ('Gabriela', 'Zingman'), ('Johanna', 'Zingman'), ('Safa', 'Safar'), ('Diana', 'Vuchinger'), ('Simone', 'Stohr'), ('Anna', 'Bentzer'), ('Tatyana', 'Bezukladnikova'), ('Anna', 'Nefedova'), ('Mia', 'Paavilainen'), ('Violeta', 'Fabe Martin'), ('Mitsuko', 'Ise'), ('Kerry', 'Rudman'), ('Rocio', 'Gonzalez'), ('Bettina', 'Niedhart'), ('Veronika', 'Levchenko'), ('Kim', 'Kambic'), ('Nida', 'Waseem'), ('Goda', 'Kuliesyte'), ('Rita', 'Tarjan'), ('Barbora', 'Sukova'), ('Tajana', 'Mlakar'), ('Lourdes', 'Gaona Gonzalez'), ('Ana', 'Mise'), ('Erika', 'Villalobos Morsink'), ('Ekaterina', 'Kuznetsova'), ('Arantxa', 'Parra Santonja'), ('Caroline', 'Maes'), ('Katiuscia', 'Del Vecchio'), ('Kate', 'Hole'), ('Christie', 'Agugbom'), ('Zorana', 'Stefanovic'), ('Christy', 'Mbadiwe'), ('Sandra', 'Klemenschits'), ('Daniela', 'Klemenschits'), ('Enrica', 'Ditta'), ('Annalisa', 'Bona'), ('Deborah', 'Hill'), ('Thuy Linh', 'Tran'), ('Olivia', 'Sanchez'), ('Carla', 'Andrade'), ('Aleksandra', 'Srndovic'), ('Lindsay', 'Martin'), ('Alyssa', 'Cohen'), ('Irena', 'Noc'), ('Anisoara', 'Popescu'), ('Rose', 'Onoja'), ('Agnese', 'Zucchini'), ('Dan Dan', 'Jiang'), ('Angela', 'Arean'), ('Melinda', 'Malouli'), ('Lauren', 'Colalillo'), ('Viviana', 'Rojas Millan'), ('Fabienne', 'Vielle Grosjean'), ('Estefania', 'Rolon'), ('Erina', 'Akizu'), ('Tamara', 'Kikaleishvili'), ('Isabelle', 'Declercq'), ('Ekaterina', 'Kouznetchenkova'), ('Bethany', 'Griffin'), ('Alexandra', 'Mayrat'), ('Mariko', 'Fritz Krockow'), ('Kristina', 'Georgieva'), ('Tinatin', 'Turmanidze'), ('Lorena', 'Barbero'), ('Esther', 'Muscat'), ('Julie', 'Coin'), ('Femi', 'Odeyemi Musa'), ('Anna', 'Koumantou'), ('Luana', 'Magnani'), ('Maria Letizia', 'Zavagli'), ('Anushka', 'Rajiyah'), ('Lindsay', 'Dawaf'), ('Raquel', 'Kops Jones'), ('Margalita', 'Chakhnashvili'), ('Adriana', 'Ruiz'), ('Susanne', 'Wild'), ('Eman', 'Metwaly'), ('Tatiana', 'Perebiynis'), ('Ivana', 'Zupa'), ('Livia', 'Azzi'), ('Olga', 'Kalyuzhnaya'), ('Aleksandra', 'Kujawska'), ('Meriem', 'Addou'), ('Silvia', 'Gabba'), ('Anna', 'Yenyk'), ('Maki', 'Arai'), ('Jennifer', 'Schmidt'), ('Candice', 'Meyer'), ('Rachael', 'Irelewuyi'), ('Maria Alejandra', 'Garcia'), ('Ashley', 'Robards'), ('Ana', 'Timotic'), ('Trina', 'Singian'), ('Suchanun', 'Viratprasert'), ('Ceylan', 'Konuk'), ('Antonia', 'Steinmetz'), ('Asha', 'Burns'), ('Fernanda', 'Bini'), ('Jasna', 'Brnjakovic'), ('Gabriela', 'Moreira'), ('Annika', 'Weisse'), ('Marija', 'Serdarusic'), ('Isoke', 'Perry'), ('Lorenza', 'Vaschetto'), ('Gulay', 'Torgay'), ('Cristina', 'Santos'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Julia Octavia', 'Groblewski'), ('Anna', 'Alexeeva'), ('Andreea', 'Fusea'), ('Dina', 'Milosevic'), ('Ana', 'Cetnik'), ('Tania', 'Rivera'), ('Marie Perrine', 'Baudouin'), ('Jenny', 'Kuhn'), ('Suzi', 'Becvinovska'), ('Richele', 'Le Saldo'), ('Antonie', 'Steinmetz'), ('Sara', 'Sabry'), ('Marta', 'Marrero'), ('Lindsay', 'Cox'), ('Tamar', 'Zedginidze'), ('Thais', 'Schenck'), ('Mari', 'Mizuno'), ('Nina', 'Joksovic'), ('Ana Maria', 'Simanca'), ('Dea', 'Sumantri'), ('Monique', 'Adamczak'), ('Chris', 'Martinez Hernandez'), ('Viviana', 'Rivero'), ('Dan', 'Xiong'), ('Emmanuelle', 'Poncetta'), ('Marion', 'Lecas'), ('Dragana', 'Ognenovska'), ('Beatrice', 'Banila'), ('Lorena Ivette', 'Arias Rodriguez'), ('Stephanie', 'Chu'), ('Kathleen', 'Mcgaffigan'), ('Cristina', 'Tonelli'), ('Virginie', 'Pichet'), ('Vivien', 'Weber'), ('Ji Fei', 'Yu'), ('Irene', 'Gutierrez'), ('Cristelle', 'Grier'), ('Katarzyna', 'Walukiewicz'), ('Jenneta', 'Halliyeva'), ('Milena', 'Schulz Gartner'), ('Sae', 'Kato'), ('Iveta', 'Benesova'), ('Yolandi', 'Terblanche Ward'), ('Shirley', 'Bernal'), ('Kristina', 'Jarkenstedt'), ('Wioletta', 'Kaczmarek'), ('Hana', 'Kraftova'), ('Kristina', 'Dundov'), ('Anna', 'Shchupak'), ('Alet', 'Boonzaaier'), ('Sandra', 'Jillyova'), ('Gulvona', 'Khodjaeva'), ('Monica', 'Acosta'), ('Diana', 'Costa'), ('Simona', 'Arghire'), ('Zuzana', 'Cerna'), ('Maria', 'Kravcenko'), ('Lourdes', 'Lopez'), ('Roberta', 'Frizzo'), ('Asami', 'Nishio'), ('Violetta', 'Bagrova'), ('Anuli', 'Okafor'), ('Anete', 'Rozkalne'), ('Silvia', 'Gutierrez Quiroga'), ('Beatrice', 'Spiganti'), ('Andre', 'Polasek'), ('Raluca', 'Ciochina'), ('Roberta', 'Vinci'), ('Cindra', 'Maharaj'), ('Cecilia', 'Helland'), ('Eugenia', 'Chialvo'), ('Harriet', 'Piercy'), ('Irena', 'Khomyk'), ('Jennie', 'Loow'), ('Trine', 'Bassett'), ('Jaslyn', 'Hewitt'), ('Melanie', 'Cohen'), ('Maryam', 'Mazaheri'), ('Macey', 'Breece'), ('Sari', 'Stegmann'), ('Maria Isabella', 'Ariza Sanz'), ('Katherine', 'Vymetal'), ('Davina', 'Duronio'), ('Lucie', 'Podskubova'), ('Wei Juan', 'Liu'), ('Nicole', 'Bouffler'), ('Lorena', 'Aparicio Vargas'), ('Daniela', 'Bertolo'), ('Inge', 'De Geest'), ('Linda', 'Fallon'), ('Priscila', 'Ortega'), ('Martina', 'Reiser'), ('Milica', 'Koprivica'), ('Irina', 'Bobrysheva'), ('Dong Bo', 'Lei'), ('Branka', 'Savic'), ('Maritza', 'Villalba Castro'), ('Jackeline', 'Jacome'), ('Nicole', 'Clerico'), ('Beauty', 'Oghenekevwe'), ('Daja', 'Bedanova'), ('Elena', 'Bovina'), ('Ana', 'Sismondini'), ('Anna', 'Rynarzewska'), ('Ariela', 'Primo'), ('Nato', 'Dolitze'), ('Deena Rose', 'Cruz'), ('Paloma', 'Castillo'), ('Magalie', 'Girard'), ('Rebecca', 'Pike'), ('Alejandra', 'Rivero'), ('Christelle', 'Antille'), ('Lyle', 'Cupido'), ('Mao', 'Yamanaka'), ('Daniela', 'Hebertova'), ('Jelena', 'Pandzic'), ('Lejla', 'Popobic'), ('Karin', 'Kues'), ('Stephanie', 'Cohen Aloro'), ('Kelly', 'Mccain'), ('Valerie', 'Verrier Diaconescu'), ('Barbara', 'Galletto'), ('Amanda', 'Sanches'), ('Maria', 'Husain'), ('Michela', 'Comune'), ('Vrushali', 'Gawankar'), ('Laurette', 'Van Den Knaap'), ('Ignacia', 'Marin'), ('Eugenia', 'Lepchenko'), ('Vanessa', 'Alonso Rodriguez'), ('Virginia', 'Romero Barrio'), ('Debbie', 'Larocque'), ('Ester', 'Lasheras Varade'), ('Suci', 'Bungaran'), ('Malgorzata', 'Kanabus'), ('Megan', 'Bradley'), ('Irini', 'Alevizopoulou'), ('Sheri', 'Esrock'), ('Anne', 'Lucas'), ('Virginie', 'Rabeau'), ('Segun', 'Lesi'), ('Cameron', 'Benjamin'), ('Jane', 'Odonoghue'), ('Ayano', 'Takeuchi'), ('Lenka', 'Potocarova'), ('Julie', 'Salla'), ('Marie Lisa', 'Loriga'), ('Teresa', 'Veneruso'), ('Alexis', 'King'), ('Audra', 'Falk'), ('Karla', 'Hall Gonzalez'), ('Chanelle', 'Kruger'), ('Liliana', 'Hung'), ('Nina', 'Zlender'), ('Natalie', 'Mikolich'), ('Kristel', 'Van Den Tillaart'), ('Sarah', 'Mcintyre'), ('Claudia', 'Argumedo'), ('Valentina', 'Caronti'), ('Shikha', 'Uberoi'), ('Stefania', 'Chieppa'), ('Mirem', 'Rico Nogales'), ('Eugenia', 'Subbotina'), ('Noemie', 'Ruffin'), ('Kellie', 'Browne'), ('Helena', 'Norfeldt'), ('Teodora', 'Mircheva'), ('Laura', 'Levan'), ('Ashley', 'Sims'), ('Bettina', 'Resch'), ('Vida Lina', 'Alpuerto'), ('Jelena', 'Dokic'), ('Georgia', 'Akrivopoulou'), ('Chun Yan', 'He'), ('Mia', 'Zecevic'), ('Mariem Nissaf', 'Bouchlaka'), ('Ioanna', 'Petratou'), ('Maria Fernanda', 'Alves'), ('Ioana', 'Gaspar'), ('Martina', 'Babakova'), ('Olga', 'Dzuba'), ('Daniela', 'Salomon'), ('Erin', 'Burdette'), ('Margarita', 'Akbacheva'), ('Jordanna', 'Seymour'), ('Kristin', 'Martinez'), ('Anja', 'Margetic'), ('Marina', 'Parashkevova'), ('Daniela', 'Hantuchova'), ('Florencia', 'Salvadores'), ('Petra', 'Vojtaskova'), ('Lauren', 'Stephens'), ('Lana', 'Popadic'), ('Cecilia', 'Cardenas'), ('Simin', 'Liu'), ('Tassia', 'Sono'), ('Nele', 'Landrieux'), ('Ekaterina', 'Kozhokhina'), ('Aline', 'Quintal'), ('Laetitia', 'Zembski'), ('Katrien', 'Scott'), ('Renata', 'Del Barco Matto'), ('Yoshiko', 'Kobayashi'), ('Tomoko', 'Nagahisa'), ('Evy', 'De Mesmaecker'), ('Anna', 'Chachua'), ('Mariana', 'Lopez Terribile'), ('Avril', 'Martinez'), ('Rocio', 'Lopez Pimentel'), ('Bettina', 'Pirker'), ('Giorgia', 'Brunetti'), ('Story', 'Tweedie Yates'), ('Suheil', 'Lizana'), ('Rachel', 'Cruickshank'), ('Andrea', 'Cooper'), ('Katie', 'Ruckert'), ('Neuza', 'Silva'), ('Kristel', 'Izquierdo'), ('Sofia', 'Brun'), ('Daniela', 'Covello'), ('Anne Valerie', 'Evain'), ('Vivian', 'Torrez'), ('Ashley', 'Kroh'), ('Giorgia', 'Nespoli'), ('Eudoxia', 'Delisavva'), ('Emily', 'Quin'), ('Lena', 'Sherbakov'), ('Laura', 'Puch'), ('Nishtha', 'Yadav'), ('Dianne', 'Hollands'), ('Tanja', 'Hirschauer'), ('Carmen', 'Torres'), ('Virginie', 'Razzano'), ('Irina', 'Delitz'), ('Maria Emilia', 'Salerni'), ('Constanze', 'Glockner'), ('Beti', 'Sekulovski'), ('Denise', 'Ferreira'), ('Judith', 'Diaz'), ('Yan Hua', 'Dong'), ('Natasha', 'Lucki'), ('Giulia', 'Baldoni'), ('Patricia', 'Starzyk'), ('Liga', 'Dekmeijere'), ('Elena', 'Tudor'), ('Barbara', 'Hoflinger'), ('Magdolna', 'Rekasi'), ('Yamini', 'Thukkaiandi'), ('Summer', 'Bhullar'), ('Norma', 'Flautero'), ('Kate', 'Boomershine'), ('Lauren', 'Breadmore'), ('Marta', 'Mir Portell'), ('Dinka', 'Hadzic'), ('Michela', 'Sala'), ('Desanka', 'Jovanovic'), ('Samanthi', 'Wijesekera'), ('Petia', 'Vousheva'), ('Zvezdelina', 'Mladenova'), ('Evgenia', 'Subbotina'), ('Borka', 'Majstorovic'), ('Petia', 'Voucheva'), ('Ceyda', 'Keyman'), ('Jane', 'Ioaba'), ('Paola', 'Guerrero'), ('Kanako', 'Kozawa'), ('Kim', 'Clijsters'), ('Yuliana', 'Fedak'), ('Carolina', 'Ojeda'), ('Jacqueline', 'Bohannon'), ('Rachel', 'Magory'), ('Eun Hye', 'Cho'), ('Melanie', 'Gerbasi'), ('Davilyn', 'Godinet'), ('Bethzabe', 'Magadan'), ('Arpi', 'Kojian'), ('Ivana', 'Sokac'), ('Regina', 'Temez'), ('Sophie', 'Douchet'), ('Ana Maria', 'Zuleta'), ('Hande', 'Gorur'), ('Krisel', 'Sverko'), ('Monique', 'Groen'), ('Carmen', 'Marquez'), ('Nan Nan', 'Liu'), ('Natalia', 'Lifshitz'), ('Anna', 'Ioannou'), ('Robin', 'Stephenson'), ('Fernanda', 'Oliveira Da Silva'), ('Estefania', 'Daubiol'), ('Ilona', 'Somers'), ('Lore', 'De Lille'), ('Teresina', 'Paz Soldan'), ('Sayaka', 'Yoshino'), ('Yulia', 'Klimchenko'), ('Florencia', 'Romani'), ('Yuri', 'Kasuya'), ('Ketino', 'Akhvlediani'), ('Jessica', 'Mckeown'), ('Ami', 'Fujiwara'), ('Urszula', 'Owsiak'), ('Yomna', 'Farid'), ('Genevieve', 'Charron'), ('Leanne', 'Rutherford'), ('Amandine', 'Clio'), ('Melissa', 'Berry'), ('Jae Eun', 'Kim'), ('Sohvi', 'Sundqvist'), ('Annabel', 'Blow'), ('Joanna', 'Zyndzo'), ('Jennifer', 'Langer'), ('Natalia', 'Tsitouras'), ('Jacqueline', 'Frohlich'), ('Cecilia', 'Varela'), ('Flor', 'Bayon'), ('Jie', 'Zheng'), ('Tihana', 'Pochobradsky'), ('Chiara', 'Gonnelli'), ('Daria', 'Potapova'), ('Klara', 'Hladka'), ('Tessy', 'Van De Ven'), ('Melody', 'Paschal'), ('Rachel', 'Crismond'), ('Francesca', 'Lancini'), ('Danielle', 'Plant'), ('Leire', 'Etayo'), ('Julia', 'Vakulenko'), ('Silvia', 'Disderi'), ('Martina', 'Dettore'), ('Yukari', 'Ochiai'), ('Julia', 'Nogueira'), ('Oksana', 'Karyshkova'), ('Belen', 'Pandre'), ('Patricia', 'Van Worcum'), ('Mariela', 'Castro'), ('Boglarka', 'Berecz'), ('Maria Paz', 'Orellana'), ('Raluca Daniela', 'Gheorghe'), ('Celine', 'Parun'), ('Tijana', 'Stojkovic'), ('Erika', 'Valdes'), ('Emma', 'Murphy'), ('Marie', 'Vallety'), ('Caroline Ann', 'Basu'), ('Mamiko', 'Kawaguchi'), ('Lucia', 'Lazo'), ('Marie', 'Matrka'), ('Raluca', 'Moldovan'), ('Masayo', 'Hosokawa'), ('Irina', 'Mourachkintseva'), ('Saras', 'Arasu'), ('Alena', 'Dvornikova'), ('Julia', 'Smith'), ('Tadeja', 'Sibila'), ('Kimberly', 'Buick'), ('Romina', 'Sceats'), ('Marcella', 'Campana'), ('Marisa', 'Howell'), ('Victoria', 'Chavleishvili'), ('Debora', 'Carmassi'), ('Lucia', 'Obysovska'), ('Milica', 'Jeremic'), ('Jennifer', 'Miccoli'), ('Nikita', 'Bhardwaj'), ('Siham Soumeya', 'Ben Nacer'), ('Karin', 'Ionesco'), ('Agathe', 'Macarez'), ('Thi Kim Loi', 'Tran'), ('Lisette', 'Pereira Aguilar'), ('Elisa', 'Balsamo'), ('Paule Andree', 'Levasseur'), ('Monika', 'Schneider'), ('Suzana', 'Maksovic'), ('Donna', 'Mc Intyre'), ('Nandini', 'Perumal'), ('Lavinia', 'Toader'), ('Tatjana', 'Nossik'), ('Elena', 'Baltacha'), ('Edina', 'Gobol'), ('Line', 'Elvstrom Ekner'), ('Yuka', 'Hatano'), ('Alima', 'Mohamed'), ('Christine', 'Alford'), ('Laura', 'Figuerola Foix'), ('Catherine', 'Gunn'), ('Claudine', 'Schaul'), ('Hong Thanh', 'Tang'), ('Maria Paz', 'Orero'), ('Ayaka', 'Maekawa'), ('Lucila', 'Di Carlo'), ('Anya', 'Moyston'), ('Anabella', 'Duque'), ('Adriana', 'Jerabek'), ('Maja', 'Kovacek'), ('Komugi', 'Matsui'), ('Michelle', 'Grobby'), ('Leeza', 'Rooks'), ('Aditi', 'Karanjkar'), ('Serra', 'Olgac'), ('Daniela', 'Murselovic'), ('Aika', 'Nonaka'), ('Klara', 'Jarova'), ('Ruxandra', 'Marin'), ('Chiari', 'Aragaki'), ('Jing Jing', 'Liu'), ('Ivana', 'Abramovic'), ('Elodie', 'Rogge Dietrich'), ('Ziarla', 'Battad'), ('Esther', 'Hijosa Basarte'), ('Ena', 'Brankovic'), ('Margit', 'Ruutel'), ('Julia', 'Biffar'), ('Blair', 'Di Sesa'), ('Miroslava', 'Velevska'), ('Yimara', 'Figueroa'), ('Nadine', 'Hassinger'), ('Marta', 'Simic'), ('Mitsumi', 'Kawasaki'), ('Maria Paola', 'Aranguren'), ('Olga', 'Borisova'), ('Cheli', 'Bargil'), ('Ryoko', 'Watanabe'), ('Annette', 'Kolb'), ('Zihaida', 'Shantalova'), ('Hsin Chieh', 'Chang'), ('Anne', 'Keothavong'), ('Zita', 'Horanyi'), ('Radhika', 'Ravji'), ('Ksenia', 'Gorbunova'), ('Maria Teresa', 'Scott'), ('Sukriti', 'Patnaik'), ('Iva', 'Saric'), ('Angelica Maria', 'Torres'), ('Katri', 'Miller'), ('Nichala', 'Reddy Boda'), ('Orobosa', 'Amadin'), ('Jessica', 'Weyreuter'), ('Alexia', 'Malbran'), ('Eri', 'Nozawa'), ('Alexandra', 'Nieto'), ('Karin', 'Coetzee'), ('Alexandra', 'Popa'), ('Cristina', 'Sampaio'), ('Alina Iuliana', 'Virsa'), ('Sangaram', 'Shangamitra'), ('Cecilia', 'Poveda'), ('Marina', 'Stanimirov'), ('Yvonne', 'Meusburger'), ('Prapaiphan', 'Kansuthi'), ('Kim Anh', 'Nguyen'), ('Elena', 'Poliakova'), ('Liza', 'Viplav'), ('Selma', 'Andrade'), ('Renata', 'Voracova'), ('Kamila', 'Dadakhodjaeva'), ('Jitske', 'Frankenhuis'), ('Diana', 'Espinal'), ('Catalina', 'Isaza'), ('Irene', 'Mani'), ('Lubomira', 'Kurhajcova'), ('April', 'Pfannestiel'), ('Vishika', 'Chhetri'), ('Myriam', 'Cueva'), ('Megan', 'Racette'), ('Leigh', 'Shelton'), ('Yevgeniya', 'Barysheva'), ('Veronica', 'Spiegel'), ('Pavia', 'Schnattingerova'), ('Yen Hua', 'Lu'), ('Yuliya', 'Beygelzimer'), ('Ghita', 'Mhaoud'), ('Lidia', 'Lopez Companys'), ('Eveline', 'Rusdianto'), ('Juan Juan', 'Cheng'), ('Asimina', 'Kaplani'), ('Ana Maria', 'Mora'), ('Feriel', 'Esseghir'), ('Alexandra', 'Kravets'), ('Maria', 'Pes'), ('Petra', 'Kostelnikova'), ('Neyssa', 'Etienne'), ('Brenda', 'Coassolo'), ('Nina', 'Egger'), ('Ekaterina', 'Chatzisavidou'), ('Susanna', 'Lingman'), ('Neda', 'Mihneva'), ('Maria', 'Vlachou'), ('Andreea Mihaela', 'Matei'), ('Rattiya', 'Hiranrat'), ('Nicolette', 'Mechem'), ('Giulia', 'Cesari'), ('Natalia', 'Dziamidzenka'), ('Irene', 'George'), ('Natalia', 'Zabala'), ('Aniko', 'Kapros'), ('Leonie', 'Mekel'), ('Kate', 'Jolson'), ('Maria', 'Ivanov'), ('Naoe', 'Nabetani'), ('Sladana', 'Stankovic'), ('Alessandra', 'Esposito'), ('Karina', 'Torres Ferrer'), ('Dalia', 'Coutry'), ('Nermien', 'Abaza'), ('Elena', 'Kokkinaki'), ('Klara', 'Petersson'), ('Kendra', 'Strohm'), ('Christina', 'Horiatopoulos'), ('Maria Eugenia', 'Brito'), ('Barbara', 'Murga'), ('Ana Cecilia', 'Trevino'), ('Ekaterina', 'Ostapenko'), ('Cecilia', 'Quarracino'), ('Doria', 'Khetib'), ('Kathryn', 'Bentley'), ('Gianna', 'Doz'), ('Julia', 'Acs'), ('Anna', 'Anikanova'), ('Sabrina', 'Peppl'), ('Nargisa', 'Akramova'), ('Adriana', 'Herran Giraldo'), ('Julia', 'Oussanova'), ('Imane', 'Bachi'), ('Berveine', 'Mohammed'), ('Rati', 'Kumar'), ('Bharathy', 'Parthasarathy'), ('Patricia', 'Alonso'), ('Zsuzsanna', 'Fodor'), ('Timberly', 'Greenly'), ('Deborah', 'Montero'), ('Joanna', 'Carlson'), ('Nicole', 'Kriz'), ('Maria Rosa', 'Sitja Gibert'), ('Sabrina', 'Eisenberg'), ('Barbara', 'Polidoro'), ('Lenka', 'Snajdrova'), ('Susanne', 'Aigner'), ('Hadas', 'Zabusky'), ('Ana Lucia', 'Migliarini De Leon'), ('Christine', 'Stastny'), ('Monica', 'Purice'), ('Elizabeth', 'Bondi'), ('Sana', 'Ben Salah'), ('Renata', 'Caceres'), ('Luisa', 'Cowper'), ('Hitomi', 'Konno'), ('Mia', 'Marovic'), ('Jimena', 'Alvarez'), ('Kalpita', 'Raje'), ('Monika', 'Hohenecker'), ('Franziska', 'Etzel'), ('Danielle', 'Moita'), ('Beatriz', 'Becker'), ('Ingeborg', 'Kerkhoven'), ('Karina', 'Koche'), ('Maria Vanina', 'Garcia Sokol'), ('Michelle', 'Giang'), ('Aiko', 'Nakamura'), ('Geeta', 'Manohar'), ('Daniela', 'Alvarez'), ('Tiffany', 'Smith'), ('Ridhina', 'Parekh'), ('Asha', 'Jaja'), ('Carmen Raluca', 'Tibuleac'), ('Iulia', 'Rozgon'), ('Klara', 'Zrustova'), ('Ancuta', 'Gadalean'), ('Prariyawan', 'Ratanakrong'), ('Rachel', 'Halligan'), ('Maria Jose', 'Dronda Prados'), ('Radha', 'Devendrappa'), ('Sevia', 'Gonca'), ('Emmanuelle', 'Edon'), ('Mareen', 'Beermann'), ('Giorgia', 'Buchanan'), ('Anupama', 'Rajur'), ('Gloria', 'Perfetti'), ('Carlotta', 'Campus'), ('Tatevik', 'Babayan'), ('Nandita', 'Chandrasekar'), ('Ji Youn', 'Lee'), ('Bruna', 'Discordia'), ('Mika', 'Tanaka'), ('Yan Ze', 'Xie'), ('Jackie', 'Carleton'), ('Anne Priska', 'Schaefer'), ('Marie France', 'Lord Andrade'), ('Melissa', 'Schaub'), ('Yan Sr', 'Zhang'), ('Tina', 'Schiechtl'), ('Cynthia', 'Goulet'), ('Marianna', 'Laasanen'), ('Yukiyo', 'Hara'), ('Li', 'Yan'), ('Galina', 'Fokina'), ('Sylwia', 'Domanska'), ('Ayumi', 'Ichikawa'), ('Francesca', 'Savinelli'), ('Petroena', 'Fong'), ('Elise', 'Tamaela'), ('Alice', 'Barnes'), ('Alice', 'Joy'), ('Akiko', 'Yonemura'), ('Zuzana', 'Melicherova'), ('Ingunn', 'Eiriksdottir'), ('Wen Hao', 'Wu'), ('Jessie', 'De Vries'), ('Sara', 'Badran'), ('Rankin', 'Williams'), ('Dan', 'Yu'), ('Clara', 'Rios'), ('Petra', 'Baksa'), ('Daniela', 'Munoz Gallegos'), ('Vanessa', 'Nieto'), ('Andrea', 'Liniger'), ('Justine', 'Walsh'), ('Marie Pier', 'Pouliot'), ('Natalia', 'Garbellotto'), ('Mouna', 'Sabri'), ('Melissa', 'Torres Sandoval'), ('Marta', 'Sanchez Soto'), ('Caroline', 'Neves'), ('Rocio', 'Villar Gonzalez'), ('Mia', 'Van Rooyen'), ('Bit Na', 'Lee'), ('Nancy', 'Cazares'), ('Nadezda', 'Samoylo'), ('Dvora', 'Marsha'), ('Julia', 'Roca Valverde'), ('Rebecca', 'Rankin'), ('Yao', 'Zhang'), ('Emily', 'Arnott'), ('Hea Mi', 'Kim'), ('Catarina', 'Ferreira'), ('Merve', 'Koksal'), ('Maarit', 'Nieminen'), ('Ludivine', 'Cassagne'), ('Silvia', 'Tiscareno'), ('Masha', 'Bayser'), ('Rocio', 'Govantes'), ('Erika', 'Miyamoto'), ('Chantelle', 'Simpson'), ('Paula', 'Marama'), ('Natalia', 'Coronel'), ('Diana', 'Julianto'), ('Assia', 'Halo'), ('Clodagh', 'Mcmorrow'), ('Elena', 'Vianello'), ('Helen', 'Broome'), ('Sofia', 'Arvidsson'), ('Rossella', 'Sartore'), ('Mio', 'Kinjo'), ('Cheng Jie', 'Lu'), ('Severine', 'Dhondt'), ('Jennifer', 'Magley'), ('Sayaka', 'Takahara'), ('Kathrin', 'Woerle'), ('Yulia', 'Ustyuzhanina'), ('Daniela', 'Martinez'), ('Gergana', 'Ganeva'), ('Holly', 'Mckee'), ('Crystel', 'Mulder'), ('Yevheniia', 'Savranska'), ('Sofia', 'Holden'), ('Hsiao Han', 'Chao'), ('Matulanda', 'Lumanauw'), ('Rediet', 'Kefyalew'), ('Laura', 'Morales Hernandez'), ('Virginie', 'Oulevay'), ('Camille', 'Dubois'), ('Sonia', 'Iacovacci'), ('Elena', 'Toulgaridou'), ('Majen', 'Immink'), ('Kei', 'Sekine'), ('Tanya', 'Volkova'), ('Vana', 'Mrazovic'), ('Mansi', 'Majeji'), ('Bronwyn', 'Williams'), ('Noelia', 'Leon'), ('Jenny', 'Zambrano'), ('Jessica', 'Simosa'), ('Gloriann', 'Lopez'), ('Megan', 'Emmett'), ('Raissa', 'Gourevitch'), ('Jana', 'Cabak'), ('Nathalie', 'Roels'), ('Shu Jin', 'Xie'), ('Aminat', 'Taiwo'), ('Rachel', 'Janssen'), ('Marie Gaiane', 'Mikaelian'), ('Kira', 'Bezverkova'), ('Tereza', 'Sandova'), ('Tsitsi', 'Masviba'), ('Nikolina', 'Hrankova'), ('Patricia', 'Munoz Santana'), ('Ninja', 'Pfuetzenreuter'), ('Hanna', 'Nooni'), ('Melanie', 'Marois'), ('Haruka', 'Nakamura'), ('Hollie', 'Bees'), ('Merve', 'Asimgil'), ('Marzia', 'Carchesio'), ('Jaclyn', 'Lucas'), ('Karin', 'Lems'), ('Audrey', 'Wahl'), ('Chanelle', 'Scheepers'), ('Mi Hee', 'Jung'), ('Yik Hui', 'Leow'), ('Lindsey', 'Puchyr'), ('Ana Milena', 'Ramirez'), ('Michaela', 'Bjornstrom'), ('Erika', 'Reggiane'), ('Charise', 'Godoy'), ('Caroline', 'Raba'), ('Elena', 'Mitrofanova'), ('Eveline', 'Vanhyfte'), ('Monika', 'Peciulionyte'), ('Nelly', 'Maillard'), ('Caroline', 'Skrzypczyk'), ('Giorgia', 'Mortello'), ('Mariana', 'Junqueira'), ('Nikkita', 'Fountain'), ('Veronica', 'Grigis'), ('Bintou', 'Barry'), ('Maretha', 'Van Niekerk'), ('Mayu', 'Araki'), ('Laura', 'Vignoni'), ('Mariana Pires', 'Junqueira'), ('Christina', 'Obermoser'), ('Magdalena', 'Von Geyr'), ('Marianna', 'Keranen'), ('Angela', 'Piedrahita'), ('Samantha', 'Stosur'), ('Kim', 'Rudman'), ('Marion', 'Leuillier'), ('Jean', 'Willmann'), ('Yuka', 'Matsumoto'), ('Melanie', 'Roy'), ('Rowena', 'Baierl'), ('Ema', 'Janaskova'), ('Dorian', 'Driessen'), ('Bo', 'Verhulsdonk'), ('Pascale', 'Leroy'), ('Yael', 'Glitzenstein'), ('Alexandra', 'Zerkalova'), ('Nisrine', 'Hajbane'), ('Diana Nur', 'Fatimah'), ('Darija', 'Jurak'), ('Vanessa', 'Valdivia'), ('Caroline', 'Hartmann'), ('Michaela', 'Beck'), ('Aleksandra', 'Kostikova'), ('Tatiana', 'Tamburini'), ('Hazar', 'Sidki'), ('Miki', 'Mori'), ('Haruka', 'Fujishiro'), ('Jorgelina', 'Barrera'), ('Samrita', 'Sekar'), ('Elena', 'Silina'), ('Cristina', 'Cabello Gonzalez'), ('Seble', 'Woldegebriel'), ('Mamatha', 'Nandakumar'), ('Monika', 'Krauze'), ('Lauren', 'Cheung'), ('Kyung Mi', 'Noh'), ('Ashlesha', 'Lokhande'), ('Shilpa', 'Joshi'), ('Emelie', 'Reutersward'), ('Dominika', 'Nociarova'), ('Alexandra', 'Zadoryn'), ('Sue', 'Rossano'), ('Sheenagh', 'Cosgrove'), ('Volha', 'Dubovik'), ('Ragini', 'Vimal'), ('Zarah', 'De Silva'), ('Yoo Mi', 'Jung'), ('Wilawan', 'Choptang'), ('Sunna Kristina', 'Barthel'), ('Maria', 'Perez Garcia'), ('Nuria', 'Roig Tost'), ('Emilie', 'Bacquet'), ('Celina', 'Grondin'), ('Miho', 'Tanaka'), ('Katy', 'Sauboi'), ('Frederique', 'Desire'), ('Katherine', 'Rammo'), ('Andrea', 'Riedlmajerova'), ('Zuzana', 'Palovic'), ('Nino', 'Esebua'), ('Mojca', 'Mileta'), ('Inga', 'Prodinger'), ('Daniela', 'Lopez'), ('Julie', 'Merle'), ('Lina', 'Krasnoroutskaya'), ('Virginia', 'Tomatis'), ('Giorgia', 'Mondani'), ('Christelle', 'Gerin'), ('Nelly', 'Iglesias Vazquez'), ('Joanna', 'Sakowicz Kostecka'), ('Casey', 'Cross'), ('Mireia', 'Gol Alamo'), ('Davinia', 'Lobbinger'), ('Marketa', 'Pastikova'), ('Aspasia', 'Sotiriadou'), ('Martina', 'Matouskova'), ('Ryo', 'Takahashi'), ('Nasheli', 'Martinez'), ('Sanja', 'Todorovic'), ('Pornrampha', 'Pramualsuk'), ('Bianca', 'Acquistapace'), ('Desire', 'Roset Torres'), ('Mariana', 'Melo'), ('Miriam', 'Sommer'), ('Daniela', 'Casanova'), ('Natasa', 'Sijakovic'), ('Sofia', 'Haggstrom'), ('Dominique', 'Van Boekel'), ('Bojana', 'Minic'), ('Paula', 'Fondevila Castro'), ('Estefania', 'Aldana Estremera'), ('Gaia', 'Tanganelli'), ('Sayuri', 'Takeshima'), ('Judit', 'Llorens'), ('Irina', 'Bulykina'), ('Nicoleta', 'Ratiu'), ('Julie', 'Smekodub'), ('Douglas', 'Wink'), ('Kana', 'Okawa'), ('Luisa', 'Obando'), ('Sabrina', 'Echavarria'), ('Kelly', 'Taylor'), ('Katharina', 'Alberti'), ('Natalia', 'Bogdanova'), ('Rebecca', 'Dandeniya'), ('Meryem', 'Lahlou'), ('Mia', 'Kurek'), ('Eleftheria', 'Makromaridou'), ('Bruna', 'Gelbecke'), ('Raquel', 'Martins'), ('Joneca', 'Meurling'), ('Barbora', 'Strnadova'), ('Karishma', 'Mulay'), ('Chen', 'Li'), ('Priyanka', 'Mehta'), ('Caroline', 'Korsawe'), ('Rebecca', 'Fong'), ('Bettina', 'Cremasco'), ('Carine', 'Vermeulen'), ('Shereen', 'Youssef'), ('Aibika', 'Kalsarieva'), ('Amani', 'Khalifa'), ('Katharina', 'Jacob'), ('Lucia', 'Henkle Gomez'), ('Melissa', 'Applebaum'), ('Claudia', 'Corral'), ('Iveta', 'Gerlova'), ('Anca', 'Anastasiu'), ('Carmela', 'Carro'), ('Eva', 'Hrdinova'), ('Tereza', 'Veverkova'), ('Sarah', 'Tami Masi'), ('Katherina', 'Trumpf'), ('Laura', 'Ganzer'), ('Sae Mi', 'Lim'), ('Elizaveta', 'Avdeeva'), ('Ani', 'Nazari'), ('Sarah', 'Wright'), ('Kirsty', 'Mcrae'), ('Maria Pilar', 'Sanchez Alayeto'), ('Maria Jose', 'Sanchez Alayeto'), ('Jessica', 'Stein'), ('Fernanda', 'Luiz'), ('Abiodun', 'Bamigbade'), ('Constanze', 'Steiner'), ('Akgul', 'Amanmuradova'), ('Mariapia', 'Quagliozzi'), ('Iulia', 'Dogarescu'), ('Maria', 'Penkova'), ('Thelara', 'Louw'), ('Angelina', 'Minova'), ('Aurelie', 'Bejar'), ('Kristen', 'Schlukebir'), ('Sharon', 'Marin'), ('Natsumi', 'Hamamura'), ('Elena', 'Baranova'), ('Petra', 'Dizdar'), ('Vanessa', 'Ridolfo'), ('Elisabeth', 'Bahn'), ('Nelly', 'Dvornicka'), ('Julie Ann', 'Cadiente'), ('Daniela', 'Kocetkova'), ('Carolina', 'Pimenta'), ('Yulia', 'Fitri'), ('Elena', 'Uzunova'), ('Sayaka', 'Yoshimoto'), ('Lizanne', 'Marais'), ('Amber', 'Liu'), ('Shenay', 'Perry'), ('Eva', 'Wang'), ('Claudia', 'Calderon'), ('Anna', 'Hawkins'), ('Daniela', 'Bercek'), ('Jeong Eun', 'Park'), ('Uschi', 'Van Doren'), ('Lucy', 'Brooks'), ('Michelle', 'Gerards'), ('Piia', 'Suomalainen'), ('Georgette', 'Wright'), ('Milana', 'Borisev'), ('Marjorie', 'Sindal'), ('Marina', 'Tishkova'), ('Hayley', 'Rudman'), ('Elin', 'Stahl Johansson'), ('Mai', 'Fujii'), ('Lenka', 'Dlhopolcova'), ('Emily', 'Webley Smith'), ('Julia', 'Babilon'), ('Dominika', 'Dieskova'), ('Sophie Anne', 'Cerbon'), ('Khushleen', 'Bains'), ('Alexandra', 'Mikhailova'), ('Maria Jose', 'Argeri'), ('Tomoyo', 'Takagishi'), ('Gabrielle', 'Baker'), ('Danielle', 'Wiggins'), ('Patrizia', 'Cacciaguerra'), ('Noriko', 'Saruta'), ('Irina', 'Smirnova'), ('Azusa', 'Konishi'), ('Diana', 'Srebrovic'), ('Ajda', 'Brumen'), ('Nadzeya', 'Lysak'), ('Sylwia', 'Ziolkowska'), ('Nina', 'Suvak'), ('Saray', 'Pino Vega'), ('Karolina', 'Nowak'), ('Gabriela', 'Amezaga'), ('Reina', 'Ishihara'), ('Essi', 'Laine'), ('Viola', 'Wacker'), ('Aleksandra', 'Cekic'), ('Ana', 'Vrljic'), ('Servane', 'Delobelle'), ('Asli', 'Turksoy'), ('Jana', 'Deylova'), ('Tanner', 'Cochran'), ('Rocio', 'Amadio'), ('Miranda', 'Foley'), ('Sandra', 'Spadzinski'), ('Verena', 'Beller'), ('Danielle', 'Steinberg'), ('Eva Maria', 'Hoch'), ('Nathalie', 'Garcia Jaminet'), ('Samantha', 'Hammond'), ('Azzurra', 'Fonsmorti'), ('Tamara', 'Day'), ('Hitomi', 'Fujii'), ('Tania', 'Aguirre'), ('Alona', 'Bondarenko'), ('Eva', 'Birnerova'), ('Nicola', 'Slater'), ('Shayma Seif', 'El Sisi'), ('Pamela', 'Fogel'), ('Dorottya', 'Magas'), ('Kelly', 'Mcnabney'), ('Lara', 'Del Saz'), ('Valentina', 'Sulpizio'), ('Lara', 'Del Saz De Soto'), ('Omolola', 'Oredugba'), ('Zsofia', 'Szabo'), ('Danielle', 'Downey'), ('Mihaela', 'Sicoe'), ('Katja', 'Blocker'), ('Ling', 'Yan'), ('Montserrat', 'Ferrer'), ('Cristina', 'Mecho Ruiz'), ('Anna', 'Lubinsky'), ('Lilly', 'Cal Fong'), ('Petra', 'Bajerovska'), ('Pavlina', 'Ticha'), ('Dina', 'Naffa'), ('Svetlana', 'Kouzmenko'), ('Elena', 'Besedova'), ('Meghha', 'Vakaria'), ('Helena', 'Besovic'), ('Patricia', 'Holzman'), ('Chullaluck', 'Phocharoen'), ('Farida', 'Agustina'), ('Purnima', 'Shakaalya'), ('Tetiana', 'Luzhanska'), ('Zuzana', 'Zemenova'), ('Vera', 'Zvonareva'), ('Ji Young', 'Lee'), ('Mariana', 'Conde'), ('Natasa', 'Krklec Jerinkic'), ('Iza', 'Ferreira'), ('Stephanie', 'Greau'), ('Angela', 'Ahtemenciuc'), ('Laura', 'Harkness'), ('Muattar', 'Abdukhalikova'), ('Georgia', 'Gonzalez Massot'), ('Yuko', 'Uchida'), ('Hilda', 'Zuleta Cabrera'), ('Christian', 'Thompson'), ('Catrina', 'Thompson'), ('Mariona', 'Nadal Ribelles'), ('Rebecca', 'Cooper'), ('Arianne', 'Gajasan'), ('Nathalie', 'Wallin'), ('Annabel', 'Youthed'), ('Sakiko', 'Shimizu'), ('Iyabo', 'Ogunwole'), ('Anna', 'Korotkova'), ('Megan', 'Schmulbach'), ('Saori', 'Kaneko'), ('Minori', 'Takemoto'), ('Anne Sophie', 'Vidal'), ('Dan Feng', 'Liu'), ('Kazusa', 'Ito'), ('Klaudia', 'Jans Ignacik'), ('Noha', 'Mohsen'), ('Mai Huynh', 'Huynh'), ('Alexa', 'Geldenhuys'), ('Anna Lee', 'Bryant'), ('Irina', 'Lykina'), ('Ornela', 'Basaric'), ('Caroline', 'Hammond'), ('Angela', 'Haynes'), ('Alexis', 'Prousis'), ('Sabita', 'Maharaj'), ('Analia', 'Hermida'), ('Monika', 'Goel'), ('Al', 'Sasaki'), ('Laura', 'Pous Tio'), ('Maria', 'Jedlickova'), ('Clemence', 'Castel'), ('Marion', 'Bartoli'), ('Marina', 'Bernshtein'), ('Jelena', 'Bukulin'), ('Iryna', 'Bremond'), ('Shu Jing', 'Yang'), ('Lucia', 'Sainz Pelegri'), ('Monique', 'Viele'), ('Milene', 'Souza'), ('Alyssa', 'Rodriguez'), ('Christa', 'Magister'), ('Mija', 'Kresic'), ('Maria Jose', 'Lopez Herrera'), ('Denisa', 'Pavlikova'), ('Katrina', 'Bandere'), ('Pamela', 'Fernandez'), ('Daisy', 'Ames'), ('Pilar', 'Escandell Planells'), ('Dragica', 'Lozina'), ('Tiana', 'Lum Tucker'), ('Jie', 'Hao'), ('Preeti', 'Rao'), ('Jana', 'Simurkova'), ('Medhini', 'Sharma'), ('Stephanie', 'Krappl'), ('Noopur', 'Desai'), ('Yee', 'Wong'), ('Elizabeth', 'Thomas'), ('Patricia', 'Chang'), ('Michala', 'Bzdusekova'), ('Kristina', 'Bezakova'), ('Paola', 'Dominguez'), ('Kokoro', 'Takehara'), ('Meriem', 'Zitouni'), ('Kumi', 'Fukui'), ('Kristin', 'Messmer'), ('Anna', 'Berlin'), ('Karolina', 'Sprem'), ('Maika', 'Ozaki'), ('Lisa', 'Tognetti'), ('Nicola', 'Mooney'), ('Sandra', 'Denis'), ('Mimi', 'Renaudin'), ('Maral Khachik', 'Awanes'), ('Agustina', 'Arechavaleta'), ('Liliana', 'Aguilera'), ('Dominique', 'Toliravo'), ('Amanda', 'Pratzel'), ('Laura Ramona', 'Husaru'), ('Miriam', 'Palacios'), ('Ntswaki', 'Mawela'), ('Mariana', 'Correa'), ('Gurianna', 'Korinihona'), ('Leila', 'Salek'), ('Jessica', 'Iniguez'), ('Rijana', 'Puljic'), ('Valisoa', 'Rafolomanantsiatosika'), ('Andrea', 'Di Leo'), ('Katie', 'Robinette'), ('Andrea', 'Martinez'), ('Gabriela', 'Marcu'), ('Daniela', 'Kix'), ('Manami', 'Fukada'), ('Megumi', 'Sugimura'), ('Zi', 'Yan'), ('Estefania', 'Vela'), ('Margaretha', 'Novianti'), ('Helena', 'Sinitshin'), ('Blakeley', 'Griffith'), ('Paola', 'Gamarra'), ('Jennifer', 'Chay'), ('Claudia', 'Kuleszka'), ('Marina', 'Tavares'), ('Aleksandra', 'Rosolska'), ('Laura', 'Gordon'), ('Ilona', 'Giberte'), ('Scarlett', 'Werner'), ('Jenny', 'Zika'), ('Sanem', 'Irem'), ('Valentina', 'Salani'), ('Renee', 'Lampret'), ('Luisa', 'Barcaui'), ('Kim', 'Coventry'), ('Steffi', 'Bachofer'), ('Margot', 'Carter'), ('Ly Huong', 'Dinh'), ('Novianti', 'Warsono'), ('Kristin', 'Cargill'), ('Maria', 'Serra'), ('Ilaria', 'Pibiri'), ('Elena', 'Luri'), ('Daniela', 'Caljkusic'), ('Klaudia', 'Wlodarczyk'), ('Vanja', 'Mikovic'), ('Maria Paz', 'Jimenez Barquero'), ('Karina', 'Jarlkaganova'), ('Lucy', 'Johnson'), ('Edina', 'Gallovits Hall'), ('Norie', 'Kojima'), ('Tenille', 'Elias'), ('Johann', 'Fernandes'), ('Angelique', 'Widjaja'), ('Lakschmi', 'Van Der Wart'), ('Marcela', 'Arroyo Vergara'), ('Kanistha', 'Sritawan'), ('Karamontree', 'Siriluethaiwattana'), ('Helene', 'Stephens'), ('Stefani', 'Falconi'), ('Naoko', 'Eto'), ('Kesy', 'Moison'), ('Galina', 'Voskoboeva'), ('Aleta', 'Sungkono'), ('Debbrich', 'Feys'), ('Azza', 'Abbou'), ('Lucia', 'Krzelj'), ('Mari', 'Inoue'), ('Amy', 'Toth'), ('Ana', 'Jovanovic'), ('Alexandra', 'Mcgoodwin'), ('Maria Angela', 'Ferreira'), ('Ivana', 'Platenikova'), ('Antonia', 'Matic'), ('Anne Linn', 'Perez'), ('Nuria', 'Hernandez'), ('Shahlio', 'Ibadullaeva'), ('Liana Gabriela', 'Ungur'), ('Hermione', 'Roukassian'), ('Adriana', 'Bedoya'), ('Amanda', 'Saiontz'), ('Romy', 'Farah'), ('Pavlina', 'Akritas'), ('Nicole', 'Fintell'), ('Adriana', 'Szili'), ('Samia', 'Medjahdi'), ('Astrid', 'Waernes Garcia'), ('Ji Sook', 'Kim'), ('Julianna', 'Gates'), ('Antoinette', 'Mmoh'), ('Phemelo', 'Mogapi'), ('Chin Wei', 'Chan'), ('Marcela Ivon', 'Rodezno Hernandez'), ('Marina', 'Chaves Moledo'), ('Gulshah', 'Esen'), ('Paola', 'Ravano'), ('Magdalena', 'Costa'), ('Andreea', 'Horobeanu'), ('Eleni', 'Karakeke'), ('Malika', 'Bouakel'), ('Chia Jung', 'Chuang'), ('Eugenia', 'Kranioti'), ('Margarita', 'Karnaukhova'), ('Robyn', 'Baker'), ('Mateja', 'Spes'), ('Alessia', 'Zinga'), ('Erin', 'Heeder'), ('Agnes', 'Paischer'), ('Hsiu Ting', 'Huang'), ('Nadja', 'Kusterer'), ('Jacinta', 'Agim'), ('Nivin', 'Kezbari'), ('Karly', 'Olson'), ('Natalie', 'Ko'), ('Ristine', 'Olson'), ('Samantha', 'Galinier'), ('Tsukasa', 'Yamaguchi'), ('Sarah', 'Andrews'), ('Elke', 'Clijsters'), ('Nora', 'Quintal'), ('Alison', 'Silverio'), ('Feila', 'Mahiddiene'), ('Laetitia', 'Allegrini'), ('Ilaria', 'Ziche'), ('Stella', 'Sondang'), ('Cory Ann', 'Avants'), ('Andreea', 'Seserman'), ('Magdalena', 'Tokarska'), ('Jessica', 'Hubbard'), ('Moe', 'Tsubuku'), ('Jessica', 'Orselli'), ('Marise', 'Botha'), ('Roxana', 'Abdurakhmonova'), ('Angel', 'Saleh'), ('Swetha', 'Devaraj'), ('Lianne', 'Supperstone'), ('Paula', 'Zabala'), ('Victoria', 'Zabala'), ('Catalina', 'Angeleri'), ('Marcia', 'Secondo'), ('Andrea', 'Pazmino'), ('Stefanie', 'Halder'), ('Gisela', 'Dulko'), ('Fatima Zohra', 'Benboubker'), ('Ciara', 'Finucane'), ('Audrey', 'Bergot'), ('Kamini', 'Murugaboopathy'), ('Emily', 'Mowery'), ('Dianne Kenneth', 'Matias'), ('Sladjana', 'Kos'), ('Nino', 'Szownadze'), ('Nadejda', 'Vassileva'), ('Marta', 'Fraga Perez'), ('Dan', 'Li'), ('Jessie', 'Rochefort'), ('Petra', 'Cetkovska'), ('Soledad', 'Esperon'), ('Veronica', 'Del Piano'), ('Nikhila', 'Narra'), ('Nadia', 'Pope'), ('Natalie', 'Luft'), ('Tea', 'Popaja'), ('Christyn', 'Lucas'), ('Laura', 'Fernandez'), ('Casey', 'Dellacqua'), ('Leda', 'Pesatova'), ('Lizette', 'Carrillo Morales'), ('Sevvy', 'Gallios'), ('Sabrina', 'Piccolo'), ('Kathrin', 'Hegel'), ('Chen Chen', 'Gao'), ('Cristina', 'Celani'), ('Karin', 'Zibar'), ('Carla', 'Barciela Rodriguez'), ('Isabel', 'Barciela Rodriguez'), ('Julia', 'Efremova'), ('Suzanne', 'Jones'), ('Vicky', 'Navia'), ('Joanne', 'Akl'), ('Nathalia', 'Papadopolou'), ('Kristina', 'Geraniou'), ('Milica', 'Veselinovic'), ('Karina', 'Grigorian'), ('Jessica', 'Obi'), ('Yuri', 'Kurashima'), ('Beatrix', 'Csordas'), ('Sanne', 'Van Den Biggelaar'), ('Bieke', 'Serruys'), ('Gabriela', 'Duch'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Audrey', 'Moronval'), ('Alice', 'Covatta'), ('Linda', 'Mair'), ('Caroline', 'Forstner'), ('Ganna', 'Butkevych'), ('Larikah', 'Russell'), ('Jelena', 'Jankovic'), ('Verena', 'Amesbauer'), ('Natalia', 'Cretu'), ('Vanessa', 'Guerrero'), ('Shaniek', 'Pinder'), ('Su Jin', 'Kim'), ('Christine', 'Simpson'), ('Natalie', 'Castro'), ('Juanas', 'Miras Navarro'), ('Matea', 'Mezak'), ('Olga', 'Pasichnichenko'), ('Elena', 'Volobueva'), ('Giovanna', 'Di Lauro'), ('Ariana', 'Marshall'), ('Sarah', 'Pang'), ('Lucie', 'Kriegsmannova'), ('Janja', 'Gersic'), ('Aine', 'Leonard'), ('Sabrina', 'Lopes'), ('Larissa', 'Carvalho'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Megan', 'Moulton Levy'), ('Zeynep Melis', 'Altinay'), ('Isioma', 'Usoegbu'), ('Hannah', 'Kuervers'), ('Miria', 'Bartels'), ('Sun Jung', 'Kim'), ('Klara', 'Jagosova'), ('Hitomi', 'Sugata'), ('Federica', 'Quercia'), ('Anna', 'Vitosinskaya'), ('Cristina', 'Condon'), ('Joana', 'Laranjinha'), ('Sadvika', 'Saboo'), ('Laura', 'Heckler'), ('Carla', 'Genovese'), ('Monika', 'Kolbovic'), ('Eri', 'Mikami'), ('Amanda', 'Fish'), ('Klaudia', 'Halasz'), ('Simone', 'Wienbeck'), ('Martine', 'Belle'), ('Erica', 'Tironi'), ('Ahsha', 'Rolle'), ('Claire', 'Ricketts'), ('Maia', 'Ram'), ('Sanda', 'Mamic'), ('Natalie', 'Frazier'), ('Bethanie', 'Mattek Sands'), ('Sandra', 'Gwiggner'), ('Lata', 'Assudani'), ('Andreea', 'Novaceanu'), ('Chloe', 'Gambey'), ('Martine', 'Castonguay'), ('Ivana', 'Jovanovic'), ('Micaela', 'Moran'), ('Eva', 'Valkova'), ('Ene', 'Ogbu'), ('Udanthi', 'Narahenpitage'), ('Marielle', 'Wallin'), ('Claudia', 'Kardys'), ('Elisabetta', 'Gianella'), ('Cinthia', 'Saucedo'), ('Tsippy', 'Waterman'), ('Olivia', 'Salgi'), ('Maria', 'Castanera Rodriguez'), ('Rachael', 'Porsz'), ('Thuy Dan', 'Nguyen'), ('Gabriela', 'Velasco Andreu'), ('Henrietta', 'Ogude'), ('Eun Jeong', 'Hwang'), ('Juana', 'Miras Navarro'), ('Lisa', 'Fung Kee Fung'), ('Kai Feng', 'Yi'), ('Covadonga', 'Garcia Calvo'), ('Olga', 'Carrasco'), ('Ana', 'Abad'), ('Valentina', 'Tizzano'), ('Carolina', 'Olmo'), ('Hermine', 'Sukiasyan'), ('Helen', 'Fritche'), ('Temitope', 'Bamidele'), ('Tiffany', 'Welford'), ('Breda', 'Kovac'), ('Vivien', 'Sepuka'), ('Eva', 'De Block'), ('Anais', 'Laurendon'), ('Sandra', 'Sasidharan'), ('Ekaterina', 'Burduli'), ('Anabela', 'Plasencia'), ('Mariana', 'Cutuk'), ('Tamara', 'Tanner'), ('Jelena', 'Djordjevic'), ('Kelly', 'Anderson'), ('Brittany', 'Brown'), ('Sigurlaug', 'Sigurdardottir'), ('Kveta', 'Hajkova'), ('Tereza', 'Kotasova'), ('Brooke', 'Rogers'), ('Kristina', 'Kormuthova'), ('Chiara', 'Gatto'), ('Chen', 'Shen'), ('Iva', 'Plachkova'), ('Andrea', 'Koch Benvenuto'), ('Katerina', 'Teplizki'), ('Nivedita', 'Venkatesh'), ('Mathilde', 'Johansson'), ('Isha', 'Lakhani'), ('Joanne', 'Mayne'), ('Yenisleydis', 'Calana Rodriguez'), ('Montinee', 'Tangphong'), ('Veronika', 'Litvinskaya'), ('Villa', 'Daniella'), ('Audrey', 'Banada'), ('Gabriela', 'Ziliotto'), ('Ashley', 'Harkleroad'), ('Zineb', 'Ibnmajdoub'), ('Nina', 'Spaeth'), ('Gemma', 'Olle Poma'), ('Sayaka', 'Umeda'), ('Bonnie', 'Baird'), ('Serena', 'Bergomi'), ('Maja', 'Sundac'), ('Mhari', 'Neish'), ('Xi', 'Jin'), ('Mai', 'Hatanaka'), ('Anna', 'Blagodarova'), ('Laura', 'Mcgaffigan'), ('Milena', 'Kachar'), ('Johanna', 'Dahlback'), ('Anastasia', 'Shevchenko'), ('Darya', 'Ivanov'), ('Annabella', 'Weigert'), ('Elsa', 'Trigueros Sanchez'), ('Khanita', 'Sritawan'), ('Madina', 'Rakhim'), ('Kristyna', 'Horakova'), ('Amanda', 'Hellberg'), ('Gabriella', 'Rowe'), ('Olivia', 'Beltrame'), ('Fleur', 'Van Haasteren'), ('Czarina Mae', 'Arevalo'), ('Smaranda', 'Stan'), ('Maria Jose', 'Sastre Comas'), ('Maria', 'Zivcicova'), ('Karen', 'Rombouts'), ('Ummarahmat', 'Hummetova'), ('Anuradha', 'Gurung'), ('Antonia', 'Aposteanu'), ('Caitlin', 'Collins'), ('Weronika', 'Bloczynska'), ('Dominika', 'Wojtal'), ('Alicia', 'Serrano'), ('Krishna', 'Logeswari'), ('Anna', 'Tyshing'), ('Nika', 'Ozegovic'), ('Lucie', 'Hradecka'), ('Egle', 'Petrauskaite'), ('Jasmina', 'Hamzic'), ('Krushmi', 'Chheda'), ('Ashlee', 'Davis'), ('Maria Belen', 'Corbalan'), ('Anica', 'Wuensche'), ('Mariya', 'Koryttseva'), ('Nadege', 'Vergos'), ('Andra', 'Stanculescu'), ('Gal Li', 'Kaplan'), ('Sasha', 'Abraham'), ('Vittoria', 'Maglio'), ('Eleonora', 'Punzo'), ('Danielle', 'Brown'), ('Maria Clara', 'Fernandez Bruera'), ('Kristina', 'Michalakova'), ('Sandra', 'Beltran'), ('Natalia', 'Pervitskaya'), ('Hayley', 'St Leger'), ('Natalie', 'Dean'), ('Romy', 'Lion'), ('Agni', 'Patsourakou'), ('Andreea', 'Nitescu'), ('Katarina', 'Kachlikova'), ('Maria', 'Arkhipova'), ('Ljubica', 'Avramovic'), ('Elli', 'Kokoliou'), ('Maria Jesus', 'Sol Hernandez'), ('Yuka', 'Hosoya'), ('Isabel', 'Jarosz'), ('Anna Lena', 'Groenefeld'), ('Katerina', 'Kocibova'), ('Luz Maria', 'Lafranconi'), ('Ekaterina', 'Bychkova'), ('Tanja', 'Markovic'), ('Tina', 'Jacob'), ('Natasha', 'Kersten'), ('Damilola', 'Olufeko'), ('Anca', 'Vladean'), ('Sunthree', 'Arphanukul'), ('Marina', 'Pantovic'), ('Kaia', 'Kanepi'), ('Iris', 'Ichim'), ('Carolina', 'Franco'), ('Patricia', 'Huelin Alvarez'), ('Linsey', 'Jacks'), ('Tarryn', 'Rudman'), ('Patricia', 'Manzur'), ('Blanca', 'Martinez Perez'), ('Kartika', 'Halim'), ('Tereza', 'Svicova'), ('Naia', 'Lartategui Uriarte'), ('Latavra', 'Andriashvili'), ('Nina', 'Knavs'), ('Tory', 'Zawacki'), ('Devina', 'Saedi'), ('Virag', 'Nemeth'), ('Anna', 'Spivakovski'), ('Cintha Karrie Shanaz', 'Putri'), ('Zuzanna', 'Grochocka'), ('Myriam', 'Casanova'), ('Linda', 'Agazzi'), ('Sara', 'Anundsen'), ('Graciela', 'Ailloud'), ('Martina', 'Sedivec'), ('Atsumi', 'Koga'), ('Monica', 'Hoz De Vila'), ('Zobaida', 'Mottola'), ('Tania', 'Martinez Jimenez'), ('Avel Romaly', 'Coronado'), ('Karen', 'Saravia'), ('Svetlana', 'Kuznetsova'), ('Nina', 'Bratchikova'), ('Bettina', 'Gabbe'), ('Preethi', 'Mukundan'), ('Elena', 'Gantcheva'), ('Sylvia', 'Montero'), ('Julia', 'Gandia Gomez'), ('Eleonora', 'Fornai'), ('Marutha', 'Devi'), ('Cayetana', 'Barbed Isusi'), ('Annita', 'Stylianidou'), ('Anna', 'Anoufrieva'), ('Nancy', 'Rustignoli'), ('Anna', 'Powaska'), ('Alexandra', 'Hirsch'), ('Bianca', 'Dulgheru'), ('Malin', 'Grimshorn'), ('Amal', 'Basha'), ('Meryem', 'Tazi'), ('Nai Yu', 'Wang'), ('Sveta', 'Kaladzko'), ('Simona Iulia', 'Matei'), ('Alicia', 'Espinoza'), ('Hanne', 'Camassa'), ('Xenia', 'Roman'), ('Guadalupe', 'Ubeda'), ('Oksana', 'Uzhylovska'), ('Claudia', 'Strauss'), ('Shadisha', 'Robinson'), ('Yasmin', 'Ulrich'), ('Federica', 'Balzani'), ('Jelena', 'Jovic'), ('Guadalupe', 'Padilla'), ('Hsiao Wen', 'Chao'), ('Caroline', 'Haider'), ('Kanaka', 'Tsujimura'), ('Valeria', 'Galouza'), ('Lubica', 'Nadasska'), ('Melissa', 'Dakkak'), ('Sarah', 'Gray'), ('Megan', 'Falcon'), ('Emma', 'Tomlinson'), ('Liz', 'Cruz'), ('Miriam', 'Cruz'), ('Alejandra', 'Ripoll'), ('Julia', 'Roach'), ('Anita', 'Jordan'), ('Patricia', 'Miro'), ('Tatsiana', 'Uvarova'), ('Nana', 'Tsuchiya'), ('Virginie', 'Cappoen'), ('Petra', 'Teller'), ('Patricia', 'Miro Bussman'), ('Yuri', 'Nagano'), ('Lucia', 'Gonzalez'), ('Dian', 'Anggraini'), ('Olga', 'Boulytcheva'), ('Alexis', 'Panton'), ('Ana', 'Kovacevic'), ('Martina', 'Alabiso'), ('Ilham', 'Nadir'), ('Maria Joao', 'Antunes'), ('Marcela', 'Montanha'), ('Yukiko', 'Nakanishi'), ('Fernanda', 'Caputi'), ('Cassy', 'Fabiani'), ('Shiho', 'Tanaka'), ('Julia Maria', 'Arguello'), ('Viktoria', 'Konstantinova'), ('Marieke', 'De Jong'), ('Houda', 'Yasri'), ('Nathalia', 'Rodrigues'), ('Carla', 'Zabaleta'), ('Linda', 'Smolenakova'), ('Hala', 'Sufi'), ('Steffi', 'Van Elten'), ('Julia', 'Matojan'), ('Whitney', 'Benik'), ('Carmel', 'Meachen'), ('Zuzana', 'Valicekova'), ('Fabienne', 'Clavel'), ('Silvia', 'Genisova'), ('Priyanka', 'Parekh'), ('Elizabeth', 'Walker'), ('Marina', 'Khomenko'), ('Emilie', 'Trouche'), ('Marija', 'Miladinovic'), ('Aleksandra', 'Jecmenica'), ('Emily', 'Kwok'), ('Emma', 'Zuleta'), ('Simona', 'Patti'), ('Mandy', 'Septoe'), ('Milena', 'Chisaca'), ('Philippa', 'Taul'), ('Asami', 'Satozaki'), ('Paola', 'Gamboa'), ('Anne', 'Yelsey'), ('Elodie', 'Navarro'), ('Sonali', 'Sanap'), ('Olena', 'Tsutskova'), ('Ting Wen', 'Wang'), ('Julia', 'Gandia'), ('Alexandra', 'Podkolzina'), ('Diana', 'Arutyunova'), ('Chirashanthi', 'Rajur'), ('Cassi', 'Fabiani'), ('Hedvig', 'Lofdahl'), ('Emi', 'Hirayama'), ('Matilde', 'Munoz Gonzalves'), ('Samia', 'Jalali'), ('Elena', 'Ryabtseva'), ('Jin Jie', 'Gong'), ('Veera', 'Nurmi'), ('Julie', 'Fratoni'), ('Marianna', 'Yuferova'), ('Ebere', 'Fortune'), ('Kumiko', 'Anzai'), ('Agata', 'Komorowska'), ('Marianne', 'Baker'), ('Alexandra Alina', 'Petcu'), ('Yuka', 'Kuroda'), ('Nikoleta', 'Kipritidou'), ('Julia', 'Wieckowski'), ('Larisa', 'Gorodetsky'), ('Natsumi', 'Tsubo'), ('Lucie', 'Telinova'), ('Oxana', 'Lyubtsova'), ('Nadja', 'Pavic'), ('Elena', 'Stoianova'), ('Jennifer', 'De Bodt'), ('Pallavi', 'Sharma'), ('Alice', 'Botto'), ('Ji Young', 'Kim'), ('Marnie', 'Mahler'), ('Anastasia', 'Michail'), ('Anastasia', 'Belova'), ('Pascale', 'Schnitzer'), ('Aneta', 'Turaj'), ('Siobhan', 'Oneill'), ('Chelsea', 'Orr'), ('Sirma Aysen', 'Bingeli'), ('Sheryl', 'Gershon'), ('Victoria', 'Sharpley'), ('Stacia', 'Fonseca'), ('Kelley', 'Hyndman'), ('Viviana', 'Yrureta'), ('Carina', 'Bjornstrom'), ('Kristin', 'Schuler'), ('Katharina', 'Rath'), ('Deepanwita', 'Chakrabarty'), ('Jae Hee', 'Lyoo'), ('Miriam', 'Rahali'), ('Christy', 'Greenly'), ('Ria', 'Sabay'), ('Tajna', 'Lukas'), ('Yoshimi', 'Tanaka'), ('Lourdes', 'Pascual Rodriguez'), ('Alessandra', 'Carta'), ('Kristina', 'Movsesyan'), ('Reem', 'Raouf'), ('Pichaya', 'Laosirichon'), ('Maryori', 'Franco'), ('Claudia', 'Hirt'), ('Florence', 'Haring'), ('Michal', 'Amir'), ('Vasiliki', 'Simouli'), ('Bojana', 'Cecez'), ('Diana', 'Cardenas Azcarate'), ('Rebecca', 'Llewellyn'), ('Haruka', 'Tachiki'), ('Miglana', 'Nenova'), ('Asami', 'Saeki'), ('Andrea', 'Ryan'), ('Laura', 'Moares'), ('Maria', 'Rakhmanina'), ('Bianca', 'Itner'), ('Sandra', 'Zahlavova'), ('Marina', 'Aniutin'), ('Courtney', 'Vernon'), ('Tanya', 'Sharma'), ('Natalia', 'Gordeeva'), ('Dayane', 'Silva'), ('Daiany', 'Luchi'), ('Katie', 'Muller'), ('Christina', 'Birtchnell'), ('Flavia', 'Mignola'), ('Kuburat', 'Akintunde'), ('Laura', 'Quintanilla Vidal'), ('Yasemin', 'Elgi'), ('Jovana', 'Jakouliev'), ('Irina', 'Smislova'), ('Ana', 'Higer'), ('Anna', 'Karavayeva'), ('Iciri', 'Rai'), ('Moe', 'Kawatoko'), ('Aiko', 'Yamada'), ('Sunitha', 'Rao'), ('Sandra', 'Volk'), ('Julia', 'Paetow'), ('Yuka', 'Izumi'), ('Zorayma', 'Arreola'), ('Rosanne', 'Dimech'), ('Anna', 'Jaen Seire'), ('Michaela', 'Michalkova'), ('Gisel', 'Brito'), ('Betty', 'Tesfu'), ('Jennifer', 'Seide'), ('Ekaterina', 'Koubinina'), ('Cecile', 'Baijot'), ('Alana', 'Van Der Vort'), ('Joyce', 'Ardies'), ('Ekaterina', 'Hirtopanu'), ('Maja', 'Mesanovic'), ('Liu Ling', 'Wang'), ('Natalie', 'Beck'), ('Caroline', 'Martin'), ('Saffet Seden', 'Soyalp'), ('Miki', 'Miyamura'), ('Frances', 'Hendry'), ('Asami', 'Suzuki'), ('Tinesta', 'Rowe'), ('Kristina', 'Solodovnikova'), ('Vonjiniana', 'Rasamuel'), ('Laura', 'Rocchi'), ('Cornelia', 'Lassonczyk'), ('Birgit', 'Ritschka'), ('Martina', 'Stigliano'), ('Ana Carolina', 'Pancia'), ('Danielle', 'Kypreos'), ('Tega', 'Richard'), ('Joanne', 'Schickerling'), ('Anna', 'Bastrikova'), ('Darina', 'Berkova'), ('Renee', 'Mullinger'), ('Kyung Mi', 'Park'), ('Rawya', 'Seif'), ('Lindsey', 'Nelson'), ('Maya', 'Wakui'), ('Lena', 'Keothavong'), ('Neda', 'Kozic'), ('Nosrat', 'Zeidan'), ('Karin', 'Hamanaka'), ('Mandy', 'Minella'), ('Pauline', 'Wong'), ('Nicole', 'Leimbach'), ('Zuzana', 'Zalabska'), ('Antonia', 'Nugent'), ('Vanessa', 'Esteves'), ('Jenna', 'Long'), ('Maria Sol', 'Rotondo'), ('Daron', 'Moore'), ('Cassandra', 'Chan'), ('Hristiana', 'Gocheva'), ('Krystel', 'Sauvageau'), ('Jelena', 'Zivanovic'), ('Alicja', 'Rosolska'), ('Beatriz', 'Belda Mullor'), ('Krizia', 'Borgarello'), ('Alesa', 'Bagola'), ('Miina', 'Luebbe'), ('Adriana', 'Solarova'), ('Nian Ze', 'Liu'), ('Svenja', 'Haymann'), ('Darina', 'Sedenkova'), ('Jessica', 'Lopez Lopez'), ('Si Nga', 'Lee'), ('Larissa', 'Deschamps'), ('Aya', 'Oasa'), ('Katy', 'Shaw'), ('Anja', 'Prislan'), ('Sarah', 'Wray'), ('Monica', 'Wiesener'), ('Rebecca', 'Spinello'), ('Lara', 'Garcia'), ('Lucia', 'Jimenez Almendros'), ('Brianna', 'Williams'), ('Renata', 'Ljukovcan'), ('Lucia', 'Garcia'), ('Gala', 'Gasset Pinon'), ('Jharna', 'Nansi'), ('Yuka', 'Inoue'), ('Iva', 'Roj'), ('Katie', 'Taylor'), ('Martina', 'Bartosova'), ('Renata', 'Veiga'), ('Kristi', 'Miller'), ('Ana', 'Corbett'), ('Doo Ri', 'Na'), ('Olakunbi', 'Abass'), ('Whitney', 'Robards'), ('Marion', 'Gaud'), ('Katarina', 'Panakova'), ('Magdalena', 'Maranda'), ('Brook', 'Connelly'), ('Marcela', 'Vanegas Bello'), ('Valerie', 'Chin'), ('Lindsey', 'Pereira'), ('Karen', 'Kozangian'), ('Chiara', 'Marraghini'), ('Elena', 'Marraghini'), ('Salome', 'Devidze'), ('Andrea', 'Vargas'), ('Ruya', 'Inalpulat'), ('Madelaine', 'Madelaire'), ('Carolina', 'Seixas'), ('Su Wei', 'Hsieh'), ('Anna Maria', 'Miller'), ('Ronak', 'Shah'), ('Barbara', 'Costa'), ('Dima', 'Al Saadi'), ('Sarah', 'Schulze'), ('Amanda Marie', 'Taylor'), ('Romina', 'Manas Rodriguez'), ('Shuai', 'Peng'), ('Martina', 'Bregola'), ('Kirsten', 'Flipkens'), ('Jovana', 'Stankovic'), ('Diana', 'Salas'), ('Virginia', 'Bigliardi'), ('Marina', 'Viliamovskaia'), ('Sonya', 'Kumar'), ('Darya', 'Kryvets'), ('Daniela', 'Bracaglia'), ('Sabrina', 'Capannolo'), ('Eleonora', 'Taddei'), ('Nina', 'Maglatyuk'), ('Carolina', 'Salge'), ('Renata', 'De Sanctis'), ('Jae Hee', 'Joung'), ('Daria', 'Chemarda'), ('Stefanie', 'Leushuis'), ('Maria', 'Bordons Ortiz'), ('Linda', 'Svarena'), ('Marta', 'Domachowska'), ('Irina', 'Kuzmina'), ('Ana Lilia', 'Salas'), ('Lisa', 'Nystrom Skold'), ('Almira', 'Hallyeva'), ('Sarah', 'Raab'), ('Rie', 'Imai'), ('Karla', 'Portillo'), ('Yue', 'Yu'), ('Astrid', 'Tixier'), ('Varinia', 'Soler Bravo'), ('Holly', 'Bagshaw'), ('Anzhelika', 'Balyuk'), ('Whitney', 'Deason'), ('Luci', 'Barlow'), ('Danielle', 'Harmsen'), ('Arantxa', 'Garcia Millan'), ('Olga', 'Brozda'), ('Fatimah', 'Abinu'), ('Mar', 'Gonzalez Perez'), ('Shu Hwei', 'Huang'), ('Kristel Ann', 'Samala'), ('Melissa', 'Gibb'), ('Nina', 'Jauch'), ('Dubravka', 'Cupac'), ('Elizabeth', 'Dolan'), ('Ana', 'Brandusan'), ('Claire', 'Carnez'), ('Yang Guang', 'Zhao'), ('Alejandra', 'Obregon'), ('Amanda', 'Jasso'), ('Marina', 'Garcia Vertiz'), ('Pauline', 'Parmentier'), ('Kaori', 'Onishi'), ('Soo Mi', 'Yoo'), ('Luciana', 'Sarmenti'), ('Angelita', 'Detudamo'), ('Yadira', 'Geara'), ('Ana', 'Abramovic'), ('Olexandra', 'Verkhniatska'), ('Da Jung', 'Hong'), ('Lara', 'Giltinan'), ('Nicole', 'Shabaz'), ('Ariela', 'Perez'), ('Ivanna', 'Israilova'), ('Macall', 'Harkins'), ('Neha', 'Uberoi'), ('Vasilisa', 'Davydova'), ('Leila', 'Hodzic'), ('Giada', 'Calabretta'), ('Estefania', 'Salvador Martinez'), ('Lina', 'Stanciute'), ('Celine', 'Beermann'), ('Paula', 'Arevalo'), ('Laura', 'Popescu'), ('Sabina', 'Korsunova'), ('Vera', 'Leontieva'), ('Chen Yee', 'Liaw'), ('Riza', 'Zalameda'), ('Bianca', 'Chidrawi'), ('Pernille', 'Orloff Sattari'), ('Eden', 'Marama'), ('Charlene', 'Tsangamwe'), ('Michaela', 'Carvanova'), ('Chun Mei', 'Ji'), ('Emilia', 'Yorio'), ('Joanie', 'Macken'), ('Alexandra', 'Orasanu'), ('Laura', 'Bredniak'), ('Hagar', 'Caro'), ('Veronica', 'Saucedo'), ('Anita', 'Ivancevic'), ('Georgina', 'Hingley'), ('Fernanda', 'Vargas'), ('Linda', 'Blank'), ('Ghadihela', 'Flores'), ('Caroline', 'Lagedamont'), ('Katarzyna', 'Siwosz'), ('Sarah', 'Benad'), ('Tamar', 'Akhobadze'), ('Kelly', 'De Beer'), ('Lizaan', 'Du Plessis'), ('Elsa', 'Serrano Eduards'), ('Alba', 'Esteve Blanch'), ('Maria Antonia', 'Vives Barquiel'), ('Sarah', 'Coles'), ('Claire', 'Feuerstein'), ('Melanie', 'Oosterhof'), ('Margaryta', 'Dolzhenko'), ('Dragana', 'Jakovljevic'), ('Julia', 'Dziedzic'), ('Ludivine', 'Choisel'), ('Bracha', 'Weisman'), ('Virginie', 'Ayassamy'), ('Dominika', 'Zuzulova'), ('Harpreet', 'Gill'), ('Marta', 'Brandani'), ('Katherine', 'Laporta'), ('Beatriz', 'Fernandez'), ('Zora', 'Mark'), ('Katrin', 'Glatz'), ('Natalia', 'Yakimovich'), ('Maria Ignacia', 'Gioria'), ('Lei', 'Huang'), ('Alexandria', 'Liles'), ('Helene', 'Lindstrand'), ('Roxana', 'Dragan'), ('Pynar', 'Nergiz'), ('Imke', 'Reimers'), ('Andreja', 'Klepac'), ('Ayumi', 'Oka'), ('Sabrina', 'Wist'), ('Katharine', 'Baker'), ('Michal', 'Bar'), ('Annette', 'Pohjalainen'), ('Yasmin', 'Del Arco'), ('Delia', 'Sescioreanu'), ('Nisha', 'Nair'), ('Kady', 'Pooler'), ('So Jung', 'Kim'), ('Megan', 'Sandwith'), ('Sophie', 'Ferguson'), ('Sylwia', 'Niedbalo'), ('Jolanta', 'Twarowska'), ('Tarryn', 'Terblanche'), ('Anna', 'Niemiec'), ('Anne Marie', 'Brodeur Fontaine'), ('Paola', 'Iovino'), ('Sarah', 'Gbadamosi'), ('Valerie', 'Meise'), ('Emma', 'Laine'), ('Tara', 'Wigan'), ('Laura', 'Bastos'), ('Melanie', 'Hafner'), ('Erica', 'Sauer'), ('Barbora', 'Zahlavova Strycova'), ('Chinenye Ndidi', 'Izuogu'), ('Romina', 'Oprandi'), ('Geraldine', 'Roma'), ('Adriana', 'Gonzalez Penas'), ('Quan', 'Gao'), ('Roxana Ianula', 'Dragan'), ('Sandy', 'Gumulya'), ('Galina', 'Kostova'), ('Chihiro', 'Tan'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Lolita', 'Frangulyan'), ('Clelia', 'Melena'), ('Diana', 'Vranceanu'), ('Barbara', 'Pocza'), ('Camelia', 'Todorova'), ('Eleni', 'Betsiou'), ('Alexandra', 'Korotkevich'), ('Polina', 'Zaretser'), ('Ana Cristina', 'Moreno'), ('Whitney', 'Mccray'), ('Allison', 'Baker'), ('Patricia', 'Ribeiro'), ('Ela', 'Kaludjer'), ('Maria Laura', 'Zarza'), ('Pavlina', 'Smatova'), ('Varsha', 'Meena'), ('Silvana', 'Bauer'), ('Elena', 'Grazioso'), ('Katrina', 'Elder Bush'), ('Varvara', 'Galanina'), ('Lucy', 'Fletcher'), ('Jennifer', 'Migan'), ('Cristina', 'Matera'), ('Varvara', 'Timofeeva'), ('I Hui', 'Chang'), ('Sanne', 'Holtkamp'), ('Audra', 'Cohen'), ('Tina', 'Obrez'), ('Anna Viktoria', 'Lind'), ('Beatriz', 'Pena Lueza'), ('Jennifer', 'Poskitt'), ('Yasuko', 'Saruta'), ('Marinne', 'Giraud'), ('Christina', 'Zgera'), ('Aurelija', 'Miseviciute'), ('Stephanie', 'De Laet'), ('Rosidah', 'Kusuma Dewi'), ('Ann Marie', 'Modric'), ('Dinara', 'Safina'), ('Timna', 'Ticic'), ('Ana Cecilia', 'Olivos'), ('Monika', 'Musilova'), ('Katarina', 'Tuohimaa'), ('Esther', 'Van Londen'), ('Hanne Skak', 'Jensen'), ('Sofia', 'Canarte'), ('Virginia', 'Donda'), ('Mariana', 'Aconcha'), ('Maria', 'Krasnova'), ('Ana Paula', 'Saviole'), ('Katie', 'Obrien'), ('Melanie', 'South'), ('Ekaterina', 'Dzehalevich'), ('Julia', 'Hodes'), ('Elina', 'Sichakova'), ('Malvina', 'De La Canal'), ('Eva', 'Fernandez Brugues'), ('Andrea', 'Davidova'), ('Cigdem', 'Duru'), ('Miray', 'Eshak'), ('Caroline', 'Oduor'), ('Pemra', 'Ozgen'), ('Lumay', 'Diaz Hernandez'), ('Marion', 'Fleury'), ('Meng', 'Yuan'), ('Mi', 'Yoo'), ('Andrea', 'Benitez'), ('Ana Luna', 'Gonzalez Munoz'), ('Ginte', 'Pociute'), ('Anastasia', 'Sourkova'), ('Sofia', 'Avakova'), ('Daniela', 'Krejsova'), ('Natasa', 'Vuckovic'), ('Jitka', 'Gavdunova'), ('Vanessa', 'Gutierrez'), ('Canna', 'Furuta'), ('Nandia', 'Tenni'), ('Elena', 'Petrucciano'), ('Catalina', 'Cruz Gomez'), ('Vanessa', 'Heute'), ('Tiffany', 'Tucker'), ('Varvara', 'Lepchenko'), ('Andrea', 'Morgado'), ('Dora', 'Kiss'), ('Elizabeth', 'Lumpkin'), ('Laura', 'Ferreira'), ('Celia', 'Durkin'), ('Margot', 'Torre'), ('Vendula', 'Plechata'), ('Maia', 'Semerdjieva'), ('Darya', 'Kustova'), ('Natalie', 'Solevski'), ('Austin', 'Smith'), ('Dora', 'Delgadillo'), ('Carolina', 'Ardila Cuervo'), ('Masa', 'Pozar'), ('Yana', 'Zavialova'), ('Andreea Laura', 'Niculescu'), ('Anett', 'Kaasik'), ('Dragica', 'Stanojlovic'), ('Rita', 'Esteves De Freitas'), ('Gabriela', 'Niculescu'), ('Viktoria', 'Lytovchenko'), ('Iginia', 'Tilocca'), ('Alessia', 'La Monaca'), ('Ping', 'Jia'), ('Klara', 'Kufova'), ('Liudmyla', 'Latysheva'), ('Tina', 'Schmassmann'), ('Yuliya', 'Kulbitskaya'), ('Thassha', 'Vitayaviroj'), ('Vanessa', 'Masalles'), ('Tiya', 'Rolle'), ('Janette', 'Bejlkova'), ('Karolina', 'Rejniak'), ('Elna', 'De Villiers'), ('Maiko', 'Ohmi'), ('Pauline', 'Bourdet Fontaine'), ('Mareike', 'Molchin'), ('Irina', 'Tkachenko'), ('Alaknanda', 'Jadhav'), ('Manuela', 'Santos'), ('Michelle', 'Aybar'), ('Tanya', 'Klenkoski'), ('Alexandra', 'Demidova'), ('Alisee', 'Hirt'), ('Clelia', 'Deltour'), ('Ludmila', 'Stavila'), ('Maria', 'Alvaro'), ('Karolina', 'Kosinska'), ('Kana', 'Watanabe'), ('Yuka', 'Mori'), ('Hee Sun', 'Lyoo Suh'), ('Mariana', 'Weschenfelder'), ('Nidhi', 'Shah'), ('Marta', 'Melis'), ('Nana', 'Urotadze'), ('Alyssa Ann', 'Labay'), ('Vilma', 'Macheda'), ('Gabriela', 'Cazares'), ('Julia', 'Pugach'), ('Carly', 'Petit'), ('Lenka', 'Jaloviecova'), ('Anna', 'Gil Mares'), ('Selen', 'Surel'), ('Jenny', 'Broughall'), ('Valentina', 'Franchini'), ('Henrietta', 'Habler'), ('Constanza', 'Politi'), ('Emi', 'Nozaki'), ('Valeria', 'Muratori'), ('Svetlana', 'Tsykhanskaya'), ('Miyoko', 'Takahashi'), ('Ji Sun', 'Kim'), ('Bianca', 'Nocella'), ('Alina', 'Sufiarova'), ('Ana Maria', 'Gonzalez Leon'), ('Morena', 'De Bernardi'), ('Tanya', 'Ridzevskaya'), ('Kewa', 'Nichols'), ('Antonia Xenia', 'Tout'), ('Anne', 'Dickhardt'), ('Antonia', 'Toth'), ('Ghazaleh', 'Torkaman'), ('Michelle', 'Snyman'), ('Maria Rossana', 'Vega Saguier'), ('Bertille', 'Van Marque'), ('Irina', 'Buryachok'), ('Mari', 'Andersson'), ('Angela', 'Garcia Mosquera'), ('Jaclyn', 'Schokman'), ('Sarah', 'Gronert'), ('Yana', 'Nemerovski'), ('Adriana', 'Fonseca Villarroel'), ('Juliana', 'Cordero'), ('Katherine', 'Wittgruber'), ('Paloma', 'Ruiz Blanco'), ('Caroline', 'Carpentier'), ('Vanja', 'Corovic'), ('Ana', 'Tomasevic'), ('Kaja', 'Smole'), ('Naina', 'Karsolia'), ('Mahesha', 'Seneviratne'), ('Fernanda', 'Martins'), ('Sara', 'Simbula'), ('Liliana', 'Pereira'), ('Edita', 'Milos'), ('Natalia', 'Sanchez'), ('Pasquale', 'Jansma'), ('Min Jung', 'Jeon'), ('Larissa', 'Wuehrl'), ('Beier', 'Ko'), ('Hye Min', 'Lee'), ('Celine', 'Vaure'), ('Lika', 'Chkuaseli'), ('Claire', 'De Gubernatis'), ('Ayako', 'Isogai'), ('Tatiana', 'Zhukovskaya'), ('Saranya', 'Pattabhi'), ('Andrea', 'Pera'), ('Tina', 'Trautmann'), ('Andrea', 'Brenes'), ('Saori', 'Hosogai'), ('Patience', 'Otali'), ('Seheno', 'Razafindramaso'), ('Shilpa', 'Goel'), ('Lucy', 'Scott'), ('Lisa', 'Sabino'), ('Claudia', 'Jorda Fernandez'), ('Charlene', 'Vanneste'), ('Fang', 'Liu'), ('Mabel', 'Rodriguez'), ('Sarina', 'Mueller'), ('Michaela', 'Babicova'), ('Karolina', 'Soor'), ('Wing Shan', 'Cheung'), ('Rita', 'Gerecz'), ('Elizabeth', 'Ferris'), ('Zhanna', 'Nemykina'), ('Roxana', 'Martinez'), ('Elena', 'Vesnina'), ('Yawna', 'Allen'), ('Melissa', 'Ryan'), ('Lara', 'Picone'), ('Asako', 'Sato'), ('Jana', 'Bielikova'), ('Irina', 'Malashok'), ('Amanpreet', 'Kaur'), ('Deniz', 'Atas'), ('Lorena', 'Villalobos Cruz'), ('Julia', 'Sack'), ('Melissa', 'Silva'), ('Kateryna', 'Bondarenko'), ('Catalina', 'Villegas Garcia'), ('Anca', 'Dumitru'), ('Veronique', 'Parke Bedard'), ('Andrea', 'Hlavackova'), ('Milena', 'Araujo'), ('Tarakaa', 'Bertrand'), ('Whitney', 'Jones'), ('Melanie', 'Wolkersberger'), ('Jessica', 'Leitch'), ('Savi', 'Sehrawat'), ('Maya', 'Rosa'), ('Patricia', 'Lopez Illan'), ('Melisa', 'Cabrera Handt'), ('Laura', 'Hernandez'), ('Katerina', 'Mazackova'), ('Shraddha', 'Lodha'), ('Kinga', 'Kozlowska'), ('Swathika', 'Kandhaswany'), ('Ya Wen', 'Lee'), ('Stephanie', 'Pace'), ('Alexandra', 'Glushenko'), ('Cristina', 'Visico'), ('Krista', 'Sanders'), ('Jessica', 'Mezo'), ('Ina', 'Sireteanu'), ('Gira', 'Schofield'), ('Natalie', 'Orourke'), ('Lilian', 'Asuaje'), ('Marina', 'Spakova'), ('Yukako', 'Kato'), ('Carmen', 'Pinto'), ('Andreia', 'Ribeiro'), ('Sylvia', 'Krywacz'), ('Jolien', 'Kroese'), ('Sonia', 'Fondevila Castro'), ('Jamea', 'Jackson'), ('Paola', 'Doldan Gonzalez'), ('Maria Aless', 'Termini'), ('Sharon Nosipho', 'Makhanya'), ('Ruchita', 'Shetty'), ('Paulina', 'Zuniga'), ('Pakrpa', 'Pramualsuk'), ('Michelle', 'Blattler'), ('Kim', 'Stierli'), ('Yulia', 'Stupak'), ('Alice', 'Balducci'), ('Maiara', 'Olivera'), ('Anna Maria', 'Zubori'), ('Alice', 'Mackenzie'), ('Yeon Ju', 'Kim'), ('Elena', 'Bavassano'), ('Fabiana', 'Ferraro Arce'), ('Julia', 'Chergova'), ('Sarah', 'Mclaren'), ('Kirsty', 'Woolley'), ('Hanane', 'Toumi'), ('Giorgia', 'Pontoglio'), ('Marcia', 'Almada'), ('Manjot', 'Marwah'), ('Amina', 'El Sahn'), ('Irina', 'Kotkina'), ('Roni', 'Gilboa'), ('Tamar', 'Kvaratskhelia'), ('Hendrike Lea', 'Heitmann'), ('Georgia', 'Rose'), ('Septi', 'Mende'), ('Jennifer', 'Elie'), ('Beatris', 'Simion'), ('Tamara', 'Bartkowiak'), ('Heidi', 'El Tabakh'), ('Katerina', 'Avdiyenko'), ('Osariemen', 'Airhunmwunde'), ('Tracy', 'Lin'), ('Karima', 'Ait Ali Yahia'), ('Sara', 'Abutovic'), ('Martina', 'Braun Schultz'), ('Kristina', 'Nedelcheva'), ('Patricia', 'Coimbra'), ('Shannon', 'Golds'), ('Parul', 'Goswami'), ('Marissa', 'Espinoza'), ('Maria Emma', 'Quiroz'), ('Vera', 'Dushevina'), ('Laila', 'Abdala'), ('Bianca', 'Salame'), ('Vindya', 'Dayananda'), ('Sonia', 'Eguizabal Saracho'), ('Federica', 'Van Adrichem'), ('Bethan', 'Lewis'), ('Annette', 'Aksdal'), ('Claudia', 'Puddu'), ('Lara', 'Alexander'), ('Evelyn', 'Enunwah'), ('Dunja', 'Antunovic'), ('Juri', 'Komatsu'), ('Katy', 'Scarisbrook'), ('Suzanna', 'Mansour'), ('Yuka', 'Higashi'), ('Iris', 'Elias'), ('Daniela', 'Ciganikova'), ('Tamara', 'Bunic'), ('Tong', 'Gao'), ('Daowadueng', 'Phonkan'), ('Nicole', 'Buitoni'), ('Anastasia', 'Cherkashin'), ('Micaela', 'Acosta'), ('Rebecca', 'Dare Mccann'), ('Anna', 'Lapushchenkova'), ('Chia Li', 'Chen'), ('Diana', 'Santillan Fernandez'), ('Sara', 'Tarraso Barber'), ('Ryoko', 'Fuda'), ('Marielle', 'Weihs'), ('Valentina', 'Bontempi'), ('Adriana', 'Jaskova'), ('Yoo Ri', 'Bae'), ('Ankita', 'Bhambri'), ('Biljana', 'Gajic'), ('Chiaki', 'Okadaue'), ('Nel', 'Ben Ami'), ('Francesca', 'Flavell'), ('Stephanie', 'Dubois'), ('Yumi', 'Miyazaki'), ('Anastasia', 'Yakimova'), ('Erica', 'Kosova'), ('Erin', 'Jobe'), ('Nicole', 'Pitts'), ('Alexia', 'Virgili'), ('Stamatia', 'Fafaliou'), ('Marta', 'Torres Torres'), ('Barbara', 'Krzesinska'), ('Rebeca', 'Molina'), ('Cora', 'Vasilescu'), ('Alba', 'Berdala Grive'), ('Danielle', 'Cosgrove'), ('Gabriela', 'Matekova'), ('Pichnita', 'Songsanu'), ('Patricia', 'Mayr Achleitner'), ('Ivana', 'King'), ('Mihaela Alina', 'Stanila'), ('Alina', 'Stanila'), ('Mai', 'Takeda'), ('Karina', 'Tomaszewska'), ('Nozomi', 'Aiba'), ('Monika', 'Lesniakova'), ('Luiza', 'Borges'), ('Susana', 'Hernandez'), ('Ana', 'Jerman'), ('Ana Catalina', 'Guerrero'), ('Yi', 'Chen'), ('Tania', 'Miro Garcia Pozuelo'), ('Patrycja', 'Komarska'), ('Ashley', 'Joelson'), ('Shu Yi', 'Zhang'), ('Velena', 'Mamutova'), ('Sania', 'Mirza'), ('Malin', 'Sjoqvist'), ('Ketevan', 'Okruashvili'), ('Monika', 'Dancevic'), ('Laura', 'Zelder'), ('Katerina', 'Bohmova'), ('Emily', 'Ottsen'), ('Michaela', 'Bartlova'), ('Andreea Patricia', 'Braica'), ('Nadezda', 'Gorbachkova'), ('Caroline', 'Bailly'), ('Eva', 'Pera'), ('Alice', 'Izomor'), ('Patrycja', 'Sanduska'), ('Link', 'Leskosky'), ('Teodora Lavinia', 'Cazan'), ('Michela', 'Trabalioni'), ('Carly', 'Gullickson'), ('Daria', 'Holodnik'), ('Ivana', 'Gelo'), ('Carina', 'Hirsch'), ('Tatiana', 'Grechukhina'), ('Rebekka', 'Haenle'), ('Ainsley', 'Fairhead'), ('Diane', 'Filip'), ('Tamara', 'Jugo'), ('Ashel', 'Dimi'), ('Evgenia', 'Linetskaya'), ('Veronika', 'Kapshay'), ('Amanda', 'Fink'), ('Mirella', 'Ramic'), ('Jung Eun', 'Kim'), ('Audrey', 'Robert Bordeleau'), ('Jenifer', 'Widjaja'), ('Maria Del Mar', 'Ceron'), ('Tania', 'Hernandez'), ('Ana', 'Milosavljevic'), ('Amy', 'Robinson'), ('Fabiana', 'Gomez'), ('Catherine', 'Grotz'), ('Melissa', 'Mang'), ('Anna', 'Egorova'), ('Tammy', 'Kevey'), ('Larisa', 'Bekmetova'), ('Andrea', 'Lipovska'), ('Meritxell', 'Gol Alamo'), ('Bianca', 'Gorbea'), ('Claire', 'Ilcinkas'), ('Ileana Camelia', 'Necea'), ('Roseta', 'Navarro Pons'), ('Filomena', 'Nisi'), ('Yurika', 'Sema'), ('Abiodun', 'Oyegoke'), ('Kelcy', 'Tefft'), ('Nadia', 'Solomon'), ('Tamara', 'Novoselac'), ('Airi', 'Hagimoto'), ('Frances', 'Miller'), ('Monika', 'Drabkova'), ('Mariel', 'Rosales Martinez'), ('Maria', 'Moya'), ('Irina', 'Steirer'), ('Sonja', 'Viskovich'), ('Yoshimi', 'Kakuta'), ('Mathilde', 'Cor'), ('Estefania', 'Craciun'), ('Anastasia', 'Antoniadou'), ('Carla', 'Bell'), ('Rui', 'Du'), ('Maria', 'Stepanova'), ('Norzafira', 'Taufik'), ('Jasmin', 'Jessenk'), ('Alexandra', 'Recio Linares'), ('Arancha', 'Recio Linares'), ('Olga', 'Panova'), ('Bruna', 'Paes'), ('Ghizela', 'Schutte'), ('Neda', 'Katalina'), ('Carmen', 'Klaschka'), ('Isabela', 'Kulaif'), ('Doris', 'Graus'), ('Christian', 'Tara'), ('Katarina', 'Zoricic'), ('Shannon', 'Robinson'), ('Makere', 'Bradnam'), ('Seika', 'Takahara'), ('Suzana', 'Kuffner'), ('Minami', 'Endo'), ('Mari', 'Tanaka'), ('Jia', 'Lin'), ('Daniella', 'Jeflea'), ('Alessandra', 'Jordan'), ('Pavlina', 'Glosova'), ('He Wen Fei', 'Li'), ('Michaela', 'Schumichrastova'), ('Ekaterina', 'Afinogenova'), ('Michaela', 'Bressan'), ('Paola', 'Cervantes'), ('Jessica', 'Homberg'), ('Alex', 'Graebe'), ('Anna', 'Klebleeva'), ('Elina', 'Arutyunova'), ('Soizette', 'Simmons'), ('Masa', 'Zec Peskiric'), ('Sheng Nan', 'Sun'), ('Zeynep Asli', 'Naibi'), ('Claudia', 'Smolders'), ('Katerina', 'Sidorovich'), ('Maria', 'Kirilenko'), ('Renata', 'Kucerkova'), ('Aleksandra', 'Zdeb'), ('Lerissa', 'Maurice'), ('Kanae', 'Hisami'), ('Maria Paula', 'Aguirre'), ('Flor', 'Reyes'), ('Karin', 'Vodickova'), ('Yuna', 'Kikawa'), ('Laura', 'Rodriguez Navas'), ('Eunice', 'David'), ('Elvira', 'Serrot Geminelli'), ('Alexandra Iulia', 'Iacob'), ('Stephanie', 'Bengson'), ('Elenora', 'Pedonese'), ('Anna Marie', 'Atelj'), ('Elena', 'Oslyakova'), ('Wiveca', 'Swarting'), ('Alla', 'Ivanova'), ('Sagarika', 'Phadke'), ('Tanja', 'Kovacevic'), ('Dominique', 'Damian'), ('Rohini', 'Das'), ('Lucie', 'Safarova'), ('Ann Kathrin', 'Gerk'), ('Isamarie', 'Perez'), ('Jia Bao', 'Yin'), ('Kartiki Vijay', 'Bhat'), ('Hind', 'Belkarmouss'), ('Sasha', 'Fisher'), ('Kara', 'Fisher'), ('Pamela', 'Russo'), ('Rachel', 'Wilhelm'), ('Lejla', 'Hodzic'), ('Maria', 'Babich'), ('Lina', 'Benkirane'), ('Olga', 'Alexeeva'), ('Nika', 'Kukharchuk'), ('Stefania', 'Pesce'), ('Angelina', 'Ledovskaya'), ('Alexandra', 'Valarezo'), ('Brittany', 'Baldy'), ('Tinatin', 'Kavlashvili'), ('Polona', 'Rebersak'), ('Claire', 'Peterzan'), ('Bruna', 'Cunha'), ('Varsha', 'Shivashankar'), ('Sariya', 'Khairova'), ('Randi', 'Schuler'), ('Nargiza', 'Ibragmova'), ('Alejandra', 'Guerra'), ('Kunigunda', 'Dorn'), ('Michaela', 'Matejickova'), ('Nan', 'Dong'), ('Elisa', 'Salis'), ('Katrine', 'Christensen'), ('Lisanne', 'Balk'), ('Misato', 'Tashiro'), ('Lina', 'Fettah'), ('Kanisha', 'Mehta'), ('Pamela', 'Duran Vinueza'), ('Vanesa', 'Furlanetto'), ('Estrella', 'Cabeza Candela'), ('Giulia', 'Gabba'), ('Alina', 'Sullivan'), ('Aleksa', 'Costa'), ('Jessi', 'Robinson'), ('Yuka', 'Ueda'), ('Maren', 'Kassens'), ('Marketa', 'Postranecka'), ('Catriona', 'Stewart'), ('Lei', 'Feng'), ('Natalia', 'Bubien'), ('Zuzana', 'Chmelarova'), ('Tijana', 'Koprivica'), ('Kelli', 'Zahnel'), ('Natia', 'Tsiklauri'), ('Nudnida', 'Luangnam'), ('Jennifer Lee', 'Heinser'), ('Eun Hee', 'Sung'), ('Marlena', 'Metzinger'), ('Valentina', 'Vasilieva'), ('Saskia', 'Adomat'), ('Megumi', 'Takahashi'), ('Alanna', 'Rodgers'), ('Anne', 'Schaefer'), ('Danica', 'Krstajic'), ('Jessica', 'Engels'), ('Jovana', 'Rasovic'), ('Olga', 'Tsoi'), ('Kristina', 'Barysheva'), ('Ji Hyun', 'Oh'), ('Alba', 'Ramos Segarra'), ('Laura', 'Haberkorn'), ('Jitka', 'Kleisnerova'), ('Michelle', 'Mitchell'), ('Jessica', 'Williams'), ('Jacquelyn', 'Visinski'), ('Anna', 'Chakvetadze'), ('Akiko', 'Yoshizawa'), ('Nanis', 'El Essaily'), ('Rebeca', 'Bou Nogueiro'), ('Julia', 'Doci'), ('Abby', 'Hedges'), ('Carolina', 'Escamilla'), ('Maria', 'Garcia Planas'), ('Jana', 'Mackova'), ('Keri', 'Robison'), ('Haruna', 'Shimizu'), ('Coral', 'Morales'), ('Melodia', 'Morales'), ('Asli', 'Semizoglu'), ('Preethi', 'Subramaniam'), ('Milana', 'Yusupov'), ('Laura', 'Viquez'), ('Aravane', 'Rezai'), ('Julia', 'Sloboda'), ('Ludmila', 'Arias Moreno'), ('Yana', 'Sadovskaya'), ('Ewa', 'Losinski'), ('Preethi', 'Shravan'), ('Ivana', 'Lisjak'), ('Amanda', 'Rales'), ('Fabiana', 'Mak'), ('Anna', 'Berezka'), ('Dalia Primaver', 'Garza'), ('Anna', 'Amato'), ('Thaddea', 'Lock'), ('Caroline', 'Larsson'), ('Ara', 'Micayabas'), ('Sonya', 'Haggstrom'), ('Marta', 'Salgueiro Freixenet'), ('Sarah', 'Schneider'), ('Anna', 'Sidorovitch'), ('Shan Shan', 'Song'), ('Sandra', 'Zmak'), ('Anne', 'Gylling'), ('Paulina', 'Bigos'), ('Dina', 'Senkina'), ('Monica', 'Mir Daud'), ('Chandra', 'Capozzi'), ('Jung Ha', 'Lee'), ('Anna', 'Novo'), ('Romina', 'Mrochen'), ('Yu Ting', 'Lin'), ('Nuria', 'Sanchez Garcia'), ('Amanda', 'Melgarejo'), ('Veronika', 'Chvojkova'), ('Vojislava', 'Lukic'), ('Akiko', 'Kato'), ('Anna Lena', 'Hansen'), ('Myrella', 'De Paula'), ('Yan Chong', 'Chen'), ('Sara', 'Savarise'), ('Maja', 'Vuzem'), ('Irina', 'Cybina'), ('Nicole', 'Ludwig'), ('Stefanie', 'Alfery'), ('Elena', 'Micheloni'), ('Liberty', 'Sveke'), ('Sara', 'Del Barrio Aragon'), ('Sofia', 'Dinis'), ('Carola', 'Gonzalez King Garibo'), ('Yanchong', 'Chen'), ('Jenna', 'Rayner'), ('Stephanie', 'Kusano'), ('Monia', 'Pederzoli'), ('Ana Gloria', 'Osorio Pena'), ('Anete', 'Bandere'), ('Vanessa', 'Pinto'), ('Maja', 'Petrovic'), ('Oormila', 'Ram'), ('Lara', 'Alsamman'), ('Pichittra', 'Thongdach'), ('Korina', 'Perkovic'), ('Hae Youm', 'Bae'), ('Perrine', 'Gauthier'), ('Meghana', 'Paritala'), ('Ira', 'Aleksova'), ('Eloah', 'Lopes'), ('Kristina', 'Andlovic'), ('Rebeca', 'Estupina Ibanez'), ('Sonia', 'Corominas Plaja'), ('Barbara', 'Maciocha'), ('Maria', 'Sharapova'), ('Ju Hee', 'You'), ('Li Li', 'Ding'), ('Jana', 'Votrubcova'), ('Romina', 'Raonic'), ('Naoko', 'Ushiyama'), ('Maria', 'Calbeto'), ('Laura', 'Vallverdu Zafra'), ('Natalia', 'Baez'), ('Jennifer', 'Carati Del Nogal'), ('Vicky', 'Michaud'), ('Anjuri', 'Nagalia'), ('Jarmila', 'Gajdosova'), ('Sofia', 'Ayala'), ('Martha Carolina', 'Bello Urbina'), ('Costanza', 'Pallme Konig'), ('Sara', 'Errani'), ('Wen', 'Zhao'), ('Dia', 'Evtimova'), ('Sheila', 'Solsona Carcasona'), ('Tatiana', 'Cutrona'), ('Tapiwa', 'Marobela'), ('Shahar', 'Peer'), ('Sandra', 'Canrom'), ('Oxana', 'Zhuchenko'), ('Laura', 'Gence'), ('Gajane', 'Vage'), ('Yuka', 'Higuchi'), ('Sara', 'Amo Flores'), ('Olena', 'Leonchuk'), ('Leigh', 'Walsh'), ('Beatriz', 'Rios'), ('Claire', 'Mesnil'), ('Ana', 'Lipartia'), ('Leen', 'Irani'), ('Anya', 'Villanueva'), ('Claire', 'Lablans'), ('Ivana', 'Gala'), ('Ioana', 'Ignat'), ('Hana', 'Vaculinova'), ('Vita', 'Moskaliova'), ('Natalia', 'Zamolotskikh'), ('Sofia', 'Melikishvili'), ('Loriane', 'Favoretto'), ('Natasha', 'Khan'), ('Jing', 'Zhou'), ('Mariangela', 'Avola'), ('Veronica', 'Queen'), ('Ivana', 'Karolyiova'), ('Elena', 'Chalova'), ('Olawaseun', 'Ogundare'), ('Evgeniya', 'Guba'), ('Anastasia', 'Balafouta'), ('Melissa', 'Percy'), ('Daniella', 'Cohen'), ('Aleksandra', 'Lukic'), ('Camilla', 'Lundberg'), ('Francesca', 'Piu'), ('Laura', 'Thorpe'), ('Leslie', 'Koffi'), ('Misa', 'Kinoshita'), ('Cynthia', 'Tornil Marclay'), ('Sonia', 'Bernal'), ('Fadzai', 'Masiyazi'), ('Stanca', 'Muresan'), ('Candelaria', 'Rizzuto'), ('Valerie', 'Saillant'), ('Josanne', 'Van Bennekom'), ('Luboslava', 'Hiresova'), ('Ekaterina', 'Shulaeva'), ('Inna', 'Kuzmenko'), ('Edith', 'Tosner'), ('Anna', 'Sydorska'), ('Maria Dolores', 'Pazo'), ('Jennifer', 'Woyke'), ('Sophia', 'Marks'), ('Natalia', 'Guitler'), ('Martina', 'Pavelec'), ('Juliana', 'Botelho'), ('Amber', 'Brightly'), ('Yu Lin', 'Dai'), ('Dasha', 'Cherkasova'), ('Lizeth', 'King'), ('Rocio', 'Juarez'), ('Katelyn', 'Ross'), ('Helen', 'Wisnienski'), ('Anna', 'Sharp'), ('Joanna', 'Zajac'), ('Pooja', 'Kommireddi'), ('Bianca', 'Schulz'), ('Gabriella', 'Polito'), ('Nina', 'Henkel'), ('Efrat', 'Zlotikamin'), ('Amanda', 'Mankovits'), ('Irina', 'Tsymbal'), ('Magali', 'De Lattre'), ('Ani', 'Mijacika'), ('Nicole', 'Briceno'), ('Julie', 'Wijnakker'), ('Alejandra', 'Saavedra'), ('Stephanie', 'Vock'), ('Marta', 'Oliva Lopez'), ('Atsumi', 'Dohi'), ('Melanie', 'Gloria'), ('Nikol', 'Dimitrova'), ('Alizee', 'Paradis'), ('Aimi', 'Koga'), ('Adina', 'Neustein'), ('Ola', 'Abou Zekry'), ('Chie', 'Hayasaka'), ('Eleonora', 'Luciani'), ('Andrea', 'Sieveke'), ('Ola', 'Abou Zekri'), ('Kamalpreet', 'Bhullar'), ('Marah', 'Calvo'), ('Maria', 'Irigoyen'), ('Simona', 'Dobra'), ('Punam', 'Reddy'), ('Lenore', 'Lazaroiu'), ('Maria', 'Seppi'), ('Karolina', 'Wlodarczak'), ('Rotem', 'Goldstein'), ('Julie', 'Vo'), ('Karin', 'Knapp'), ('Agnes', 'Szatmari'), ('Etti', 'Gans'), ('Helene', 'Tribolet'), ('Maria Jose', 'Vallasciani'), ('Kasumi', 'Hattori'), ('Estefania', 'Balda Alvarez'), ('Megan', 'Alexander'), ('Tania', 'Varela Alvarado'), ('Paulina', 'Ojeda'), ('Clara', 'Schuhmacher Terron'), ('Christine', 'Kainzmeier'), ('Ekaterina', 'Dranets'), ('Meta', 'Sevsek'), ('Marisa', 'Gianotti'), ('Maria', 'Milic'), ('Kaori', 'Sano'), ('Karolina', 'Filipiak'), ('Teresa', 'Oberti'), ('Nantenaina', 'Ramalalaharivololona'), ('Nicole', 'Agostini'), ('Christelle', 'Prato'), ('Ekaterina', 'Pogrebniak'), ('Andra Iulia', 'Savu'), ('Charity', 'Johns'), ('Katarina', 'Vranic'), ('Dana', 'Hartman'), ('Elisabetta', 'Monduzzi'), ('Ji Ae', 'Kim'), ('Qing', 'Yue'), ('Julianne', 'Welford'), ('Laone', 'Botshoma'), ('Daria', 'Bykodarova'), ('Kunkanda', 'Pukjumpa'), ('Esha', 'Sanghvi'), ('Dede Tari', 'Kusrini'), ('Alexandra', 'Hernandez Vallant'), ('Eva', 'Brozova'), ('Ute', 'Schnoy'), ('Alexandra M', 'Haney'), ('Chisako', 'Sugiyama'), ('Shuang', 'Liu'), ('Santa', 'Sushinska'), ('Sarah', 'Braun'), ('Hirono', 'Watanabe'), ('Emmy', 'Fritz Krockow'), ('Lenka', 'Broosova'), ('Olga', 'Khrapkova'), ('Rosanna', 'Hatch'), ('Ana', 'Gonzalez Herreros'), ('Maraike', 'Biglmaier'), ('Sandra', 'Hribar'), ('Selima', 'Frioui'), ('Cho Won', 'Lee'), ('Adriana', 'Fernandez'), ('Samantha', 'Cowan'), ('Tatjana', 'Priachin'), ('Katia', 'Sabate Orera'), ('Ingrid', 'Cseh'), ('Andrea', 'Bonilla'), ('Christin J', 'Thompson'), ('Rumi', 'Abe'), ('Juliana', 'Voigt'), ('Csilla', 'Borsanyi'), ('Yuliya', 'Hnateyko'), ('Nihal', 'Tarek Saleh'), ('Julija', 'Sabanov'), ('Marina', 'Shamayko'), ('Jovana', 'Miletic'), ('Lara', 'Wittmann'), ('Thuy Dung', 'Nguyen'), ('Despina', 'Matsaridou'), ('Lenka', 'Hojckova'), ('Silvia', 'Fassione'), ('Seema', 'Maybud'), ('Kamila', 'Mirzaalimova'), ('Aglaya', 'Kokurina'), ('Tatjana', 'Malek'), ('Tatjana', 'Maria'), ('Dijana', 'Srbinoska'), ('Prim', 'Buaklee'), ('Mega', 'Sukmawati'), ('Sophie', 'Jacobeit'), ('Meg', 'Fanjoy'), ('Lusine', 'Davtyan'), ('Stephanie', 'Dalmacio'), ('Keva', 'Palmer'), ('Amanda', 'Avedissian'), ('Alejandra', 'Del Rey Guardiola'), ('Hannah', 'Eke'), ('Chiaki', 'Matsumoto'), ('Victoria', 'Valls Comamala'), ('Alejandra', 'Meza Cuadra'), ('Esperanza', 'Vinals Rebassa'), ('Agustina', 'Llaver'), ('Maria', 'Abramovic'), ('Florencia', 'Camperchioli'), ('Malgorzata', 'Silka'), ('Karin', 'Conti'), ('Pei', 'Peng'), ('Claudia', 'Spincke'), ('Maria', 'Soo'), ('Madalina', 'Gojnea'), ('Sara', 'Di Paolo'), ('Stephanie', 'Lim'), ('Shana', 'Claes'), ('Katia', 'Alarcon'), ('Simona', 'Kralikova'), ('Kylie', 'Moore'), ('Fani', 'Chifchieva'), ('Lisa', 'Haegele'), ('Afreen', 'Jahan'), ('Olesia', 'Nazarova'), ('Mariana', 'Majic'), ('Yeniseik', 'Gomez'), ('Whitney', 'Chappell'), ('Amanda', 'Mcdowell'), ('Chrissie', 'Seredni'), ('Ia', 'Appelberg'), ('Francesca', 'Kinsella'), ('Vittoria', 'Perugini'), ('Monica', 'Tomas Lopes'), ('Julie', 'Jacobs'), ('Gabriela', 'Robledo Loza'), ('Annie', 'Wise'), ('Aleksandra', 'Wozniak'), ('Monica', 'Neveklovska'), ('Andrea', 'Petkovic'), ('Mika', 'Kawamura'), ('Elyse', 'Steiner'), ('Andrada Lacramioara', 'Dinu'), ('Seira', 'Etori'), ('Michelle', 'Sammons'), ('Yaroslava', 'Shvedova'), ('Jia', 'Zhao'), ('Lisa', 'Marshall'), ('Guillermina', 'Torre'), ('Carmen Maria', 'Ortiz Law'), ('Miho', 'Ishida'), ('Tsvetana', 'Pironkova'), ('Stephanie', 'Vieira'), ('Ye Ra', 'Lee'), ('Jelena', 'Rajic'), ('Jing', 'Ren'), ('Ayumi', 'Yamamoto'), ('Andrina', 'Laegerler'), ('Ashley', 'Spicer'), ('Aurelie', 'Caffa'), ('Mi Seon', 'Lee'), ('Florentina', 'Hanisch'), ('Olga', 'Savchuk'), ('Maria Teresa', 'Salame'), ('Agnes', 'Liepina'), ('Apurvika', 'Shukla'), ('Laura', 'Bel Franquesa'), ('Svetlana', 'Smirnova'), ('Hae Sung', 'Kim'), ('Connor', 'Vogel'), ('Aleksandra', 'Zakrzynska'), ('Ali', 'Van Horne'), ('Susanna', 'Mussi'), ('Razilya', 'Galayamova'), ('Stella', 'Kyradji'), ('Joana Alexandra', 'Comsa'), ('Maria', 'Gomez'), ('Monica', 'Niculescu'), ('Berengere', 'Teix'), ('Maria Irene', 'Squillaci Sandoval'), ('Maria', 'Temez Fernandez'), ('Aoi', 'Hatanaka'), ('Daria', 'Titkina'), ('Tanja', 'Ostertag'), ('Yana', 'Mathias'), ('Francesca', 'Recalcati'), ('Olga', 'Puchkova'), ('Lauren', 'Imre'), ('Graziana', 'Di Giuseppe'), ('Emilia', 'Arnaudovska'), ('Astri', 'Purnawati'), ('Yui', 'Nagasawa'), ('Bojana', 'Bobusic'), ('Holly', 'Richards'), ('Ortansa Nicoleta', 'Danciu'), ('Annelise', 'Fernandez'), ('Micaela', 'Moroni'), ('Kellie', 'Schmitt'), ('Alexandra', 'Karavaeva'), ('Chiara', 'Petrazzuolo'), ('Thalia', 'Diaz Barriga'), ('Hikari', 'Matsuo'), ('Talitha', 'De Groot'), ('Maria', 'Hoyos'), ('Daniela', 'Lovera'), ('Brintney', 'Larson'), ('Samantha', 'Murray'), ('Asha', 'Nanda Kumar'), ('Dariana', 'Kozmina'), ('Junko', 'Yamada'), ('Tatiana', 'Kotelnikova'), ('Yui', 'Takeshima'), ('Erika', 'Takao'), ('Mary', 'Tenu Michael Christon'), ('Laura', 'Barbu'), ('Carolina', 'Gutierrez'), ('Dina', 'Bajramovic'), ('Anna', 'Gerasimou'), ('Miljana', 'Adanko'), ('Gina', 'Fahaiyena'), ('Ozge', 'Atalay'), ('Marcela', 'Vojtiskova'), ('Sina', 'Ladage'), ('Anna', 'Vines Milian'), ('Rebekka', 'Petursdottir'), ('Mireia', 'Cano Guirao'), ('Maria Jose', 'Andres Gomez'), ('Gabbi', 'Tepic'), ('Alice Maria', 'Tunaru'), ('Anjani', 'Tandon'), ('Sarah', 'Aulombard'), ('Luci', 'Gonzalez Puch'), ('Federica', 'Suess'), ('Ana Maria', 'Henriquez'), ('Celina', 'Grissi'), ('Martina', 'Gerlova'), ('Wei Fang', 'Kung'), ('Chieh Ju', 'Wang'), ('Naoko', 'Ueshima'), ('Jie', 'Zeng'), ('Hirono', 'Yoshikawa'), ('Andrea', 'Portillo'), ('Alla', 'Kudryavtseva'), ('Lavinia', 'Tananta'), ('Bianca', 'Smith'), ('Ana', 'Ivanovic'), ('Ashley', 'Murdock'), ('Nazli', 'Kutuk'), ('Lyubov', 'Slovtsova'), ('Carla Lorena', 'Martinez'), ('Victoria', 'Quintero'), ('Claire', 'Soper'), ('Stine', 'Sebakk'), ('Alexandra', 'Aleksieva'), ('Jessica', 'Kirkland'), ('Siobhan', 'Finicane'), ('Varanya', 'Vijuksanaboon'), ('Catalina', 'Arancibia'), ('Eliza', 'Rustandar'), ('Seul Ki', 'Chin'), ('Andrea', 'Herrera'), ('Tania', 'Salas'), ('Miya', 'Solic'), ('Maria', 'Gatalskaya'), ('Maria Paulina', 'Gamboa'), ('Montserrat', 'Gonzalez'), ('Giulia', 'Gatto Monticone'), ('Yuri', 'Fujii'), ('Silvia', 'Soler Espinosa'), ('Natalia', 'Kolat'), ('Alexandra', 'Kichoutkin'), ('Irina', 'Strigalova'), ('Simone', 'Frank'), ('Cammie', 'Gray'), ('Laura', 'Fisher'), ('Yana', 'Levchenko'), ('Jessica', 'Nguyen'), ('Tori', 'Kinard'), ('Iuliia', 'Sandrakova'), ('Nina', 'Munch Soegaard'), ('Aislinn', 'Oneill'), ('Sandrine', 'Jabra'), ('Hannah', 'Grady'), ('Zineb', 'El Ouazzani'), ('Irena', 'Mykytyn'), ('Vasilisa', 'Bardina'), ('Ekaterina', 'Kirianova'), ('Mailyne', 'Andrieux'), ('Natalie', 'Tanevska'), ('Janina', 'Peters'), ('Sarah', 'Lancaster'), ('Fabiola', 'Alvarez Carbajo'), ('Eveline', 'Widiger'), ('Viktorya', 'Gorodetsky'), ('Lucy', 'Warburton'), ('Charlotte', 'Douwma'), ('Maria Sol', 'Mezio'), ('Jana', 'Juricova'), ('Viviane', 'Marani'), ('Kaoru', 'Maezawa'), ('Totinkoa', 'Djanguenane'), ('Rachael', 'Dillon'), ('Clothilde', 'Falconetti'), ('Sophie', 'Quist'), ('Diana', 'Buzean'), ('Christy', 'Striplin'), ('Tamara', 'Orwa'), ('Adrienn', 'Hidvegi'), ('Verdiana', 'Verardi'), ('Evgenia', 'Stupak'), ('Nina', 'Beljajevova'), ('Morgan', 'Lightbourne'), ('Ekaterina', 'Ivanova'), ('Ekaterina', 'Lopes'), ('Shuko', 'Aoyama'), ('Anna', 'Khvedelidze'), ('Rita', 'Vukov'), ('Yoshi', 'Nagano'), ('Denise', 'Giler'), ('Aishwarya', 'Jadhav'), ('Magy', 'Aziz'), ('Maria', 'Sorbello'), ('Christine', 'Wilson'), ('Geneva', 'Gnam'), ('Luiza', 'Barcaui'), ('Ilham', 'Zouaoui'), ('Nargiza', 'Rakhmanova'), ('Joana', 'Pangaio Pereira'), ('Andrea', 'Popovic'), ('Marta', 'Smiechowska'), ('Mihaela', 'Duna'), ('Yui', 'Saikai'), ('Paulina', 'Vargas'), ('Merve', 'Gultekinler'), ('Claudia', 'Sanua'), ('Seema', 'Kumari'), ('Veronika', 'Dostalova'), ('Lu Ling', 'Chen'), ('Natalia', 'Rakhmanina'), ('Brina', 'Spegel'), ('Valeria', 'Pertsukhova'), ('Alexandra', 'Kiesl'), ('Kim', 'Rus'), ('Jutta', 'Bornefeld'), ('Therese', 'Tisseverasinghe'), ('Laura', 'Burns'), ('Huan', 'Xia'), ('Jessica', 'Omeara'), ('Caterina', 'Marusic'), ('Whitney', 'Byrd'), ('Amparo', 'Iglesias'), ('Karen', 'Castiblanco'), ('Yumi', 'Nakano'), ('Arijana', 'Begovic'), ('Aliaa', 'Fakhry'), ('Soledad', 'Podlipnik'), ('Yun Qiao', 'Ren'), ('Tamar', 'Milevskaya'), ('Joyce', 'Martinez'), ('Zeynep Aysu', 'Yavuz'), ('Georgie', 'Gent'), ('Maria Fernanda', 'Riveroll'), ('Jana', 'Albers'), ('Kelly', 'Holtzhausen'), ('Keren', 'Shlomo'), ('Julie', 'Bensilum'), ('Emese', 'Kardhordo'), ('Viktoriya', 'Agryutenkova'), ('Denise', 'Harijanto'), ('Jessica', 'Zok'), ('Maribel', 'Vicente Joyera'), ('Suzanne', 'Matzenauer'), ('Angelique', 'Kerber'), ('Olga', 'Sarli'), ('Blanca', 'Guallart Lain'), ('Andrea', 'Giraldo'), ('Ieva', 'Irbe'), ('Sayyara', 'Mammadova'), ('Manami', 'Miura'), ('Katrin', 'Klein'), ('Julija', 'Gotovskyte'), ('Hye Mi', 'Byun'), ('Maria Isabel', 'Camberos'), ('Sophie', 'Wilkinson'), ('Valerie', 'Tetreault'), ('Ye Ji', 'Seo'), ('Jesica', 'Brys'), ('Kseniia', 'Tokarieva'), ('Caroline', 'Nothnagel'), ('Annalisa', 'Salvatelli'), ('Shi Tong', 'Shao'), ('Shuang', 'Wu'), ('Saskia', 'Monien'), ('Anushree', 'Thammanna'), ('Tatiana', 'Golovin'), ('Andrea', 'Espinosa'), ('Karin', 'Hechenberger'), ('Anna', 'Saltanova'), ('Nancy', 'Metriya'), ('Vandana', 'Murali'), ('Kateryna', 'Malakhova'), ('Josipa', 'Bek'), ('Beatriz', 'Salazar Ruiz'), ('Natalie', 'Toporowski'), ('Bermet', 'Duvanaeva'), ('Ronke', 'Akingbade'), ('Sofia', 'Mitrokhin'), ('Xia Ling', 'Li'), ('Ina', 'Hadziselimovic'), ('Sarah', 'Huah'), ('Sara', 'Mansoor'), ('Justine', 'Ozga'), ('Mateja', 'Horvat'), ('Vanessa', 'Kretsch'), ('Bo Ram', 'Kim'), ('Moira', 'Torrisi'), ('Marija', 'Olujic'), ('Ana Cristina', 'Reyes'), ('Eleonora', 'Iannozzi'), ('Febri', 'Joana'), ('Yekaterina', 'Morozova'), ('Lauren', 'Lui'), ('Anna', 'Bartenstein'), ('Ivy Kristel', 'De Castro'), ('Natasha', 'Karolyi'), ('Claudia', 'Pontoglio'), ('Desiree', 'Alesiani'), ('Stefanie', 'Kaindl'), ('Nikola', 'Frankova'), ('Maja', 'Kambic'), ('Oksana', 'Khomyk'), ('Corina Claudia', 'Corduneanu'), ('Christine', 'Sperling'), ('Sarah', 'Fansler'), ('Colleen', 'Rielley'), ('Eugenia', 'Grebenyuk'), ('Ha Yang', 'Choi'), ('Belfin', 'Sumbul'), ('Rana', 'Tharwat Hafez'), ('Kali A', 'Krisik'), ('Sabina', 'Gunnarsson'), ('Tuule', 'Tani'), ('Neena', 'Sharma'), ('Teele', 'Tani'), ('Karolina', 'Jovanovic'), ('Imane', 'Maloufi'), ('Fadzai', 'Mawisire'), ('Alexandra', 'Mueller'), ('Lara', 'Fakhoury'), ('Thuy Trang', 'Le Nguyen'), ('Raquel', 'Seijo Rodriguez'), ('Victoria', 'Abbassi'), ('Mariana', 'Muci Torres'), ('Nicole', 'Monteiro'), ('Idunn', 'Hertzberg'), ('Veronika', 'Adami'), ('Jelena', 'Stanivuk'), ('Dagmara', 'Siara'), ('Sabrina', 'Allaut'), ('Stella', 'Menna'), ('Martina', 'Ondrackova'), ('Desiree', 'Bastianon'), ('Pauline', 'Bisset'), ('Caitlin', 'Whoriskey'), ('Manar', 'Al Jazzaf'), ('Nicole', 'Grunwald'), ('Yana', 'Zvarich'), ('Ana Laura', 'Ochoa Magana'), ('Valeria', 'Faccinetti'), ('Angelica', 'Chavez'), ('Ana', 'Veselinovic'), ('Katharina', 'Siller'), ('Francisca', 'Salas'), ('Emma', 'Hiles'), ('Anna', 'Boixader Martinez'), ('Jessica', 'Schaer'), ('Emma', 'Hayman'), ('Irina', 'Tregub'), ('Gaelle', 'Desperrier'), ('Daniela', 'Leyria Moreno'), ('Lindsay', 'Burdette'), ('Grace', 'Hutson'), ('Camila', 'Deluchi'), ('Misato', 'Fujita'), ('Sonia', 'Sandano'), ('Veronica', 'Coslovich'), ('Yuan Yuan', 'Zhong'), ('Anastasia', 'Zvereva'), ('Julia', 'Parasyuk'), ('Nadia', 'Adnani'), ('Nicola', 'Geuer'), ('Mari', 'Yamauchi'), ('Sofie', 'Kofoed Thomsen'), ('Teodora', 'Mircic'), ('Katerina', 'Polunina'), ('Karen Natalia', 'Martinez Bernal'), ('Daniela', 'Gudelj'), ('Sampada', 'Kanede'), ('Laura', 'Siegemund'), ('Diana', 'Woodcock'), ('Marina', 'Erakovic'), ('Michaela', 'Johansson'), ('Suzelle', 'Davin'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Antia', 'Ghiorghiu'), ('Simona', 'Demont'), ('Elodie', 'Caillat'), ('Zeynep', 'Ozbarlas'), ('Erin', 'Liefeld'), ('Marisol', 'Aguilar'), ('Ana', 'Beltran Trigueros'), ('Anastasiya', 'Slyusarchyk'), ('Sara', 'Meghoufel'), ('Amanda', 'Granson'), ('Barbora', 'Bozkova'), ('Lili', 'Grebinuk'), ('Marta', 'Lesniak'), ('Elze', 'Potgieter'), ('Camila', 'Belassi'), ('Yuvanna', 'Montalvo'), ('Lucie', 'Kabacova'), ('Violette', 'Huck'), ('Louise', 'Doutrelant'), ('Aleksandra', 'Malovic'), ('Eun Jung', 'Kim'), ('Kalliopi', 'Katsoupi'), ('Diana', 'Eriksson'), ('Anahi', 'Navarro Ruano'), ('Megumi', 'Fukui'), ('Kristen', 'Mcvitty'), ('Inna', 'Tchepournaya'), ('Raluca', 'Nedelea'), ('Jung Yoon', 'Shin'), ('Cristina', 'Martinez'), ('Min Hwa', 'Yu'), ('Kristen A', 'Bleakley'), ('Ruxandra Floriana', 'Tudosoiu'), ('Tatia', 'Mikadze'), ('Cristiana', 'Marotta'), ('Andra', 'Gavril'), ('Marlene', 'Ryan'), ('Sophie', 'Kobuch'), ('Sanja', 'Racic'), ('Diana', 'Torres'), ('Bianca', 'Eichkorn'), ('Marta', 'Torbarina'), ('Julie', 'Chao'), ('Joohyoung', 'Kim'), ('Salome', 'Aladashvili'), ('Stephanie', 'Luk'), ('Porntip', 'Mulsap'), ('Ineke', 'Mergaert'), ('Belen', 'Perez De Juan Glez'), ('Anne', 'Le Gall'), ('Karin', 'Lundmark'), ('Thiyumi', 'Abeysinghe'), ('Bianca', 'Koch'), ('Roxana', 'Alexandru'), ('Melissa', 'Saiontz'), ('Ashley', 'Neumann'), ('Sara', 'Nael'), ('Yasmin', 'Enrich'), ('Kyung Hwa', 'Lee'), ('Yi Fan', 'Chen'), ('Lucia', 'Jara Lozano'), ('Doina Nicoleta', 'Lovin'), ('Sandra', 'Liebl'), ('Celia', 'Gil Mateo Sasieta'), ('Patricia', 'Soesilo'), ('Tereza', 'Hladikova'), ('Magdalena', 'Kiszczynska'), ('Soon Mi', 'Seo'), ('Shatel', 'Tavita'), ('Yukiko', 'Terai'), ('Maria', 'Perevoschikova'), ('Natalia Maria', 'Christenson'), ('Lorena', 'Rebolledo'), ('Jasmin', 'Heckel'), ('Jamie', 'Lieberman'), ('Yevgenia', 'Nudga'), ('Maria Lavinia', 'Piva'), ('Gluay', 'Kampookaew'), ('Anne Marie', 'Simonsen'), ('Yan', 'Zhang'), ('Iva', 'Velkovska'), ('Franziska', 'Klotz'), ('Valentina', 'Ponomartseva'), ('Ewa', 'Szatkowska'), ('Alise', 'Vaidere'), ('Milica', 'Tomic'), ('Tina', 'Akaegbusi'), ('Elly', 'Strother'), ('Marjorie', 'Ondeck'), ('Sarah', 'Harding'), ('Iris', 'Khanna'), ('Irene', 'Rehberger Bescos'), ('Laura', 'Borza'), ('Edilyn', 'Balanga Margate'), ('Nicoleta Mihaela', 'Negru'), ('Dora', 'Somossy'), ('Evgeniya', 'Kim'), ('Lenka', 'Wienerova'), ('Tania', 'Rice'), ('Roberta', 'Martellini'), ('Olivia', 'Marshall'), ('Catrin', 'Deck'), ('Julia', 'Trunk'), ('Rita', 'Gouveia'), ('Lenka', 'Danielova'), ('Christina', 'Amo'), ('Melisa', 'Miranda Otarola'), ('Stephanie', 'Wetmore'), ('Katariina', 'Tuohimaa'), ('Urska', 'Klemenc'), ('Benedicte', 'Vliegen'), ('Tomo', 'Akutsu'), ('Olivia', 'Vrettas'), ('Bernadetta', 'Birkas'), ('Priyanka', 'Tohan'), ('Ksenia', 'Lopina'), ('Magdalena', 'Ekert'), ('Catherine', 'Newman'), ('Courtney', 'Ulery'), ('Ana', 'Miguel Ivern'), ('Emilie', 'Van Boekel'), ('Mihaela', 'Buzarnescu'), ('Yasmin', 'Schnack'), ('Laia', 'Santamaria Colomer'), ('Juanita', 'Munoz'), ('Maria', 'Zharkova'), ('Diana', 'Nakic'), ('Dian', 'Mayasari'), ('Nina', 'Makarova'), ('Ellen', 'Yeung'), ('Wakana', 'Ichikawa'), ('Daniela', 'Suarez'), ('Krystina', 'Marcio'), ('Victoria', 'Tseitlin'), ('Michelle', 'Pang'), ('Miriam', 'Steinhilber'), ('Kamonthip', 'Saovana'), ('Bibiane', 'Schoofs'), ('Barbara', 'Kvelstein'), ('Diana', 'Toma'), ('Yurina', 'Koshino'), ('Rui', 'Bao'), ('Daniela', 'Scivetti'), ('Megumi', 'Matsuyama'), ('Carolina Magalhaes', 'Malheiros'), ('Maria Fernanda', 'Hernandez'), ('Zineb', 'Hilali'), ('Manuela', 'Esposito'), ('Ashley', 'Brooks'), ('Alexandra', 'Gwizdowski'), ('Veronika', 'Babayan'), ('Sandra Mirela', 'Rus'), ('Phoebe', 'Di Leo'), ('Trina', 'Slapeka'), ('Julie', 'Stas'), ('Alina', 'Orcholska'), ('Gozde', 'Unkaya'), ('Makiho', 'Kozawa'), ('Amanda', 'Craddock'), ('Anna', 'Jugeli'), ('Lindsay', 'Jones'), ('Miljana', 'Jocic'), ('Katja', 'Stemmer'), ('Natalia', 'Rudnouskaya'), ('Sahar', 'Amini Hajibashi'), ('Anne', 'Redfern'), ('Mikayla', 'Rogers'), ('Elizabeth', 'Plotkin'), ('Cecile', 'Bardoux'), ('Marcella', 'Koek'), ('Erin', 'Boast'), ('Eun Jung', 'Yang'), ('Stephanie', 'Jasper'), ('Nikolina', 'Renic'), ('Ying', 'Qian'), ('Gangothri', 'Sandri'), ('Luisa', 'Cantu'), ('Edit Katalin', 'Suhajda'), ('Juliana', 'Fernandes'), ('Hailee', 'Elmore'), ('Laura Ioana', 'Andrei'), ('Liset', 'Brito Herrera'), ('Sara', 'Pujals Perez'), ('Julia', 'Helbet'), ('Petra', 'Pajalic'), ('Saori', 'Karikomi'), ('Paola', 'Sprovieri'), ('Elizabeth', 'Kobak'), ('Ilina', 'Kroushovski'), ('Jana', 'Derkasova'), ('Nicole', 'Thyssen'), ('Romana', 'Janshen'), ('Sabrina', 'Mendez Dominguez'), ('Paulina', 'Jorquera'), ('Elisa', 'Mansell'), ('Amelia', 'Frendo'), ('Ekaterina', 'Makarova'), ('Zorica', 'Petrov'), ('Katarina', 'Krpan'), ('Erin', 'Clark'), ('Hadjer', 'Bouali'), ('Yamila', 'Halle'), ('Shao Yuan', 'Kao'), ('Claudina', 'Covarrubias'), ('Yvette', 'Hyndman'), ('Lauren', 'Dossor'), ('Jessica', 'Weeks'), ('Maha', 'Berty'), ('Sydni', 'Katz'), ('Wen Hsin', 'Hsu'), ('Natalie', 'Handler'), ('Paola', 'Alvarado'), ('Michaela', 'Vogel'), ('Juliana', 'Franco'), ('Kim', 'Roberts'), ('Stefania', 'Vizireanu'), ('Anna', 'Korzeniak'), ('Puleng', 'Tlhophane'), ('Jana', 'Kulova'), ('Sara', 'Catarain Ruiz'), ('Aniko', 'Kiss'), ('Nerea', 'Irisarri Duran'), ('Maria', 'Melihova'), ('Diane', 'Cheymol'), ('Natasha', 'Vieira'), ('Diana', 'Popescu'), ('Nicole', 'Kantor'), ('Eliana', 'Bazan'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Daiana', 'Negreanu'), ('Jazmin', 'Hernandez'), ('Cristina Diana', 'Ghinda'), ('Inga', 'Beermann'), ('Anastasia', 'Solomko'), ('Charlotte', 'Martin'), ('Ekaterina', 'Kosminskaya'), ('Barbara', 'Oliveira'), ('Michela', 'Pizzo'), ('Erica', 'Tedoldi'), ('Georgiana', 'Smyser'), ('Eleanor', 'Peters'), ('Yulia', 'Pilnik'), ('Ting Ting', 'Lu'), ('Cristina', 'Greco Naccarato'), ('Karen', 'Nijssen'), ('Brittany', 'Blalock'), ('Rebecca', 'Parks'), ('Anna', 'Kechko'), ('Maria Sole', 'Barbieri'), ('Marika', 'Petrosino'), ('Gabriela', 'Necea'), ('Maria', 'Miziouk'), ('Di', 'Hu'), ('Yulia', 'Fedossova'), ('Aleksandra', 'Marjanovic'), ('Yuan Yuan', 'Shi'), ('Katarina', 'Milinkovic'), ('Mai', 'Fujiwara'), ('Magdalena', 'Bresson'), ('Chelsea', 'Jones'), ('Beatriz', 'Vall Cava De Llan'), ('Handra Anabela', 'Mangulea'), ('Mariam', 'Mikuchadze'), ('Sara', 'Tegner'), ('Lavinia', 'Timme'), ('Maria', 'Gugel'), ('Fernanda', 'Zacouteguy'), ('Miki', 'Chinen'), ('Megan', 'Broderick'), ('Sophie', 'Cornerotte'), ('Roxanne', 'Sammel'), ('Elena Stela', 'Latea'), ('Da Hye', 'Jeong'), ('Julia', 'Bone'), ('Radana', 'Holusova'), ('Aldana', 'Caroleo'), ('Katrina', 'Tsang'), ('Ceylan', 'Engin'), ('Tara', 'Iyer'), ('Laurene', 'Fayol'), ('Joanna', 'Carswell'), ('Jenny', 'Frisell'), ('Erin', 'Paul'), ('Marina', 'Cossou'), ('Olivia', 'Scarfi'), ('Manon', 'Garcia'), ('Golda', 'Rubina'), ('Elana', 'Agranovich'), ('Cagla', 'Urcu'), ('Maja', 'Tadic'), ('Elrien', 'De Villiers'), ('Sadietou Biguedenam', 'Mayou'), ('Liege', 'Vieira'), ('Rana', 'El Derwy'), ('Linda', 'Zahlavova'), ('Anna', 'Movsisyan'), ('Dijana', 'Stojic'), ('Lema', 'Ateba'), ('Edita', 'Raca'), ('Zena', 'Williams'), ('Mireia', 'Gonzalez Bosch'), ('Sanja', 'Ancic'), ('Sofia', 'Kvatsabaia'), ('Martina', 'Lautenschlager'), ('Martina', 'Andornino'), ('Anastasia', 'Ivanina'), ('Teliana', 'Pereira'), ('Lutfiye', 'Esen'), ('Tatiany', 'Tangerino'), ('Laura', 'Peterzan'), ('Berta', 'Morata Flaquer'), ('Selma', 'Babic'), ('Michaela', 'Kissell'), ('Sofia', 'Thomaidou'), ('Nitisha', 'Deodhar'), ('Alexis', 'Dorr'), ('Ahinara', 'Ramos'), ('Joanna', 'Dobrowolska'), ('Mailen', 'Auroux'), ('Ana Paula', 'De La Pena'), ('Olga', 'Koutseridi'), ('Cristina Mirela', 'Prodanel'), ('Nadja', 'Roma'), ('Raquel', 'Castro'), ('Alice', 'Hall'), ('Wen Ling', 'Wang'), ('Irina', 'Matiychyk'), ('Yurika', 'Moriya'), ('Anja', 'Poglajen'), ('Angela', 'Werschel'), ('Chang', 'Xu'), ('Natalia', 'Niemiec'), ('Barbora', 'Bachmanova'), ('Jessica', 'Sweeting'), ('Akari', 'Inoue'), ('Anastasia', 'Poltoratskaya'), ('Laia', 'Gonzalez Garrido'), ('Teresa', 'Ferrer Lopez Cuervo'), ('Cecilia', 'Lainez'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Silvia Elena', 'Irimescu'), ('Stefania', 'Boffa'), ('Megan', 'Sporndli'), ('Jesica', 'Escobar'), ('Justine', 'Bourdon'), ('Alena', 'Bayarchyk'), ('Jessica', 'Mcclintock'), ('Katherine', 'White'), ('Karina', 'Porushkevich'), ('Caroline', 'Dedering'), ('Oksana', 'Djulai'), ('Maeva', 'Thiebaud'), ('Kirsten', 'Flower'), ('Nadia', 'Abdala'), ('Anna', 'Smith'), ('Avgusta', 'Tsybysheva'), ('Melissa', 'Laharrague'), ('Suhaila', 'Jad Gomez'), ('Eirini', 'Vasileiadou'), ('Justine', 'Sutherland'), ('Lauren', 'Sabacinski'), ('Johanna', 'Larsson'), ('Chayenne', 'Ewijk'), ('Anna', 'Radova'), ('Cynthia', 'Prieto Garcia'), ('Maja', 'Milas'), ('Viktoria', 'Kutuzova'), ('Shona', 'Lee'), ('Juri', 'Fukushima'), ('Olga', 'Elkin'), ('Pola', 'Olczak'), ('Lisa', 'Wilkinson'), ('Caroline', 'Courmont'), ('Anum', 'Saeed'), ('Ophelie', 'Vergnes'), ('Punchanok', 'Khunpitak'), ('Maren', 'Sundermeier'), ('Olga', 'Govortsova'), ('Misleydis', 'Diaz Gonzalez'), ('Ana', 'Curto'), ('Alexandra', 'Kudryavtseva'), ('Olusola', 'Gbadamosi'), ('Selma', 'Salkovic'), ('Lucie', 'Pazderova'), ('Maria', 'Spenceley'), ('Marit', 'Nordfors'), ('Sandhya', 'Nagaraj'), ('Audrey', 'Laib'), ('Lucie', 'Makrlikova'), ('Audrey', 'Dujardin'), ('Nastja', 'Recnik'), ('Daria', 'Galyanova'), ('Alexandra', 'Poorta'), ('Carla', 'Suarez Navarro'), ('Alisa', 'Kagukina'), ('Emilia', 'Bindi'), ('Nadia', 'Lee'), ('Desiree', 'Schelenz'), ('Lauren', 'Macfarlane'), ('Soetkin', 'Van Deun'), ('Letizia', 'Lo Re'), ('Petra', 'Viskovic'), ('Lorena', 'Valente'), ('Ketravee', 'Attachoo'), ('Sarah', 'Summerfield'), ('Laura', 'Cuddon Large'), ('Wendy', 'Kong'), ('Betina', 'Jozami'), ('Agustina', 'Lepore'), ('Hande', 'Yesil'), ('Kristina', 'Ufimtseva'), ('Ornella', 'Gentile'), ('Juliana', 'Umeki'), ('Yuki', 'Shinada'), ('Aurelia', 'Janeczek'), ('Liene', 'Linina'), ('Rachael', 'Hall'), ('Francesca', 'Bonomelli'), ('Camilla', 'Bortolon'), ('Gaia', 'Lazzaroni'), ('Madura', 'Ranganathan'), ('Alessia', 'Cecchini'), ('Olivia', 'Lukaszewicz'), ('Stephanie', 'Vongsouthi'), ('Anja Vanessa', 'Peter'), ('Jenny', 'Saarnilina'), ('Courtney M', 'Petero'), ('Yuka', 'Yamaguchi'), ('Natalie', 'Piquion'), ('Laila', 'Ben Abderrahman'), ('Denise', 'Mascherini'), ('Nina', 'Septrita'), ('Paulina', 'Pokorna'), ('Ivana', 'Tomaic'), ('Agnieszka', 'Zak'), ('Yuliya', 'Lyndina'), ('Irina', 'Adetu'), ('Natasha', 'Hillyer'), ('Bo Ra', 'Kwak'), ('Yasmine', 'Sahyoun'), ('Sofi Helene', 'Weckman'), ('Tifanie', 'Treece'), ('I Hsuan', 'Hwang'), ('Eleonora', 'Sidjemileva'), ('Jenna', 'Webster'), ('Kunykei', 'Koichumananova'), ('Marrit', 'Boonstra'), ('Jenna May', 'Osborne'), ('Jacklyn', 'Lambert'), ('Iva', 'Buljubasic'), ('Irena', 'Pavlovic'), ('Radoslava', 'Serakova'), ('Laura', 'Bsoul'), ('Veronika', 'Ovcacikova'), ('Magdalena', 'Rybarikova'), ('Chloe', 'West'), ('Aleksandra', 'Stankovic'), ('Andrea', 'Remynse'), ('Anine Cornelius', 'Lovdal'), ('Gabriela', 'Gonzalez'), ('Kristiina', 'Eskola'), ('Galyna', 'Kosyk'), ('Yue', 'Wan'), ('Marcela Guimaraes', 'Bueno'), ('Katarina', 'Anic'), ('Katsarina', 'Zheltova'), ('Simone', 'Templeton'), ('Ramona', 'Erb'), ('Benedetta', 'Davato'), ('Valeria', 'Casillo'), ('Rebecca', 'Bran'), ('Amanda', 'Bran'), ('Ana Maria', 'Gherman'), ('Magdalena', 'Plucinski'), ('Fernanda', 'Hermenegildo'), ('Freya', 'Younes'), ('Viky', 'Nunez Fuentes'), ('Rocio', 'Galan'), ('Joana', 'Roda'), ('Erina', 'Nomiya'), ('Florentine', 'Wengler'), ('Jasmin', 'Mertens'), ('Stephanie', 'Macfarlane'), ('Ashley', 'Anderson'), ('Filipa', 'Ribeiro'), ('Laurianne', 'Henry'), ('Anja', 'Nowak'), ('Shiran', 'Ben Nun'), ('Catalina', 'Vigener'), ('Maud', 'Vigne'), ('Kehinde', 'Amusan'), ('Raquel', 'Pina'), ('Mao', 'Suzuki'), ('Daria', 'Petrovic'), ('In Young', 'Hwang'), ('Wen Tzu', 'Lai'), ('Bianca Ioana', 'Bonifate'), ('Rocio', 'Frausto'), ('Maria Gabriela', 'Linares'), ('Slavina', 'Kaplanska'), ('Patricia', 'La Rovere'), ('Sargam', 'Gupta'), ('Insa', 'Villnow'), ('Martina', 'Sebastiani'), ('Widhi', 'Setyorini'), ('Ksenia', 'Sidorova'), ('Tamara', 'Madjeric'), ('Julia', 'Goerges'), ('Laura', 'Van De Stroet'), ('Hania', 'Bouakel'), ('Daria', 'Babushkina'), ('Jasmin', 'Steinherr'), ('Patricia', 'Vollmeier'), ('Tatsiana', 'Kapshay'), ('Joana', 'Santiago'), ('Mariana', 'Gonzalez'), ('Catherine', 'Fall'), ('Lena', 'Litvak'), ('Amanat', 'Thind'), ('Franci', 'Betancourt'), ('Sandra', 'Wikstrom'), ('Stephanie', 'Sullivan'), ('Hilary', 'Barte'), ('Beatriz', 'Garcia Vidagany'), ('Patricia', 'Cortes'), ('Injie', 'Fawzy'), ('Jane', 'Melichar'), ('Julie', 'Uwague'), ('Alessandra', 'Ferrazzi'), ('Daiana', 'Bazzano'), ('Milica', 'Zivanovic'), ('Guillermina', 'Zukerman'), ('Raquel', 'Guede Estevez'), ('Chantal', 'Beetham'), ('Taylor', 'Marable'), ('Ellah', 'Nze'), ('Rose', 'Ojonimi'), ('Danira', 'Fabijanovic'), ('Sandra', 'Mente Ladanai'), ('Carolina', 'Petrelli'), ('Jennifer', 'Stevens'), ('Erika', 'Sema'), ('Lu', 'Guo'), ('Daniela', 'Castillo'), ('Franziska', 'Goetz'), ('Veronika', 'Kolarova'), ('Larissa', 'Ferreira Melo'), ('Natia', 'Gegia'), ('Arthi', 'Duraisamy'), ('Verena', 'Piccolo'), ('Saba', 'Aziz'), ('Jessica', 'Brouwer'), ('Ena', 'Shimomura'), ('Florencia', 'Molinero'), ('Carla', 'Caetano'), ('Ayu Fani', 'Damayanti'), ('Claudia', 'Wasilewski'), ('Daniela', 'Vukadinovic'), ('Wiem', 'Ben Sedrine'), ('Lynn', 'Philippe'), ('Anna', 'Boada Plade Llorens'), ('Michelle', 'Russ'), ('Julia', 'Moriarty'), ('Ji Hyun', 'Kim'), ('Tatiana', 'Silbereisen'), ('Ofelya', 'Poghosyan'), ('Yuliya', 'Trubachova'), ('Tiffany', 'Welcher'), ('Noelle', 'Hickey'), ('Serena', 'Strano'), ('Sara', 'Jamil'), ('Angelina', 'Gabueva'), ('Amoolya', 'Raghunath'), ('Nicoleta Ana Maria', 'Bara'), ('Tejashwi', 'Narayana'), ('Anukriti', 'Prasad'), ('Andra Elena', 'Voinea'), ('Mathilda', 'Engstrom'), ('Joanna', 'Kacprzyk'), ('Elizabeth', 'Akutsiya'), ('Magdalena', 'Tokarczyk'), ('Christina', 'Liles'), ('Sylwia', 'Huminska'), ('Anamaria Alexandra', 'Sere'), ('Yun Ling', 'Ng'), ('Musangu', 'Muchunga'), ('Manon', 'Veldhorst'), ('Katie', 'Orletsky'), ('Cameron', 'Hubbs'), ('Mary', 'Gambale'), ('Jennifer', 'Holmberg'), ('Natalia', 'Garay'), ('Ana Rosa', 'Cabeza Candela'), ('Joanna', 'Craven'), ('Melanie', 'Gomila Bengtsson'), ('Rym', 'Cherni'), ('Cameron', 'Ellis'), ('Mahault', 'De Claviere'), ('Sheena', 'Jain'), ('Volha', 'Duko'), ('Katerina', 'Kramperova'), ('Karolina', 'Domanski'), ('Dominika', 'Kocwin'), ('Sarah', 'Andrew'), ('Phillipa', 'Reakes'), ('Agnes', 'Szavay'), ('Ylva', 'Kaiser'), ('Cristina', 'Bala Abella'), ('Kristyna', 'Sramkova'), ('Maggie', 'Mello'), ('Erin', 'Billett'), ('Elne', 'Barnard'), ('Aleksandra', 'Malyarchikova'), ('Hila', 'Elster'), ('Andrea', 'Ferrari'), ('Lais', 'Souza'), ('Mia', 'Gordon'), ('Maria', 'Zlydnikova'), ('Vivian', 'Segnini'), ('Tegan', 'Edwards'), ('Martina', 'Caciotti'), ('Beate', 'Giller'), ('Ayushi', 'Sinha'), ('Lea Katharina', 'Jacob'), ('Shan Shan', 'Li'), ('Ewa', 'Kopczynska'), ('Michaella', 'Krajicek'), ('Alexandra', 'Glebova'), ('Whitney', 'Wilson'), ('Jacquelynn', 'Tang'), ('Sofia', 'Shapatava'), ('Olga', 'Ippolitova'), ('Andra Mihaela', 'Coprean'), ('Tiffany', 'Cornelius'), ('Simona', 'Struzzolino'), ('Joanne', 'Karaitiana'), ('Marianne', 'Van Oppen'), ('Noemie', 'Scharle'), ('Nikola', 'Vajdova'), ('Monika', 'Lalewicz'), ('Michaela', 'Kopacin'), ('Stefanie', 'Rath'), ('Julia', 'Browne'), ('Kristina', 'Radan'), ('Anais', 'Van Cauter'), ('Ruth', 'Sabbe'), ('Deborah', 'Armstrong'), ('Bettina', 'Mittermeier'), ('Alice', 'Bellicha'), ('Antonia', 'Kontozoudaki'), ('Jessica', 'Palma'), ('Paula', 'Hors Comadira'), ('Magdalena', 'Wiecha'), ('Xi', 'Lu'), ('Margarita', 'Spicin'), ('Maibel', 'Quintana'), ('Shuai', 'Zhang'), ('Fernanda', 'Ferreira'), ('Federica', 'Grazioso'), ('Noriko', 'Uehara'), ('Katarina', 'Barclay'), ('Nadine', 'Sabbagh'), ('Carlotta', 'Lehner'), ('Amanda', 'Marrow'), ('Florence', 'De Vrye'), ('Ekaterina', 'Jeritsheva'), ('Sonia', 'Klamczynska'), ('Victoria', 'Zotter'), ('Seo Kyung', 'Kang'), ('Regina', 'Kulikova'), ('Carmen', 'Lopez Sanchez'), ('Stefanie', 'Nunic'), ('Elizaveta', 'Tochilovskaya'), ('Eylul', 'Benli'), ('Maite', 'Gabarrus Alonso'), ('Laura', 'Manfredonia'), ('Sara', 'Nilsson'), ('Federica', 'Limone'), ('Ana Luiza', 'Ferreira'), ('Evgeniya', 'Rodina'), ('Megan', 'Garcia'), ('Marina', 'Melnikova'), ('Cecilia', 'Gratian'), ('Erika', 'Zanchetta'), ('Tanya', 'Stoimenova'), ('Yi Jing', 'Zhao'), ('Yanet', 'Blanco Puentes'), ('Maddie', 'Brooks'), ('Laura', 'Noguera Aparicio'), ('Tatyana', 'Ignatchenko'), ('Alja', 'Zec Peskiric'), ('Lucia', 'Sariscanova'), ('Martina', 'Agarici'), ('Penporn', 'Chantawannop'), ('Yu Xin', 'Miao'), ('Petra', 'Sunic'), ('Neus', 'Rodriguez Menendez'), ('Haruka', 'Suga'), ('Ellen', 'Barry'), ('Amy', 'Anstey'), ('Heinar', 'Boltea'), ('Aleksandra', 'Markovic'), ('Fleur', 'Goedkoop'), ('Manami', 'Hirata'), ('Wan Ting', 'Liu'), ('Doron', 'Muravnik'), ('Monika', 'Kochanova'), ('Yuki', 'Kusunose'), ('Stefania', 'Carrizo'), ('Abbie', 'Probert'), ('Ayaka', 'Ito'), ('Kaja', 'Podobnik'), ('Kirsten Andrea', 'Weedon'), ('Sona', 'Novakova'), ('Nuria', 'Cascon Lapido'), ('Sara', 'Perez Gonzalez'), ('Eugeniya', 'Pashkova'), ('Gabriela', 'Mejia Tenorio'), ('Monika', 'Hadvigerova'), ('Dominique', 'Wimmer'), ('Natalia', 'Guevara'), ('Amina', 'Rakhim'), ('Ashlee', 'Brown'), ('Si Si', 'Qiu'), ('Ellen', 'Linsenbolz'), ('Rebecca', 'Alessi'), ('Meera', 'Kantaria'), ('Chen', 'Liang'), ('Amandine', 'Cazeaux'), ('Gabriela', 'Vergara'), ('Gracia', 'Fuentes'), ('Ekaterina', 'Prozorova'), ('Romina', 'Palmisano'), ('Elena', 'Giurgiu Dorina'), ('Martina', 'Sallusti'), ('Jara', 'Ghadri'), ('Thavindra', 'Ekanayake'), ('Maria Fernanda', 'Alvarez Teran'), ('Giannina', 'Minieri'), ('Nikola', 'Matovicova'), ('Petra', 'Putnik'), ('Alexandra', 'Panova'), ('Maritza', 'Hernandez'), ('Vania', 'King'), ('Raluca', 'Olaru'), ('Nevena', 'Selakovic'), ('Florella', 'Moggia'), ('Sanjana', 'Kapur'), ('Agnieszka', 'Radwanska'), ('Charlotte', 'Soubrie'), ('Jillian', 'Oneill'), ('Adriana', 'Alvarez Tostado'), ('Steffi', 'Weterings'), ('Yasmin', 'Hamza'), ('Jenny', 'Drummond'), ('Pauline', 'Ribot'), ('Jessica', 'Gardefjord'), ('Julia Maria', 'Navarro Navarro'), ('Karoline', 'Steiro'), ('Marne', 'Roos'), ('Micaela', 'Hein'), ('Lara', 'Conrad'), ('Estefania', 'Plaza'), ('Paloma', 'Escobedo'), ('Vlada', 'Ekshibarova'), ('Karla', 'Gallardo'), ('Hanna', 'Andreyeva'), ('Tina', 'Pieger'), ('Laura', 'Milner'), ('Melissa', 'Ravestein'), ('Sara', 'Neto'), ('Carina', 'Weisser'), ('Raphaela', 'Chaves Borges'), ('April', 'Albertini'), ('Selina', 'Guns'), ('Hedda', 'Wolmarans'), ('Giulia', 'Gardani'), ('Brittany', 'Teei'), ('Florina', 'Nosca'), ('Mariella', 'Greschik'), ('Alexandra', 'Sakalaridi'), ('Federica', 'Dambrosio'), ('Sofi', 'Papadopoulou'), ('Valentina', 'Piccolo'), ('Conchita Corazon', 'Zoleta'), ('Julia', 'Cohen'), ('Gabriela', 'Vieira'), ('Zorana', 'Anastasijevic'), ('Linfeifei', 'Fan'), ('Mikaela', 'Hockman'), ('Celine', 'Rolly'), ('Mariya', 'Tverdikova'), ('Cristina', 'Sanchez Quintanar'), ('Karina', 'Venditti'), ('Natalia', 'Orlova'), ('Aline', 'Berkenbrock'), ('Elisaveta', 'Pironkova'), ('Fatima', 'El Allami'), ('Lalatiana', 'Randriamanantena'), ('Neha', 'Rana'), ('Komang Sri', 'Maryati'), ('Simonetta', 'Miori'), ('Joanna', 'Matuszczyk'), ('Farida', 'Karaieva'), ('Anna', 'Wishink'), ('Florence', 'Fleury'), ('Gabriela', 'Roux'), ('Katarina', 'Mlcochova'), ('Mona', 'Mansour'), ('Beatriz', 'Juan Miranzo'), ('Myriam', 'Sopel'), ('Christina', 'Tan'), ('Maria Daniela', 'Yanez'), ('Leonie', 'Guijt'), ('Ekaterina', 'Tsiklauri'), ('Sherazad', 'Benamar'), ('Valerie', 'Verhamme'), ('Sherazad', 'Reix'), ('Geanina', 'Mircea'), ('Anastasia', 'Petukhova'), ('Claire', 'Birnie'), ('Xenia', 'Tsilimigra'), ('Ivana', 'Culkovic'), ('Estelle', 'Guisard'), ('Anna', 'Fitzpatrick'), ('Carlota', 'Schwartz Caballe'), ('Ornella', 'Caron'), ('Daria', 'Razarenova'), ('Engela', 'Olivier'), ('Karina', 'Ahuja'), ('Stacey', 'Grant'), ('Rie', 'Koganei'), ('Aodhnait', 'Lombard'), ('Joanna', 'Szymczyk'), ('Sarai', 'Torres'), ('Patience', 'Onebamhoin'), ('Kelcy', 'Mckenna'), ('Maksymiliana', 'Wandel'), ('Anna', 'Geissler'), ('Navodi', 'De Zoysa'), ('Delia', 'Damaschin'), ('Yuriko', 'Sakai'), ('Jelena', 'Durisic'), ('Kamilia', 'Daya'), ('Anamika', 'Bhargava'), ('Kimberley', 'Ruxton'), ('Maya', 'Pitenina'), ('Helene', 'Auensen'), ('Shayna', 'Mcdowell'), ('Karolina', 'Navratilova'), ('Paulina', 'Luquin'), ('Evelyn', 'Ploner'), ('Ashley', 'Silva'), ('Dilara', 'Naibi'), ('Grace', 'Hannah'), ('Hui', 'Chen'), ('Catarina', 'Muller'), ('Prudence', 'Teitzel'), ('Elizabeth', 'Adams'), ('Zora', 'Vlckova'), ('Marlot', 'Meddens'), ('Letizia', 'Lardani'), ('Jessica', 'Aguilera'), ('Nicole', 'Vaidisova'), ('Klaudia', 'Malenovska'), ('Paulina', 'Velarde Magana'), ('Naomi', 'Cavaday'), ('Taja', 'Mohorcic'), ('Dania', 'Navarro'), ('Vishakha', 'Sheoran'), ('Josefin', 'Hjertquist'), ('Marina', 'Kojanova'), ('Rika', 'Tatsuno'), ('Abigail', 'Royston'), ('Paola', 'Cigui'), ('Jenny', 'Swift'), ('Alison', 'Shemon'), ('Nathalia', 'Rossi'), ('Ayana', 'Tajima'), ('Marie Pier', 'Huet'), ('Oana', 'Archip'), ('Fabiana', 'Chiaparini'), ('Ebelechukwu', 'Chukwuweteli'), ('Sylwia', 'Zagorska'), ('Vassiliki', 'Doriza'), ('Ana', 'Ruiz Fernandez'), ('Estelle', 'La Porte'), ('Maria Eugenia', 'Roca Recarey'), ('Verusa', 'Dias'), ('Marta', 'De Pablo Bota'), ('Jing Jing', 'Lu'), ('Ariane', 'Masschelein'), ('Mariaryeni', 'Gutierrez'), ('Dominika', 'Cibulkova'), ('Amra', 'Sadikovic'), ('Alessia', 'Bertoia'), ('Elizaveta', 'Titova'), ('Barbara', 'Rush'), ('Michaela', 'Ince'), ('Madona', 'Najarian'), ('Paola', 'Capella'), ('Marina', 'Ferreira'), ('Aleksandra', 'Razumova'), ('Brie', 'Whitehead'), ('Paulina', 'Mielewczyk'), ('Alessandra', 'Pennesi'), ('Lucia', 'Gatti'), ('Kimberly', 'Couts'), ('Samantha', 'Powers'), ('Stephanie', 'Jeanes'), ('Megan', 'Price'), ('Maya', 'Gaverova'), ('Olivia', 'Mislov'), ('Ezgi', 'Albayrak'), ('Tatsiana', 'Teterina'), ('Emma Sofia', 'Helisten'), ('Camille', 'Maisonnave'), ('Evelyn', 'Mayr'), ('Lauren', 'Jones'), ('Mirna', 'Marinovic'), ('Lydia', 'Lopez Lopez'), ('Maria Elena', 'Badillo'), ('Maria', 'Sinigaglia'), ('Xi Jing', 'Hong'), ('Bianca', 'Aboubakare'), ('Zina', 'Bretzel'), ('Ekaterina', 'Krylova'), ('Denise', 'Dy'), ('Elisabeth', 'Pleyer'), ('Ines', 'Santos'), ('Kristina', 'Doerr'), ('Loredana', 'Serbu'), ('Mia', 'Kasih'), ('Dorotea', 'Kraljevic'), ('Rayssa', 'Haddad'), ('Aleksandra', 'Madzik'), ('Lauren', 'Shumate'), ('Goele', 'Lemmens'), ('Agni', 'Stefanou'), ('Adina Maria', 'Gabor'), ('Mihaela', 'Giban'), ('Ji Hee', 'Lee'), ('Marina', 'Skvortsova'), ('Natasha', 'Swanepoel'), ('Estefiana', 'Greco'), ('Molly', 'Scott'), ('Wanjika', 'Ngaruiya'), ('Jennifer', 'Meredith'), ('Aleksandra', 'Kulikova'), ('Olivia', 'Matuszak'), ('Juliana', 'Alzate'), ('Prerana', 'Prathap'), ('Prathana', 'Prathap'), ('Eva', 'Pigova'), ('Mia', 'Sacca'), ('Rita', 'Bengelloun Touimy'), ('Nadira', 'Burikhodjaeva'), ('Salome', 'Chachkhunashvili'), ('Akshitha', 'Basavaraju'), ('Vanja', 'Galijasevic'), ('Alexandra', 'Dulgheru'), ('Lesia', 'Tsurenko'), ('Wing Yau Venise', 'Chan'), ('Daksha', 'Mulay'), ('Leticia', 'Demichelli'), ('Matilde', 'Herrera Govantes'), ('Patrycja', 'Chackiewicz'), ('Patricia', 'Veresova'), ('Jennifer', 'Yen'), ('Anna Giulia', 'Remondina'), ('Zoe', 'Bambridge'), ('Ah Ren', 'Han'), ('Lais', 'Ogata'), ('Natasha', 'Lotuffo'), ('Doris', 'Kuselj'), ('Adla', 'Mahic'), ('Ying Ying', 'Duan'), ('Maya', 'Kato'), ('Shweta', 'Kakhandki Gadigeppa'), ('Chloe', 'Mielgo Herrera'), ('Kanako', 'Ishida'), ('Jelena', 'Savic'), ('Giorgia', 'Pozzan'), ('Macarena', 'Rodriguez Capilla'), ('Vanja', 'Radunovic'), ('Ina', 'Kauppila'), ('Ana Lilyan', 'Guzman'), ('Timea', 'Bacsinszky'), ('Katharina', 'Killi'), ('Anahita', 'Jagtiani'), ('Melissa Rose', 'Orteza'), ('Stefania', 'Imolesi'), ('Raja Rajeshwari', 'Pamidimukkala Venkata'), ('Martina', 'Fratini'), ('Anna', 'Gorunovich'), ('Carolina', 'Garcia'), ('Ana Clara', 'Duarte'), ('Pei Ling', 'Tong'), ('Nazari', 'Urbina'), ('Laura', 'Morrill'), ('Tamsyn', 'Briscoe'), ('Rana', 'Zafer'), ('Francesca', 'Dubras'), ('Elena', 'Kazakova'), ('Kate', 'Antosik'), ('Ximena', 'Aguilar'), ('Mirna', 'Cicak'), ('Yoshimi', 'Kawasaki'), ('Shanki', 'Dandeniya'), ('Ioana', 'Boronea'), ('Emiko', 'Ito'), ('Ashley', 'Weinhold'), ('Anastasia', 'Revzina'), ('Marta', 'Arnes Cacho'), ('Sung Hee', 'Shin'), ('Alexandra', 'Derungs'), ('Michelle', 'Jlilati'), ('Mariana', 'Fernandez Larrandaburu'), ('Sabina', 'Warta'), ('Maria Paula', 'Bagnati'), ('Carolina', 'Bokenhans'), ('Jessica', 'Jackson'), ('Fernanda', 'Perrotta'), ('Ines', 'Pereira'), ('Tea', 'Faber'), ('Hana', 'Birnerova'), ('Milena', 'Tona'), ('Stephanie', 'Brown'), ('Nicole', 'Rottmann'), ('Julia', 'Huschke'), ('Tatiana', 'Illova'), ('Mirte', 'De Bakker'), ('Cristina', 'Valladares Nunez'), ('Stanislava', 'Cozirscaia'), ('Tanya', 'Germanlieva'), ('Merritt', 'Emery'), ('Shani', 'Arnon'), ('Estefania', 'Donnet'), ('Anthea', 'Murfet'), ('Galina', 'Vishnikina'), ('Sirui', 'He'), ('Alona', 'Fomina'), ('Saori', 'Miyamoto'), ('Nina', 'Pantic'), ('Elizaveta', 'Zaytseva'), ('Trelsie', 'Sadler'), ('Reka', 'Zsilinszka'), ('Subbadharmi', 'Sundaram'), ('Appollonia', 'Melzani'), ('Hui Chi', 'Huang'), ('Christala', 'Andrews'), ('Natalia', 'Cheng'), ('Latifah', 'Al Sayed Omar'), ('Agatha', 'Zmijak'), ('Kinnie', 'Laisne'), ('Elena', 'Jetcheva'), ('Kamonwan', 'Thongsaner'), ('Nancy', 'El Molla'), ('Erina', 'Kikuchi'), ('Linda', 'Hricistova'), ('Hannah', 'Fick'), ('Alisa', 'Kleybanova'), ('Paula', 'Dinuta'), ('Florence', 'Na'), ('Ashmitha', 'Easwaramurthi'), ('Katia', 'Viera Erbach'), ('Diana', 'Narzikulova'), ('Andrea', 'Rebrova'), ('Paula Catalina', 'Robles Garcia'), ('Machiko', 'Shigefuji'), ('Kate', 'Zueva'), ('Holly', 'Cao'), ('Ondine', 'Trompette'), ('Anastasia', 'Meglinskaya'), ('Ghizlane', 'Hatim'), ('Vesna', 'Dolonc'), ('Elina', 'Gasanova'), ('Chu', 'Chu'), ('Dania', 'Musina'), ('Eva', 'Kadlecova'), ('Daniela', 'Amelunge'), ('Kristina', 'Bozinovska'), ('Taylor', 'Ormond'), ('Manumea', 'Durie'), ('Emily', 'Fraser'), ('Roxane', 'Vaisemberg'), ('Aude', 'Vermoezen'), ('Mary', 'Liu'), ('Andra Edith', 'Marinescu'), ('Ivana', 'Belejova'), ('Suncica', 'Strkic'), ('Carolin', 'Weikard'), ('Maria Anna', 'Koutaniti'), ('Kim', 'Van Der Horst'), ('Petra', 'Vogel'), ('Alexandra', 'Tufa'), ('Maria Luz', 'Perlini'), ('Corinna', 'Dentoni'), ('Majdouline', 'Akrate'), ('Chika', 'Terasawa'), ('Kateryna', 'Nezhura'), ('Tshidiso', 'Mosinyi'), ('Victoria', 'Azarenka'), ('Sousan', 'Massi'), ('Laura', 'Sadria'), ('Rebecka', 'Persson'), ('Denise', 'Muresan'), ('Mikaela', 'Martinez'), ('Carla', 'Lorenzo Jodar'), ('Vana', 'Sutalo'), ('Denise', 'Kirbijikian'), ('Hulya', 'Esen'), ('Maja', 'Sujica'), ('Laura', 'Morales'), ('Sesil', 'Karatantcheva'), ('Karolyn', 'Grymel'), ('Erika', 'Perez'), ('Ajla', 'Behram'), ('Dena', 'Laadan'), ('Melissa', 'Garcia'), ('Lauren', 'Hankle'), ('Mariana', 'Duque Marino'), ('Ia', 'Jikia'), ('Valentina', 'Ramirez'), ('Alessandra', 'Caprara'), ('Anna', 'Simkova'), ('Imane', 'Toubal'), ('Andrea', 'Kwong'), ('Martina', 'Gregoric'), ('Krystina', 'Titz'), ('Saori', 'Nakamura'), ('Irene', 'Santos Bravo'), ('Lynn', 'Blau'), ('Barbora', 'Vykydalova'), ('Sara', 'Secco'), ('Yung Jan', 'Chan'), ('Maria Laura', 'Scapigliati'), ('Megan', 'Toole'), ('Annie', 'Goransson'), ('Arianna', 'Magagnoli'), ('Yevgeniya', 'Rezepkina'), ('Natalia', 'Gonzalez Martinez'), ('Kristen', 'Rafael'), ('Anna', 'Mydlowska'), ('Vivien', 'Silfany Tony'), ('Silvia', 'Bastici'), ('Ai', 'Yamamoto'), ('Mariya', 'Kovaleva'), ('Roxanne', 'Ellison'), ('Alexandra', 'Kovacs'), ('Melanie', 'Delsart'), ('Lucia', 'Huber'), ('Maria', 'Christensen'), ('Astrid', 'Besser'), ('Kerstin', 'Peckl'), ('Jennifer', 'Furnari'), ('Nicole', 'Smith'), ('Kari', 'Wig'), ('Lisa', 'Sutton'), ('Zlatka', 'Petrova'), ('Paola', 'Orozco'), ('Alexandra', 'Odell Michels'), ('Myrte', 'Molenveld'), ('Sandra', 'Fornes Marques'), ('Varatchaya', 'Wongteanchai'), ('Ana Maria', 'Constantinescu'), ('Sofia', 'Barletta'), ('Anastasia', 'Zhovtiuk'), ('Bolan', 'Tarkoe'), ('Natsumi', 'Yokota'), ('Oana Alexandra', 'Stanica'), ('Maria', 'Barboutova'), ('Marietta', 'Bigus'), ('Ines', 'Kreilinger'), ('Alexa', 'Glatch'), ('Natalia', 'Semenenko'), ('Michelle', 'Brycki'), ('Lenka', 'Dzygovska'), ('Yulia', 'Kulikova'), ('Meli', 'Garcia Truchado'), ('Neha Sujit', 'Nair'), ('Annabel', 'Bann'), ('Bin Jie', 'Luo'), ('Manana', 'Shapakidze'), ('Jennifer', 'Rabot'), ('Guadalupe', 'Moreno'), ('Joanna', 'Zwirbulis'), ('Bhavani', 'Tirumurti'), ('Stephanie', 'Weinstein'), ('Jessica', 'Young'), ('Eliza Adriana', 'Matache'), ('Nicky', 'Van Dyck'), ('Nivea', 'Bezich Cavinta'), ('Lucie', 'Sipkova'), ('Katalin', 'Szekely'), ('Lacey Jo', 'Coleman'), ('Michaela', 'Silesova'), ('Sabine', 'Lisicki'), ('Alessandra', 'Di Batte'), ('Zuzana', 'Michalicova'), ('Alina', 'Gershman'), ('Lauren', 'Greco'), ('Galina', 'Semenova'), ('Romina', 'Puglia'), ('Xenia', 'Samoilova'), ('Anna', 'Larkina'), ('Ana Regina', 'Buenviaje'), ('Line', 'Al Ghannam'), ('Heatherm', 'Steinbauer'), ('Mia', 'Drobnjak'), ('Jane', 'Huh'), ('Ramona', 'Sarba'), ('Szu Yu', 'Lin'), ('Yi', 'Yang'), ('Maria', 'Guerreiro'), ('Antonia', 'Fohse'), ('Cagla', 'Buyukakcay'), ('Angelica', 'Torres'), ('Nadina', 'Secerbegovic'), ('Tracy', 'Castillo'), ('Maria Eugenia', 'Torres'), ('Ana', 'Bezjak'), ('Lauren', 'Albanese'), ('Gabriela', 'Rangel'), ('Yukari', 'Kishiro'), ('Mihaela Florina', 'Bunea'), ('Jilke', 'Nelord'), ('Insa', 'Wickmann'), ('Tinusha', 'Sivaganam'), ('Yoko', 'Naito'), ('Alexandra', 'Levianska'), ('Camila', 'Munoz Quintanilla'), ('Tatiana', 'Varela'), ('Madalina', 'Florea'), ('Miki', 'Ueno'), ('Ana', 'Savic'), ('Sara', 'Celma Boix'), ('Joanna', 'Mather'), ('Alexandra', 'Ulbrichtova'), ('Nadine', 'Fahoum'), ('Benedetta', 'Sabatini'), ('Hanna', 'Malakhovich'), ('Kun Hee', 'Kim'), ('Courtney', 'Spafford'), ('Yuri', 'Gonto'), ('Michaela', 'Pochabova'), ('Sharani', 'Gaini'), ('Priscila', 'Martinez'), ('Yuan', 'Jia'), ('Marina', 'Yudanov'), ('Andrea', 'Strasakova'), ('Sara', 'Julio'), ('Tuvana', 'Denizci'), ('Maria', 'Mosolova'), ('Sophia', 'Bergner'), ('Yanina', 'Wickmayer'), ('Shivika', 'Burman'), ('Yana', 'Shulaeva'), ('Niroshita', 'Madanala'), ('Abigail', 'Olivier'), ('Eve', 'Castaing'), ('Katie', 'Welch'), ('Ratchaya', 'Chaichanachaicharn'), ('Denisa', 'Chiriacu'), ('Anouk', 'Tigu'), ('Maria Alexandra', 'Maldonado'), ('Julia', 'Sagan'), ('Ling', 'Zhang'), ('Michaela', 'Kucharova'), ('Fumi', 'Kawatoko'), ('Kir', 'Kemp'), ('Amanda', 'Elliott'), ('Farwa', 'Husain'), ('Alicia', 'De La Capilla'), ('Bing Jie', 'Luo'), ('Natalie', 'Pluskota'), ('Sarah', 'Behbehani'), ('Parija', 'Maloo'), ('Ariane', 'Maack'), ('Madlen', 'Kadur'), ('Renee', 'Binnie'), ('Marina', 'Nicolas Chueca'), ('Kairangi', 'Vano'), ('Andrea', 'Hernandez'), ('Isabel', 'Mas Breto'), ('Veronika', 'Sepp'), ('Niamh', 'Coveney'), ('Veronica Ruo Qi', 'Li'), ('Clarisse', 'Baca'), ('Yuki', 'Hasegawa'), ('Emelyn', 'Starr'), ('Nungnadda', 'Wannasuk'), ('Debora', 'Castany Muniente'), ('Uthumporn', 'Pudtra'), ('Remeice', 'Ellis'), ('Rana', 'Ramez'), ('Inge', 'Spronk'), ('Karina', 'Kedzo'), ('Ayumi', 'Okuma'), ('Kotomi', 'Takahata'), ('Katherine', 'Hoepelman'), ('Jia Jing', 'Lu'), ('Lara', 'Albini'), ('Malgorzata', 'Glodkowska'), ('Natalia', 'Glodkowska'), ('Tereza', 'Belblova'), ('Wei Ping', 'Lee'), ('Ginebra', 'Mostajo Estrada'), ('Juliet', 'Bocklet'), ('Aya', 'Sato'), ('Shinobu', 'Kiribayashi'), ('Shalini', 'Sahoo'), ('Andrea', 'Oates'), ('Jodie', 'Mckinnon'), ('Dominika', 'Zaprazna'), ('Chi Fan', 'Liu'), ('Amel', 'Benhaj'), ('Katarina', 'Lerga'), ('Maria', 'Sanchez'), ('Tiffany', 'Kurniawan'), ('Natasa', 'Zoric'), ('Asmaa', 'Salah Hassan'), ('Claire', 'Bartlett'), ('Sara', 'Marcionni'), ('Alexandra', 'Dachos'), ('Stephanie', 'Theiler'), ('Monique', 'Lynch'), ('Linda', 'Aqvist'), ('Anna', 'Agamennone'), ('Miyu', 'Date'), ('Marta', 'Ruiz Fernandez De Castro'), ('Samantha', 'Noble'), ('Ester', 'Baschirotto'), ('Caroline', 'Beaulieu'), ('Elisa', 'Sarmiento Aranda'), ('Natalie', 'Fehse'), ('Maria', 'Prishlyak'), ('Shilpi', 'Jaiswal'), ('Margaryta', 'Pashket'), ('Judit', 'Nagy'), ('Vivian', 'Cassimer'), ('Natalie', 'Kolganova'), ('Valeria', 'Petrovich'), ('Anastasia', 'Ulikhina'), ('Amy', 'Sargeant'), ('Nives', 'Pavlovic'), ('Chelsea', 'Preeg'), ('Grace', 'Leake'), ('Cassandra', 'Herzberg'), ('Dominice', 'Ripoll'), ('Anastasia', 'Kharchenko'), ('Anastasia', 'Malhotra'), ('Ioana Alexandra', 'Oprea'), ('Latrell', 'Reed'), ('Ksenia', 'Palkina'), ('Pairin', 'Panjasilpa'), ('Mika', 'Urbancic'), ('Briggitt', 'Marcovich'), ('Amparo', 'Botella Boix'), ('Ludovica', 'Perri'), ('Elisa', 'Peth'), ('Ioana Alexandra', 'Bara'), ('Paloma', 'Navarro Montes De Oca'), ('Arina', 'Rodionova'), ('Kelly', 'Gebert'), ('Julia', 'Livotova'), ('Karla', 'Miranda'), ('Irina', 'Letseva'), ('Amira', 'Benaissa'), ('Tzu Chen', 'Hsu'), ('Cristina', 'Vasco'), ('Naoko', 'Suzuki'), ('Efrat', 'Mishor'), ('Caitlyn', 'Baines'), ('Margarita', 'Vasileva'), ('Kelsey', 'Anonsen'), ('Maria', 'Komissarova'), ('Yu Chu', 'Juan'), ('Nikki', 'Prosser'), ('Natasha', 'Marks'), ('Keri', 'Wong'), ('Ester', 'Masuri'), ('Ingrid Esperanza', 'Vargas Calvo'), ('Sanne', 'Bakker'), ('Ana', 'Perlain'), ('Katerina', 'Vankova'), ('Simone', 'Kalhorn'), ('Darya', 'Nakidaylo'), ('Melinda', 'Akerbrant Bengtsson'), ('Victoria', 'Ford'), ('Julia', 'Glushko'), ('Valeria', 'Pulido Velasco'), ('Caroline', 'Magnusson'), ('Ece', 'Firat'), ('Caroline', 'Stevens'), ('Victoria', 'Brook'), ('Tammi', 'Patterson'), ('Marcela', 'Fonseca Villarreal'), ('Carmen', 'Lopez Rueda'), ('Julia', 'Osmolets'), ('Tamara', 'Dobrovolna'), ('Ni', 'Zhou'), ('Lindsey', 'Hardenbergh'), ('Laura', 'Gilbert'), ('Ceara', 'Oneill'), ('Andrea', 'Yacaman'), ('Yoon Young', 'Jeong'), ('Yi Ju', 'Chen'), ('Dan Ni', 'Jiang'), ('Jennifer', 'Allan'), ('Irina Alexandra', 'Paraschiv'), ('Alina', 'Petras'), ('Maria', 'Bru Ballara'), ('Jamie', 'Hampton'), ('Kristy', 'Frilling'), ('Saori', 'Oda'), ('Sindy', 'Lochon'), ('Bianca', 'Spinassi'), ('Jovana', 'Petrov'), ('Stefana', 'Petrov'), ('Ghizlene', 'Douballah'), ('Thi Tam Hao', 'Tran'), ('Caroline', 'Lilley'), ('Yanisleidis', 'Fernandez'), ('Marina', 'Canals Bennassar'), ('Alexandria', 'Walters'), ('Haruka', 'Terashi'), ('Elitsa', 'Mileva'), ('Maria', 'Shalaeva'), ('Patricia', 'Salles Rousseau Guedes'), ('Stefi', 'Gjine'), ('Janine', 'Weinreich'), ('Roana', 'Schiopu'), ('Zhanna', 'Panfilkina'), ('Burce', 'Kurkan'), ('Teona', 'Tsertsvadze'), ('Marcela', 'Rivero'), ('Nina', 'Vulovich'), ('Jin', 'Huang'), ('Mariam', 'Kurdadze'), ('Kristina', 'Bogacheva'), ('Stacey', 'Lee'), ('Ramona', 'Czakon'), ('Juliana', 'Moscoso'), ('Alison', 'Bai'), ('Shiho', 'Akita'), ('Regina', 'Husak'), ('Emma', 'Smith'), ('Tatiana', 'Bua'), ('Shiori', 'Araki'), ('Antonia', 'Kolovou'), ('Carolina', 'Delgado'), ('Zhi Xian', 'Guo'), ('Dayna', 'Grazette'), ('Meutia', 'Sabrina'), ('Trudie', 'Du Toit'), ('Andjela', 'Kankaras'), ('Alejandra', 'Gamboa'), ('Paola', 'Villalon'), ('Alize', 'Cornet'), ('Chu Xian', 'Huang'), ('Laura Zsofia', 'Biro'), ('Stephanie', 'Parker'), ('Mariana', 'Diaz De Leon'), ('Risa', 'Hasegawa'), ('Zuzana', 'Zlochova'), ('Valentina', 'Novelo'), ('Nina', 'Zander'), ('Astrid', 'Thomsen'), ('Mireia', 'Recasens Horta'), ('Madeleine', 'Dax'), ('Julie', 'Verdy'), ('Kai Lin', 'Zhang'), ('Ya Ying', 'Wang'), ('Dilyara', 'Saidkhodjaeva'), ('Marina', 'Takimura'), ('Yana', 'Kireeva'), ('Esther', 'Scheirlynck'), ('Aya', 'Minokoshi'), ('Stephanie', 'Herz'), ('Bridget', 'Healy'), ('Anastasia', 'Kontratevidi'), ('May', 'El Wardany'), ('Daria', 'Tuaeva'), ('Denisa', 'Dumitrescu'), ('Eirini', 'Georgatou'), ('Chloe', 'Jones'), ('Daniela', 'Cociorba'), ('Olivia', 'Smith'), ('Martina', 'Granatelli'), ('Meng', 'Liu'), ('Chane', 'Hines'), ('Anna', 'Tatishvili'), ('Marta', 'Espigado Delgado'), ('Lavinia', 'Sereteanu'), ('Chiao Fang', 'Lo'), ('Yagmur Basak', 'Gone'), ('Laura', 'Moll Bagur'), ('Alena', 'Nogolova'), ('Lara', 'Rafful'), ('Alejandra', 'Garcia'), ('Christina', 'Seib'), ('Anastasia', 'Balyuk'), ('Rachel', 'Houpapa'), ('Mu Ying', 'Chen'), ('Zi Jun', 'Yang'), ('Rosalia', 'Alda'), ('Mia', 'Liimatainen'), ('Fabiana', 'Palcic'), ('Abigail', 'Greif'), ('Rachel', 'Manasse'), ('Andrea Fernanda', 'Flores'), ('Natascha', 'Kennis'), ('Daniela', 'Islamaj'), ('Deisy', 'Bolivar Espinosa'), ('Stephanie', 'Vogt'), ('Mara', 'Zovko'), ('Dwi', 'Ariyana'), ('Nina', 'Sertic'), ('Ekaterina', 'Zapadalova'), ('Natalie', 'Barbir'), ('Natalia', 'Lozano Anton'), ('Julia', 'Gavenko'), ('Ksenija', 'Grinshpun'), ('Teresa', 'Araujo'), ('Anastasia', 'Usova'), ('Paula', 'Jaime Agramon'), ('Yulia', 'Solonitskaya'), ('Xuan Yu', 'Guo'), ('Marija', 'Mirkovic'), ('Alice', 'Tisset'), ('Sasirin', 'Borwornchokchai'), ('Luiza', 'Coman'), ('Martha', 'Sanchez'), ('Daniela', 'Carp'), ('Shivani', 'Mysore Sreekantiah'), ('Chen', 'Astrogo'), ('Mariya', 'Ryzhova'), ('Maryna', 'Kariuk'), ('Kelly', 'Couturier'), ('Sara', 'Czubak'), ('Anastasia', 'Butcovscaia'), ('Naomi', 'Broady'), ('Paula', 'Alvarez Pino'), ('Mariana', 'Demichelli Vergara'), ('Justina', 'Derungs'), ('Melanie', 'Delannoy'), ('Maria Emilia', 'Ponton Caamano'), ('Antonia', 'Smallbone'), ('Ruo Nan', 'Zhang'), ('Esmira', 'Gheisary'), ('Artijeta', 'Goxhuli'), ('Ai', 'Taira'), ('Busra', 'Demirtas'), ('Michelle', 'Schroeder'), ('Yuuki', 'Tanaka'), ('Hye Jin', 'Byun'), ('Arletis', 'Fernandez'), ('Aliaa', 'Kamal'), ('Roberta', 'Gerovac'), ('Petra', 'Kvitova'), ('Kara', 'Knight'), ('Qian', 'Wang'), ('Stefanie', 'Voegele'), ('Cristina Madalina', 'Stancu'), ('Judith', 'Collado'), ('Claudine', 'Paulson'), ('Ayumi', 'Morita'), ('Juliette', 'Coupez'), ('Sophie', 'Proctor'), ('Yue Yue', 'Hu'), ('Ivana', 'Milutinovic'), ('Elena', 'Nartsissova'), ('Lisa', 'Weidenbruck'), ('Katharina', 'Brown'), ('Anita', 'Paliiska'), ('Dinali', 'De Silva'), ('Maureen', 'Rielley'), ('Mccall', 'Jones'), ('Eugenia', 'Vertesheva'), ('Marta', 'Rodriguez Carbajo'), ('Renee', 'Reinhard'), ('Parvathy', 'Vijayan'), ('Inga', 'Audrina'), ('Oriana', 'Escalante'), ('Olfa', 'Dhaoui'), ('So Hyun', 'Bae'), ('Julia', 'Chernyaeva'), ('Lara', 'Pujol Rotger'), ('Roberta', 'Greco'), ('Anastasia', 'Wagner'), ('Kamolnadda', 'Thumrongluck'), ('Ekin', 'Koca'), ('Leticia', 'Costas'), ('Farah', 'Abougeib Selo'), ('Martina', 'Erceg'), ('Kateryna', 'Byelcheva'), ('Sandra', 'Dynka'), ('Paola', 'Calderon'), ('Sofiko', 'Sharangia'), ('Kirsten', 'Magi'), ('Sofia', 'Vignau'), ('Emily', 'Zanussi'), ('Iveta', 'Guneva'), ('Laura', 'Babet'), ('Huan', 'Li'), ('Charlotte', 'Bossy'), ('Mariana', 'Levova'), ('Ji Hye', 'Shin'), ('Yuliya', 'Kalabina'), ('Janina', 'Toljan'), ('Courtney', 'Clayton'), ('Maria', 'Bayon'), ('Lisa', 'Brinkmann'), ('Stephanie', 'Kent'), ('Erin', 'Wilbert'), ('Hitomi', 'Saito'), ('Anabel', 'Pollan'), ('Tamara', 'Stojkovic'), ('Maria Paula', 'Hernandez'), ('Sandra', 'Podolak'), ('Sandra', 'Roma'), ('Paloma', 'Diaz Sada'), ('Malena', 'Gordo'), ('Lisa', 'Wagner'), ('Dredi Inia', 'Ghinda'), ('Bianca', 'Dumitrascu'), ('Amitha', 'Arudpragasam'), ('Pavla', 'Smidova'), ('Martina', 'Trierweiler'), ('Montserrat', 'Blasco Fernandez'), ('Madison', 'Brengle'), ('Louise', 'Grangette'), ('Carlota', 'Calve Munoz'), ('Na Ri', 'Kim'), ('Nikolina', 'Dominikovic'), ('Lillian', 'Aviles'), ('Petra', 'Mokra'), ('Harshini', 'Reddy'), ('Genevieve', 'Lorbergs'), ('Aleksandra', 'Zawadzka'), ('Alexandra', 'Martin Sanchez'), ('Juan Rosalia', 'Tejoprayitno'), ('Sorana', 'Cirstea'), ('Martina', 'Santoni'), ('Frederike', 'Putthoff'), ('Rosaura', 'Ramirez Vega'), ('Ekaterina', 'Pushkareva'), ('Kana', 'Aoki'), ('Elitsa', 'Kostova'), ('Julie', 'Herve'), ('Hayley', 'Ericksen'), ('Anja', 'Vreg'), ('Niltooli', 'Wilkins'), ('Nina', 'Mujezinovic'), ('Anastasija', 'Sevastova'), ('Michelle', 'Suarez'), ('Jessy', 'Rompies'), ('Deyanirr', 'Solorio'), ('Diana Madalina', 'Zainea'), ('Marina', 'Lazic'), ('Carolyn', 'Mcveigh'), ('Naa Shika', 'Adu'), ('Denisa', 'Dolejsova'), ('Ayse Ece', 'Yavuz'), ('Barbora', 'Matusova'), ('Bibiana', 'Almeida'), ('Katarina', 'Gajic'), ('Martyna', 'Majewska'), ('Ine', 'Nowe'), ('Madalina', 'Lupu'), ('Sladjana', 'Saveljic'), ('Manuela', 'Pietzuch'), ('Marlena', 'Pietzuch'), ('Carlista', 'Mohammed'), ('Jade', 'Windley'), ('Laura', 'Pola'), ('Krista', 'Damico'), ('Aleksandra', 'Djokic'), ('Alena', 'Luef'), ('Fabienne', 'Holz'), ('Luana Georgiana', 'Rednic'), ('Lauren', 'Mchale'), ('Andrea', 'Berkova'), ('Shauna', 'Morgan'), ('Kerstin', 'Kreis'), ('Stella', 'Papaspyrou'), ('Sushrutha', 'Reddy Chintala'), ('Alison', 'Ramos'), ('Simona', 'Synkova'), ('Dania Bianca', 'Payer'), ('Fatima Zorah', 'Bouabdallah'), ('Sybille', 'Khayat'), ('Kristi', 'Boxx'), ('Paula', 'Appezzato'), ('Nadia', 'Lalami'), ('Fiona', 'Gracia Tjipto'), ('Sonja', 'Molnar'), ('Lisa', 'Summerer'), ('Monika', 'Sirilova'), ('Marina', 'Sato'), ('Aimee', 'Jarratt'), ('Sarah', 'Makki'), ('Cristiana', 'Narchi'), ('Nicole', 'Stanziola'), ('Carolin', 'Kottutz'), ('Jade', 'Curtis'), ('Janna', 'Hildebrand'), ('Alexandra', 'Cadantu'), ('Sarah', 'Jones'), ('Irina', 'Falconi'), ('Klio', 'Manolopoulou'), ('Syna', 'Kayser'), ('Keilly', 'Ulery'), ('Stephanie', 'Scimone'), ('Julia', 'Wais'), ('Dragana', 'Pojuzina'), ('Andreea Daniela', 'Georgescu'), ('Jane', 'Sushkova'), ('Radhika', 'Jadhav'), ('Carissa', 'Aboubakare'), ('Carolina', 'De Los Santos'), ('Chinami', 'Ogi'), ('Zina', 'Monteiro'), ('Andrea', 'Rivera'), ('Salome', 'Ugrekhelidze'), ('Hiromi', 'Takeuchi'), ('Gabriela', 'Barreto'), ('Julia', 'Spiridonova'), ('Galina', 'Mihaylova'), ('Yingying', 'Xi'), ('Adriana', 'Pereira'), ('Federica', 'Di Sarra'), ('Amanda', 'Carreras'), ('Khristina', 'Kazimova'), ('Mika', 'Morimoto'), ('Aleksandra', 'Krupina'), ('Martina', 'Balogova'), ('Emily', 'Wolf'), ('Marie Claude', 'Ndzoudja'), ('Deepna', 'Vazirani'), ('Melanie', 'Klaffner'), ('Begona', 'Garcia Soto'), ('Kristina', 'Kucova'), ('Katharina', 'Negrin'), ('Dina', 'El Farouk'), ('Sandra', 'Soler Sola'), ('Rebeca', 'Delgado Gerardo'), ('Katarina', 'Poljakova'), ('Manon', 'Arnaud'), ('Claudia', 'Franze'), ('Alina', 'Tseplukhova'), ('Jocelyn', 'Ffriend'), ('Polina', 'Dzyuba'), ('Petra', 'Babakova'), ('Irina', 'Khatsko'), ('Marsela', 'Gunawan'), ('Vivien', 'Laszloffy'), ('Daniela Alexandra', 'Ilcu'), ('Bianca', 'Schlumberger'), ('Carla', 'Beltrami'), ('Karola', 'Diaconescu'), ('Xinyun', 'Han'), ('Erin', 'Troedson'), ('Ericka', 'Penaranda'), ('Alessa', 'Waibel'), ('Achiraya', 'Sriprome'), ('Ines', 'Ferrer Suarez'), ('Ekaterina', 'Komarova'), ('Shiho', 'Otake'), ('Rieke', 'Honiball'), ('Ekaterina', 'Lukomskaya'), ('Claudia', 'Hidalgo'), ('Elizabeth', 'Ullathorne'), ('Olivia', 'Howlett'), ('Yera', 'Campos Molina'), ('Magdalena', 'Smejova'), ('Franziska', 'Goettsching'), ('Sophia', 'Mulsap'), ('Andrea', 'Quintana'), ('Daniela', 'Noceto'), ('Laura', 'Claus'), ('Nadja', 'Gilchrist'), ('Fabiana', 'Mersan'), ('Hanna', 'Kapustka'), ('Plamena', 'Kurteva'), ('Fernanda', 'Dias'), ('Shinann', 'Featherston'), ('Christina', 'Scherndl'), ('Julia', 'Klackenberg'), ('Zeljka', 'Gavrilovic'), ('Stephany', 'Chang'), ('Anastasia', 'Bukhanko'), ('Carolina', 'Larco'), ('Edyta', 'Cieplucha'), ('Lisa', 'Jamais'), ('Silvia', 'Cevoli'), ('Nelly', 'Ciolkowski'), ('Zaruhi', 'Harutyunyan'), ('Priscilla', 'Heise'), ('Antonela', 'Marincic'), ('Veronika', 'Ciganikova'), ('Nicole', 'Riner'), ('Haruka', 'Naito'), ('Valentina', 'Fauviau'), ('Gia', 'Mcknight'), ('Lara', 'Meccico'), ('Yolanda', 'Nieto'), ('Marina', 'Gallo'), ('Anastasia', 'Pivovarova'), ('Katarina', 'Marackova'), ('Unnati', 'Purushotham'), ('Yoshiko', 'Koizumi'), ('Yi Run', 'Han'), ('Ksenia', 'Lykina'), ('Magda', 'Okruashvili'), ('Alla', 'Aleksandrova'), ('Joany', 'Pontjodikromo'), ('Alessia', 'Bianchi'), ('Orian', 'Ben Haim'), ('Yukari', 'Nakashima'), ('Veronika', 'Sigutova'), ('Abigail', 'Guthrie'), ('Nathalie', 'Elgales'), ('Kelly', 'Irving'), ('Caitlin', 'Steel'), ('Kateryna', 'Yergina'), ('Sitong', 'Yan'), ('Anna', 'Voronkova'), ('Marcela', 'Gomez'), ('Eva Maria', 'Altenburger'), ('Lucia Ioana', 'Crisan'), ('Andreea Roxana', 'Vaideanu'), ('Marcela', 'Cuderman'), ('Martha V', 'Blakely'), ('Maria De Los Angeles', 'Cardenas'), ('Giulia', 'Zambaiti'), ('Petra', 'Krejsova'), ('Daria', 'Novosad'), ('Yi Ching', 'Chen'), ('Mayumi', 'Seki'), ('Diana', 'Viteri'), ('Giorgia', 'Sampietro'), ('Erica', 'Krisan'), ('Alison', 'Riske'), ('Maria Luiza', 'Craciun'), ('Alisa', 'Buslayeva'), ('Omlata Rai', 'Kumari'), ('Julia', 'Thiem'), ('Larn', 'Mcshane'), ('Ayano', 'Nakamura'), ('Madeleine', 'Saari Bystrom'), ('Jeannine', 'Prentner'), ('Viet Ha', 'Ngo'), ('Carolina', 'Kubicska'), ('Tina', 'Zimmermann'), ('Dhara Bharat', 'Thakor'), ('Trudy Gine', 'Amoranto'), ('Carla', 'Lindlar'), ('Maria Jose', 'Arechavaleta'), ('Claudia Marcela', 'Silva Aragon'), ('Caroline', 'Wozniacki'), ('Mona', 'Barthel'), ('Lisa Maria', 'Reichmann'), ('Yaimaris', 'Paterson Crespo'), ('Anastasia', 'Grymalska'), ('Ivette', 'Lopez'), ('Inna', 'Sokolova'), ('Astrid', 'Quintero'), ('Aziza', 'Butoyi'), ('Camila', 'Bernal'), ('Alize', 'Lim'), ('Audrey', 'Van Wolde'), ('Veronica', 'Garcia Herrera'), ('Mallory', 'Cecil'), ('Claudia', 'Giovine'), ('Leyla Esther', 'Cabrera'), ('Angela', 'Roesler'), ('Maria Cristina', 'Selis'), ('Karen', 'Filippou'), ('Ana', 'Belzunce Crompin'), ('Miku', 'Bando'), ('Breanna', 'Tilly'), ('Nahoko', 'Tanaka'), ('Maria Fernanda', 'Macedo'), ('Ionela Andreea', 'Iova'), ('Jana', 'Jandova'), ('Ioana', 'Ivan'), ('Vivian', 'Janecki'), ('Marina', 'Lysenko'), ('Mai', 'Iwasaki'), ('Lorena', 'Piedras'), ('Martina', 'Vitulli'), ('Jenny', 'Claffey'), ('Viktoriya', 'Semyrodenko'), ('Poojashree', 'Venkatesha'), ('Wen Bo', 'Wang'), ('Iuliana', 'Oante'), ('Renuka', 'Keswani'), ('Shao Fang', 'Ong'), ('Barbara', 'Lormeau'), ('Courtney', 'Byron'), ('Vanessa', 'Boey'), ('Betty', 'Dautriat'), ('Kalinina', 'Sandoval'), ('Chang', 'Liu'), ('Chinatsu', 'Maeda'), ('Vitalia', 'Diatchenko'), ('Ima', 'Bohush'), ('Stephanie', 'Roy'), ('Sandra', 'Ion'), ('Romina', 'Gualtieri'), ('Camilla', 'Franco'), ('Yasmin', 'Clarke'), ('Klara', 'Vyskocilova'), ('Sianna', 'Simmons'), ('Karina', 'Bradnam'), ('Eugenia', 'Yordanova'), ('Sanda', 'Omerovic'), ('Nour', 'Abou Saleh'), ('Rosa Maria', 'Mendoza'), ('Maria Gracia', 'Ycaza'), ('Anne Christine', 'Voicu'), ('Daleidis', 'Borrego'), ('Laura', 'Bosneag'), ('Emma', 'Isberg'), ('Rasika', 'Sankpal'), ('Ksenia', 'Milevskaya'), ('Sayali', 'Bhilare'), ('Se Jin', 'Lee'), ('Sara', 'Guglielminotti'), ('Mazluma', 'Turdyeva'), ('Carolina', 'Castro'), ('Lenka', 'Jurikova'), ('Paula Cristina', 'Goncalves'), ('Franziska', 'Koenig'), ('Anastassiya', 'Zherdeva'), ('Nini', 'Lagvilava'), ('Marine', 'Tirel'), ('Ana Sofia', 'Camberos'), ('Vanja', 'Tomic'), ('Stephanie', 'Wiltshire'), ('Jessica', 'Moore'), ('Maxi', 'Ehmer'), ('Nour', 'Kaddour'), ('Sierra A', 'Ellison'), ('Marketa', 'Havelkova'), ('Anneliese', 'Tepper'), ('Lara', 'Kamnik'), ('Laura Alicia', 'Aguilar'), ('Taylor', 'Lindsey'), ('Petra', 'Padalikova'), ('Lora', 'Stancheva'), ('Maria', 'Babanova'), ('Florencia', 'Sanchez Gil'), ('Josefin', 'Andersson'), ('Nicole', 'Arosemena'), ('Narisa', 'Luanporn'), ('Mikaela', 'Kristofersson'), ('Hermon', 'Brhane'), ('Kristina', 'Schleich'), ('Alexa', 'Wimes'), ('Ganna', 'Akhinko'), ('Maria', 'Voscekova'), ('Irina Camelia', 'Begu'), ('Ivana', 'Crnogorac'), ('Yaroslava', 'Zhishchenko'), ('Chelsey', 'Gullickson'), ('Kate', 'Rodger'), ('Tadeja', 'Majeric'), ('Lutfiana Aris', 'Budiharto'), ('Alexandra', 'Vukota'), ('Jovana', 'Vasic'), ('Camilla', 'Margaroli'), ('Janelle', 'Cuthbertson'), ('Amelia', 'Harris'), ('Caitlin', 'Gordon'), ('Kristina', 'Antoniychuk'), ('Marina', 'Giral Lores'), ('Ruth', 'Markov'), ('Oksana', 'Kalashnikova'), ('Francesca', 'Segarelli'), ('You Jin', 'Kang'), ('Susan', 'Darnel'), ('Carla', 'Nava'), ('Alessondra', 'Parra'), ('Martina', 'Gaemperle'), ('Jade', 'Schoelink'), ('Anastasia', 'Nebojanko'), ('Whitney', 'Wolf'), ('Valentina', 'Kecman'), ('Zana', 'Gospodnetic'), ('Jelena', 'Trailovic'), ('Yael', 'Anays'), ('Ema', 'Polic'), ('Dahilmar', 'Saez'), ('Elison', 'Amadio'), ('Ami', 'Nakano'), ('Nataly', 'Yoo'), ('Federica', 'Denti'), ('Jacqueline', 'Wu'), ('Belma', 'Beslagic'), ('Jing Jue', 'Lu'), ('Anais', 'Dallara'), ('Bronwyn', 'Davidson'), ('Dipti', 'Srivastava'), ('Maja', 'Kazimieruk'), ('Laetitia', 'Prat'), ('Helen', 'Parish'), ('Odalis', 'Sardinas'), ('Lorena', 'Vincenzini'), ('Tyra', 'Calderwood'), ('Natasha', 'Pawlowski'), ('Li', 'Xi'), ('Veronika', 'Birioukova'), ('Aika', 'Osawa'), ('Sarah Marija', 'Merlic'), ('Puntila', 'Namwong'), ('Veronica', 'Popovici'), ('Yadira', 'Padilla'), ('Chloe', 'Smith'), ('Josefine', 'Strom'), ('Amanda', 'Cunningham'), ('Morgane', 'Zowczak'), ('Montserrat', 'De Castro'), ('Maria', 'Toncheva'), ('Mariya', 'Malkhasyan'), ('Natalie', 'Proese'), ('Aeriel', 'Ellis'), ('Anggrenny', 'Oky Suconong'), ('Asha Saravana', 'Mohan'), ('Alexandra', 'Zaniewski'), ('Claudia', 'Mercado'), ('Anastasia', 'Savkina'), ('Rita', 'Obasigie'), ('Vladlena', 'Petushkova'), ('Yvanna', 'Kurlak'), ('Beatrice', 'Parolai'), ('Shenelle', 'Mohammed'), ('Sina', 'Hartmann'), ('Daphne', 'Staelens'), ('Jawairiah', 'Noordin'), ('Ines', 'Janbakhsh'), ('Margarita', 'Lazareva'), ('Fernanda', 'Aranda'), ('Sindy', 'Cespedes'), ('Sahar', 'Al Disi'), ('Emma', 'Flood'), ('Regina', 'Shtyagina'), ('Claire', 'Valentin'), ('Amie', 'Shyu'), ('Rininta', 'Hidayat'), ('Shahin', 'Ansari'), ('Alexandra', 'Whitehead'), ('Rocio', 'De La Torre Sanchez'), ('Elena', 'Chernyakova'), ('Romina', 'Brante'), ('Arabela', 'Fernandez Rabener'), ('Pamela', 'Amon'), ('Katharina', 'Knoebl'), ('Sandra', 'Kristjansdottir'), ('Neira', 'Fatic'), ('Dagmar', 'Dudlakova'), ('Olga', 'Kirpicheva'), ('Barbara', 'Sobaszkiewicz'), ('Carla', 'Murguia'), ('Martina', 'Kostalova'), ('Nancy', 'Ferguson'), ('Rocio', 'Galarza'), ('Monica', 'Cantele'), ('Carlota', 'Cartes Andres'), ('Sinika', 'Jezkova'), ('Christina', 'Bonneau'), ('Carla', 'Lucero'), ('Stephanie', 'Hoffpauir'), ('Clemence', 'Terol'), ('Marina', 'Lebrao'), ('Nicolette', 'Van Uitert'), ('Sandra', 'Vukojicic'), ('Audrey', 'Leitz'), ('Shaozhuo', 'Liu'), ('Barbora', 'Krtickova'), ('Karla', 'Bonacic'), ('I Pei', 'Cheng'), ('Mi Rae', 'Ham'), ('Ana Maria', 'Chavez Franco'), ('Maria', 'Mokh'), ('Naoko', 'Masuda'), ('Monika', 'Galikova'), ('Kathrin', 'Weinwurm'), ('Kate', 'Turvy'), ('Margie', 'Milliken'), ('Anne', 'Blawatt'), ('Kesica', 'Jayapalan'), ('Grace', 'Cadona'), ('Sacha', 'Jones'), ('Elodie', 'Erakovic'), ('Constance', 'Sibille'), ('Stefana', 'Lakicevic'), ('Csilla', 'Argyelan'), ('Nada', 'Sghyar'), ('Natasha', 'Starling'), ('Imke', 'Jagau'), ('Charlotte', 'Laevens'), ('Sung Hee', 'Han'), ('Nelly', 'Radeva'), ('Lidia', 'Llanos De La Fuente'), ('Tereza', 'Mrdeza'), ('Riley', 'Blanks'), ('Yoshie', 'Yoshihara'), ('Maria Fernanda', 'Alvarez A'), ('Mariam', 'Kupreishvili'), ('Alexa', 'Guarachi'), ('Zuzana', 'Linhova'), ('Jordana', 'Lujan'), ('Ajda', 'Kolmancic'), ('Veronika', 'Maksimchyk'), ('Katie', 'Gouyette'), ('Monica', 'Pezzotti'), ('Virginia', 'Ugrcyc'), ('Emily Theresa', 'Weiland'), ('Monica', 'Chow'), ('Alenka', 'Hubacek'), ('Ielyzaveta', 'Rybakova'), ('Pamela', 'Salas'), ('Alina', 'Wessel'), ('Babs', 'Van Kampen'), ('Kristina', 'Steiert'), ('Ayram', 'Edery'), ('Erica', 'Robertson'), ('Carolina', 'Zeballos'), ('Fanny', 'Fracassi'), ('Petra', 'Niedermayerova'), ('Vivien', 'Svirkovska'), ('Anouk', 'Delefortrie'), ('Maria', 'Martinez Romero'), ('Alexandra Andreea', 'Oancea'), ('Maria', 'Kouvatsos'), ('Kjersti', 'Lund'), ('Marisela', 'Aviles'), ('Natalia', 'Piszczkiewicz'), ('Yasmine', 'Guimaraes'), ('Kristina', 'Benashvili'), ('Xenia', 'Suworowa'), ('Magda', 'Riutort Bou'), ('Laura', 'Heinrichs'), ('Sharon', 'Fichman'), ('Elzyata', 'Sovaeva'), ('Melisa', 'Morales'), ('Laura', 'Gambarini'), ('Tatiana', 'Carpio'), ('Deirdre', 'Cienki'), ('Tamira', 'Paszek'), ('Urszula', 'Radwanska'), ('Nathalie', 'Gunthard'), ('Nigora', 'Sirojiddinova'), ('Benita', 'Milenkiewicz'), ('Maria', 'Nivia'), ('Blessing', 'Samuel'), ('Caroline', 'Hitimana'), ('Carolina', 'Camargo De Luca'), ('Bianca', 'Bonotto'), ('Karen Johanna', 'Ramirez Rivera'), ('Ana Paula', 'Antelo'), ('Bryony', 'Hunter'), ('Arantxa', 'Rus'), ('Raphaela', 'Cordeiro'), ('Nimom', 'Segodo'), ('Tina', 'Potisk'), ('Rebecca', 'Marino'), ('Anais', 'Gomar Isart'), ('Ekaterina', 'Kamendova'), ('Hiroko', 'Kuwata'), ('Aleksandra', 'Tucakov'), ('Andra', 'Cornea'), ('Ginet', 'Pinero'), ('Reka', 'Rohonyi'), ('Myrtille', 'Georges'), ('Parichart', 'Charoensukployphol'), ('Klaudia', 'Boczova'), ('Micaela', 'Silva'), ('Tatevik', 'Yedigaryan'), ('Anna', 'Lukashevich'), ('Conny', 'Perrin'), ('Irina', 'Carrillo Marti'), ('Daniela', 'Gonzalez Martinez'), ('Diamond', 'Jackson'), ('Silvia', 'Carvajal'), ('Daria', 'Shilina'), ('Angelina', 'Gordienko'), ('Zaida', 'Abreu'), ('Rebeca', 'Neves'), ('Jaklin', 'Alawi'), ('Dilara', 'Ahmetagic'), ('Inna', 'Gavrilenko'), ('Marine', 'Verbeken'), ('Anna', 'Jeczmionka'), ('Erin', 'Vierra'), ('Julia', 'Zakharova'), ('Beatrice', 'Gumulya'), ('Pamela', 'Montez'), ('A Ram', 'Sim'), ('Wen', 'Sun'), ('Jennie', 'Brobeck'), ('Ji Hye', 'Kim'), ('Monika', 'Tumova'), ('Dajana', 'Csongradyova'), ('Kristina', 'Bekavac'), ('Gabriella', 'Boboc'), ('Ilaria', 'Alessi'), ('Bianca', 'Swanepoel'), ('Muriel', 'Wacker'), ('Yara', 'Abou El Ghar'), ('Menanteau', 'Moolman'), ('Yolande', 'Leacock'), ('Idil', 'Haciraifoglu'), ('Olivia', 'Bennett'), ('Lauren', 'Embree'), ('Linda', 'Fritschken'), ('Elien', 'Crombez'), ('Adeline', 'Goncalves'), ('Eleonor', 'Picot'), ('Elaine', 'Genovese'), ('Sankriti', 'Sinha'), ('Kai Chen', 'Chang'), ('Yun Hee', 'Kim'), ('Chutharat', 'Rungtein'), ('Yasmine', 'Alkema'), ('Kristina', 'Pejkovic'), ('Vivian', 'Hansen'), ('Silvia Priscila', 'Montoya'), ('Karen Elena', 'Montoya'), ('Maria', 'Klein'), ('Elizabeth', 'Johnson'), ('Mo', 'Cao'), ('Anna', 'Vidgof'), ('Petra', 'Martic'), ('Polona', 'Hercog'), ('Lorena', 'Aviles'), ('Laura', 'Beltran'), ('Dilara', 'Yurtkuran'), ('Inna', 'Agaeva'), ('Lucia', 'Kovarcikova'), ('Xiao', 'Zhou'), ('Ana', 'Quevedo'), ('Andrea', 'Popluharova'), ('Veronika', 'Studena'), ('Diana', 'Kyllmann'), ('Katrin', 'Schmidt'), ('Nicole', 'Herzog'), ('Jun Yi', 'Zheng'), ('Shereen', 'Peterson Paul'), ('Celine', 'Ghesquiere'), ('Melissa', 'Mcqueen'), ('Kristina N', 'Smith'), ('Maria Agustina', 'Reyes Molina'), ('Prerana Mythri', 'Appineni'), ('Martina', 'Pradova'), ('Anastasia', 'Shchilinskaya'), ('Angie', 'Solorzano'), ('Hae Jin', 'Jeong'), ('Michelle', 'Green'), ('Mallory', 'Burdette'), ('Valentina', 'Parrilla'), ('Taij Mishma', 'Kumar'), ('Patricia', 'Vilas Ibanez'), ('Niku', 'Amin'), ('Lisa', 'Piller'), ('Mona', 'Piller'), ('Charlotte', 'Rodier'), ('Gabriella', 'Bongiovanni'), ('Palma', 'Kiraly'), ('Katharina', 'Jobst'), ('Surama', 'Gotera'), ('Theresa', 'Jobst'), ('Nikola', 'Hofmanova'), ('Lena Marie', 'Hofmann'), ('Camelia Elena', 'Hristea'), ('Giuliana', 'Pino'), ('Hanna', 'Albowicz'), ('Narumi', 'Kakegawa'), ('Eugenia', 'Dubitshkaya'), ('Victoria', 'Rode Bager'), ('Eva', 'Wacanno'), ('Ganna', 'Lukianchykova'), ('Yi Miao', 'Zhou'), ('Eden', 'Doliveira'), ('Dildora', 'Rakhimova'), ('Verena', 'Santos'), ('Sarah', 'Mahboob Khan'), ('Sofia', 'Medina'), ('Kamila', 'Marchocka'), ('Martina', 'Di Giuseppe'), ('Chihiro', 'Takayama'), ('Ji Hyun', 'Lee'), ('Christine', 'Masite'), ('Raiza', 'Verdecia'), ('Serena', 'Frazzitta'), ('Tanisha', 'Rohira'), ('Ines', 'Carabetta'), ('Katerina', 'Ilyina'), ('Alexandra', 'Kelleher'), ('Sakiko', 'Namba'), ('Dina', 'Azwar'), ('Alexandra', 'Damaschin'), ('Ekaterina', 'Abaeva'), ('Lenah Hatsumi', 'Sakai'), ('Veronica', 'Seruca'), ('Adeline', 'Chiang'), ('Katharina', 'Braeutigam'), ('Ting Jr', 'Li'), ('Katarzyna', 'Piter'), ('Anna', 'Tajima'), ('Andressa', 'Garcia'), ('Maike', 'Zeppernick'), ('Alona', 'Shubina'), ('Elizabeth', 'Kilborn'), ('Slavica', 'Milanovic'), ('Irina', 'Dementyeva'), ('Olga', 'Fischer'), ('Solveig', 'Fosser'), ('Tereza', 'Vancurova'), ('Ritwika', 'Sen'), ('Juliette', 'Surlemont'), ('Valeria', 'Savinykh'), ('Jocelyn', 'Rae'), ('Valentina', 'Stephan'), ('Angelique', 'Van Der Meet'), ('Alexandra', 'Stuparu'), ('Alice', 'Moroni'), ('Linda', 'Berlinecke'), ('Evelin', 'Barboutova'), ('Jessica', 'Alexander'), ('Eveliina', 'Virtanen'), ('Maria Elena', 'Recalde'), ('Dominika', 'Kanakova'), ('Ivana', 'Klepic'), ('Josephine', 'Haraldsson'), ('Jasmina', 'Kajtazovic'), ('Josymar', 'Escalona'), ('Danijela', 'Tomic'), ('Courtney', 'Collins'), ('Simona', 'Weymar'), ('Jasmina', 'Tinjic'), ('Maria', 'Knott'), ('Rebecca', 'Cook'), ('Chun Wing', 'Sher'), ('Ulker', 'Yuregir'), ('Lynsey', 'Mccullough'), ('Lucia', 'Batta'), ('Lucia', 'Vrskova'), ('Alina', 'Saracin'), ('Alina', 'Shazhko'), ('Martina', 'Darczuk'), ('Almudena', 'Sanz Llaneza Fernandez'), ('Petra', 'Januskova'), ('Kirsten', 'Willems'), ('Montana', 'Grenfell'), ('Dunja', 'Sunkic'), ('Chihiro', 'Oasa'), ('Barbara', 'Montiel'), ('Marion', 'Cammilleri'), ('Darja', 'Pribitkow'), ('Taylor', 'Douglas'), ('Elisabeth', 'Fournier'), ('Nastasiya', 'Kipina'), ('Tetyana', 'Arefyeva'), ('Jodie', 'Williams'), ('Daniella', 'Rabkin'), ('Lauren', 'Townrow'), ('Martina', 'Gledacheva'), ('Giulia', 'Bruzzone'), ('Mia', 'Fiocca'), ('Alexandra', 'Ban'), ('Malou', 'Ejdesgaard'), ('Yevgeniya', 'Kryvoruchko'), ('Jill M', 'Saunders'), ('Camila', 'Quesada'), ('Miki', 'Kanehira'), ('Karina', 'Pimkina'), ('Sarah', 'Serrano'), ('Isabel M', 'Brito Cardoso'), ('Catarina', 'Morais'), ('Yun', 'Ku'), ('Tomoko', 'Iyori'), ('Gabi', 'Rojas'), ('Wanrong', 'Li'), ('Camilla', 'Boniek'), ('Sasarin', 'Borwornchokchai'), ('Geraldine', 'Salazar'), ('Adrianna', 'Daszkiewicz'), ('Liya', 'Tsanava'), ('Tajda', 'Bestijanic'), ('Marta', 'Sirotkina'), ('Sevil', 'Aliyeva'), ('Dana', 'Adelson'), ('Chizuru', 'Yamazaki'), ('Dalila', 'Jakupovic'), ('Jessica', 'Picas'), ('Emilie', 'Logiacco'), ('Nozomi', 'Matsuda'), ('Kumari Sweta', 'Solanki'), ('Catia', 'Rodrigues'), ('Raquel', 'Perez Ruescas'), ('Danielle', 'Mills'), ('Lisa Maria', 'Moser'), ('Michelle', 'De Groot'), ('Monica', 'Gorny'), ('Kim Alice', 'Grajdek'), ('Carmen', 'Lopez Blanco'), ('Charlotte', 'Pires'), ('Gracia', 'Radovanovic'), ('Catalina', 'Maya'), ('Catalina', 'Ucros'), ('Yana', 'Orlova'), ('Radka', 'Jarosova'), ('Alice', 'Watter'), ('Hymke', 'Maurick'), ('Dalia', 'Zafirova'), ('Paulina', 'Schippers'), ('Camille', 'Sapene'), ('Elyne', 'Boeykens'), ('Maria Florencia', 'Novillo'), ('Haley', 'Gay'), ('Van Ai Ngog', 'Nguyen'), ('Asia', 'Muhammed'), ('Natalia', 'Ryzhonkova'), ('Maria', 'Fagerstrom'), ('Jasmine Pernill', 'Shankar'), ('Perrine', 'Fouche'), ('Anik', 'Cepeda'), ('Ilse', 'Pacheco'), ('Luana', 'Flessak'), ('Tanya', 'Raykova'), ('Yuko', 'Adachi'), ('Kelsey', 'Sundaram'), ('Ksenia', 'Mikhaylova'), ('Maria Grazia', 'Tonani'), ('Daria', 'Maslennikova'), ('Ana', 'Gomez Aleman'), ('Maria', 'Meliuk'), ('Karin', 'Morgosova'), ('Jade', 'Pondicas'), ('Fiorella', 'Nocino'), ('Vivienne', 'Vierin'), ('Alexandra', 'Riley'), ('Rocio', 'Lopez Alberca'), ('Catalina', 'Diaz'), ('Lucy', 'Bird'), ('Andrea', 'Eskauriatza Ruiz'), ('Daniela', 'Trigo'), ('Stefania', 'Postorino'), ('Carolina', 'Barboza'), ('Giadagiovanna', 'Dortona'), ('Maria', 'Petrova'), ('Flavia', 'Borges'), ('Claudia', 'Razzeto'), ('Hannah', 'James'), ('Olga', 'Blank'), ('Lizeth', 'Ramirez'), ('Allie', 'Will'), ('Arianna', 'Colffer'), ('Sarah', 'Leonard'), ('Leire', 'Martinez Barredo'), ('Karolina', 'Vlachova'), ('Jessica', 'Courtnell'), ('Lucia', 'Cervera Vazquez'), ('Amira', 'Pirovani'), ('Nilupul', 'Goonasekera'), ('Nevena', 'Arsic'), ('Gabriela', 'Scaff Haddad'), ('Lynn', 'Schonhage'), ('Theresa Maria', 'Braun'), ('Miyu', 'Terada'), ('Yu Xuan', 'Liu'), ('Aleksandra', 'Kecman'), ('Lucie', 'Fleischmannov'), ('Marina', 'Galkina'), ('Clarissa', 'Chen'), ('Rachael', 'White'), ('Ximena', 'Hermoso'), ('Giulia', 'Bruschi'), ('Misaki', 'Doi'), ('Afroditi', 'Latinopoulou'), ('Margarita', 'Edinarova'), ('Francesca', 'Mazzali'), ('Kelly', 'Blake'), ('Adriana', 'Quezada'), ('Bouwiena', 'Boer'), ('Veronika', 'Domagala'), ('Puja', 'Patel'), ('Mandy', 'Brown'), ('Victoria', 'Larriere'), ('Satjaporn', 'Mahajaroenkul'), ('Ofir', 'Morag'), ('Aleksandra', 'Josifoska'), ('Sandra Mihaela', 'Sida'), ('Jelena', 'Tomasovic'), ('Jana', 'Bezbradica'), ('Marissa', 'Armienta'), ('Amaia', 'Ormazabal Oregui'), ('Valeria', 'Filiaeva'), ('Elena', 'Kulikova'), ('Elena', 'Andrei'), ('Natalia', 'Ziminova'), ('Romana Caroline', 'Tabak'), ('Mariana', 'Sonnervig'), ('Katie', 'Gater'), ('Luiza', 'Sonnervig'), ('Karina', 'Gootman'), ('Laura', 'Apaolaza Miradevilla'), ('Marcela', 'Henriques Brandao'), ('Ju Eun', 'Kim'), ('Michaela', 'Bezdickova'), ('Anne', 'Luijpen'), ('Lisa', 'Whybourn'), ('Sandra', 'Herrera'), ('Julia', 'Gragera Cano'), ('Denise', 'Atzinger'), ('Kanoko', 'Ohara'), ('Victoria', 'Vaara'), ('Gabriela', 'Coglitore'), ('Melanie', 'Junod'), ('Hilary', 'Toole'), ('Candice', 'Laurent'), ('Rafaela', 'Efstathiou'), ('Maria', 'Kiparenko'), ('Isabel', 'Rapisarda Calvo'), ('Lucia', 'Martinez Gomez'), ('Marina', 'Jozipovic'), ('Marcella', 'Jones'), ('Daphne', 'Charalambous'), ('Carlotta', 'Sartori'), ('Charlotte', 'Fabricius'), ('Johanna', 'Konta'), ('Cindy', 'Chala'), ('Martina', 'Borecka'), ('Khunpak', 'Issara'), ('Paloma', 'Cuervo'), ('Vivian Mayumi', 'Toma'), ('Fatma', 'Al Nabhani'), ('Laura', 'Collins'), ('Kristina', 'Huba'), ('Andree', 'Sime'), ('Deeon', 'Mladin'), ('Nana', 'Miyakawa'), ('Masa', 'Grgan'), ('Eda', 'Bora'), ('Caroline', 'Gherega'), ('Carmen', 'Sandor'), ('Lucia', 'Bosio'), ('Ida', 'Alfredsson'), ('Arantxa', 'Andrady'), ('Ksenia', 'Pervak'), ('Regina Marica', 'Matyak'), ('Danielle', 'Lao'), ('Laura', 'Revert Oroz'), ('Alexandra', 'Skripkina'), ('Magdalena', 'Sekrecka'), ('Yuka', 'Ito'), ('Carolin', 'Habich'), ('Maria Victoria', 'Puga'), ('Marina', 'Novak'), ('Paula', 'Espinoza Pena'), ('Maria Tania', 'Abraham'), ('Julie', 'Bigot'), ('Karolina', 'Dziubanii'), ('Cagla', 'Azgari'), ('Kelly K', 'Barry'), ('Geraldine', 'Leong'), ('Annaelle', 'Bejar'), ('Sally', 'Peers'), ('Alejandra', 'Granillo'), ('Giovanna', 'Portiolli'), ('Gabriela', 'Horackova'), ('Iuliia', 'Kiriienko'), ('Gail', 'Brodsky'), ('Selina', 'Scheffer'), ('Bianca', 'Botto'), ('Joelle', 'Kissell'), ('Malika', 'Arifjanova'), ('Simona', 'Horsikyan'), ('Olivia', 'Rogowska'), ('Jithmie', 'Jayawickrema'), ('Kristina', 'Shishkina'), ('Karolina', 'Zamiela'), ('Irina', 'Ramialison'), ('Elora', 'Dabija'), ('Daria', 'Abdrakhmanova'), ('Carlotta', 'Ripa'), ('Salma', 'El Semary'), ('Catherine R', 'Isip'), ('Madalina Daniela', 'Gugila'), ('Ioana Laura', 'Alecsiu'), ('Hana', 'Ritterova'), ('Ana', 'Grindeanu'), ('Tanya', 'Murtagh'), ('Shiori', 'Kikukawa'), ('Tugce', 'Dogan'), ('Natali', 'Balige'), ('Alice Andrada', 'Radu'), ('Casey', 'Robinson'), ('Tereza', 'Svecova'), ('Alexandra', 'Gracova'), ('Victoria', 'Lozano'), ('Alejandra', 'Lozano'), ('Raquel', 'Piltcher'), ('Marie', 'Zalameda'), ('Jasmin', 'Ladurner'), ('Emily J', 'Harman'), ('Ranim', 'Mkahal'), ('Velina', 'Ivanova'), ('Sofia', 'Espana'), ('Lisanne', 'Van Riet'), ('Kristyna', 'Kucianova'), ('Henrietta', 'Alton'), ('Menna', 'El Nagdy'), ('Maryna', 'Chumak'), ('Christie Ann', 'Hale'), ('Marion', 'Pereira'), ('Desislava', 'Lazarova'), ('Marianna', 'Natali'), ('Othilia', 'Lindqvist'), ('Mariya', 'Slupska'), ('Greta', 'Joksyte'), ('Sofia', 'Pacifico'), ('Mariana', 'Charalambous'), ('Tanvi', 'Shah'), ('Julia', 'Kushnereva'), ('Kaysara', 'Mandry'), ('Indire', 'Akiki'), ('Anna', 'Zaja'), ('Angelina', 'Jogasuria'), ('Angelika', 'Jogasuria'), ('Julia', 'Comas Espona'), ('Natalia', 'Alvarez Bilbao'), ('Rebecka', 'Tarnstrom'), ('Stefania Cristina', 'Nicolae'), ('Yue', 'Yuan'), ('Sandra', 'Milojevic'), ('Kara', 'Cecil'), ('Krishnali', 'Bhonsle'), ('Zuzana', 'Luknarova'), ('Magdalena', 'Osterle'), ('Leonie', 'Athanasiadis'), ('Anastasia', 'Pavlyuchenkova'), ('Ana', 'Jikia'), ('Tereza', 'Bekerova'), ('Lina', 'Bennani'), ('Carolina', 'Orsi'), ('Michaela', 'Boev'), ('Swetha', 'Nalikala'), ('Volha', 'Kalodzitsa'), ('Ofri', 'Lankri'), ('Dragana', 'Bozovic'), ('Camila', 'San Martin'), ('Victoria Corina', 'Mirea'), ('Samantha', 'Vickers'), ('Josella Francisca', 'Valderrama Ahumada'), ('Simona', 'Syleouni'), ('Gioia', 'Barbieri'), ('Violetta', 'Degtiareva'), ('Katerina', 'Petrenko'), ('Malika', 'Rose'), ('Gabriella', 'Barbosa Costa Silva'), ('Maxine', 'Thomas'), ('Milica', 'Milosavljevic'), ('Stina', 'Kailaheimo'), ('Ilinca Thea', 'Anghel'), ('Olivia', 'Janowicz'), ('Laura', 'Oates'), ('Shradha', 'Dali'), ('Bianca', 'Sousa'), ('Aranza', 'Salut'), ('Yvett', 'Imre'), ('Alina', 'Baronova'), ('Veronique', 'Luksich'), ('Jade', 'Hopper'), ('Tereza', 'Malikova'), ('Larraine', 'Saavedra'), ('Brittany', 'Sheed'), ('Carla', 'Venticinque Torres'), ('Nuria', 'Parrizas Diaz'), ('Jennifer', 'Smith'), ('Ljubica', 'Stojanovic'), ('Stacey', 'Lock'), ('Stacey', 'Tan'), ('Carolyn', 'Monson'), ('Francesca', 'Lewis'), ('Julie', 'Gervais'), ('Selma', 'Dahbi'), ('Viktoria', 'Yemialyanava'), ('Iris', 'Michailidou'), ('Veronika', 'Makovey'), ('Marie Louise', 'Schuetz'), ('Shabnam', 'Eslami'), ('Juliana', 'Pires'), ('Aleksandra', 'Vukadinovic'), ('Natasha', 'Bredl'), ('Alexandra', 'Perper'), ('Kristen', 'Lopez'), ('Reka Luca', 'Jani'), ('Ros Polly', 'Nguyen'), ('Natalie', 'Dillon'), ('Nilgen', 'Ahmetspahic'), ('Ana Gabriela', 'Llera'), ('Anette', 'Munozova'), ('Brynn', 'Boren'), ('Diana', 'Batista'), ('Nadja', 'Barz'), ('Jeanna', 'Schmidt'), ('Celina', 'Goetti'), ('Mary', 'Weatherholt'), ('Marie Christine', 'Chartier'), ('Preethi', 'Srinivasan'), ('Veronika', 'Blaskova'), ('Prissy', 'Annoual'), ('Stacey', 'Kyriakopoulos'), ('Dominika', 'Jasova'), ('Aleksandra', 'Ludvig'), ('Julia', 'Mayr'), ('Hannah', 'Berner'), ('Nicha', 'Lertpitaksinchai'), ('Angelika', 'Aliev'), ('Elanqua', 'Griffin'), ('Whitney', 'Ritchie'), ('Andjela', 'Nemcevic'), ('Justine', 'Lo Presti'), ('Isabella', 'Reibmayr'), ('Lam Anh', 'Tran'), ('Karis', 'Ryan'), ('Marine', 'Sorg'), ('Benyapa', 'Phumtip'), ('Anna', 'Morgina'), ('Aimee', 'Gibson'), ('Talissa', 'Kucera'), ('Romy', 'Koelzer'), ('Guntisa', 'Boonlaing'), ('Ines', 'Kertesz'), ('Marika', 'Kobayashi'), ('Anett', 'Schutting'), ('Olga', 'Makhova'), ('Janine', 'Tiszolczy'), ('Charline', 'Braidy'), ('Sarah Ellen', 'Hofmann'), ('Stephanie', 'Baldinucci'), ('Eva', 'Husakova'), ('Daniela', 'Kraberger'), ('Sabrina', 'Meier'), ('Isabell', 'Seidlitz'), ('Diana', 'Rivera'), ('Viktoria', 'Viduka'), ('Jacqueline', 'Cako'), ('Ho Ching', 'Wu'), ('Jennifer', 'Betancourt Hurtado'), ('Alexandra', 'Ion'), ('Arina', 'Alilueva'), ('Bruna', 'Macedo Soares'), ('Lucia', 'Gallego Jover'), ('Elixane', 'Lechemia'), ('Weijia', 'Sun'), ('Rajna', 'Jankovic'), ('Callie', 'Craig'), ('Caitlin', 'Mcgraw'), ('Jacqueline', 'Kasler'), ('Vidushi', 'Gupta'), ('Olga', 'Tatarchenko'), ('Blanca', 'Garcia'), ('Mary', 'Malkin'), ('Martina', 'Mikulcikova'), ('Stefanie', 'Mikesz'), ('Susita', 'Das'), ('Julia', 'Boserup'), ('Gisella', 'Pere'), ('Estelle', 'Suys'), ('Michelle', 'Farley'), ('Jenny', 'Jullien'), ('Monique', 'Albuquerque'), ('Maria Paula', 'Sanchez'), ('Kennedy', 'Scott'), ('Carol', 'Fernandez'), ('Sakina', 'Nshimirimana'), ('Anastasia', 'Aleshcheva'), ('Jung Eun', 'Nam'), ('Julia', 'Courter'), ('Line', 'Jouayed'), ('Diana', 'Bukajeva'), ('Justyna', 'Jegiolka'), ('Urszula', 'Kolodziejczak'), ('Thien Trang', 'Nguyen'), ('Gabriela', 'Pintos'), ('Brittany', 'Augustine'), ('Ayano', 'Honda'), ('Lisa', 'Grosselius'), ('Sinead', 'Disaya'), ('Anzhelika', 'Adzhamyan'), ('Rebecca', 'Leahy'), ('Paulina', 'Hinojosa'), ('So Yeon', 'Kim'), ('Jennifer', 'Hadjieva'), ('Cristina Andreea', 'Mitu'), ('Sonya', 'Dayal'), ('Melanie', 'Oudin'), ('Aleah', 'Marrow'), ('Aki', 'Yamasoto'), ('Aline', 'Laurioux'), ('Yoko', 'Nagai'), ('Veronika', 'Tobolova'), ('Bistra', 'Otashliyska'), ('Julia', 'Jagodzinska'), ('Josselin', 'Lattanzio'), ('Simona', 'Halep'), ('Ksenia', 'Moskal'), ('Maho', 'Kowase'), ('Cierra', 'Gaytan Leach'), ('Margaret', 'Boyette'), ('Anastasiya', 'Lytovchenko'), ('Gabriela', 'Paz'), ('Julie', 'Queval'), ('Daria', 'Yakauleva'), ('Ai', 'Koga'), ('Marcela', 'Jimenez Ramos'), ('Filipa', 'Correia'), ('Anna', 'Brazhnikova'), ('Maria', 'Fedosyuk'), ('Haruka', 'Yoshida'), ('Millie', 'Nichols'), ('Jessica', 'Green'), ('Nathaly', 'Miranda'), ('Paulina', 'Milosavljevic'), ('Arezou', 'Youlghouni'), ('Elzbieta', 'Kowalczyk'), ('Patricia', 'Chirea'), ('Jenny', 'Lunde'), ('Alexandra', 'Apostu'), ('Cayla', 'Cross'), ('Shiho', 'Sakagawa'), ('C C', 'Sardinha'), ('Yoo Ri', 'Song'), ('Sabina', 'Kovtunova'), ('Mia', 'Ramic'), ('Ruxandra Gabriela', 'Costov'), ('Ekaterina', 'Strogonova'), ('Stefania', 'Di Vasto'), ('Alisa Juliana', 'Caluseriu'), ('Alice', 'Grilli'), ('Shoko', 'Yamamoto'), ('Marketa', 'Placha'), ('Mawuena', 'Ankutse'), ('Lucia', 'Zavarcikova'), ('Pamela', 'Adom Mendez'), ('Gally', 'De Wael'), ('Francesca', 'Campigotto'), ('Lucie', 'Rey'), ('Elizabeth', 'Tapia'), ('Ana', 'Puerto Jaimez'), ('Camila Vital', 'De Castro'), ('Federica', 'Severi'), ('Sofia', 'Vaynberg'), ('Loveth', 'Nnadozie'), ('Monique', 'Zuur'), ('Sina', 'Bader'), ('Natchanok', 'Saenyaukhot'), ('Hui', 'Li'), ('Daniela', 'Lozano'), ('Disha', 'Saigal'), ('Bernice', 'Van De Velde'), ('Carina', 'Paulitsch'), ('Roxana', 'Rabago'), ('Isabella', 'Shinikova'), ('Cecilia', 'Crevani'), ('Victoire', 'Mfoumouangana'), ('Ana Claudia', 'Carbajal Espinosa'), ('Lisa', 'Borckink'), ('Raphaela', 'Zotter'), ('Cristina Bianca', 'Danaila'), ('Nida', 'Hamilton'), ('Nicole', 'Bartnik'), ('Giulia', 'Gasparri'), ('Francesca', 'Gonzalez'), ('Lilly F', 'Kimbell'), ('Beatriz Magdalena', 'Flores'), ('Kanako', 'Ootsuka'), ('Ai', 'Kamiyoshihara'), ('Ya Qi', 'Deng'), ('Lesley', 'Kerkhove'), ('Olga', 'Zaicenco'), ('Diana', 'Marcu'), ('Argyro', 'Christofi'), ('Lilija', 'Sabirzjanova'), ('Maria', 'Kuznetsova'), ('Sally', 'Dischmann'), ('Anna', 'Saito'), ('Hanna', 'Mar'), ('Karolina', 'Kostro'), ('Alexandra', 'Wetterstrom'), ('Hope', 'Johnson'), ('Ashleigh', 'Richardson'), ('Iesha', 'Holton'), ('Aleksandra', 'Grela'), ('Jessica Marie', 'Agra'), ('Carolina', 'Viteri'), ('Dalya', 'Pupchenok'), ('Anastasia', 'Putilina'), ('Magali', 'Van Landegem'), ('Demi', 'Barao Rodrigues'), ('Prang', 'Pantusart'), ('Ludmila', 'Vasilieva'), ('Sandra', 'Arsovska'), ('Claudia Gianina', 'Dumitrescu'), ('Le', 'Ma'), ('Sabina', 'Ramirez'), ('Emma', 'Reyes Baca'), ('Bianca', 'Ambros'), ('Noppawan', 'Lertcheewakarn'), ('Valentina', 'Starkova'), ('Margarita Greta', 'Skripnik'), ('Constance', 'Alexander'), ('Miyabi', 'Inoue'), ('Prachi', 'Nadkarni'), ('Jana', 'Mihalovicova'), ('Stephanie', 'Cornish'), ('Raquel', 'Barcala Lopez'), ('Yessica', 'Medina'), ('Giulia', 'Coletti'), ('Nathalie', 'Mohn'), ('Hannah', 'Toro'), ('Luca', 'Pump'), ('Mary', 'Clayton'), ('Melissa', 'Bolivar'), ('Milica', 'Stepanovic'), ('Tereza', 'Budilova'), ('Milana', 'Spremo'), ('Viktoria', 'Kamenskaya'), ('Ana Paula', 'Folch'), ('Julieta Soledad', 'Rodriguez'), ('Gemma', 'Praditngam'), ('Maria Claudia', 'Santos Santanna'), ('Elisa', 'Tassotti'), ('Gayeong', 'Back'), ('Cristina', 'Bachiller Madrono'), ('Alexandra', 'Cercone'), ('Hilda', 'Melander'), ('Maria', 'Pulido'), ('Ekaterine', 'Gorgodze'), ('Maria', 'Jespersen'), ('Fernanda', 'Faria'), ('Antonina', 'Rafikova'), ('Manuela', 'Leme'), ('Maria Fernanda', 'Aguirre Arteaga'), ('Dejana', 'Raickovic'), ('Janaki', 'Gunuganti'), ('Coco', 'Vandeweghe'), ('Veronica M', 'Corning'), ('Yen Ling', 'Chen'), ('Kaede', 'Hayase'), ('Sandra', 'Herrera Gonzalez'), ('Kiki', 'Bertens'), ('Aleksandra', 'Filipovski'), ('Mariona', 'Del Peral Francin'), ('Sophia', 'Bouganga'), ('Martina', 'Kubicikova'), ('Verena', 'Joechle'), ('Eduarda', 'Piai'), ('Sandra', 'Bellver Fructuoso'), ('Raquel', 'Martini'), ('Brittany', 'Wowchuk'), ('Elisa', 'Brentino'), ('Tiffany', 'Tran'), ('Maria Andreina', 'Varela'), ('Anna', 'Naumova'), ('Shahzodaxon', 'Hatamova'), ('Chantelle', 'Rigozzi'), ('Gabriella', 'Witdarmono'), ('Jessica', 'Cohen'), ('Leah', 'Daw'), ('Treta', 'Bhattacharyya'), ('Charlotte', 'Van Der Meij'), ('Neesha', 'Thirumalaichelvam'), ('Yui', 'Takauchi'), ('Sabrina', 'Baumgarten'), ('Pauline', 'Paire'), ('Laura', 'Slater'), ('Yan Tung', 'Ki'), ('Nadine', 'Ruegg'), ('Alexandra', 'Cannizzaro'), ('Hyun Hee', 'Jang'), ('Alena', 'Gerasimova'), ('Tina', 'Miller'), ('Lara', 'Michel'), ('Quirine', 'Lemoine'), ('Anastacia', 'Simons'), ('Mohana', 'Chintala'), ('Larissa', 'Horat'), ('Hyun Hui', 'Hong'), ('Belen', 'Tajmuch'), ('Jessica', 'Brito'), ('Marifer', 'Abreu'), ('Anna Christine', 'Patrimonio'), ('Alex', 'Geremia'), ('Kurumi', 'Nara'), ('Camila', 'Giorgi'), ('Nimisha', 'Mohan'), ('Bojana', 'Jovanovski'), ('Tanja', 'Winkler'), ('Mariami', 'Samkanashvili'), ('Marilia', 'Camara'), ('Nazil', 'Ander'), ('Sonia Stefania', 'Negrila'), ('Isabella', 'Holland'), ('Elena', 'Kuznetsova'), ('Nataliya', 'Pintusova'), ('Anna Arina', 'Marenko'), ('Sandra', 'Zaniewska'), ('Carla', 'Roset Franco'), ('Nutwadee', 'Suthiprapha'), ('Petra', 'Capin'), ('Alia', 'Nour'), ('Iris', 'Verboven'), ('Anastasia', 'Vivdenko'), ('Ioana Andreea', 'Cristea'), ('Nanuli', 'Pipiya'), ('Adnya', 'Naik'), ('Victoria', 'Schweizer'), ('Xin Tong', 'Liu'), ('Oksana', 'Pavlova'), ('Rocio Maria', 'Diaz'), ('Ursa', 'Jerman'), ('Melina', 'Gonzalez Morganti'), ('Natasha', 'Bertolucci'), ('Bella', 'Destriana'), ('Joanna', 'Horne'), ('Tea', 'Palandacic'), ('Tara', 'Vasovic'), ('Rashmi', 'Teltumbde'), ('Nan Nan', 'Zhang'), ('Jana', 'Urbanova'), ('Kate', 'Fuller'), ('Elena', 'Corsini'), ('Ekaterina', 'Verho'), ('Nadejda', 'Guskova'), ('Alejandra', 'Sala Juste'), ('Thanyarat', 'Karnjanapong'), ('Ale', 'Rojas'), ('Elyse', 'Edwards'), ('Lavanya', 'Nath'), ('Daria', 'Kuchmina'), ('Amreetha', 'Muttiah'), ('Maria', 'Barbed Isusi'), ('Ze Xin', 'Pu'), ('Bhavani', 'Ravisankar'), ('Dinah', 'Pfizenmaier'), ('Kaitlyn', 'Christian'), ('Emily', 'Askew'), ('Sophia', 'Bursulaya'), ('Sabrina', 'Man Son Hing'), ('Chieh Yu', 'Hsu'), ('Qiang', 'Wang'), ('Ganna', 'Piven'), ('Elizabeth', 'Begley'), ('Fiorella Maria', 'Jarufe'), ('Mia', 'Radulovic'), ('Jamila', 'Paul'), ('Trivena Monika', 'Putri'), ('Jovanna', 'Pecovski'), ('Yui Lynn', 'Miao'), ('Karolina', 'Cechova'), ('Paula Natalia', 'Orlini Campos'), ('Cody', 'Morris'), ('Mia', 'Lancaster'), ('Simona', 'Pascau'), ('Biljana', 'Milosevska'), ('Minori', 'Tamura'), ('Anastasiya', 'Vasylyeva'), ('Ania', 'Mazor'), ('Yang', 'Shen'), ('Veronica', 'Cepede Royg'), ('Ann Sophie', 'Porry'), ('Boyan', 'Wang'), ('Andrea', 'Konjuh'), ('Barbara', 'Pietrkiewicz'), ('Andrea', 'Lopez Seco'), ('Irina', 'Repede'), ('Dominique', 'Harmath'), ('Risako', 'Sugihara'), ('Liana', 'Todorova'), ('Sylwia', 'Mikolajczuk'), ('Deborah', 'Paulo Lamelas'), ('Talia', 'Rojas'), ('Jihye', 'Choi'), ('Tatiana', 'Postnikova'), ('Gabrielle', 'Zambotto Interlich'), ('Rina', 'Fujiwara'), ('Alexia', 'Quartetto'), ('Katarena', 'Paliivets'), ('Thais', 'Xavier'), ('Sheila', 'Moradian'), ('Anezka', 'Makovickova'), ('Anastasia', 'Koroliova'), ('Isadora', 'Busch'), ('Samara', 'Amour'), ('Ana Maria', 'Nedelcu'), ('Emily', 'Crowe'), ('Leia', 'Kaukonen'), ('Nicole', 'Saracino'), ('Diana Carolina', 'Casas'), ('Kristina', 'Korochinskaya'), ('Gabrielle', 'Alford'), ('Ajeng', 'Aquinia'), ('Martina', 'Krischkeova'), ('Maya', 'Milosevic'), ('Sofie', 'Oyen'), ('Garima', 'Vatwani'), ('Saadgi', 'Rajani'), ('Kanae', 'Iha'), ('Xi', 'Bai'), ('Yasmina', 'Demane'), ('Katharina', 'Morth'), ('Yana', 'Buchina'), ('Oriana', 'Nowicki'), ('Alicia', 'Perez Gonzalez'), ('Julia', 'Landauer'), ('Polina', 'Rodionova'), ('Magda', 'Linette'), ('Kristina', 'Kinarkina'), ('Camila', 'Basto'), ('Mina', 'Gardic'), ('Fernanda', 'Brito'), ('Johanna', 'Hyoty'), ('Nilaya', 'Tarimela'), ('Mary Anne', 'Macfarlane'), ('Yu Ting', 'Deng'), ('Elen', 'Chelidze'), ('Zsofia', 'Susanyi'), ('Viktoriya', 'Serenkova'), ('Alina Silvana', 'Moise'), ('Hui I', 'Huang'), ('Jelena', 'Simic'), ('Ashvarya', 'Shrivastava'), ('Nastassja', 'Burnett'), ('Morgan', 'Basil'), ('Ekin', 'Gunaysu'), ('Marie', 'Menacer'), ('Milica', 'Hadzi Tanovic'), ('Maria Clara', 'Bernardez'), ('Andrea', 'Blazevic'), ('Vicky', 'Stuckey'), ('Giulia', 'Pasini'), ('Mara', 'Schmidt'), ('Alexandra', 'Anghelescu'), ('Maria', 'Biryukova'), ('Rebecca', 'Horompoliova'), ('Fernanda', 'Soares'), ('Giorgia', 'Pinto'), ('Kurumi', 'Sensui'), ('Jasmin', 'Matter'), ('Alex', 'Martin'), ('Lola', 'Azimova'), ('Cecilia', 'Estlander'), ('Alexandra', 'Borovina'), ('Aleksandrina', 'Naydenova'), ('Shakhnoza', 'Karieva'), ('Marta', 'Stoyanova'), ('Giulia', 'Lambiase'), ('Brittany', 'Dubins'), ('Maria', 'Lawton'), ('Nikolina', 'Rimac'), ('Bao Yi', 'Xu'), ('Diana', 'Davitaia'), ('Oleksandra', 'Piskun'), ('Nadja', 'Teufel'), ('Roshenka', 'Fernando'), ('Chloe', 'Babet'), ('Karina', 'Isayan'), ('Margarida', 'Fernandes'), ('Sarah Lynn', 'Du Plessis'), ('Julie', 'Tringa'), ('Martina', 'Puglierin'), ('Paola', 'Garrido Rodriguez'), ('Amina', 'El Khattabi'), ('Helena', 'Martinez Soler'), ('Natalia', 'Berezhnaya'), ('Nikki Camille', 'Zoleta'), ('Patricia', 'Avramescu'), ('Joanna', 'Bougon'), ('Jolien', 'De Wulf'), ('Neus', 'Bestard Pomar'), ('Kirsten', 'Mcarthur'), ('Klara', 'Koprivova'), ('Ana Izabela', 'Oliveira'), ('Vanessa', 'Foltinger Garcia'), ('Amber', 'Walker'), ('Joyce', 'Van Der Linden'), ('Carolina', 'Abello'), ('Johana', 'Hernandez'), ('Anastasia', 'Golovatch'), ('Marina', 'Raicevic'), ('Malak', 'Demerdash'), ('Katrina', 'Raicevic'), ('Rebeca', 'Mitrea'), ('Sabine', 'Van Der Sar'), ('Soledad', 'Blanco'), ('Giulia', 'Porcu'), ('Beatriz Maria', 'Martins Cecato'), ('Nuria', 'Sanjurjo'), ('Anna', 'Momot'), ('Marcela', 'Costa Quintas'), ('Michika', 'Ozeki'), ('Laili', 'Rahmawati Ulfa'), ('Karni', 'Cohen'), ('Zulema', 'Zelaya'), ('Emilia', 'Banos Gregorians'), ('Madeleine', 'Kobelt'), ('Gabriela', 'Vazquez'), ('Lara', 'Arruabarrena'), ('Aya', 'Bara'), ('Costanza', 'Mecchi'), ('Sofia', 'Hager'), ('Karolina', 'Pliskova'), ('Kristyna', 'Pliskova'), ('Polina', 'Pekhova'), ('Laura', 'Perez'), ('Roosh', 'Wijesundera'), ('Chelsie Marie', 'Yacks'), ('Martina', 'Toto'), ('Karen', 'Hernandez'), ('Sabastiani', 'Leon'), ('Lisa', 'Canova'), ('Giovanna', 'Palumbo'), ('Nadine', 'Klug'), ('Francesca', 'Aureli'), ('Courtney B', 'Dolehide'), ('Lizette', 'Gomez'), ('Mami', 'Hasegawa'), ('Gabriela Alejandra', 'Carrillo Palacios'), ('Isaura', 'Enrique Aguilar'), ('Deborah', 'Pagani'), ('Fumika', 'Kumagai'), ('Bitna', 'Lee'), ('Ji Su', 'Bae'), ('Elena', 'Bogdan'), ('Carolina', 'Pillot'), ('Anastasia', 'Etkin'), ('Dominique', 'Bruce'), ('Kaja', 'Rajh'), ('Isabella', 'Robbiani'), ('Panoria', 'Tsekoura'), ('Iris', 'Mannarino'), ('Silvia', 'Ranocchi'), ('Natalia', 'Marques Melibeu'), ('Gabriela', 'Dabrowski'), ('Klaudia', 'Gawlik'), ('Gaia', 'Sanesi'), ('Bianca', 'Brasoveanu'), ('Amel', 'Ouahab'), ('Giulia', 'Calafiore'), ('Sanne', 'Lemmers'), ('Antonela', 'Susak'), ('Milagros', 'Abal'), ('Rocio', 'Portela'), ('Jia Bei', 'Mei'), ('Morgane', 'Pons'), ('Lucia', 'Kovalova'), ('Monika', 'Wejnert'), ('Beatrice', 'Capra'), ('Alexandra', 'Hietaniemi'), ('Flora', 'Birnbaum'), ('Klara', 'Ellingerova'), ('Lise', 'Marbach'), ('Greta', 'Veinberga'), ('Brooke', 'Bolender'), ('Marie Frederique', 'Bedard'), ('Alessia', 'Carrozzo'), ('Marlen', 'Hacke'), ('Ekaterina', 'Mitroshina'), ('Laura', 'Maisonnave'), ('Rocio', 'Benavent Rojas'), ('Alexandra', 'Reboul'), ('Caroline', 'Rohde Moe'), ('Ksenia', 'Kolesnikova'), ('Fiorella', 'Zecchino'), ('Gesa', 'Focke'), ('Tanja', 'Rebholz'), ('Kerrie', 'Cartwright'), ('Mayka', 'Zima'), ('Ilaria', 'Popovic'), ('Anastasia', 'Erofeeva'), ('Katarina', 'Baranova'), ('Or', 'Meir'), ('Lorena', 'Gheorghe'), ('Caryssa L', 'Peretz'), ('Sandra', 'Andriamarosoa'), ('Ya', 'Zhou'), ('Georgina', 'Bastick'), ('Teresa', 'Pladevall Oroz'), ('Roberta', 'Di Rosa'), ('Richel', 'Hogenkamp'), ('Mai', 'Minokoshi'), ('Aranxta', 'Portugal'), ('Seung Yeon', 'Hong'), ('Lina', 'Lileikite'), ('Misa', 'Eguchi'), ('Mai', 'Grage'), ('Malak', 'Elazze'), ('Susan', 'Mcrann'), ('Noura', 'Abdul Aal'), ('Viviana', 'Bolivar'), ('Rita', 'Oliveira'), ('Barbara', 'Ferreira'), ('Chinami', 'Takada'), ('Tania', 'Alaby'), ('Yamini', 'Reddy'), ('Anna', 'Depenau'), ('Mayna', 'Andrade'), ('Isadora', 'Bickham'), ('Alexandra', 'Clay'), ('Lolia', 'Kienka'), ('Saya', 'Yoshimi'), ('Mariana', 'Perez Saaibi'), ('Anastasiya', 'Kyrylova'), ('Daniela Lucia', 'Sierra Jurado'), ('Estelle', 'Mehta'), ('Irina Mihaela', 'Giusca'), ('Andrea', 'Ka'), ('Imogen', 'Golder'), ('Carolyn Ann', 'Lim Hui'), ('Laura', 'Lim'), ('Sun Young', 'Choi'), ('Valentine', 'Confalonieri'), ('Ema', 'Mikulcic'), ('Flavia', 'Nagayama'), ('Kaede', 'Ikuma'), ('Vladislava', 'Kuzmenkova'), ('Lorena', 'Arandia'), ('Valeria', 'Podda'), ('Emmerentia', 'Marx'), ('Maria Teresa', 'Torro Flor'), ('Courtney', 'Gulihur'), ('Alyona', 'Sotnikova'), ('Davina', 'Meza'), ('Joke', 'De Kok'), ('Feronika', 'Katarina'), ('Mara', 'Nowak'), ('Christina', 'Auer'), ('Kimberley', 'Cassar'), ('Simone Lindsay', 'Krog'), ('Charlotte', 'Windley'), ('Khristina', 'Blajkevitch'), ('April', 'Bisharat'), ('Dinka', 'Lujinovic'), ('Kadi Liis', 'Saar'), ('Gabriela', 'Eufrasio'), ('Christina', 'Mchale'), ('Albina', 'Khabibulina'), ('Clara', 'Matias'), ('Martina', 'Spigarelli'), ('Hong Kyung', 'Shin'), ('Zi Xuan', 'Ma'), ('Hana', 'Kovacova'), ('Georgina', 'Garcia Perez'), ('Flavia', 'Guimaraes Bueno'), ('Ana Paula', 'Molero'), ('Katy', 'Oshea'), ('Angela', 'Dishkova'), ('Emily', 'Southall'), ('Tamara', 'Alvarado'), ('Lorena', 'Hernandez'), ('Alessia', 'Piran'), ('Thi Thanh Binh', 'Phan'), ('Caroline', 'Huberty'), ('Lottie', 'Fox'), ('Marta', 'Bertolaso'), ('Daphne', 'Friedrichs'), ('Karyn', 'Emeralda'), ('Natasha Natalia', 'Shigina'), ('Dana', 'Ihsanova'), ('Elin', 'Winkler'), ('Heather', 'Watson'), ('Martina', 'Caregaro'), ('Jasmine Janelle', 'Williams'), ('Welma', 'Luus'), ('Miharu', 'Imanishi'), ('Yuliya', 'Artsiomava'), ('Ivonne', 'Cavalle Reimers'), ('Derly', 'Cunya'), ('Julija', 'Lukac'), ('Ivana', 'Spasojevic'), ('Zane', 'Zarina'), ('Fiorella', 'Jerardino'), ('Anastasia', 'Mukhametova'), ('Diane', 'Trebalag'), ('Elizaveta', 'Kuzmina'), ('Ayaka', 'Terashi'), ('Marion', 'Dupuy'), ('Sarah', 'Moundir'), ('Giulia', 'Sussarello'), ('Julie', 'Gonzalez Rodriguez'), ('Mila', 'Marinkovic'), ('Isel', 'Martinez Marcos'), ('Danny', 'Engel'), ('Constanza Lara', 'Tempone'), ('Sibel', 'Ruzkar'), ('Seven', 'Oral'), ('Este', 'Potgieter'), ('Sabrina', 'Stewart'), ('Barbara', 'Bonic'), ('Shir', 'Aharon'), ('Carolina', 'Maso'), ('Martina', 'Furlanetto'), ('Elena', 'Mandzhukova'), ('Adriana', 'Chavez'), ('Dana', 'Machalkova'), ('Isabella', 'Aumueller'), ('Arushi', 'Sharma'), ('Yasmine', 'Abou Farah Trigueros'), ('Ye Ji', 'Mun'), ('Pilar', 'Quintana'), ('Natasha', 'Yonan'), ('Carolin', 'Daniels'), ('Nupur', 'Kaul'), ('Kelsey', 'Lawson'), ('Amanda', 'Bertani'), ('Lilien', 'Pacheco'), ('Marcela', 'Rosales'), ('Jovana', 'Karac'), ('Alejandra', 'Barragan'), ('Alyssa', 'Hibberd'), ('Valeria', 'Osadchenko'), ('Irene', 'Gonzalez Olivar'), ('Alexandra Alina', 'Tincu'), ('Anastasia', 'Burmistrova'), ('Ida', 'Krnic'), ('Kristie', 'Ahn'), ('Clara', 'Perez Marcos'), ('Marina', 'Lushchina'), ('Christina', 'Mathis'), ('Louise', 'Johansson'), ('Suzy', 'Larkin'), ('Alice', 'Savoretti'), ('Ghislaine', 'Van Baal'), ('Ivana', 'Filipi'), ('Nina', 'Pfahler'), ('Renata', 'Bakieva'), ('Genevieve', 'Barnes'), ('Maria', 'Belaya'), ('Maria Jose', 'Rodriguez'), ('Gvantsa', 'Robakidze'), ('Milena', 'Vujanovic'), ('Anna', 'Mangano'), ('Ashley', 'Krysiak'), ('Yi', 'Zhong'), ('Monica', 'Yajima'), ('Sandy', 'Marti'), ('Maiko', 'Yamashita'), ('Harriet', 'Sheahan'), ('Tomoko', 'Hagita'), ('Carla', 'Manzi'), ('Jolien', 'Gadeyne'), ('Chihiro', 'Nunome'), ('Ecaterina', 'Vasenina'), ('Pui Wing', 'Sher'), ('Ayna', 'Ereshova'), ('Yamit', 'Vodovoz'), ('Paloma', 'Mielgo'), ('Georgina', 'Campins Schonofer'), ('Alejandra', 'Renda Bouzada'), ('Gemma', 'Triay Pons'), ('Adelaide', 'Wood'), ('Adriana', 'Guzman'), ('Carolina', 'Barrionuevo'), ('Nerea', 'Piquer Albisu'), ('Elena', 'Burrone'), ('Katharina', 'Hock'), ('Petra', 'Jaskova'), ('Veronica', 'Virseda Sanchez'), ('Noemi', 'Novo Pereira'), ('Jin', 'Yoo'), ('Cristina', 'Melgarejo'), ('Karen', 'Barbat'), ('Sarah Rebecca', 'Sekulic'), ('Tamara', 'Stanic'), ('Daria', 'Kulbikova'), ('Chi Chi', 'Scholl'), ('Nelo', 'Phiri'), ('Na Lae', 'Han'), ('Tricia', 'Mar'), ('Xin', 'Wen'), ('Majoly', 'De Wilde'), ('Kamila', 'Rafkat'), ('Alina', 'Jerjomina'), ('Abi', 'Claydon'), ('Yurina', 'Tago'), ('Natalia', 'Kozel'), ('Aselya', 'Arginbayeva'), ('Kotchamon', 'Kongkerd'), ('Abigail', 'Tere Apisah'), ('Olivia', 'Rich'), ('Natali', 'Coronel'), ('Alexandra', 'Walters'), ('Marina', 'Kachar'), ('Alyssa', 'Fuentes'), ('Dominika', 'Schlehoferova'), ('Rachel', 'Michell'), ('Simone', 'Vranov Brown'), ('Claudia', 'Ortiz Albert'), ('Nadine', 'Pauli'), ('Rachel', 'Kahan'), ('Lyudmyla', 'Kichenok'), ('Nadiya', 'Kichenok'), ('Francesca', 'Franco'), ('Bianca', 'Hincu'), ('Indra', 'Bigi'), ('Catrin', 'Levers'), ('Carina', 'Litfin'), ('Alrissa', 'Tobe'), ('Marie', 'Temin'), ('Hyun Jung', 'Kim'), ('Yu', 'Nakashima'), ('Sarah', 'Seiderer'), ('Mafalda', 'Lhorca'), ('Sarah', 'Mclean'), ('Kristyna', 'Hancarova'), ('Oana', 'Danescu'), ('Raye Ann', 'Sandy'), ('Marina', 'Kozachenko'), ('Doroteja', 'Eric'), ('Sarah', 'Pham'), ('Amelia', 'Herring'), ('Diana', 'Marcinkevica'), ('Rowie', 'Kouw'), ('Dijana', 'Banovec'), ('Yvonne', 'Neuwirth'), ('Anja', 'Koell'), ('Fanny', 'Lundsgard'), ('Tara', 'Moore'), ('Anna', 'Velica'), ('Ana Maria', 'Szilagyi'), ('Yvonne Elizabeth', 'Tirado Tejeda'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Natalia', 'Escobar'), ('Franziska Louise', 'Koehler'), ('Bianca', 'Tepper'), ('Tamaryn', 'Hendler'), ('Isabella', 'Escobar'), ('Alexandra', 'Leatu'), ('Giulia', 'Mecca'), ('Jimena', 'Wu'), ('Hannah', 'Hume'), ('Manisha', 'Chowdhury'), ('Song Yee', 'You'), ('Elliesa', 'Ball'), ('Yuri', 'Okada'), ('Kim', 'Berghaus'), ('Amit', 'Berkovitz'), ('Karina', 'Fiamenghi'), ('Matilda', 'Hamlin'), ('Barbara', 'Gueno'), ('Dagmara', 'Baskova'), ('Ema', 'Burgic'), ('Karolina', 'Lisiecka'), ('Mia', 'Vriens'), ('Sena', 'Bensafi'), ('Ivana', 'Kubickova'), ('Mariya', 'Sukhareva'), ('Nicola', 'George'), ('Yuliana', 'Umanets'), ('Agathe', 'Timsit'), ('Andrea', 'Tabachnik'), ('Agata', 'Bachanek'), ('Emily', 'Madill'), ('Julianna Barbosa', 'Bacelar'), ('Karina', 'Goia'), ('Raquel', 'Diaz'), ('Paola', 'Cos'), ('Ting Fei', 'Juan'), ('Elisha', 'Hande'), ('Fanni', 'Varga'), ('Ashley', 'Mackey'), ('Akilah', 'James'), ('Annie', 'Sullivan'), ('Hadar', 'Ostashinsky'), ('Maria Jesus', 'Ibanez Galindo'), ('Sandra', 'Gonzalez Salas'), ('Kristina', 'Vesse'), ('Tina', 'Tehrani'), ('Stephanie', 'Fox'), ('Yuliana', 'Motyl'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Laura', 'Antonana Iriarte'), ('Sachie', 'Ishizu'), ('Julia', 'Samuseva'), ('Vanessa', 'Moor'), ('Claudia Irene', 'Ponton Caamano'), ('Sibilla', 'Fiorentino'), ('Sasha', 'Khabibulina'), ('Andrea', 'Lippe'), ('Lu', 'Lin'), ('Violetta', 'Milkova'), ('Houda', 'Bellamine'), ('Chantal', 'Brutschin'), ('Rebecca', 'Kaineder'), ('Nino', 'Mebuke'), ('Sindhu Nila', 'Partheepan'), ('Anna', 'Rapoport'), ('Melina', 'Ferrero'), ('Natasha', 'Afridi'), ('Anastasia', 'Stepu'), ('Ursula', 'Castillejos'), ('Petra Maria', 'Kulhova'), ('Petra', 'Jurova'), ('Miruki', 'Kugai'), ('Stephanie', 'Slaveski'), ('Prerna', 'Bhambri'), ('Sviatlana', 'Pirazhenka'), ('Sabrina', 'Kierberg'), ('Francisca', 'Matos'), ('Alexandra', 'Mitrovska'), ('Melissa', 'Lutring'), ('Seyedeh', 'Saadat'), ('Anastasia', 'Kriz'), ('Kanyapat', 'Narattana'), ('Rebecca', 'Pedrazzi'), ('Mako', 'Mizunuma'), ('Virginia Eliana', 'Tica'), ('Christina', 'Madenoglou'), ('Silviya', 'Zhelyazkova'), ('Maria Fernanda', 'Jimenez'), ('Vincenza', 'Ciraolo'), ('Rani Fitriya', 'Wardhani'), ('Stefanie', 'Tan'), ('Maria Angelica', 'Tangarife'), ('Laura Sofia', 'Sanchez Perez'), ('Martina', 'Frantova'), ('Chelsea', 'Te Tai'), ('Michele Ayomide', 'Idera'), ('Alexandra', 'Avirvarei'), ('Christina Lavinia', 'Badan'), ('Karina Natalia', 'Lojo'), ('Fernanda', 'Guilhaume Correa'), ('Priscila', 'Nunez'), ('Isabela', 'Espinosa Davila'), ('Hitomi', 'Ozaki'), ('Sina', 'Haas'), ('Alexandra', 'Walker'), ('Kayla', 'Rizzolo'), ('Alessia', 'Camplone'), ('Claudia', 'Basciani'), ('Andrea', 'Gomez Carus'), ('Pia', 'Rygh'), ('Nikola', 'Horakova'), ('Xi Yao', 'Wang'), ('Monica', 'Aguado'), ('Daniel', 'Hava'), ('Shukufa', 'Abdullayeva'), ('Anett', 'Ferenczi Bako'), ('Nayara', 'Candido De Moraes'), ('Carolina', 'Prats Millan'), ('Federica', 'Colmari'), ('Paula', 'Ormaechea'), ('Derja', 'Turhan'), ('Louise', 'Harbo Schmidt'), ('Tarlina', 'Tipungwuti'), ('Kendal', 'Drake'), ('Gorana', 'Stevanovic'), ('Georgina', 'Fedosenkova'), ('Jessica', 'Bertoldo'), ('Daria', 'Kirpicheva'), ('Irina', 'Koripenko'), ('Isabella', 'Assad'), ('Simonka', 'Parajova'), ('Melissa', 'Minniti'), ('Rubi', 'Morales'), ('Dasa', 'Orlic'), ('Maria Joao', 'Koehler'), ('Lidziya', 'Marozava'), ('Giulia', 'Squadrin'), ('Andrea', 'Caamano'), ('Dominique', 'Wahl'), ('Hwa', 'Lee'), ('Colet', 'Weening'), ('Maria Daniela', 'Frascini'), ('Elizabeth', 'Golovkin'), ('Shelby', 'Rogers'), ('Tatiana', 'Rodens'), ('Andrea', 'Medina Tomas'), ('Christi', 'Potgieter'), ('Lee Anne', 'Lingo'), ('Viktorija', 'Golubic'), ('Stephanie', 'Hirsch'), ('Anne Laure', 'Dorseuil'), ('Inna', 'Volkovich'), ('Emiliana', 'Spinardi'), ('Kyra', 'Shroff'), ('Janneke', 'Wikkerink'), ('Greys', 'Moroder'), ('Diana', 'Isaeva'), ('Huai Hsuan', 'Huang'), ('Aida', 'Zukic'), ('Jessica', 'Ginier'), ('Daniela', 'Vidal'), ('Ayelen', 'Quinteros'), ('Gislaine', 'Conceicao Farias'), ('Verena', 'Schmid'), ('Marcelina', 'Cichon'), ('Anjyu', 'Kanda'), ('Ebba', 'Unden'), ('Ana', 'Claro'), ('Helga', 'Pinones'), ('Esthefhanie Darehly', 'Juarez Rojo'), ('Antea', 'Dedic'), ('Kiki', 'Filippou'), ('Niriantsa', 'Rasolomalala'), ('Aleksandra', 'Treskunova'), ('Julia Christine', 'Fellerhoff'), ('Rocio', 'Sanchez Palacio'), ('Jade', 'Frampton'), ('Isabela', 'Miro'), ('Julia', 'Rissanen'), ('Dalma Maria', 'Rojas Rodas'), ('Evelyne', 'Dom'), ('Kristina', 'Horsikyan'), ('Moe', 'Aoki'), ('Camila', 'Silva'), ('Andrea', 'Gamiz'), ('Kim', 'Stubbe'), ('Katarzyna', 'Kaleta'), ('Adelina Georgiana', 'Lipan'), ('Tanja', 'Grzan'), ('Sabrina', 'Xu'), ('Valeria', 'Solovieva'), ('Marta', 'Lewandowska'), ('Nicole', 'Peterson'), ('Khrystyna', 'Pavlyuk'), ('Ioana', 'Dinescu'), ('Amala', 'Amol Warrick'), ('Leona', 'Masuoka'), ('Paula', 'Kania'), ('Anna Benita', 'Fuchs'), ('Santina', 'Mushtakova'), ('Polina', 'Konop'), ('Morocco', 'Hitt'), ('Belen', 'Luduena'), ('Sofia', 'Luini'), ('Alessandra', 'Bonte'), ('Riko', 'Fujioka'), ('Peangtarn', 'Plipuech'), ('Daniela', 'Seguel'), ('Marta', 'Hnatyshyn'), ('Nikolina', 'Grbac'), ('Emily', 'Leenen'), ('Alexandra', 'Moreno Kaste'), ('Katarzyna', 'Kawa'), ('Ran', 'Meng'), ('Ana Maria', 'Stroe'), ('Alexandra', 'Artamonova'), ('Adriana', 'Perez'), ('Amina', 'Berdieva'), ('Lynda', 'Xepoleas'), ('Julia', 'Goloborodko'), ('Michela', 'Casanova'), ('Ana', 'Bogdan'), ('Cindy', 'Burger'), ('Irina', 'Chaukina'), ('Jennifer', 'Witthoeft'), ('Rebecca', 'Siegler'), ('Macarena', 'Acuna'), ('Nadia', 'Frederika'), ('Cielo Marisol', 'Castro Chao'), ('Leticia', 'Sanchez'), ('Maria', 'Navarro Cruz'), ('Eliana Elizabeth', 'Pistone'), ('Sophie', 'Letcher'), ('Anna', 'Livadaru'), ('Maria Patricia', 'Cordova'), ('Juliette', 'Sapene'), ('Emily', 'Gelber'), ('Hannah', 'Mueller'), ('Amina', 'St Hill'), ('Maryna', 'Zhytska'), ('Alena', 'Gizdic'), ('Aurora', 'Davis'), ('Ana Victoria', 'Pimienta'), ('Varvara', 'Kuznetsova'), ('Stefania', 'Rubini'), ('Shalaka', 'Uddur Manjunath'), ('Loreto', 'Alonso Martinez'), ('Vanda', 'Lukacs'), ('Taylor', 'Hollander'), ('Olga', 'Serbyn'), ('Marina', 'Cernea'), ('Johana Maria', 'Vitanzo Maravi'), ('Alicia', 'Doms Golobart'), ('Katie', 'Le'), ('Katelyn', 'Stokes'), ('Andrea Natalia', 'Martin'), ('Julieta Evangelina', 'Bidahorria'), ('Francesca', 'Bernardi'), ('Charo', 'Bintureira'), ('Alexandra', 'Kolesnichenko'), ('Rozike', 'Janzen Van Rensburg'), ('Farah', 'Baracat'), ('Kaitlin', 'Ray'), ('Nigina', 'Rahmanova'), ('Ulrikke', 'Eikeri'), ('Erika', 'Sugamura'), ('Sarah', 'Urbanek'), ('Epiphany B', 'Turner'), ('Kataraina', 'Hunia'), ('Yana', 'Koroleva'), ('Iveta', 'Masarova'), ('Cynthia Alejandra', 'Lopez'), ('Michaela', 'Frlicka'), ('Michaela', 'Honcova'), ('Gopika', 'Kapoor'), ('Nika', 'Kovac'), ('Patricia', 'Guerreiro'), ('Eva', 'Raszkiewicz'), ('Katie', 'Goepel'), ('Linda', 'Prenkovic'), ('Alina', 'Yanovskaya'), ('Ashling', 'Sumner'), ('Jitsupang', 'Samrej'), ('Arisa', 'Murakami'), ('Cecilia', 'Costa Melgar'), ('Sabina', 'Stilu'), ('Claudia Noemi', 'Cascella'), ('Flavia', 'Dechandt Araujo'), ('Ann Sophie', 'Rufyikiri'), ('Amy', 'Hoburn'), ('Louise', 'Brunskog'), ('Karolina', 'Chernaya'), ('Nives', 'Baric'), ('Diana', 'Makki'), ('Laura', 'Hornsby'), ('Chloe', 'Murphy'), ('Janina', 'Ruhstaller'), ('Yisel', 'Nodarse Darvois'), ('Milena', 'Zubkov'), ('Anastasia', 'Poliakova'), ('Sabrina', 'Tahir'), ('Di', 'Zhao'), ('Tory', 'Parravi'), ('Sederique', 'Merola'), ('Ece', 'Unlu'), ('Tamara', 'Alvarez Riobo'), ('Caroline', 'Wegner'), ('Lindsey', 'Lyles'), ('Fernanda', 'Sandoval'), ('Varunya', 'Wongteanchai'), ('Mariana', 'Salvador'), ('Lindsay', 'Graff'), ('Hana', 'Shimokawa'), ('Michelle', 'Fischer'), ('Monica', 'Turewicz'), ('Maria Florencia', 'Albertalli'), ('Komal', 'Safdar'), ('Laura', 'Fiala'), ('Costanza', 'Bruno De Lisi'), ('Paula', 'Lopez'), ('Martina', 'Zerbola'), ('Roisin', 'Mullins'), ('Lucy', 'Brown'), ('Ankita', 'Raina'), ('Cassidy', 'Crawford'), ('Amanda', 'Belgini Franchi'), ('Jana', 'Stankovicova'), ('Chiara', 'Basso Basset'), ('Marianne', 'Jodoin'), ('Naomi', 'Bleisch'), ('Mashaal', 'Hameed'), ('Charlotte', 'Phillips'), ('Sabrina', 'Dos Reis'), ('Thais', 'Romero'), ('Linnea', 'Pedersen'), ('Maria Sol', 'Carrasco'), ('Livia', 'Turiano'), ('Shelby', 'Talcott'), ('Yunjun', 'Wu'), ('Sofia Giantvigka', 'Zengou Nieviantomska'), ('Aida', 'Martinez Sanjuan'), ('Amandine', 'Hesse'), ('Rosie', 'Bird'), ('Ramona', 'Ghermani'), ('Cristina', 'Dinu'), ('Jainy', 'Scheepens'), ('Nadiya', 'Kolb'), ('Meheq', 'Khokhar'), ('Rebecca', 'Poikajarvi'), ('Midori', 'Yamamoto'), ('Alexandra M', 'Sheeran'), ('Jennifer', 'Ren'), ('Valeria', 'Detogni'), ('Laurie', 'Gingras'), ('Violetta', 'Tosmuk'), ('Gabriela', 'Markova'), ('Mishel', 'Kenin'), ('Samira', 'Giger'), ('Nicol', 'Signorini'), ('Jessica', 'Gomez Galloso'), ('Kaori', 'Yamazaki'), ('Mayte', 'Cuellar'), ('Eleanor', 'Lika'), ('Rachael', 'Tredoux'), ('Candela', 'Munoz Giron'), ('Ruxandra', 'Ababii'), ('Elisha', 'Gabb'), ('Samantha', 'Lieb'), ('Maria Paula', 'Ribero'), ('Hailey M', 'Johnson'), ('Chisato', 'Kobayashi'), ('Michelle', 'Larcher De Brito'), ('Akiko', 'Omae'), ('Iveta', 'Dapkute'), ('Alena', 'Shichkova'), ('Nina', 'Nagode'), ('Margot', 'De Haan'), ('Veronika', 'Bacikova'), ('Catalina', 'Pella'), ('Rosaline Zafir', 'Chavez Tello'), ('Mirjam', 'Gamperli'), ('Clotilde', 'Barriere'), ('Marija', 'Mirosavljevic'), ('Joanna Mary', 'Smith'), ('Beladora', 'Matallah'), ('Kim Alena', 'Twelker'), ('Zsofia', 'Miko'), ('Misaki', 'Yoshimoto'), ('Noel', 'Scott'), ('Florencia', 'Di Biasi'), ('Maryam', 'Eslami'), ('Natalla', 'Khaniejo'), ('Daniella', 'Patton'), ('Min', 'Liu'), ('Berat Sena', 'Dogru'), ('Ladina', 'Soler'), ('Namita', 'Bal'), ('Claire Cynthia', 'Mulyadi'), ('Isabella', 'Williams'), ('Sian', 'Bayliss'), ('Anastasia', 'Trubich'), ('Jil', 'Wagner'), ('Chiara', 'Mossi'), ('Anna', 'Peregudova'), ('Anjana', 'Kompally'), ('Despina', 'Papamichail'), ('Veronika', 'Zavodska'), ('Judit', 'Domingo Casas'), ('Lisa', 'Bastianello'), ('Nathaly', 'Kurata'), ('Briar', 'Preston'), ('Antonella', 'Galeano'), ('Maria Del Rosario', 'Rodriguez Arias'), ('Tamara', 'Blum'), ('Sandy', 'Vo'), ('Saana', 'Saarteinen'), ('Kalliopi', 'Zamanoudi'), ('Nicole', 'Martinez'), ('Alejandra', 'Hernandez Medel'), ('Beatrice', 'Cedermark'), ('Lucia', 'Paz Monteagudo'), ('Natasha', 'Kanvinde'), ('Romilda', 'Zitarosa'), ('Sanne', 'Louwers'), ('Sanskriti', 'Sinha'), ('Dane', 'Vorster'), ('Mishel', 'Okhremchuk'), ('Ekaterina', 'Kiseleva'), ('Kat', 'Facey'), ('Alexandra', 'Facey'), ('Desiree', 'Jakle'), ('Stephanie', 'Vidov'), ('Viktoriya', 'Bon'), ('Eva Maria', 'Sjolund'), ('Natalia', 'Lysova'), ('Stefania', 'Haddad'), ('Juliana', 'Gajic'), ('Mora', 'Eshak'), ('Maja', 'Jovic'), ('Jeni', 'Patel'), ('Ana Mihaela', 'Vladutu'), ('Zhen', 'Yan'), ('Jazmin', 'Britos'), ('Ziqi', 'Hou'), ('Anamaria', 'Candanoza'), ('Natasha Mayumi', 'Tomishima'), ('Chisato', 'Nakagawa'), ('Kayla', 'Gammie'), ('Cristina', 'Gimenez Pena'), ('Alicia', 'Robinson'), ('Xiao Jing', 'Lu'), ('Vassiliki', 'Giannakaki'), ('Hsin Ting', 'Tsai'), ('Yuka', 'Sadakane'), ('Mara', 'Benz'), ('Sabrina', 'Santamaria'), ('Alexandra', 'Petrzalkova'), ('Vaszilisza', 'Bulgakova'), ('Hisaimet', 'Mendez Gonzalez'), ('Nina', 'Wellnitz'), ('Marina', 'Danzini'), ('Elisa', 'Celi'), ('Natela', 'Dzalamidze'), ('Gabrielle', 'Desimone'), ('Iulia', 'Vodislav'), ('Yuka', 'Iijima'), ('Serena', 'Venica'), ('Jasmin', 'Kling'), ('Se Won', 'Lee'), ('Michaela', 'Meszarosova'), ('Debora', 'Echeverria'), ('Paula', 'Montoya'), ('Nicole', 'Gibbs'), ('Gabriela', 'Ce'), ('Giuliana', 'Olmos'), ('Milagros', 'Cubelli'), ('Ekin', 'Bahitli'), ('Karina', 'Saeri Ono'), ('Anna', 'Orlik'), ('Hana', 'Umek'), ('Marina Raluca', 'Tudorache'), ('Marion', 'Codino'), ('Eleni', 'Kordolaimi'), ('Denisa', 'Allertova'), ('Ruth', 'Seaborne'), ('Marcella', 'Cucca'), ('Dora', 'Andrejszki'), ('Christina', 'Laskaridou'), ('Elizaveta', 'Ianchuk'), ('Laetitia', 'Sarrazin'), ('Diana', 'Stomlega'), ('Sara', 'Pilic'), ('Ellina', 'Kornilova'), ('Denise', 'Scheiflinger'), ('Adreanna', 'Christopoulou'), ('Camilia', 'Benabdeljalil'), ('Sara', 'Benabdeljalil'), ('Anna', 'Smirnova'), ('Katharina', 'Holert'), ('Larisa', 'Sporea'), ('Nozomi', 'Fujioka'), ('Taro', 'Keens'), ('Anastasiya', 'Prenko'), ('Sayaka', 'Koumura'), ('Caroline', 'Price'), ('Suzana', 'Sava'), ('Antigoni', 'Kleftouri'), ('Katherine', 'Westbury'), ('Sheila Bertha', 'Aquino Aragon'), ('You Na', 'Sul'), ('Aleksandra', 'Krunic'), ('Paula', 'Rincon Otero'), ('Johanna', 'Skoglund'), ('Beatriz', 'Nallar'), ('Elena', 'Garcia Garrido'), ('Alix', 'Collombon'), ('Ekaterina', 'Yakovleva'), ('Nicole Theresa', 'Leisher'), ('Janine', 'Erasmus'), ('Danica', 'Milinkovicova'), ('Besarta', 'Avdullahi'), ('Kirsten', 'Scott'), ('Mercedes', 'Giner Gasco'), ('Catherine', 'Chantraine'), ('Leyla', 'Taracena'), ('Sloane', 'Stephens'), ('Esther', 'Santiago'), ('Sharni', 'Stocker Jones'), ('Mukhabbat', 'Saidova'), ('Ekaterina', 'Nikitina'), ('Amanda', 'Rodgers'), ('Nihal', 'El Aasar'), ('Rebeca', 'Pereira'), ('Kadi', 'Ilves'), ('Veronika', 'Zatekova'), ('Antonella', 'La Viola'), ('Dora', 'Vajdic'), ('Olga', 'Parres Azcoitia'), ('Ke Hsin', 'Chen'), ('Elisaveta', 'Baer'), ('Monika', 'Magusiak'), ('Cecilia Maria', 'Barbiero'), ('Annie', 'Mulholland'), ('Tal', 'Gorenstein'), ('Helene', 'Meuleman'), ('Sophia', 'Dzulynsky'), ('Emina', 'Bektas'), ('Carolina', 'Betancourt'), ('Dunja', 'Stamenkovic'), ('Priscila', 'Garcia'), ('Daniela', 'Degano'), ('Charlene', 'Monterrain'), ('Yang', 'Pang'), ('Ainhoa', 'Zamora Rubio'), ('Martina', 'Natali'), ('Sarah', 'Mateo'), ('Giovanna', 'Tomita'), ('Jennifer', 'Rink'), ('Na Hee', 'Lee'), ('Ksenia', 'Chimpoake'), ('Louise', 'Boinay'), ('Saya', 'Nishi'), ('Polina', 'Monova'), ('Helena', 'Bel Franquesa'), ('Alisa', 'Danilova'), ('Ines', 'Martins'), ('Rut Ester', 'Prudencio Csapek'), ('Daria', 'Mironova'), ('Catalina', 'Ronco'), ('Brigith Alejandra', 'Teran'), ('Dominique Chante', 'Mclean'), ('Adi', 'Ella'), ('Sofia', 'Holmberg'), ('Robin', 'Anderson'), ('Liat', 'Zimmermann'), ('Irini', 'Papageorgiou'), ('Anastasia', 'Matyukhina'), ('Isabella', 'Dale'), ('Federica', 'Arcidiacono'), ('Nadiia', 'Baryshpolets'), ('Nova', 'Patel'), ('Jeong Min', 'Jeon'), ('Mehreen', 'Izhar'), ('Melita', 'Ferjanic'), ('Laura', 'Ubeda Lopez'), ('Natalia', 'Zamora Jimenez'), ('Ksenia', 'Gospodinova'), ('Marta', 'Stojanovic'), ('Olga', 'Terteac'), ('Brenda', 'Moreira'), ('Leyla', 'Erkan'), ('Sarah', 'Hellstern'), ('Aishwarya', 'Agrawal'), ('Karen Johana', 'Martinez'), ('Laura', 'Bernard'), ('Laura', 'Schaeder'), ('Viktoria', 'Matejevic'), ('Xianghong', 'Yin'), ('Jessica', 'Wacnik'), ('Oana', 'Ionescu'), ('Silvia', 'Tumova'), ('Seunghyun', 'Lee'), ('Alexandra', 'Romanova'), ('Thale', 'Myhre'), ('Dajana', 'Ognjenovic'), ('Mimi', 'Fotopoulos'), ('Alina', 'Savchuk'), ('Lisa', 'Vallone'), ('Constanze', 'Lotz'), ('Lina', 'Padegimaite'), ('Clare', 'Fong'), ('Karolina', 'Pondusova'), ('Erika', 'Faba Lopez'), ('Niu Xuan', 'Zhou'), ('Lucia', 'Butkovska'), ('Melina', 'Gonzalez'), ('Dana', 'Nussralla'), ('Katerina', 'Popova'), ('Erin Carol', 'Stephens'), ('Nicole', 'Meyer'), ('Julia', 'Schiller'), ('Ajla', 'Tomljanovic'), ('Gloire', 'Mfoumouangana'), ('Natasa', 'Vukovic'), ('Maria', 'Bengtsson'), ('Madina', 'Yekubjanova'), ('Andrea', 'Pavlovic'), ('Viktoria', 'Stojanova'), ('Denise', 'Konig'), ('Timea', 'Babos'), ('Grace Sari', 'Ysidora'), ('Paula', 'Mocete Talamantes'), ('Carla', 'Mocete Talamantes'), ('Ji Yun', 'Park'), ('Kristina', 'Mladenovic'), ('Rishika', 'Sunkara'), ('Pia', 'Konig'), ('Daneika', 'Borthwick'), ('Mikele', 'Irazusta'), ('Klara', 'Dohnalova'), ('Haruka', 'Yamaura'), ('Divija', 'Mandava'), ('Elena', 'Zenko'), ('Chiara', 'Mendo'), ('Raluca', 'Mita'), ('Ivana', 'Vukovic'), ('Ma Regina', 'Santiago'), ('Mizuki', 'Konakawa'), ('Romina', 'Aufieri'), ('Ana Maria', 'Ayala Villacorta'), ('Breanna Alexa Bachini', 'Bachini'), ('Michal', 'Yogev'), ('Laura', 'Deigman'), ('Cyntia Soledad', 'Gimenez'), ('Jaruwadee', 'Kaewma'), ('Yuliana', 'Lizarazo'), ('Verena', 'Gantschnig'), ('Marina', 'Cunningham Pereira'), ('Andrea', 'Murillo'), ('Sabrina', 'Bamburac'), ('Abbi', 'Melrose'), ('Ainhoa', 'Atucha Gomez'), ('Steffi', 'Carruthers'), ('Matea', 'Curic'), ('Ireen', 'Kuipers'), ('Lok Sze', 'Leung'), ('Katarzyna', 'Kossowska'), ('Kseniia', 'Berestetskaya'), ('Su San Na', 'Sim'), ('Melanie', 'Maietti'), ('Julia', 'Lorca'), ('Barbara', 'Luz'), ('Siriporn', 'Phakamad'), ('Shir', 'Perkis'), ('Jana', 'Cepelova'), ('Sonia', 'Daggou'), ('Yekaterina', 'Sagitova'), ('Beatriz', 'Prieto Cabrera'), ('Alejandra', 'Reyes Menacho'), ('Ingrid Alexandra', 'Radu'), ('Steffi', 'Distelmans'), ('Melis', 'Sezer'), ('Farangiz', 'Shamsieva'), ('Paula', 'Feitosa'), ('Marija', 'Milutinovic'), ('Melissa', 'Kopinski'), ('Madison', 'Craft'), ('Lisa', 'Ehrensberger'), ('Ksenya', 'Bardabush'), ('Julia', 'Stamatova'), ('Elizabeth', 'Rafailidis'), ('Viktoria', 'Bjork'), ('Mari', 'Mahoni'), ('Tine', 'Maertens'), ('Lesbia', 'Zuniga'), ('Shruti', 'Archita'), ('Theresa', 'Smith'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Cordelia Currey', 'Witten'), ('Sofia', 'Baptista'), ('Kana', 'Okada'), ('Jessica', 'Sabeshinskaja'), ('Catherine', 'Leduc'), ('Michaela', 'Jasenakova'), ('Pauline', 'Lollia'), ('Dane', 'Joubert'), ('Raluca Elena', 'Platon'), ('Tamara', 'Mihajlovic'), ('Yuriko', 'Shinmura'), ('Maria Jose', 'Marino Calvino'), ('Amy', 'Askew'), ('Dan Ni', 'Wang'), ('Renata', 'Kuricova'), ('Abhilasha', 'Ahuja'), ('Xuanshuo', 'Ou'), ('Eliana Maria', 'Lopez Pappalardo'), ('Lorraine M', 'Guillermo'), ('Matilda', 'Hurst'), ('Svetlana', 'Piquerez'), ('Irina', 'Glimakova'), ('Giulia', 'Andreazza'), ('Hyejin', 'Lee'), ('Marina', 'Prosenica'), ('Chanel', 'Glasper'), ('Machika', 'Miyaji'), ('Marta', 'Dallosso'), ('Lidiia', 'Dashchenko'), ('Ksenia', 'Kirillova'), ('Nour', 'Abbes'), ('Meghan', 'Blevins'), ('Ashleigh', 'De Wet'), ('Rosalyn', 'Small'), ('Silvia', 'Miguel'), ('Ivanna', 'Slobodian'), ('Emma', 'Marti'), ('Romina Soledad', 'Sanio Juarez'), ('Patricia', 'Cyranowski'), ('Whitney P', 'Kay'), ('Oceane', 'Adam'), ('Ushna', 'Suhail'), ('Nikoleta', 'Vlaikoudi'), ('Amonica', 'Arcos'), ('Ikttesh', 'Chahal'), ('Valentyna', 'Ivakhnenko'), ('Camelia', 'Abdellah'), ('Katja', 'Milas'), ('Miu', 'Hongo'), ('Agustina Sol', 'Eskenazi'), ('Or', 'Sasson'), ('Ana Lorena', 'Belmar'), ('Ester', 'Goldfeld'), ('Pauline', 'Clavel'), ('Ivana', 'Kopsova'), ('Lauren', 'Mcminn'), ('Hanna', 'Tolonen'), ('Ivana', 'Kafedjiyska'), ('Fausthyara', 'Pietersz'), ('Satomi', 'Fujitani'), ('Yasemin', 'Cetinel'), ('Sayako', 'Matsunaga'), ('Silvia', 'Njiric'), ('Nikolette', 'Budai'), ('Andreea', 'Zabrac'), ('Marina', 'Lidiya'), ('Cynthia', 'Melita'), ('Yasmin', 'Ebada'), ('Pilar', 'Dominguez Lopez'), ('Heini', 'Salonen'), ('Megumi', 'Nishimoto'), ('Paula Alejandra', 'Saenz'), ('Vaniya', 'Dangwal'), ('Sarah', 'Means'), ('Ani', 'Vangelova'), ('Jana', 'Matouskova'), ('Salome', 'Kvitashvili'), ('Stefania', 'Fadabini'), ('Vivien', 'Juhaszova'), ('Michelle Paz', 'Coccio Nieto'), ('Clorinda', 'Wessels'), ('Georgina', 'Carswell'), ('Luksika', 'Kumkhum'), ('Shu Ying', 'Hsieh'), ('Lauren', 'Herring'), ('Nikol', 'Hristova'), ('Camille', 'Cheli'), ('Joanna', 'Nalborska'), ('Mubina', 'Vahobova'), ('Sofya', 'Malysheva'), ('Hongrui', 'Sun'), ('Aneliya', 'Kairlenova'), ('Raquel', 'Madrigal Rodriguez'), ('Nicole', 'Melichar'), ('Aminat', 'Kushkhova'), ('Nikolina Marija', 'Turudic'), ('Lana', 'Groenvynck'), ('Andela', 'Brguljan'), ('Margarida', 'Moura'), ('Liz Tatiane', 'Koehler Bogarin'), ('Jessica', 'Laing'), ('Teona', 'Tatishvili'), ('Diana', 'Reverte'), ('Grace', 'Denga'), ('Charlene', 'Seateun'), ('Trang', 'Huynh Phuong Dai'), ('Demi', 'Schuurs'), ('Hannah', 'Liljekvist'), ('Martina', 'Lombardi'), ('Adriana', 'Moedano'), ('Michiru', 'Furuya'), ('Stefanie', 'Stemmer'), ('Maja', 'Mladenovic'), ('Natasa', 'Trailovic'), ('Trevine', 'Sellier'), ('Giulia', 'Costa'), ('Robyn', 'Beddow'), ('Alina', 'Mikheeva'), ('Josephine', 'Boualem'), ('Alma Michelle', 'Espinosa Rodriguez'), ('Satomi', 'Yasuno'), ('Ekaterina', 'Yashina'), ('Yurika', 'Aoki'), ('Catalina', 'Lopez'), ('Ellie', 'Yates'), ('Sharmada', 'Balu'), ('Shweta', 'Rana'), ('Nadine', 'Zeitoun'), ('Maria', 'Zela'), ('Molly', 'Okoniewski'), ('Beatrice', 'Krauss Granate'), ('Karen M', 'Gomez Gonzalez'), ('Lyubov', 'Pogribnyak'), ('Mako', 'Irie'), ('Maria', 'Arenas'), ('Napatsakorn', 'Sankaew'), ('Martha Paola', 'Sanchez Merigo'), ('Sina', 'Niketta'), ('Sarah', 'Lee'), ('Sung Ah', 'Park'), ('Kemalie', 'Herath'), ('Valeriya', 'Savina'), ('Masa', 'Smic'), ('Lenka', 'Filipova'), ('Jamie', 'Pawid'), ('Natsumi', 'Kujime'), ('Paula', 'De Man'), ('Ariel', 'Sulimany'), ('Manisha', 'Foster'), ('Rafaela', 'Orenga Panizza'), ('Yue', 'Fei'), ('Francesca', 'Stephenson'), ('Camila', 'Franco'), ('Giovanna', 'Ramos'), ('Dilyara', 'Merzadinova'), ('Maryna', 'Zanevska'), ('Patricia', 'Fargas Osorio'), ('Yuki', 'Ito'), ('Andrea', 'Castillo Gutierrez'), ('Aleksandra', 'Trifunovic'), ('Maria Belen', 'Mosca'), ('Jasmine Nicole', 'Minor'), ('Edmee', 'Morin Kougoucheff'), ('Maria', 'Benkirane'), ('Dide', 'Beijer'), ('Grazia', 'Ripepi'), ('Haine', 'Ogata'), ('Elizaveta Anna', 'Nemchinov'), ('Yukako', 'Noi'), ('Anastasiya', 'Tripolskaya'), ('Alexandra', 'Nancarrow'), ('Mateja', 'Kraljevic'), ('Renata', 'Campagnolo'), ('Dominika', 'Rozanska'), ('Marjorie', 'Wladimirski'), ('Chantal', 'Skamlova'), ('Laura', 'Valkova'), ('Renata', 'Arshavskaya'), ('Sandra', 'Garriga Catala'), ('Iva', 'Jancevski'), ('Lucia', 'Soulie'), ('Pascalle', 'Thenoux Acuna'), ('Chen Lu', 'Wu'), ('Rita', 'Vilaca'), ('Elena', 'Bertoia'), ('Zanmarie', 'Pienaar'), ('Karoline', 'Grieshofer'), ('Luisanna', 'Rodriguez'), ('Linn', 'Timmermann'), ('Ankita', 'Bhatia'), ('Luicelena', 'Perez'), ('Chihiro', 'Matsumoto'), ('Soumeya', 'Anane'), ('Patricia', 'Haas'), ('Agustina', 'Valenzuela'), ('Smriti', 'Joon'), ('Isabel', 'Bischof'), ('Zi', 'Yang'), ('Marie Elise', 'Casares'), ('Chaimae', 'Roudami'), ('Valentina', 'Beccaria'), ('Akiko', 'Okuda'), ('Melanie', 'Benyadi'), ('Hua Chen', 'Lee'), ('Skylar', 'Kuykendall'), ('Denise', 'Van Der Ben'), ('Viktoria', 'Malova'), ('Tanya', 'Noury'), ('Devon', 'Kuijstermans'), ('Stacia', 'Kissell'), ('Nattawadee', 'Kotcha'), ('Rio', 'Kitagawa'), ('Andrea', 'Berzal Albaladejo'), ('Carlotta', 'Orlando'), ('Amy', 'Bowtell'), ('Ilinca', 'Stoica'), ('Melanie', 'Vlak'), ('Nikarat', 'Wateenukit'), ('Kenna', 'Kilgo'), ('Hao Ching', 'Chan'), ('Noy', 'Mor'), ('Ilijana', 'Ivic'), ('Claudia', 'Lorenzo Fernandez'), ('Zoe Gwen', 'Scandalis'), ('Tracy', 'Plant'), ('Eleni', 'Konstantinidou'), ('Yaiza', 'Franco'), ('Sarah', 'Petrides'), ('Idia', 'Amen'), ('Binasa', 'Beslagic'), ('Hannah', 'Martin Merchant'), ('Katarina', 'Adamovic'), ('India', 'Maggen'), ('Maria Eduarda', 'Medeiros'), ('Aiko', 'Yoshitomi'), ('Anastasia', 'Klyueva'), ('Gwendolyne', 'Laugier'), ('Yasmin', 'Hamzawy'), ('Alexiina', 'Ahonkivi'), ('Diletta', 'Alessandrelli'), ('Natallia', 'Vavulina'), ('Monica', 'Puig'), ('Louise', 'Reis De Campos'), ('Manon', 'Provost'), ('Solene', 'Ficheux'), ('Stephanie', 'Ntcha'), ('Natalia', 'Maynetto'), ('Irene', 'Gandara Gonzalez'), ('Emi', 'Mutaguchi'), ('Jovana', 'Jaksic'), ('Caterina', 'Ghedin'), ('Liv', 'Geurts'), ('Flavia', 'Porru'), ('Sabina', 'Lupu'), ('Kim', 'Sadi'), ('Karine', 'Celis'), ('Gun Hee', 'Kim'), ('Anna', 'Vasilyeva'), ('Kinga', 'Anusiewicz'), ('Paulina', 'Petriskova'), ('Martha Elena', 'Garza Del Alto'), ('Juliana', 'Silva De Carvalho'), ('Yana', 'Filyushina'), ('Maci', 'Epstein'), ('Charlotte', 'Villeminot'), ('Garbine', 'Muguruza'), ('Ellen', 'Tsay'), ('Kriszina', 'Kapitany'), ('Marina', 'Zhurba'), ('Wan Yi', 'Sweeting'), ('Marina', 'Moreno'), ('Laura Silva', 'De Arruda'), ('Lauren', 'Davis'), ('Ani', 'Amiraghyan'), ('Emily', 'Gitman'), ('Agnese', 'Rella'), ('Jovana', 'Blagojevic'), ('Julia', 'Kimmelmann'), ('Daniela', 'Garcia Diaz'), ('Reykan', 'Woro'), ('Alexandra', 'Aiello'), ('Caitlyn', 'Williams'), ('Caroline', 'Garcia'), ('Georgiana', 'Patrasc'), ('Zarina', 'Diyas'), ('Alicia', 'Barnett'), ('Rejhana', 'Mekic'), ('Daniel', 'Kestenboum'), ('Ravnoor', 'Kaur'), ('Kaede', 'Matsuo'), ('Nikita', 'Uberoi'), ('Stefana', 'Andrei'), ('Charlotte', 'Koning'), ('Raquel', 'Fernandes'), ('Klara', 'Fabikova'), ('Yanina', 'Darishina'), ('Mojca', 'Fijavz'), ('Blanka', 'Szavay'), ('Elizabeth', 'Thoms'), ('Manoela Corbellini', 'Chiacchio'), ('Tijana', 'Uzelac'), ('Luz Rocio', 'Jara'), ('Amina', 'Mrad'), ('Zeljana', 'Radicevic'), ('Estelle', 'Metadieu'), ('Cemre', 'Anil'), ('Agnes', 'Bukta'), ('Liliana', 'Stoiu'), ('Valeriya', 'Maksimchenko'), ('Ina', 'Kaufinger'), ('Josepha', 'Adam'), ('Lisa', 'Ruckenbaum'), ('Felicitas', 'Kastner'), ('Martina', 'Trevisan'), ('Alessia', 'Rossetti'), ('Jennifer', 'Pusey'), ('Ainhoa', 'Rico Martin'), ('Susana', 'Florez'), ('Ingrid', 'Vojcinakova'), ('Jil Nora', 'Engelmann'), ('Nelli', 'Buyuklianova'), ('Charitomeni', 'Matoula'), ('Barbora', 'Ruffini'), ('Beatriz', 'Morales Hernandez'), ('Andreea', 'Istrate'), ('Yulia', 'Georgieva'), ('Matea', 'Cutura'), ('Desiree', 'Tran'), ('Christine', 'Guerrazzi'), ('Stephanie M', 'Vlad'), ('Hristina', 'Dishkova'), ('Julia Mihaela', 'Moldovan'), ('Emily', 'Mazzola'), ('Amreen', 'Chaudhary'), ('Anna', 'Klasen'), ('Pleun', 'Burgmans'), ('Sandra', 'Roldan'), ('Ancia', 'Ifill'), ('Tatiana', 'Filaire'), ('Bianca', 'Nicolela Susanna'), ('Jessica', 'Lawrence'), ('Martina Alejandra', 'Baca Villagomez'), ('Yauheniya', 'Shapaval'), ('Disha Satish', 'Agarwal'), ('Leticia', 'Giudici'), ('Helen', 'Harvey'), ('Sylwia', 'Kociecka'), ('Valeria', 'Campigotto'), ('Kamila', 'Abdukadirova'), ('Darya', 'Shulzhanok'), ('Elena', 'Fayner'), ('Martina', 'Demichelis'), ('Sofia', 'Lozano'), ('Anna Clarice', 'Patrimonio'), ('Mary Ann', 'Balint'), ('Isabel', 'Steger'), ('Polina', 'Vinogradova'), ('Jenna', 'Laroussi'), ('Sinem', 'Alptekin'), ('Anastasia', 'Vovk'), ('Rona', 'Lavian'), ('Olga', 'Kishchun'), ('Valentina', 'Gemini'), ('Viktoriya', 'Karmenova'), ('Adrija', 'Runcha'), ('Naomi', 'Holopainen'), ('Kelli', 'Hine'), ('Ronit', 'Yurovsky'), ('Leighann', 'Sahagun'), ('Fabiana', 'Araya'), ('Francesca M', 'Fanchin'), ('Kateryna', 'Pyatakova'), ('Julia', 'Casselbury'), ('Meng Ning', 'Deng'), ('Juliana', 'Jofre'), ('Arney', 'Johanessdottir'), ('Nadejda', 'Sidorenko'), ('Belen', 'Rivera'), ('Rachael', 'Reed'), ('Antonia', 'Markuskova'), ('Ekaterina', 'Tour'), ('Polina', 'Movchan'), ('Marzhan', 'Kukoneva'), ('Sowjanya', 'Bavisetti'), ('Mina', 'Matsuba'), ('Anaeve', 'Pain'), ('Nithya Raj', 'Babu Raj'), ('Danielle Rose', 'Collins'), ('Yongyuan', 'Wang'), ('Fatima Zohra', 'Boukezzi'), ('Patricia', 'Ku Flores'), ('Caroline Betzave', 'Lojan Cruz'), ('Nathania Ratih Putri', 'Karsita'), ('Iryna', 'Kyrychenko'), ('Petra', 'Kubinova'), ('Risa', 'Nakahara'), ('Catalina Paz', 'Arce Riquelme'), ('Agata', 'Baranska'), ('Jeanette', 'Draeger'), ('Alina', 'Pakharenko'), ('Khaoula', 'Allaoui'), ('Karyna', 'Alesha'), ('Gabrielle', 'Moxey'), ('Eden Megan', 'Chang'), ('Kana', 'Natsume'), ('Haruka', 'Taniguchi'), ('Vivian', 'Heisen'), ('Eirdis', 'Ragnarsdottir'), ('Jane', 'Stewart'), ('Biola', 'Akewula'), ('Viktoryia', 'Kisialeva'), ('Lizeth Vanessa', 'Gomez Diaz'), ('Camille', 'Goodman'), ('Anna', 'Makuha'), ('Bruna', 'Magalhaes'), ('Kyria', 'Dunford'), ('Emily', 'Rodbourne'), ('Tamar', 'Komakhidze'), ('Sarahi', 'Garcia Carrera'), ('Aina', 'Morey Juan'), ('Dora', 'Pavlinic'), ('Eleanor', 'Deaves'), ('Ioana Daniela', 'Bighiu'), ('Kimika', 'Sakamoto'), ('Lee', 'Levy'), ('Aikaterini', 'Stavroulaki'), ('Theresa', 'Kleinsteuber'), ('Patricia', 'Quintana Cerezo'), ('Nadya', 'Syarifah'), ('Aggeliki', 'Prezani'), ('Mina', 'Saygi'), ('Lina', 'Amouzoune'), ('Rebeca', 'Aguilar Dominguez'), ('Fiona', 'Gervais'), ('Julija', 'Kulibaba'), ('Kendal', 'Woodard'), ('Yujia', 'Wang'), ('Mckenzie', 'Thomas'), ('Ran', 'Tian'), ('Simona', 'Ionescu'), ('Marines', 'Holguin'), ('Charlotte', 'Roemer'), ('Anne Sophie', 'Forget'), ('Yasuyo', 'Numajiri'), ('Rachel', 'Girard'), ('Carla', 'Forte'), ('Camila Andrea', 'Roca'), ('Shi Ying', 'Li'), ('Desirae', 'Krawczyk'), ('Kenia', 'Vasallo Soto'), ('Stephanie', 'Carmans'), ('Isidora', 'Radojkovic'), ('Elizaveta', 'Deykun'), ('Audrey', 'Capouet'), ('Nicole', 'Collie'), ('Elizabeta', 'Bauer'), ('Benedetta', 'Fasciani'), ('Paulina', 'Czarnik'), ('Alice', 'Garcia'), ('Mariangeles', 'Gomez Quintana'), ('Sanae', 'Ohta'), ('Tian', 'Cao'), ('Angie', 'Torres'), ('Brooke', 'Taylor'), ('Maria Jose', 'Buil Tellaeche'), ('Kerstin', 'Gressmann'), ('Natasha', 'Palha'), ('Ilona', 'Kremen'), ('Lyuboslava', 'Peruhova'), ('Chanelle', 'Van Nguyen'), ('Soledad', 'Calderon Arroyo'), ('Julia', 'Teufel'), ('Laura', 'Robson'), ('Nicole', 'Hoynaski'), ('Samantha', 'Pribaz'), ('Claudia Antonia', 'Enache'), ('Vaibhavi', 'Trivedi'), ('Libby', 'Muma'), ('Aida', 'Golman'), ('Seraina', 'Jaeger'), ('Corina', 'Jaeger'), ('Mirjam', 'Zeller'), ('Aleksandra', 'Nionova'), ('Karin', 'Hoppler'), ('Jenya', 'Plevako'), ('Robu', 'Kajitani'), ('Nino G', 'Sujashvili'), ('Pei Yu', 'Sieh'), ('Maria', 'Panaite'), ('Lin', 'Zhu'), ('Maria', 'Masini'), ('Alexandra', 'Bykova'), ('Inna', 'Bondarenko'), ('Valeryia', 'Kulikouskaya'), ('Natasha', 'Fourouclas'), ('Stephanie', 'Nauta'), ('Antoaneta', 'Tzarvulkova'), ('Diala', 'Jamaleddine'), ('Anna Lena', 'Friedsam'), ('Kate', 'Vialle'), ('Anna', 'Schubries'), ('Estelle', 'Balan'), ('Elyzaveta', 'Tymchenko'), ('Tessa', 'Breve'), ('Saisai', 'Zheng'), ('Katerina', 'Kaminkova'), ('Tijana', 'Rotim'), ('Fernanda Luvizotto Do', 'Amaral'), ('Dariya', 'Dashutina'), ('Dominika', 'Toronyi'), ('Sarah', 'Tremuth'), ('Ksenia', 'Khatsey'), ('Camila', 'Aguirri'), ('Giulia', 'Ferrari'), ('Morgan', 'Mccray'), ('Leela', 'Beattie'), ('Danielle', 'Zinn'), ('Astrid Maria', 'Gehre Boettner'), ('Nelly', 'Garcia Sanchez'), ('Steffany', 'Bermudez'), ('Katharina', 'Blik'), ('Siria Elena', 'Brebenel'), ('Liubov', 'Vasilyeva'), ('Katherine Gabriela', 'Miranda Chang'), ('Jeannette', 'Moesgen'), ('Deimante', 'Bulatovaite'), ('Hyojung', 'Yea'), ('Lorenza', 'Stefanelli'), ('Charlene', 'Favier'), ('Anais', 'Deville'), ('Annika', 'Beck'), ('Beatriz Valente', 'De Castro Coelho'), ('Megane', 'Bianco'), ('Morven', 'Mcculloch'), ('Brenda', 'Njuki'), ('Eri', 'Hozumi'), ('Xinyi', 'Jiang'), ('Katharina', 'Lehnert'), ('Tijana', 'Vrhovac'), ('Katerina', 'Latalova'), ('Brianna', 'Morgan'), ('Michala', 'Kucharova'), ('Kateryna', 'Kozlova'), ('Hao Chen', 'Tang'), ('Mayte', 'Calmet'), ('Vanessa Steffi', 'Ortiz Perez'), ('Anna', 'Montserrat Sanchez'), ('Elizabeth', 'Arce'), ('Frances', 'Altick'), ('Aminat', 'Quadri'), ('Jessica', 'Pegula'), ('Natalia', 'Galan Gomez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Manon', 'Peral'), ('Karolina', 'Stuchla'), ('Eugenie', 'Bouchard'), ('Caterina', 'Lepore Palmisano'), ('Joanna', 'Henderson'), ('Fang Chi', 'Tsao'), ('Maria', 'Pujol Serra'), ('Sinhee', 'Kim'), ('Camila', 'Acuna'), ('Michele', 'Erkens'), ('Malin', 'Ulvefeldt'), ('Da Un', 'Lee'), ('Yuly Marcela', 'Tamayo'), ('Petra', 'Pokorna'), ('Elsa', 'Pellegrinelli'), ('Cheng Ling', 'Huang'), ('Candelaria', 'Sedano Acosta'), ('Dafna', 'Peleg'), ('Ekaterina', 'Semenova'), ('Noemi', 'Hemmerich'), ('Lize', 'Leenknecht'), ('Soraya', 'Moradian'), ('Sofiya', 'Bogatova'), ('Maria Paula', 'Deheza'), ('Maria Ines', 'Deheza'), ('Jessie Felisia', 'Pakaya'), ('Barbora', 'Kijasova'), ('Caroline', 'Van De Wijgaart'), ('Magdalena', 'Cordero'), ('Ananya', 'Sarkar'), ('Ashley M', 'Kitchen'), ('Daria', 'Gavrilova'), ('Asmae', 'Benzit'), ('Deniz', 'Ulutug'), ('Thaisa', 'Pereira'), ('Daphne', 'Van Den Heuvel'), ('An Sophie', 'Mestach'), ('Andromachi', 'Bakagianni'), ('Anna', 'Mamalat'), ('Andreea', 'Badileanu'), ('Nada', 'Zaher'), ('Sofia', 'Montemayor'), ('Vicki', 'Saxegaard'), ('Cecilia', 'Mercier'), ('Charlotte', 'Pearce'), ('Daniela Renee', 'Leitch'), ('Giulia', 'Mastellone'), ('Carolin', 'Schmidt'), ('Natalie', 'Laus'), ('Ha Young', 'Ji'), ('Maria', 'Garoz Moreno'), ('Juliana', 'Goncalves'), ('Nilushi', 'Fernando'), ('Paloma Margarita', 'Mereles Aranda'), ('Suzanna', 'Grigoryan'), ('Carmene', 'Dotto'), ('Alejandra', 'Starkova'), ('Irina', 'Constantinide'), ('Emma', 'Onila'), ('Alisa', 'Ogorodova'), ('Bruna', 'Ponce'), ('Jaeyeon', 'Kim'), ('Dariya', 'Berezhnaya'), ('Barbara Guadalupe', 'Urrutia'), ('Vlada', 'Svarkovskaya'), ('Aliaksandra', 'Sasnovich'), ('Elianne', 'Douglas Miron'), ('Francesca', 'Sella'), ('Cynthia', 'Del Rey Guardiola'), ('Andrea Renee', 'Villarreal'), ('Ekaterina', 'Lavrikova'), ('Courtney', 'Colton'), ('Maria Fernanda', 'Vargas'), ('Ioana', 'Posirca'), ('Janine', 'Remler'), ('Alison', 'Van Uytvanck'), ('Marcela', 'Zacarias'), ('Qianqian', 'Zhao'), ('Jana', 'Boubelikova'), ('Olha', 'Romanyshyn'), ('Dina', 'El Harazi'), ('Ekaterina', 'Tugarinova'), ('Daria', 'Afanasyeva'), ('Kari', 'Gunton'), ('Kamila', 'Pavelkova'), ('Andrea', 'Rodriguez Company'), ('Daria', 'Salnikova'), ('Lena', 'Specht'), ('Elisabeth', 'Abanda'), ('Konstantina', 'Tsadari'), ('Claudia Lazara', 'Magarino Lopez'), ('Alicia', 'Fernandez Galvez'), ('Waka', 'Kirihata'), ('Rei', 'Ikeda'), ('Elizaveta', 'Ignatova'), ('Antonia', 'Conze'), ('Shani', 'Blecher'), ('Hanna', 'Landener'), ('Julia', 'Jones'), ('Olena', 'Kyrpot'), ('Cristina', 'Nicolae'), ('Kelly', 'Southwood'), ('Kyle', 'Mcphillips'), ('Eva', 'Rodriguez De Las Heras'), ('Arantxa', 'Sanchez'), ('Brittany', 'Lashway'), ('Viktorija', 'Rajicic'), ('Sarai', 'Flores Diaz'), ('Silky', 'Sachdeva'), ('Ganna', 'Poznikhirenko'), ('Amy', 'He'), ('Catherine', 'Harrison'), ('Chia Hsien', 'Yang'), ('Kelli Elizabeth', 'Close'), ('Florencia', 'Magni'), ('Risa', 'Ozaki'), ('Maria Ximena', 'Herrera Rea'), ('Olivia', 'Larsson'), ('Samantha Rose', 'Droop'), ('Yuumi', 'Totsuka'), ('Maayan', 'Mastey'), ('Anna', 'Abadias Morales'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Natalia', 'Davila'), ('Patrizia', 'Fusco'), ('Daniela', 'Vanko'), ('Magdalena', 'Stencel'), ('Sofico', 'Kadzhaya'), ('Natnicha', 'Ruangsumrej'), ('So Hee', 'Jung'), ('Sohinee', 'Ghosh'), ('Katarzyna', 'Kapustka'), ('Alejandra', 'Diaz Mares'), ('Anastasia', 'Vdovenco'), ('Kirandeep Kaur', 'Kotade'), ('Nela', 'Platkova'), ('Vera', 'Tverdikova'), ('Marta', 'Galka'), ('Alexia', 'Rycroft'), ('Steffy', 'Canals Baker'), ('Romaine', 'Zenhausern'), ('Andrea', 'Norlander'), ('Skylar Alexandra', 'Morton'), ('Mandy', 'Wagemaker'), ('Anastasiya', 'Zubkova'), ('Aashima', 'Garg'), ('Andjela', 'Novcic'), ('Katarina', 'Pavlovic'), ('Rosalie', 'Willig'), ('Vannesa', 'Gunawan'), ('Sung Hee', 'Kim'), ('Sharifah Syafeenaz', 'Syed Azmir'), ('Daria', 'Shakoulina'), ('Christina', 'Shakovets'), ('Stephany', 'Gamiz'), ('Caty', 'Santos'), ('Janina', 'Mistecky'), ('Angelica', 'Sepulveda'), ('Laura', 'Svatikova'), ('Sophie', 'Dunlop'), ('April', 'Van Gennip'), ('Yafan', 'Wang'), ('Tria Rizki', 'Amalia'), ('Tristen Z', 'Dewar'), ('Roumeila', 'Zhir'), ('Carita', 'Moolman'), ('Noelia', 'Zeballos'), ('Simina Teodora', 'Bodea'), ('Misano', 'Sato'), ('Caitlin Paige', 'Hindmarsh'), ('Jelena', 'Lazarevic'), ('Konstantina', 'Papaoikonomou'), ('Alejandra', 'Obando'), ('Haruna', 'Umemoto'), ('Nadejda', 'Stavreva'), ('Irene', 'Martinez Del Olmo'), ('Irina', 'Slizovskaya'), ('Asel', 'Espolova'), ('Grace', 'Min'), ('Rocio', 'Martin Fernandez'), ('Giada', 'Clerici'), ('Reem', 'Fayed'), ('Elisa', 'Idini'), ('Ecaterina', 'Oproiu'), ('Adina Alexandra', 'Marinescu'), ('Kirsten', 'Lewis'), ('Saneeya', 'Singh'), ('Ellen', 'Allgurin'), ('Kelsey', 'King'), ('Stephanie', 'Loutsenko'), ('Zalina', 'Khairudinova'), ('Melissa Emile', 'Kandinata'), ('Deborah', 'Suarez'), ('Kathinka', 'Von Deichmann'), ('Isadora Borges', 'Zwetsch'), ('Andrea', 'Crespo De La Concepcion'), ('Athena', 'Nathalia'), ('Lisa', 'Andersson'), ('Martina', 'Biollo'), ('Chinatsu', 'Shimizu'), ('Asya', 'Latifoglu'), ('Daria', 'Prytkova'), ('Camille', 'Lalou'), ('Yana', 'Yurchenko'), ('Georgina', 'Sellyn'), ('Snigdha', 'Padamata'), ('Mila', 'Majtan'), ('Miu', 'Ema'), ('Yara', 'Abed'), ('Maeva', 'Razakasoa'), ('Cornelia', 'Lister'), ('Mariami', 'Skhirtladze'), ('Isabella', 'Catelani'), ('Maya', 'Jansen'), ('Ana Maria', 'Gilca'), ('Isotta', 'Mancini'), ('Makoto', 'Ninomiya'), ('Zainab', 'Ali Sajjad'), ('Devan', 'Mccluskey'), ('Paula', 'Castro'), ('Cisil Buse', 'Ilgazli'), ('Nina', 'Catovic'), ('Gabriela', 'Porubin'), ('Sara', 'Castellano'), ('Maria Jose', 'Samano Moreno'), ('Mariah', 'Plauth'), ('Lucie', 'Chrastecka'), ('Tijana', 'Filipovic'), ('Samantha', 'Koelliker'), ('Soo Bin', 'Oh'), ('Melissa', 'Missaglia'), ('Emiliya', 'Gadzhieva'), ('Ann Kathrin', 'Schmitz'), ('Denise', 'Maxl'), ('Sharon Sanchana', 'Paul'), ('Karolina', 'Rozenberg'), ('Lorena', 'Constantin'), ('Nadia Yahya Tear', 'Tjahjana'), ('Pernilla', 'Mendesova'), ('Sara', 'Sherif'), ('Martina', 'Chrobakova'), ('Giulia', 'Riepe'), ('Julia', 'Dinhof'), ('Dinara', 'Khalilova'), ('Vesilina', 'Ivanova'), ('Malene', 'Stripp'), ('Sari', 'Baba'), ('Giulia', 'Guidetti'), ('Lenice', 'Van Eyk'), ('Suleika', 'Besser'), ('Reika', 'Agata'), ('Emy', 'Damiani'), ('Federica', 'Spazzacampagna'), ('Naomi', 'Tran'), ('Tabata Oshiro', 'Coutinho'), ('Julia', 'Elbaba'), ('Silvia', 'Margaroli'), ('Sofia', 'Garcia Morales'), ('Susan', 'Niemann'), ('Valentina', 'Quinones'), ('Manya', 'Nagpal'), ('Michelle', 'Bertolini'), ('Sonya', 'Latycheva'), ('Martina', 'Parmigiani'), ('Yuriko', 'Ono'), ('Angelika', 'Sobiecka'), ('Elizaveta', 'Luzina'), ('Martina', 'Zavarise'), ('Francesca', 'Fusinato'), ('Darina', 'Dobrovolski'), ('Bilyana', 'Savova'), ('Prarthana G', 'Thombare'), ('Liora', 'Krasnopolski'), ('Andrea', 'Mekel'), ('Lauren', 'Stratman'), ('Carla', 'Tur Mari'), ('Theiviya', 'Selvarajoo'), ('Rana', 'Sherif Ahmed'), ('Emilija', 'Ceranic'), ('Rona', 'Berisha'), ('Basak', 'Eraydin'), ('Anastasia', 'Frolova'), ('Nadia', 'Ravita'), ('Kristina', 'Beznakova'), ('Brooke Lindsey', 'Hughes'), ('Rhiann', 'Newborn'), ('Annika', 'Sillanpaa'), ('Ana Paula', 'Menezes Simoes'), ('Reka', 'Muller'), ('Sonora', 'Ijdo'), ('Olivia', 'Boesing'), ('Barbara', 'Rivera Rivera'), ('Olga', 'Doroshina'), ('Emma', 'Allen'), ('Konstantina', 'Lalaouni'), ('Aldea', 'Rinciari'), ('Carla', 'Georgescu'), ('Anita', 'Husaric'), ('Patricia', 'Martins'), ('Andressa Cristina', 'Souza'), ('Arushi', 'Jain'), ('Maria', 'Milanova'), ('Yaar Ester', 'Shafir'), ('Tanaporn', 'Thongsing'), ('Isabella', 'Fernandez Diaz'), ('Yui', 'Tomita'), ('Hui Ling', 'Sun'), ('Chloe', 'Paquet'), ('Montserrat', 'Gonzalez'), ('Jessica', 'Birowski'), ('Andrea', 'Retolaza Andrade'), ('Taisiya', 'Zakarlyuk'), ('Pauline', 'Payet'), ('Sara', 'Eccel'), ('Katya', 'Malikova'), ('Giovana', 'Patitucci'), ('Daiana', 'Hail'), ('Elizabeth', 'Means'), ('Nigina', 'Abduraimova'), ('Gabriela', 'Van De Graaf'), ('Daria', 'Gajos'), ('Shannon', 'Cox'), ('Lauren', 'Chypyha'), ('Janine', 'Koleta'), ('Ann Kathrin', 'Wind'), ('Selma', 'Husic'), ('Lobke', 'Haepers'), ('Tina', 'Mohorcic'), ('Camilla', 'Scala'), ('Sofiya', 'Kovalets'), ('Natsumi', 'Kobayashi'), ('Tamitha', 'Nguyen'), ('Michele', 'Grimm'), ('Vimbai Patience', 'Ugaro'), ('Chiara', 'Pappacena'), ('Tanya Amala', 'Burgula'), ('Nastja', 'Kolar'), ('Abla', 'Chadli'), ('Ana Helena', 'De Moraes Pinto'), ('Yuka', 'Hayashi'), ('Sara', 'Sussarello'), ('Caroline', 'Romeo'), ('Covadonga', 'Muradas'), ('Maria Concepcion', 'Bulilan'), ('Ratnika', 'Batra'), ('Mingyang', 'Liu'), ('Julia', 'Valetova'), ('Abbie', 'Myers'), ('Eloise', 'Gournay'), ('Honoka', 'Kawauchi'), ('Nicole', 'Ballach'), ('Jazzamay', 'Drew'), ('Tiffany', 'William'), ('Luise', 'Intert'), ('Natasha', 'Micevski'), ('Alena', 'Karpova'), ('Rachel', 'Porter'), ('Erina', 'Hayashi'), ('So Ra', 'Lee'), ('Maria', 'Palhoto'), ('Xue', 'Zhang'), ('Alejandra', 'Alvarez'), ('Brandy', 'Mina'), ('Miriam Ruth', 'Lane'), ('Antonia', 'Berse'), ('Kimberley Ann', 'Surin'), ('Natalija', 'Kostic'), ('Chiara', 'Trovi'), ('Ella', 'Leivo'), ('Gussie', 'Osullivan'), ('Consuelo', 'Costantino'), ('Patricia Maria', 'Tig'), ('Viktoria', 'Laskutova'), ('Kirstie', 'Pathumanun Hearn'), ('Andrea', 'Duva'), ('Kathleen', 'Derienzo'), ('Tjasa', 'Srimpf'), ('Irem', 'Ergun'), ('Eleonore', 'Tchakarova'), ('Pamela', 'Lopez Cervantes'), ('Ekaterina', 'Donetskova'), ('Verginie', 'Tchakarova'), ('Silvia', 'Garcia Jimenez'), ('Loes', 'Janssen'), ('Lea', 'Winkler'), ('Beatriz', 'Leon Hernandez'), ('Ashley', 'Keir'), ('Sybille', 'Gauvain'), ('Emira', 'Spaho'), ('Anel', 'Luus'), ('Emi', 'Yamaguchi'), ('Alina', 'Hoelzel'), ('Laura', 'Pigossi'), ('Monica Putri Kusuma', 'Wardhani'), ('Tamara', 'Bizhukova'), ('Lina', 'Gjorcheska'), ('Sveva', 'Mazzari'), ('Noemi', 'Giraudo'), ('Amrita', 'Mukherjee'), ('Siyu', 'Qin'), ('Beatrice Shirin', 'Khosravi'), ('Seda', 'Arantekin'), ('Dina', 'Karina'), ('Natalie', 'Novakova'), ('Hui Zhen', 'Ruan'), ('Federica', 'Benitez Zafra'), ('Thyra', 'Taune'), ('Samantha', 'Lee'), ('Ericka Roxana', 'Rivero'), ('Storm', 'Sanders'), ('Sofia', 'Dmitrieva'), ('Alexandra', 'Martinez'), ('Mariame', 'Toure'), ('Vijayalakshmi', 'Radhakrishnan'), ('Ximena', 'Siles Luna'), ('Natalie', 'Lozano'), ('Amanda', 'Gilson'), ('Blair', 'Shankle'), ('Stella', 'Di Michele'), ('Alisa', 'Kniazeva'), ('Gunjee', 'Sukhbat'), ('Pauline', 'Descat'), ('Jesika', 'Maleckova'), ('Avni', 'Jain'), ('Konstantina', 'Adami'), ('Galina', 'Bykova'), ('Sonya Sheeran', 'Stover'), ('Eva', 'Castiglioni'), ('Thais', 'Castiglioni'), ('Marian', 'Martin Garcia'), ('Maria', 'Alvarez Aguaron'), ('Angelica', 'Moratelli'), ('Preethi', 'Ujjini'), ('Paloma', 'Villalba'), ('Yuxuan', 'Zhang'), ('Guadalupe', 'Perez Rojas'), ('Svetlana', 'Patakhonova'), ('Ursula', 'Alvarado Camino'), ('Kelsey', 'Laurente'), ('Areeporn', 'Wanichayapanich'), ('Shkekyana', 'Dubova'), ('Francesca', 'Rescaldani'), ('Alena', 'Vasilyeva'), ('Miki', 'Ukai'), ('Jessica', 'Ren'), ('Saray', 'Sterenbach'), ('Natasha', 'Prokhnevska'), ('Dael Alma', 'Mckenna'), ('Zarah', 'Razafimahatratra'), ('Verena Jane', 'Scott'), ('Olivera', 'Tadijin'), ('Solomiya', 'Zinko'), ('Veronika', 'Mazalova'), ('Catherine', 'Parenteau St Antoine'), ('Samantha', 'Czarniak Rego'), ('Joanna', 'Jurca'), ('Ons', 'Jabeur'), ('Manon', 'Arcangioli'), ('Lauren', 'Schmidt'), ('Giovanna', 'Manifacio'), ('Ysaline', 'Bonaventure'), ('Ayane', 'Iwai'), ('Jaimy Gayle', 'Van De Wal'), ('Victoria', 'Pahlett'), ('Suzy', 'Tan'), ('Margarita', 'Gasparyan'), ('Anna', 'Smolina'), ('Minori', 'Himeno'), ('Alexandra', 'Sigouin'), ('Elena', 'Maltseva'), ('Sabina', 'Sharipova'), ('Jennifer', 'Slotow'), ('Melisa', 'Martinov'), ('Hanna', 'Victorsson'), ('Meriem', 'Chaouachi'), ('Sophie', 'Arnuti'), ('Diera', 'Saidmukhamedova'), ('Suzuka', 'Furukawa'), ('Paula', 'Veza'), ('Sarie', 'Swanepoel'), ('Kourtney J', 'Keegan'), ('Macarena', 'Asensos'), ('Aimee', 'Tarun'), ('Lien', 'Van Geel'), ('Mai', 'El Kamash'), ('Madeline', 'Lipp'), ('Silvia', 'Albano'), ('Elina', 'Svitolina'), ('Karyn', 'Guttormsen'), ('Anna Karolina', 'Schmiedlova'), ('Ki Ryang', 'Kim'), ('Stefanie', 'Kastner'), ('Barbora', 'Trestikova'), ('Krista', 'Hardebeck'), ('Mana', 'Ayukawa'), ('Tamari', 'Tskhakaia'), ('Gabrielle Olamide', 'Idera'), ('Alana', 'Parnaby'), ('Aareyalee Amrutsinh', 'Chavan'), ('Misaki', 'Mori'), ('Stefania', 'Hristov'), ('Yana', 'Erkeeva'), ('Stephanie', 'Wagner'), ('Mariagiovanna', 'Nanti'), ('Olga', 'Saez Larra'), ('Genevieve', 'Luksich'), ('Estefania Julieta', 'Valli'), ('Polina', 'Leykina'), ('Ornella Marcela', 'Spinetta'), ('Ana Maria', 'Crisan'), ('Marinel', 'Rudas'), ('Camille', 'Descamps'), ('Christine', 'Kandler'), ('Helen', 'De Cesare'), ('Ai Wen', 'Zhu'), ('Gabriela', 'Duca'), ('Daniella', 'Daniel'), ('Likitha', 'Shetty'), ('Diana', 'Sumova'), ('Lisa', 'Wegmair'), ('Haruka', 'Kaji'), ('Sabina', 'Kairanbayeva'), ('Sophie', 'Watts'), ('Anneka', 'Watts'), ('Clementina Eugenia', 'Riobueno De Paola'), ('Marijana', 'Novakovic'), ('Aina', 'Hernandez Soler'), ('Laia', 'Hernandez Soler'), ('Petra', 'Kopic'), ('Momoka', 'Hoshino'), ('Alexandra', 'Clark'), ('Philippa', 'Tepper'), ('Giovana', 'Da Costa Rodrigues Alves'), ('Joana', 'Eidukonyte'), ('Shizuka', 'Hisamitsu'), ('Victoria', 'Bosio'), ('Charlotte', 'Swaans'), ('Xi Wei', 'Cai'), ('Ivana', 'Horvat'), ('Dominika', 'Lackova'), ('Sabina Elena', 'Preda'), ('Sabina', 'Kurbanova'), ('Elpida', 'Papanelopoulou'), ('Valeria', 'Franco'), ('Eva', 'Sung'), ('Molly', 'Polak'), ('Louise', 'Holtum'), ('Giulia', 'Cerutti'), ('Nidhi', 'Chilumula'), ('Alena', 'Poletinova'), ('Raquel', 'Mateus'), ('Bogna', 'Nowicka'), ('Tereza', 'Smitkova'), ('Karin', 'Terami'), ('Yi Ping', 'Chang'), ('Teresa', 'Afuang Haro'), ('Sofiya', 'Chekunova'), ('Luna', 'Cagnoni'), ('Emilie', 'Elsvad'), ('Anna Kate', 'Anderson'), ('Nanami', 'Masuoka'), ('Sophie', 'Pismont'), ('Stella', 'Crick'), ('Laura Margareta', 'Luca'), ('Pei Chi', 'Lee'), ('Justyna', 'Pajak'), ('Tereza', 'Jankovska'), ('Nune', 'Khachatryan'), ('Imane Maelle', 'Kocher'), ('Chiara', 'Rinaldi'), ('Rebecca', 'Andrade'), ('Anastasiya', 'Halaburda'), ('Tanya', 'Samodelok'), ('Audrey', 'Jumel'), ('Hannah', 'Sulz'), ('Mariana', 'Ranzahuer Garcia Calderon'), ('Kelly', 'Williford'), ('Laura', 'Cardone'), ('Macie', 'Elliott'), ('Tereza', 'Martincova'), ('Deniz', 'Khazaniuk'), ('Audrey', 'Albie'), ('Andreea Ana', 'Buiculescu'), ('Riko', 'Sawayanagi'), ('Giovanna', 'Lombardi'), ('Michaela', 'Capannolo'), ('Olivia', 'Nicholls'), ('Nastasia', 'Boitier Legourd'), ('Francesca', 'Palmigiano'), ('Stephanie', 'Tedja Abdi'), ('Spirit', 'Edley'), ('Tina', 'Rupert'), ('Amy', 'Zhu'), ('Salma', 'Charif'), ('Mia Nicole', 'Eklund'), ('Tamara', 'Curovic'), ('Caroline B', 'Dailey'), ('Fatem Zahra', 'Erraji'), ('Puspa Ratih', 'Tri Oktavira'), ('Julia', 'Bochkareva'), ('Marcela', 'Alves Pereira Valle'), ('Clemence', 'Fayol'), ('Helga Margret', 'Jeske'), ('Andrea', 'Lazaro Garcia'), ('Katarzyna', 'Witos'), ('Lynn', 'Chi'), ('Luiza', 'Sharipova'), ('Marine', 'Partaud'), ('Anastasia', 'Rudakova'), ('Georgia', 'Craven'), ('Quinn', 'Gleason'), ('Jana', 'Mccord'), ('Maria Azul', 'Cortiana'), ('Yana', 'Sizikova'), ('Babilina', 'Machaidze'), ('Giorgia', 'Stridacchio'), ('Rachel May', 'Pierson'), ('Darya', 'Chernetsova'), ('Fatyha', 'Berjane'), ('Minami', 'Shuto'), ('Ekaterina', 'Alexandrova'), ('Misato', 'Negi'), ('Clothilde', 'De Bernardi'), ('Vladyslava', 'Zanosiyenko'), ('Sofia', 'Benhalima'), ('Adela', 'Jarosova'), ('Dorota', 'Markowska'), ('Danka', 'Kovinic'), ('Kelly', 'Versteeg'), ('Marie', 'Natroshvili'), ('Annika', 'Hepp'), ('Santina', 'Lange'), ('Emilija', 'Kokanovic'), ('Lauren', 'Harrington'), ('Adas', 'Luiza Ferrari'), ('Miyu', 'Kato'), ('Olga', 'Babanova'), ('Sarah', 'Candeloro'), ('Saroop', 'Dhatt'), ('Masa', 'Jovanovic'), ('Takhmina', 'Burkhanova'), ('Mariajose', 'Cardona'), ('Carolina', 'Likhatcheva'), ('Azra', 'Hadzic'), ('Mikayla', 'Morkel Brink'), ('Gaelle', 'Rey'), ('Cristina', 'Bejarano Jimenez'), ('Mallaurie', 'Noel'), ('Yukari', 'Tsujimoto'), ('Borislava', 'Botusharova'), ('Nao', 'Hibino'), ('Si Ying Julienne', 'Keong'), ('Daniella', 'Arcila'), ('Amanda', 'Cerda Miranda'), ('Veronica', 'Lacerda'), ('Louise', 'Lampla'), ('Kim', 'Borg'), ('Sofia', 'Araujo'), ('Jane', 'Fennelly'), ('Xiaorong', 'Dong'), ('Bernarda', 'Pera'), ('Polina', 'Lyuksheva'), ('Jacqueline', 'Crawford'), ('Emily', 'Burns'), ('Christina', 'Oberger'), ('Lauren', 'Burich'), ('Claudia', 'Coppola'), ('Ipek', 'Birol'), ('Alina', 'Jane'), ('Susanne', 'Celik'), ('Daniela', 'Montoya Sierra'), ('Zerina', 'Gozhdari'), ('Alena', 'Tarasova'), ('Montserrat', 'Alonso'), ('Annika', 'Schneider'), ('Nina', 'Khrisanova'), ('Rano', 'Nizamova'), ('Nicoleta', 'Dan'), ('Nana', 'Nemoto'), ('Jillian', 'Rooney'), ('Khanh Phi', 'Huynh'), ('Ana', 'Batiri'), ('Olivia', 'Messineo'), ('Mariella', 'Calderon'), ('Brittany', 'Brewster'), ('Chiara', 'Rebecchi'), ('Patcharin', 'Cheapchandej'), ('Viktoryia', 'Mun'), ('Hitomi', 'Hasebe'), ('Iris Julia Antje', 'Verweij'), ('Victoria', 'Bensimon'), ('Viviana', 'Tedino Morandi'), ('Beatrice', 'Kight'), ('Alexandra', 'Goncharova'), ('Emma', 'Devine'), ('Maria Andrea', 'Cardenas'), ('Rosalie', 'Van Der Hoek'), ('Ting Ya', 'Wang'), ('Elodie', 'Busson'), ('Preeti', 'Gokhale'), ('Ayaka', 'Santo'), ('Zoe Adeline', 'Katz'), ('Rowan', 'Arafat'), ('Maylis', 'Lafaysse'), ('Sarah', 'Savedra'), ('Yana', 'Sluzhiteleva'), ('Morgan', 'Barnhill'), ('Sheila', 'Jacobo'), ('Maria Julia', 'Bernal Penteado De Lima Mendes'), ('Victoria', 'Zukowski'), ('Eva', 'Paalma'), ('Paula', 'Insaurralde'), ('Michela', 'Verpelli'), ('Breaunna', 'Addison'), ('Neda', 'Koprcina'), ('Sandra', 'Bendlova'), ('Anna Signe', 'Rasmussen'), ('Pei Chuan', 'Kao'), ('Manon Cristina', 'Peri'), ('Maria', 'Kajikawa'), ('Erin', 'Faulkner'), ('Anna', 'Tyulpa'), ('Elke', 'Lemmens'), ('Anna', 'Woosley'), ('Madison', 'Crawford'), ('Yukiho', 'Yasuda'), ('Natalia L S', 'Abdalla'), ('Lee', 'Or'), ('Nicole', 'Robinson'), ('Fatmanur', 'Atilgan'), ('Gulsah', 'Cetin'), ('Madina', 'Khatamova'), ('Yuanyi', 'Yu'), ('Ana', 'Stojacic'), ('Saori', 'Enmoto'), ('Inas', 'Ziki'), ('Marijana', 'Vlahinic'), ('Dhanielly', 'Quevedo'), ('Gulnaz', 'Dokey'), ('Jessica', 'Perez'), ('Maree Teiwa', 'Casey'), ('Elena', 'Pavolucci'), ('Carol Yubitza', 'Arnez  Mercado'), ('Michaela', 'Marikova'), ('Zeineb', 'Ben Hamida'), ('Liniques', 'Theron'), ('Evy', 'Van Genechten'), ('Saska', 'Gavrilovska'), ('Danielle', 'Konotoptseva'), ('Louise', 'Kwong'), ('Angeles', 'De Los Rios'), ('Lena', 'Lutzeier'), ('Adriana', 'Gergelyova'), ('Yulia', 'Putintseva'), ('Laura', 'Mueller'), ('Si Qi', 'Liu'), ('Hedda', 'Odegaard'), ('Greta', 'Di Majo'), ('Alanna', 'Wolff'), ('Mariana', 'Drazic'), ('Violeta', 'Jankovic'), ('Miriana', 'Tona'), ('Arthi', 'M'), ('Ivanka', 'Mocic'), ('Nora', 'Niedmers'), ('Milena', 'Toseva'), ('Sitara', 'Prabhu'), ('Nicole', 'Cianci'), ('Klaartje', 'Liebens'), ('Nicole', 'Bonnaffoux'), ('Ao', 'Gai'), ('Ana', 'Ruiz'), ('Apichaya', 'Runglerdkriangkrai'), ('Nastassia', 'Rubel'), ('Nadia', 'Echeverria Alam'), ('Samira', 'Radjaa'), ('Marina', 'Marti Hernanz'), ('Fang Ying', 'Xun'), ('Khee Yen', 'Wee'), ('Laksmi', 'Nuraningsih'), ('Nikita', 'Deshmukh'), ('Savannah', 'Wood'), ('Lara', 'Afonso Garcia'), ('Shivani', 'Manchanda'), ('Jerricka', 'Boone'), ('Sai Samhitha', 'Chamarthi'), ('Taylor L', 'Davidson'), ('Kiah', 'Generette'), ('Miho', 'Kowase'), ('Zuzanna', 'Maciejewska'), ('Marnelle', 'Boshoff'), ('Grace', 'Orourke'), ('Silvia', 'Fuentes Perez'), ('Katerina', 'Baka'), ('Giorgia', 'Marchetti'), ('Anushka', 'Bhargava'), ('Kett', 'Sadi'), ('Guadalupe', 'Delgado'), ('Sonja', 'Becarevic'), ('Grace Maleka', 'Mpassy Nzoumba'), ('Michelle', 'Erasmus'), ('Isadora', 'Vieira'), ('Belinda', 'Woolcock'), ('Spencer', 'Liang'), ('Wing Man', 'Lin'), ('Salma', 'Cabrera'), ('Libi', 'Mesh'), ('Carla', 'Bruzzesi Avella'), ('Nuria', 'Ormeno Ruiz'), ('Kristina', 'Ostojic'), ('Anna', 'Shkudun'), ('Julaluck', 'Sae Eung'), ('Majlena', 'Pedersen'), ('Maria', 'Limanskaya'), ('Tamara', 'Vrhovac'), ('Shanna', 'Krimatschow'), ('Bhuvana', 'Kalva'), ('Yuliya', 'Alexsandrova'), ('Yulia', 'Shupenia'), ('Nabila', 'Farah'), ('Cassie', 'Pough'), ('Diana', 'Shevchenko'), ('Peeraya', 'Charoensirisutthikul'), ('Yani', 'Genesse'), ('Caroline', 'Cordat Auclair'), ('Hanna', 'Karczewska'), ('Laura', 'Holterbosch'), ('Cecilie Lundgaard', 'Melsted'), ('Alicia Andrea', 'Rodriguez Castillo'), ('Mariami', 'Gogelashvili'), ('Arianna', 'Fardanesh'), ('Gornganok', 'Tiraganok'), ('Hee Jin', 'Oh'), ('Sydney', 'Campbell'), ('Alina', 'Soltanici'), ('Sol', 'Ferrero'), ('Franziska', 'Lautenschlager'), ('Ebony', 'Panoho'), ('Sherry', 'Li'), ('Eduarda Nardi Dos', 'Santos'), ('Ksenia', 'Gaydarzhi'), ('Carlotta', 'Svaluto'), ('Ivana', 'Andric'), ('Ji Hee', 'Choi'), ('Gabriela', 'Pantuckova'), ('Kim Jana', 'Hausler'), ('Sinead', 'Lohan'), ('Zhaoxuan', 'Yang'), ('Claudia', 'Gaspar'), ('Chu Chen', 'Chuen'), ('Chiara', 'Quattrone'), ('Jessica', 'Cortes'), ('Ye Rin', 'Lee'), ('Disha', 'Dang'), ('Marta', 'Morga Alonso'), ('Alpha', 'Ambaye'), ('Saumya', 'Vig'), ('Weronika', 'Halicka'), ('Ana Laura', 'Gutierrez'), ('Zeynep', 'Nalbantoglu'), ('Francesca Dorothea', 'Ciutescu'), ('Stefani', 'Stojic'), ('Alyssa Grace', 'Smith'), ('Alina', 'Robok'), ('Yuan', 'Xin'), ('Carina', 'Witthoeft'), ('Katy', 'Dunne'), ('Daria', 'Glushich'), ('Oksana', 'Koshman'), ('Anastasiya', 'Saitova'), ('Madison', 'Keys'), ('Natalie', 'Faeh'), ('Ana Marija', 'Banic'), ('Samantha', 'Crawford'), ('Ana Beatriz', 'Balderas'), ('Dominique', 'Covington'), ('Adrianna', 'Zorawska'), ('Magnolia', 'Galvez'), ('Mayara', 'Galvez'), ('Giulia', 'Maiorana'), ('Victoria', 'Jorjoliani'), ('Parminder', 'Kaur'), ('Lana', 'Rostiashvili'), ('Alice', 'Lamaro'), ('Pattaraporn', 'Salirathavibhaga'), ('Rotem', 'Shveber'), ('Begum', 'Dilek'), ('Zarina', 'Yunusalieva'), ('Skye', 'Hopper'), ('Idil', 'Ozdamar'), ('Sofia', 'Henning'), ('Maura', 'Aveta'), ('Iva', 'Mekovec'), ('Andrea', 'Vosecka'), ('So Dam', 'Park'), ('Fabiana', 'Pitisci'), ('Alexandra', 'Morozova'), ('Ima', 'Nindi'), ('Viktoriya', 'Tomova'), ('Lauren Joanna', 'Lang'), ('Femke', 'Van Diemen'), ('Coline', 'Chauvet'), ('Natnicha', 'Sirijariyaporn'), ('Michelle', 'Werbrouck'), ('Laura', 'Gulbe'), ('Ann Christin', 'Nilsson'), ('Svetlana', 'Zdorova'), ('Paula Estefania', 'Diaz Cabrera'), ('Milena', 'Vitez'), ('Alejandra Maria', 'Marma Gutierrez'), ('Jialu', 'Huang'), ('Katharina', 'Hering'), ('Sonja', 'Liasovska'), ('Jan', 'Abaza'), ('Adriana', 'Lavoretti'), ('Erika', 'Vogelsang'), ('Mirea', 'Signorini'), ('Siyu', 'Chen'), ('Tess', 'Sugnaux'), ('Annie', 'Donaldson'), ('Zoel', 'Kastelic'), ('Carmen', 'Smolka'), ('Anna Maria', 'Levers'), ('Xin', 'Yang'), ('Claudia', 'Sanchez Gonzalez'), ('Johanna', 'Ranta Aho'), ('Camille', 'Giacalone'), ('Nagi', 'Hanatani'), ('Xu Liu', 'Sun'), ('Saravinder', 'Pannu'), ('Jamie', 'Loeb'), ('Rongrong', 'Leenabanchong'), ('Daniela', 'Ciobanu'), ('Yulia', 'Zakharova'), ('Farah', 'Abdelaziz'), ('Anjali', 'Thakur'), ('Deborah', 'Kerfs'), ('Amanda', 'Spindola Veiga'), ('Zineb', 'Rajib'), ('Marlou', 'Kluiving'), ('Su Jeong', 'Jang'), ('Nahathai', 'Khuntaket'), ('Sanaa', 'Benkaddour'), ('Klara', 'Skopac'), ('Arianna', 'Tricarico'), ('Anna', 'Arustamyan'), ('Marie', 'Benoit'), ('Amelia', 'Stuart'), ('Angela', 'Sokovnikova'), ('Megha', 'Sehrawat'), ('Liza', 'Fieldsend'), ('Morgan', 'Chumney'), ('Sanae', 'Guenfoudi'), ('Margarita', 'Kotok'), ('Rikako', 'Suga'), ('Irina Maria', 'Bara'), ('Maria', 'Martin Lozano'), ('Lisa', 'Schlatter'), ('Shehnaz', 'Singh'), ('Caroline', 'Kallberg'), ('Justine', 'De Sutter'), ('Mayya', 'Katsitadze'), ('Irina Elena', 'Preotescu'), ('Anna', 'Veleva'), ('Aggeliki', 'Kokkota'), ('Andreea', 'Mihai'), ('Alina', 'Abdurakhimova'), ('Andrada', 'Hai'), ('Aliya', 'Tarpischeva'), ('Lucia', 'Zelenka'), ('Marie', 'Klocker'), ('Natalia', 'Janowicz'), ('Tereza', 'Susen'), ('Kanika', 'Vaidya'), ('Vanja', 'Babunski'), ('Tatiana', 'Guskova'), ('Daniela', 'Schippers'), ('Marina', 'Hruba'), ('Olga', 'Ianchuk'), ('Esther', 'Zelaya'), ('Midian', 'Tulio'), ('Elpida', 'Malamou'), ('Julija', 'Jauk'), ('Amy', 'Sneath'), ('Alison Brigette', 'Sanders'), ('Tanvee', 'Bose'), ('Vivienne', 'Kulicke'), ('Jin Li', 'Tang'), ('Valeria', 'Bhunu'), ('Chih Hsien', 'Chu'), ('Teodora', 'Stinga'), ('Alexandra', 'Rey'), ('Catrine', 'Landstrom'), ('Taryn', 'Swanepoel'), ('Iga', 'Odrzywolek'), ('Claudia', 'Herrero Garcia Honorato'), ('Paula Andrea', 'Puentes Jimenez'), ('Barbora', 'Stefkova'), ('Christina', 'Lao'), ('Shakhlo', 'Saidova'), ('Brittany', 'Collens'), ('Darya', 'Lebesheva'), ('Sofia', 'Sabljarevic'), ('Mia', 'King'), ('Georgina', 'Segarra Ferrer'), ('Michelle Marie', 'Valdez'), ('Tyra', 'Kotuwattegedera'), ('Alexandra', 'Osborne'), ('Anastasiia', 'Zviahintseva'), ('Soyeon', 'Park'), ('Ana M', 'Sanchez'), ('Nancy', 'Karaky'), ('Grace Lola', 'Lymer Sullivan'), ('Erin', 'Routliffe'), ('Gema', 'Mendoza'), ('Alina', 'Ageichik'), ('Ines', 'Fontanarosa'), ('Wendy Qi Wen', 'Zhang'), ('Petra', 'Uberalova'), ('Brigit', 'Folland'), ('Jennifer', 'Brady'), ('Zhamilia', 'Duisheeva'), ('Donika', 'Bashota'), ('Nora Luciana', 'David'), ('Rocio Daniela', 'Merlo'), ('Miriam', 'Monsutti'), ('Valeria', 'Prosperi'), ('Ines', 'Nicault'), ('Lucia', 'Ioli'), ('Maegan', 'Manasse'), ('Miki', 'Kobayashi'), ('Mengjuan', 'Yi'), ('Denise', 'Starr'), ('Ana', 'Baran'), ('Amiru', 'Shimoguchi'), ('Alejandra', 'Cisneros'), ('Evangeline', 'Repic'), ('Gabriela', 'Srodowski'), ('Maaya', 'Uno'), ('Madrie', 'Le Roux'), ('Madina', 'Hatamova'), ('Lisa Marie', 'Maetschke'), ('Kathryn', 'Hughes'), ('Monica', 'Robinson'), ('Joanna Nena', 'Savva'), ('Alba', 'Escalona Perny'), ('Diana', 'Bogoliy'), ('Akiho', 'Kakuya'), ('Victoria', 'Rodriguez'), ('Kassandra', 'Dunser'), ('Tarrannum', 'Handa'), ('Anastasia', 'Pogorelskaya'), ('Sarah Inga', 'Senger'), ('Nicolin', 'Luecke'), ('Intissar', 'Rassif'), ('Efriliya', 'Herlina'), ('Amanda', 'Carrillo Galera'), ('Nihel', 'Adjali'), ('Sarah', 'De Clercq'), ('Natalia', 'Vajdova'), ('Valeria', 'Salazar'), ('Jade', 'Suvrijn'), ('Tina', 'Jiang'), ('Valeria', 'Danilova'), ('Luisa', 'Rosa'), ('Alisa', 'Tymofeyeva'), ('Sofia', 'Santa Maria'), ('Hanna', 'Sohn'), ('Brooke', 'Rischbieth'), ('Minami', 'Akiyama'), ('Solene', 'Guyomard'), ('Aldila', 'Sutjiadi'), ('Nicole', 'Aragones Miro Quesada'), ('Xixi', 'Feng'), ('Natella', 'Nabieva'), ('Nataliya', 'Naumova'), ('Valeria', 'Koussenkova'), ('Rana', 'Sabry'), ('Margarita', 'Febrer Marza'), ('Evgeniya', 'Svintsova'), ('Joy', 'Yaich'), ('Izabella', 'Ismailova'), ('Tsveta Konstantinova', 'Dimitrova'), ('Alory Regina Elorriaga', 'Pereira'), ('Fatma', 'Al Janahi'), ('Andrea', 'Ivanovic'), ('Lea', 'Godallier'), ('Tena', 'Lukas'), ('Cassidy', 'Spearman'), ('Sachia', 'Vickery'), ('Jieke', 'Stroobant'), ('Alzbeta', 'Veverkova'), ('Jenna', 'Davidson'), ('Jodi', 'Davidson'), ('Irina', 'Khromacheva'), ('Lolade', 'Ogungbesan'), ('Tamara', 'Korpatsch'), ('Anabel', 'Ossombi'), ('Ingrid', 'Navarro Rodriguez'), ('Helena', 'Phillips'), ('Corina', 'Mader'), ('Yuliya', 'Lysa'), ('Voni', 'Darlina'), ('Stefani', 'Andreeva'), ('Natalia', 'Zhuravleva'), ('Vishesh', 'Vkc'), ('Marine', 'Beugre Guyot'), ('Maria', 'Cespedes'), ('Laura', 'Gibanel Velasco'), ('Michela', 'Isella'), ('Hayley', 'Carter'), ('Lauren', 'Marker'), ('Mihoki', 'Miyahara'), ('Daniela', 'Vita'), ('Lou', 'Brouleau'), ('Anna', 'Segarra Rius'), ('Selma', 'Saran'), ('Beatrice', 'Caruso'), ('Tereza', 'Hejlova'), ('Olaya', 'Garrido Rivas'), ('Daniela', 'Raygadas Dominguez'), ('Paula', 'Pastor Mir'), ('Maria Paula', 'Coyos'), ('Vanessa', 'Dobson'), ('Nikola', 'Schweinerova'), ('Nina', 'Asanin'), ('Lexi', 'Borr'), ('Barbara', 'Capellari Abou Haikal'), ('Mouna', 'Jebri'), ('Ana Carolina', 'Sigaki'), ('Nicole', 'Fossa Huergo'), ('Jiahui', 'Chen'), ('Samantha', 'Asch'), ('Camilla', 'Rosatello'), ('Maurien', 'Rikkert'), ('Sophie', 'Blom'), ('Amanda', 'Castillo'), ('Olivera', 'Veskovac'), ('Victoria', 'Vorontsova'), ('Sabina', 'Jeresic'), ('Jessica', 'Raith'), ('Isil', 'Ileri'), ('Razina', 'Shaibu'), ('Andrea', 'Prisco'), ('Marlies', 'Szupper'), ('Mariami', 'Kurasbediani'), ('Sansitha', 'Nandakumar'), ('Carolina', 'Cuevas Bucio'), ('Angela', 'Assal'), ('Caterina', 'Brunamonti'), ('Thais', 'Nascimento'), ('Marija', 'Bogicevic'), ('Alexis', 'Thoma'), ('Nataliya', 'Kotova'), ('Clara', 'Hoffman Loza'), ('Beatriz', 'Machado Santos'), ('Natasha', 'Piludu'), ('Laura', 'Gamarra'), ('Valeriya', 'Strakhova'), ('Eliza', 'Long'), ('Aneta', 'Dvorakova'), ('Mingxiu', 'Du'), ('Kristin Vivien', 'Rehse'), ('Marine', 'Fontaine'), ('Nehel', 'Sahni'), ('Carolina', 'Costamagna'), ('Emily', 'Fanning'), ('Laura', 'Ucros'), ('Kamilla', 'Galieva'), ('Maria', 'Kefala'), ('Jennifer', 'Zerbone'), ('Volha', 'Barshcheuskaya'), ('Barbare', 'Eristavi'), ('Daria', 'Sharapova'), ('Eugenie', 'Chapelle'), ('Marta', 'Sramkova'), ('Rozel Asuncion', 'Hernandez'), ('Skylar', 'Holloway'), ('Antonella', 'Altamirano'), ('Kamila', 'Kerimbayeva'), ('Aldana', 'Ciccarelli'), ('June', 'Lee'), ('Jessica', 'Simpson'), ('Nadja', 'Stojcic'), ('Anna Maria', 'Battista'), ('Tayla', 'Stenta'), ('Carol', 'Zhao'), ('Mi Jeong', 'Kwon'), ('Anna Maria', 'Heil'), ('Berta', 'Bonardi'), ('Ayaka', 'Okuno'), ('Giuliana', 'Verbauwen'), ('Luisa Marie', 'Huber'), ('Yana', 'Parshina'), ('Ella', 'Taylor'), ('Yuko', 'Kimura'), ('Yennifer', 'Delgado'), ('Leslie', 'Espinoza'), ('Perrine', 'Boisset'), ('Fabienne', 'Vincon'), ('Vilma Y', 'Gomez'), ('Ana', 'Gonzalez Andrade'), ('Matea', 'Zemunik'), ('Giovanna', 'Fioretti'), ('Susanna', 'Ciccone'), ('Adrijana', 'Lekaj'), ('Alexandra', 'Kiick'), ('Camila', 'Tobar'), ('Emma', 'Janssen'), ('Melissa', 'Ullrich'), ('Allie', 'Kiick'), ('Rasheeda', 'Mcadoo'), ('Salma', 'Chouhib'), ('Kristina', 'Chasovskikh'), ('Yukiko', 'Midorikawa'), ('Aleksandra', 'Reljic'), ('Natalia', 'Perepadenko'), ('Andrea', 'Martinovska'), ('Xiao Xuan', 'Guo'), ('Karin', 'Kennel'), ('Maria Camila', 'Trujillo Hoyos'), ('Gisele', 'Dufour'), ('Yelena', 'Nemchen'), ('Karina', 'Rovira'), ('Jelena', 'Stefanovic'), ('Camilla', 'Diez'), ('Despoina', 'Vogasari'), ('Maayan', 'Sela'), ('Katerina', 'Boiko'), ('Ilinca Teodora', 'Bercaru'), ('Millie', 'Radovic'), ('Megan', 'Mccray'), ('Spurti', 'Shivalingaiah'), ('Anna Katalina', 'Alzate Esmurzaeva'), ('Claudia', 'Marini'), ('Anastasia', 'Tokareva'), ('Minori', 'Yonehara'), ('Lu', 'Yu'), ('Teodora Adina', 'Ardeleanu'), ('Anabel', 'Carbo Estruch'), ('Swetha', 'Sree Hari'), ('Yasmine', 'Rashad'), ('Natalia', 'Kattah'), ('Alix', 'Theodossiou'), ('Andrea', 'Ternera'), ('Judit', 'Vives Joan'), ('Ya Hsuan', 'Lee'), ('Natsumi', 'Chimura'), ('Danielle', 'Wagland'), ('Ana Gabriela', 'Gerbasi'), ('Eva', 'Rutarova'), ('Georgiana', 'Ruhrig'), ('Victoria', 'Todorova'), ('Alice', 'Bacquie'), ('Anna', 'Zhylchuk'), ('Samantha', 'Palacio'), ('Alexis', 'Casati'), ('Senaida', 'Kambel'), ('Carlee', 'Rizzolo'), ('Maria', 'Sakkari'), ('Carmen', 'Blanco'), ('Adriana', 'Silva'), ('Ivania', 'Martinich'), ('Alena', 'Mayevskaya'), ('Farah', 'Mouri'), ('Natasa', 'Brnovic'), ('Dasha', 'Sergeeva'), ('Sujin', 'Yoon'), ('Carmen', 'Schauer'), ('Hanemas', 'Pangestu'), ('Diana', 'Ryashko'), ('Julyette Maria Josephine', 'Steur'), ('Beatriz', 'Abreu'), ('Ann', 'Okoro'), ('Lenka', 'Kuncikova'), ('Claudia', 'Chavarria Perez'), ('Kana', 'Daniel'), ('Angelina', 'Salihbaeva'), ('Anastasiya', 'Zablotskaya'), ('Ines', 'Canepa'), ('Di Andrea', 'Galloway'), ('Alena', 'Panfilova'), ('Taylor', 'Ng'), ('Sofia', 'Rojas'), ('Agustina', 'Serio'), ('Jana', 'Haid'), ('Victoria', 'Kan'), ('Tamar', 'Shahaf'), ('Saule', 'Valantiejute'), ('Chanikarn', 'Silakul'), ('Luca', 'Fabian'), ('Rebecca', 'Peterson'), ('Lynn', 'Kiro'), ('Ana Sofia', 'Cordero'), ('Nour', 'Tohamy'), ('Sarah Beth', 'Askew'), ('Cristiana', 'Ferrando'), ('Kristina', 'Lagoda'), ('Miriam', 'Rosell Canudas'), ('Andreea Maria', 'Trocan'), ('Alexandra', 'Zachem'), ('Claudia', 'Cirillo'), ('Gozde', 'Adar'), ('Petra', 'Rohanova'), ('Leolia', 'Jeanjean'), ('Luisa Maria', 'Varon Diaz'), ('Tatiana', 'Feliciano Granda'), ('Jelena', 'Popovic'), ('Gabriela', 'Valdes Garcia'), ('Viktoriya', 'Klimushkina'), ('Zamira', 'Jadue'), ('Aya', 'Tanaka'), ('Mara Sofia', 'Martinez Santori'), ('Mary', 'Closs'), ('Yulia', 'Chubarova'), ('Ka Man Carina', 'Ma'), ('Yasmine', 'Xantos'), ('Chalena', 'Scholl'), ('Minami', 'Uesugi'), ('Tiffany', 'Hoberth'), ('Emilia', 'Granstrom'), ('Varunya', 'Chandrashekar'), ('Carolina', 'Barsante'), ('Yuki Kristina', 'Chiang'), ('Alice', 'Zapolla'), ('Anna', 'Danilina'), ('Isabella', 'Kimberly'), ('Fernanda', 'Rodriguez Navarro'), ('Vita', 'Taher'), ('Amy', 'Olivier'), ('Shangqing', 'Yang'), ('Gabriela', 'Talaba'), ('Katrina', 'Andrzejevska'), ('Malin', 'Cubukcu'), ('Nicolette', 'Tran'), ('Se Hyun', 'Kim'), ('Cecilia', 'Barrionuevo'), ('Charlene', 'Mueller'), ('Nishtha', 'Dudeja'), ('Tereza', 'Janatova'), ('Anastasia', 'Gavryukova'), ('Anastasia', 'Reimchen'), ('Madeline', 'Bosnjak'), ('Fiona', 'Codino'), ('Astrid', 'Leclere'), ('Ximena', 'Mino'), ('Yumeka', 'Maeda'), ('Audrey', 'Bois'), ('Ilona', 'Golynker'), ('Sarah', 'Finck'), ('Lea', 'Tholey'), ('Bruna', 'Pacheco Chaves'), ('Kalita', 'Saraiva'), ('Karla', 'Popovic'), ('Rika', 'Yamamoto'), ('Szabina', 'Szlavikovics'), ('Aissa', 'Muamba'), ('Eszter', 'Palinkas'), ('Yui', 'Kiyohara'), ('Frederikke', 'Karst'), ('Selina', 'Jordi'), ('Emilia', 'Tenizbaeva'), ('Wu', 'Mei Qi'), ('Nini', 'Guensler'), ('Sydney', 'Rider'), ('Sanya', 'Madan'), ('Astra', 'Sharma'), ('Larissa', 'Ravanini De Souza'), ('Jasmina', 'Stojiljkovic'), ('Sofia', 'Compostizo De Andres'), ('Sonja', 'Larsen'), ('Alice Alexandra', 'Banica'), ('Paula', 'Sanchez'), ('Madara', 'Straume'), ('Shannon', 'Hudson'), ('Mieri', 'Aoki'), ('Kikka', 'Adachi'), ('Marian Jade', 'Capadocia'), ('Katherine', 'Ip'), ('Arianna', 'Paules Aldrey'), ('Laura', 'Enea'), ('Marina', 'Albert'), ('Elke', 'Tiel'), ('Dominika', 'Paterova'), ('Elena', 'Sava'), ('Valentina', 'Lia'), ('Margarita', 'Khasanova'), ('Khwanthiti', 'Banthao'), ('Leonela', 'Gonzalez'), ('Maria Constanza De Las Mercedes', 'Vega'), ('Maria', 'Avgerinos'), ('Noelia Alejandra', 'Acuna'), ('Patricia', 'Lancranjan'), ('Olga', 'Baikoulova'), ('Mariana', 'Gould'), ('Carmen', 'Pestano Hernandez'), ('Ji Hey', 'Lee'), ('Alice', 'Wenner'), ('Rocio', 'Macri'), ('Ambika', 'Pande'), ('Nikki', 'Luttikhuis'), ('Denisa', 'Kulhankova'), ('Makoto', 'Nishida'), ('Camila', 'Fuentes'), ('Alice', 'Matteucci'), ('Zhi Yan', 'Ye'), ('Dominique', 'Karregat'), ('Riko', 'Tachibana'), ('Pippa', 'Horn'), ('Diana', 'Vlad'), ('Keiko', 'Fukui'), ('Anna', 'Davydova'), ('Abir', 'El Fahimi'), ('Sri Vaishnavi', 'Peddi Reddy'), ('Laura', 'Pertusa Garcia'), ('Feruzabonu', 'Saidova'), ('Helena', 'Korompis'), ('Franceske', 'Stroh'), ('Jana', 'Nabel'), ('Hikari', 'Yamamoto'), ('Luisa', 'Fernandez'), ('Diana', 'Tokar'), ('Ines Miren', 'De Pablo'), ('Kyoka', 'Okamura'), ('Liberty', 'Crawford'), ('Josephine', 'Jedrychowski'), ('Ayano', 'Sonoda'), ('Laura', 'Sanchez'), ('Melissa', 'Laing'), ('Charlotte', 'Klasen'), ('Ellen', 'Perez'), ('Brooke', 'Broda'), ('Nina', 'Stadler'), ('Ayaka', 'Kanai'), ('Aniek', 'Van Rossum'), ('Eetee', 'Maheta'), ('Brianna', 'Lashway'), ('Laura', 'Torres'), ('Stuti', 'Singh Tomar'), ('Tamari', 'Chalaganidze'), ('Rafaela Arsenia', 'Alipranti'), ('Violetta', 'Shatalova'), ('Julia', 'Albuquerque'), ('Ana', 'Glumac'), ('Amina', 'Mukhametshina'), ('Sang Hee', 'Park'), ('Lani', 'Tuemmers'), ('Naomi', 'Totka'), ('Andjela', 'Stojkovic'), ('Na Young', 'Lee'), ('Elena', 'Cortimiglia'), ('Giovanna', 'Baccarini'), ('Anastasiya', 'Shestakova'), ('Alexandra', 'Grinchishina'), ('Ivanka', 'Karamalak'), ('Ana Gabriela', 'Meis'), ('Yuliya', 'Brotgal'), ('Kathrin', 'Spendier'), ('Cristina', 'Adamescu'), ('Danielle', 'Vernier'), ('Zhi Huan Eva', 'Chen'), ('Maika Jae', 'Tanpoco'), ('Vladica', 'Babic'), ('Kim', 'Kermet'), ('Polina', 'Bezsmertnaya'), ('Bridget', 'Liddell'), ('Sofia', 'Salimova'), ('Luize Liva', 'Strike'), ('Audrey', 'Marquard'), ('Burcu', 'Tari'), ('Angela', 'Tejedor Espinosa'), ('Joana', 'Vale Costa'), ('Veronika', 'Stotyka'), ('Lisanna', 'Pihlak'), ('Gabriella', 'De Santis'), ('Mariam', 'Kiknadze'), ('Janina', 'Geiss'), ('Sultan', 'Gonen'), ('Hannah', 'King'), ('Wallis', 'Vitis'), ('Chiara', 'Icardi'), ('Chompoothip', 'Jandakate'), ('Cassandre', 'Thebault'), ('Elena', 'Cerezo Codina'), ('Deborah', 'Cruciani'), ('Masa', 'Marc'), ('Josie', 'Kuhlman'), ('Nam Yeon', 'Jun'), ('Brooke', 'Harding'), ('Snezhana', 'Nekrasova'), ('Elizaveta', 'Kardaseva'), ('Marijana', 'Acimovic'), ('Gabriela', 'Bueno'), ('Marika', 'Akkerman'), ('Teodora', 'Djordjevic'), ('Florencia', 'Dezotti'), ('Kimberley', 'Zimmermann'), ('Marie', 'Decamps'), ('Ivona', 'Stankovic'), ('Elaine', 'Van Zyl'), ('Peggy', 'Porter'), ('Polina', 'Merenkova'), ('Yuriko', 'Miyazaki'), ('Giulia', 'Perrone'), ('Brenda', 'Rique'), ('Carolina', 'Sa'), ('Emily', 'Dunne'), ('Juli', 'Raventos'), ('Liudmila', 'Gazzaeva'), ('Surya', 'Tejaswini'), ('Catherine', 'Shulman'), ('Eva', 'Zagorac'), ('Marija', 'Radulovic'), ('Gabriele', 'Bertasiute'), ('Yesmine', 'Kharrat'), ('Rima', 'Asatrian'), ('Christiana', 'Brigante'), ('Elise', 'Mertens'), ('Leciane', 'Comparin Da Silva'), ('Juana', 'Zambrano'), ('Aandrita', 'Deb'), ('Sofia', 'Blanco'), ('Daria', 'Sapogova'), ('Mizuno', 'Kijima'), ('Abbie', 'Pahz'), ('Kristin', 'Wiley'), ('Alyza', 'Benotto'), ('Julia', 'Wagner'), ('Ludivine', 'Burguiere'), ('Ioanna', 'Markesini'), ('Maria Vitoria', 'Beirao'), ('Nikol', 'Yordanova'), ('Dajana', 'Cvjetkovic'), ('Nadja', 'Dzafic'), ('Bolzan', 'Ana Paula'), ('Elena', 'Rief'), ('Ferny', 'Angeles Paz'), ('Laura', 'Correia'), ('Victoria', 'Duval'), ('Aymet', 'Uzcategui'), ('Avika', 'Sagwal'), ('Agne', 'Cepelyte'), ('Tatsiana', 'Sakovich'), ('Breana', 'Stampfli'), ('Kristina', 'Mathis'), ('Shellita', 'Haughton'), ('Sharon', 'Biondi'), ('Camila', 'Blanes'), ('Paula', 'Rodriguez'), ('Ethel', 'Kouniavsky'), ('Jelena', 'Dzinic'), ('Ege', 'Kurtoglu'), ('Selenay', 'Heper'), ('Gabriella', 'Castaneda'), ('Teodora', 'Radosavljevic'), ('Ani', 'Gogvadze'), ('Natalia', 'Siedliska'), ('Anastasia', 'Koveshnikova'), ('Eden', 'Konorti'), ('Vera', 'Bessonova'), ('Laura Sarah', 'Ambrozic'), ('Fangzhou', 'Liu'), ('Kristina', 'Savchenkova'), ('Adi', 'Milstein'), ('Anastasia', 'Kuprina'), ('Hila', 'Mizrahi'), ('Maria', 'Zubkova'), ('Hannah', 'Nagel'), ('Katrin', 'Tebaldini'), ('Assem', 'Myssyr'), ('Miriam', 'Civera Lima'), ('Barbora', 'Krejcikova'), ('Cristina', 'Ene'), ('Anita', 'Safronenka'), ('Ee Yi Olivia', 'Koh'), ('Nicoleta Catalina', 'Dascalu'), ('Nerma', 'Caluk'), ('Samantha', 'Harris'), ('Celina', 'Bester'), ('Chiara', 'Carboni'), ('Misaki', 'Shuto'), ('Camila', 'Valencia'), ('Shreya', 'Pasricha'), ('Barbara', 'Rico Godino'), ('Sofia', 'Macias Mendoza'), ('Vania', 'Ivanova'), ('Zongzhen', 'Li'), ('Anett', 'Kontaveit'), ('Yukun', 'Zhang'), ('Nouha', 'Ziki'), ('Maria Belen', 'Da Luz'), ('Marine', 'Meraut'), ('Nicol', 'Padilla'), ('Macarena', 'Olivares Lopez'), ('Jessie Lynn', 'Paul'), ('Blaga', 'Delic'), ('Alessandra', 'Polese'), ('Maria', 'Ouazzani'), ('Alberta', 'Detogni'), ('Maftuna', 'Yunusova'), ('Elif', 'Turgul'), ('Yan', 'Wang'), ('Paulina', 'Wulcan'), ('Anna', 'Bini'), ('Idhun', 'Safaati'), ('Elba', 'Kasum'), ('Yosr', 'Elmi'), ('Caroline', 'Brinson'), ('Mina', 'Markovic'), ('Federica', 'Prati'), ('Yuqi', 'Sheng'), ('Jasmine', 'Paolini'), ('Roksana', 'Lukasiak'), ('Dinara', 'Imazhanova'), ('Marija', 'Mastilovic'), ('Sanya', 'Sinha'), ('Oana Carmen', 'Trus'), ('Simone', 'Pratt'), ('Eleanor', 'Dean'), ('Monet', 'Willis'), ('Sara', 'Marjanovic'), ('Trinidad Maria', 'Merdeni'), ('Ioana Andreea', 'Sascau'), ('Alzbeta', 'Houbova'), ('Francisca', 'Hernandez'), ('Helene', 'Scholsen'), ('Ailen', 'Crespo Azconzabal'), ('Amangul', 'Mollayeva'), ('Sara', 'Mitrovic'), ('Sara', 'Palcic'), ('Xenia', 'Oberson'), ('Ivana', 'Klac'), ('Maria Paulina', 'Perez Garcia'), ('Paula Andrea', 'Perez Garcia'), ('Nouha', 'Bazir'), ('Anke', 'Poncelet'), ('Shanon', 'Bronzi'), ('Kayla Symone', 'Price'), ('Anastassiya', 'Bessarab'), ('Suellen', 'Abel'), ('Ming Ming Joy', 'Chia'), ('Gabrielle', 'Smith'), ('Yu Mi', 'Hwang'), ('Gulben', 'Guldas'), ('Aleksandra', 'Zenovka'), ('Rebecca', 'Smaller'), ('Giulia', 'Leone'), ('Katharina', 'Feldmer'), ('Mineri', 'Sukegawa'), ('Victoria', 'Ocheva'), ('Fanny', 'Caramaro'), ('Kamilla', 'Farhad'), ('Olivia', 'Pimia'), ('Natalie', 'Cvackova'), ('Olga', 'Arruabarrena Vecino'), ('Giulia', 'Pairone'), ('Irina', 'Lidkovskaya'), ('Olivia', 'Sneed'), ('Morgan', 'Bernabe'), ('Amreen', 'Naaz'), ('Mercedes', 'Lopez Velez'), ('Molly', 'Reed'), ('Megan', 'Smith'), ('Khrystsina', 'Kandratsiuk'), ('Catiana', 'Kaercher'), ('Naz', 'Karagoz'), ('Kanami', 'Tsuji'), ('Yukino', 'Emi'), ('Daniela', 'Carrillo'), ('Asiya', 'Dair'), ('Angelique', 'Svinos'), ('Maliha', 'Al Awaidy'), ('Tatiana', 'Grigoryan'), ('Anna', 'Grigoryan'), ('Brigitte', 'Beck'), ('Angela', 'Lorenzo Garrido'), ('Aslina', 'Chua'), ('Ariana', 'Rodriguez'), ('Jacqueline', 'Cabaj Awad'), ('Hsin Min', 'Chin'), ('Anna', 'Sanford'), ('Elena', 'Golovnyova'), ('Cristina', 'Perez De La Torre Ma'), ('Jana', 'Schober'), ('Zofia', 'Kulig'), ('Ulyana', 'Ayzatulina'), ('Sophie', 'Cloessner'), ('Dominique', 'Esparza Fuster'), ('Siriyakorn', 'Makpoon'), ('Chiara', 'Volejnicek'), ('Antonella', 'Murialdo'), ('Jana', 'Jablonovska'), ('Petra', 'Remedio'), ('Sona', 'Priscakova'), ('Christi', 'Woodson'), ('Gaby Alexandra', 'Fonseca Tamayo'), ('Yana', 'Mogilnitskaya'), ('Daniela', 'Garstea'), ('Aziza', 'Berriri'), ('Yuliya', 'Latokhina'), ('Roos', 'Van Der Zwaan'), ('Justina', 'Mikulskyte'), ('Resha', 'Chandak'), ('Emma', 'Haakansson'), ('Sabina', 'Shaydullina'), ('Lena', 'Pacholski'), ('Emily', 'Casteleyn'), ('Katya', 'Krivoshapov'), ('Tiare', 'Rebolledo'), ('Woyla', 'Waluyo'), ('Georgia', 'Brescia'), ('Yeong Won', 'Jeong'), ('Anja', 'Bebic'), ('Kristina', 'Pastukhova'), ('Brooke', 'Austin'), ('Domenica', 'Gonzalez'), ('Ana Filipa', 'Santos'), ('Janet', 'Koch'), ('Isabella', 'Capato Camargo'), ('Maria', 'Ahumada'), ('Anastasia', 'Pribylova'), ('Verolalaina Helene', 'Radilofe'), ('Emily', 'Da Silva Chang'), ('Maria Del', 'Prados Cid'), ('Ekaterina', 'Popova'), ('Felicitas', 'Runkel'), ('Kamonwan', 'Buayam'), ('Beatrice', 'Lombardo'), ('Lyann', 'Hoang'), ('Eleonora', 'Mindiyarova'), ('Julia', 'Przybylska'), ('Ines', 'Arfaoui'), ('Greta', 'Mokrousova'), ('Carol', 'Finke'), ('Sonja', 'Balic'), ('Kelly', 'Shaffer'), ('Angeliki', 'Kairi'), ('Dajana', 'Dukic'), ('Daria', 'Chernyshkova'), ('Britt', 'Geukens'), ('Komal', 'Nagare'), ('Evita', 'Febri Habsari'), ('Karolina', 'Snita'), ('Sumina', 'Eshiro'), ('Juliana Jose', 'Parra Gomez'), ('Adriana', 'Rajkovic'), ('Janaya', 'Smith'), ('Cassie', 'Mercer'), ('Grace', 'Dixon'), ('Ayumi', 'Mori'), ('Claudia', 'Williams'), ('Aida', 'Kalimullina'), ('Ralina', 'Kalimullina'), ('Oleksandra', 'Korashvili'), ('Elizaveta', 'Khabarova'), ('Nikola', 'Tomanova'), ('Helena', 'Nyikos'), ('Laura', 'Tanfin'), ('Maria Jose', 'Zehnder'), ('Hayley', 'Macpherson'), ('Jandayia', 'Lubin'), ('Natalie', 'Syme'), ('Alize', 'Boccard'), ('Tatjana', 'Stoll'), ('Alena', 'Macharova'), ('Busra', 'Kayrun'), ('Julia', 'Terziyska'), ('Mahitha', 'Dadi Reddy'), ('Lea', 'Bruno'), ('Sarvinoz', 'Sharipova'), ('Stephanie J', 'Smith'), ('Monika', 'Stanikova'), ('Viktoriya', 'Yankovskaya'), ('Sara', 'Ottomano'), ('Alba', 'Carrillo Marin'), ('India', 'Sanders'), ('Oana Georgeta', 'Simion'), ('Mana', 'Furuhashi'), ('Madison', 'Frahn'), ('Sandra', 'Segura Mandarino'), ('Hadley', 'Berg'), ('Bianca', 'Ravinis Lombardi'), ('Erin', 'Larner'), ('Estelle', 'Cascino'), ('Hayaka', 'Murase'), ('Amanda Miguel', 'Perez Franco'), ('Stephani', 'Rodriguez'), ('Francesca', 'Gariglio'), ('Eden', 'Silva'), ('Devin', 'Chypyha'), ('Katrine Isabel', 'Steffensen'), ('Caroline', 'Doyle'), ('Mia', 'Middleton'), ('Ji Yun', 'Yun'), ('Jade', 'Hilton'), ('Giorgia', 'Bove'), ('Kennan', 'Johnson'), ('Mami', 'Adachi'), ('Barbara', 'Haas'), ('Julie', 'Noe'), ('Klaudia', 'Szabo'), ('Veronica', 'Napolitano'), ('Angela', 'Dahnous'), ('Raquel', 'Montalvo'), ('Colomba', 'Di Filippo'), ('Natalie', 'Hepburn'), ('Katarzyna', 'Pyka'), ('Stephanie', 'Doboara'), ('Martine', 'Ditlev'), ('Jeongyun', 'Lee'), ('Maria', 'Uvarova'), ('Anna', 'Shepita'), ('Alina', 'Zolotareva'), ('Chisa', 'Hosonuma'), ('Regina', 'Clark'), ('Alina', 'Lazareva'), ('Cheyenne', 'Biancheri'), ('Rutuja', 'Bhosale'), ('Maria', 'Gomez Saldarriaga'), ('Lise', 'Brulmans'), ('Camila', 'Ramos'), ('Aneta', 'Miksovska'), ('Sandra', 'Bolstad'), ('Nour', 'Azzouz'), ('Yagmur', 'Akgul'), ('Alessandra', 'Vacca'), ('Man Ying Maggie', 'Ng'), ('Srijita', 'Ghosh'), ('Alma', 'Thell Lenntorp'), ('Klara', 'Thell Lenntorp'), ('Andrea', 'Kulova'), ('Linda', 'Dubska'), ('Giulia', 'Crescenzi'), ('Ayumi', 'Oishi'), ('Maria', 'Martinez Martinez'), ('Viviana', 'Onorato'), ('Ana', 'Oparenovic'), ('Maria Elisa', 'Franco'), ('Andrea', 'Dikosavljevic'), ('Jin Ju', 'Lee'), ('Madison', 'Westby'), ('Mayo', 'Hibi'), ('Mari', 'Osaka'), ('Kristyna', 'Hrabalova'), ('Jihene', 'Benzeggouta'), ('Oana', 'Irimescu'), ('Nagisa', 'Nishimura'), ('Valeriya', 'Boyanovska'), ('Caitlin', 'Bernard'), ('Maria Regina', 'Espindola Mancera'), ('Aziza', 'Bhiri'), ('Damira', 'Muminovic'), ('Gyung Eun', 'Song'), ('Caroline', 'Uebelhoer'), ('Priscilla', 'Medlich Leal'), ('Mouna Naila', 'Azzouni'), ('Manon', 'Robine'), ('Aleksandra', 'Mally'), ('Iva', 'Primorac'), ('Amit', 'Gavrieli'), ('Leire', 'Martin Tena'), ('Marta', 'Ruszczynska'), ('Pippa', 'Carr'), ('Elizaveta', 'Kulichkova'), ('Lou', 'Adler'), ('Ilka', 'Csoregi'), ('Magdalena', 'Stoilkovska'), ('Hristina', 'Dyankova'), ('Kelly', 'Pedrazzoli'), ('Silvia', 'Russo'), ('Mariia', 'Tcakanian'), ('Drousile', 'Dzeubou'), ('Alizee', 'Michaud'), ('Ipek', 'Soylu'), ('Ying', 'Zhang'), ('Taylor', 'Townsend'), ('Nicole', 'Mingazzini'), ('Irina', 'Fetecau'), ('Andrea', 'Raaholdt'), ('Aliona', 'Ladutska'), ('Ioana', 'Ducu'), ('Aysenur', 'Durmus'), ('Nikki', 'Kallenberg'), ('Kathrine', 'Berge'), ('Sarah', 'Dvorak'), ('Daria', 'Vasekina'), ('Eliana', 'Antequera'), ('Alessandra', 'Vargas'), ('Arianne', 'Hartono'), ('Anastasiya', 'Yepisheva'), ('Ilze', 'Hattingh'), ('Eudice Wong', 'Chong'), ('Carolina Meligeni Rodrigues', 'Alves'), ('Ashleigh', 'Barty'), ('Anastasiya', 'Shcherbakova'), ('Rheeya', 'Doshi'), ('Iana', 'Tishchenko'), ('Eliana Sol', 'Gonzalez'), ('Paulina', 'Rustecka'), ('Da Hye', 'Kim'), ('Sumeera', 'Kamil'), ('Yukina', 'Saigo'), ('Teertha', 'Iska'), ('Lizanne', 'Jinkertz'), ('Pauline', 'Wuarin'), ('Meike', 'Vorschel'), ('Natalie Greer Watts', 'Da Silveira'), ('Claudia', 'Negron'), ('Julie', 'Garret'), ('Ashley', 'Barron'), ('Ksenija', 'Sharifova'), ('Gabriela', 'Pereira Alves'), ('Silvia', 'Mocciola'), ('Marta', 'Bellucco'), ('Dominique', 'Beauvais'), ('Angeline Devi', 'Devanthiran'), ('Paula', 'Smetak'), ('Stefani', 'Hofer'), ('Tanja', 'Tuomi'), ('Nicole', 'Mitchell'), ('Mayar', 'Sherif'), ('Anna', 'Bryukhova'), ('Suryaningsih', 'Suryaningsih'), ('Sade', 'Atkinson'), ('Crystal', 'Sutar'), ('Andreea', 'Gradinaru Fometescu'), ('Elisa Mai', 'Koonik'), ('Lujza', 'Ryskova'), ('Carmen', 'Blasco Robaina'), ('Natalie', 'Suk'), ('Giulia', 'Della Cioppa'), ('Maurine', 'Lena'), ('Debora Emanuela', 'Scurt'), ('Agustina Elena', 'Otegui'), ('Kyra', 'Wojcik'), ('Maria', 'Bogdanova'), ('Katerina', 'Siniakova'), ('Anelisse', 'Torrico'), ('Johnnise', 'Renaud'), ('Risa', 'Ushijima'), ('Valeria', 'Patiuk'), ('Camila', 'Gil'), ('Alexandria', 'Stiteler'), ('Ah', 'Song'), ('Erin Kane', 'Rodriguez'), ('Annabelle', 'Andrinopoulos'), ('Barbara', 'Kotelesova'), ('Xiaodi', 'You'), ('Marine', 'Dans'), ('Sarah', 'Baron'), ('Dejana', 'Radanovic'), ('Cory Pierina', 'Molina Chenet'), ('Hannah En Xin', 'Chew'), ('Sandra', 'Honigova'), ('Timea', 'Jaruskova'), ('Isabela', 'Jovanovic'), ('Aleksandra', 'Emelianova'), ('Ulrikke', 'Hoyer'), ('Ana Fernanda', 'Loaiza Esquivias'), ('Louisa', 'Chirico'), ('Petra', 'Piirtola'), ('Qian Nan', 'Feng'), ('Monika', 'Rajicic'), ('Martina', 'Husarova'), ('Kylie', 'Waschuk'), ('Dugleisy', 'Linares'), ('Mila', 'Popivoda'), ('Indy', 'De Vroome'), ('Karoline', 'Kurz'), ('Sabrina', 'Federici'), ('Paola', 'Gullino'), ('Michele Alexandra', 'Zmau'), ('Karina', 'Silkina'), ('Tereza', 'Melicharkova'), ('Daniella', 'Silva'), ('Bianca', 'Birkenstock'), ('Mariami', 'Dolashvili'), ('Yuri', 'Sugimoto'), ('Nina Isabella', 'Scholten'), ('Eleni', 'Stamati'), ('Daria', 'Lodikova'), ('Dea Ioanna', 'Petropoulou'), ('Anne Liz', 'Jeukeng'), ('Nadege', 'Jorda'), ('Veronika', 'Badurova'), ('Beatriz', 'Maia'), ('Yasmina', 'El Sayed'), ('Yvonne', 'Bruce Tagoe'), ('Christina', 'Makarova'), ('Seda', 'Vardanyan'), ('Milica', 'Sljukic'), ('Gracia', 'Mboko'), ('Beatriz', 'Haddad Maia'), ('Sara', 'Djurdjevic'), ('Maria Styliani', 'Botsa'), ('Koralie', 'Etienne'), ('Ekaterina', 'Klyueva'), ('Maria', 'Zotova'), ('Milica', 'Novakovic'), ('Valeria', 'Cealic'), ('Mao', 'Ohmine'), ('Nelise', 'Verster'), ('Valeria', 'Munoz Velasquez'), ('Marina', 'Margulis'), ('Jennifer', 'Brown'), ('Laura', 'Moreno Martinez'), ('Nozomi', 'Kawai'), ('Woo Keoung', 'Lee'), ('Maria Jose', 'Luque Moreno'), ('Sunam', 'Jeong'), ('Sheetal', 'Shetty'), ('Claudia', 'Cianci'), ('Adel', 'Musina'), ('Vanessa', 'Dzmurova'), ('Izel Ece', 'Yilmaz'), ('Lodovica', 'Giannini'), ('Marta', 'Sexmilo Pascual'), ('Stefany', 'Ferigatto'), ('Ena', 'Kajevic'), ('Cecilia', 'Pattacini'), ('Elisabet', 'Strand'), ('Deborah', 'Chiesa'), ('Ines', 'Miranda'), ('Huijie', 'Li'), ('Sadafmoh', 'Tolibova'), ('Anais', 'Emelie'), ('Sara', 'Quiroga'), ('Eleonore', 'Barrere'), ('Mariana Mayer', 'Humberg'), ('Nadia', 'Mechaala Gordillo'), ('Sara', 'Mechaala Gordillo'), ('Marie', 'Mayerova'), ('Luana', 'Stanciu'), ('Juliana Rocha', 'Cardoso'), ('Viktoriya', 'Bogoslovska'), ('Sarina', 'Kang'), ('Petra', 'Ivankovic'), ('Regina', 'Lopez Ley'), ('Michelle Kerubo', 'Onyancha'), ('Mia', 'Jurasic'), ('Emma', 'Hurst'), ('Carolina', 'Monteiro Ribeiro De Lima'), ('Ning', 'Hai'), ('Maria Fernanda', 'Navarro Oliva'), ('Samantha', 'Echevarria'), ('Simran Kaur', 'Sethi'), ('Masako', 'Makiba'), ('Anastasia', 'Prokopenko'), ('Tjasa', 'Jerse'), ('Donna', 'Vekic'), ('Olaya', 'Inclan Solis'), ('Ariadna', 'Marti Riembau'), ('Maja', 'Ornberg'), ('Francesca', 'Delledera'), ('Jovana', 'Kenic'), ('Yumeko', 'Yoshitomi'), ('Maria Agustina', 'De Carli'), ('Sarah', 'Al Balushi'), ('Anastasiya', 'Shleptsova'), ('Amelie', 'Intert'), ('Marina', 'Guinart Espana'), ('Philippine', 'Gauduffe'), ('Anastasiya', 'Galickaya'), ('Elizaveta', 'Kamzolova'), ('Linda', 'Guerzize'), ('Julia', 'Grabher'), ('Gabriella Angelin', 'Alves'), ('Katarina', 'Guarino'), ('Ines', 'Chibout'), ('Ziyue', 'Sun'), ('Marli', 'Van Heerden'), ('Eva', 'Martinez Regalado'), ('Jeannez', 'Daniel'), ('Evgeniya', 'Ivanichenko'), ('Yihong', 'Li'), ('Daniela Estefania', 'Rosado Vega'), ('Gabriella', 'Umoquit'), ('Megen', 'Cochran'), ('Alina', 'Silich'), ('Erica', 'Braschi'), ('Misaki', 'Kawamura'), ('Kristina', 'Mrazova'), ('Ayla', 'Aksu'), ('Pei Wen', 'Kao'), ('Tomomi', 'Takaichi'), ('Jennifer', 'Hauer'), ('Vanessa', 'Stiegner'), ('Ana', 'Madcur'), ('Hanna', 'Borjeson'), ('Bhavani', 'Balakumar'), ('Louise', 'Ronaldson'), ('Thanthita', 'Suetrong'), ('Zeina', 'El Tawil'), ('Natallia', 'Niahrei'), ('Ryann', 'Foster'), ('Terri', 'Fleming'), ('Jennifer', 'Moinard'), ('Nia', 'Rose'), ('Chan', 'Zhang'), ('Pia', 'Cuk'), ('Dzina', 'Milovanovic'), ('Barbara', 'Rajic'), ('Tina', 'Bokhua'), ('Sara', 'Kalkenova'), ('Liana', 'Sakvarelidze'), ('Tatjana', 'Vorobjova'), ('Chatchaya', 'Sakchatchawan'), ('Melena', 'Lopez'), ('Yenise', 'Machado'), ('Ines', 'Baccouche'), ('Harriet', 'Dart'), ('Angela', 'Leweurs'), ('Nina', 'Stojanovic'), ('Nyla', 'Beenk'), ('Kana', 'Kubota'), ('Katie', 'Boulter'), ('Nelli', 'Ponomareva'), ('Eleonora', 'Maserati'), ('Vukosava', 'Medojevic'), ('Suzuho', 'Oshino'), ('Maria Eleni', 'Charalampopoulou'), ('Bianca', 'Moldovan'), ('Elizabeth Anita Alexandria', 'Profit'), ('Anastasia', 'Vasileiou'), ('Lara', 'Glavic'), ('Wanyuanyun', 'Jin'), ('Reina', 'Takahashi'), ('Yolimar', 'Ogando'), ('Polina', 'Yuzefovich'), ('Paulina', 'Lewandowska'), ('Anastasia', 'Artemova'), ('Shanshan', 'Guo'), ('Ines', 'Teixeira'), ('Agata', 'Borgman'), ('Alyssa', 'Boey'), ('Dona', 'Abo Habaga'), ('Jovana', 'Petrovic'), ('Mariella', 'Blackwell'), ('Valeriya', 'Korotina'), ('Antonia', 'Lottner'), ('Yusleydis', 'Smith Dias'), ('Clara', 'Tanielian'), ('Agustine Pangestu', 'Palupi'), ('Kristyna', 'Rouckova'), ('Tomoe', 'Yazawa'), ('Bojana', 'Petrovic'), ('Barbara', 'Gatica'), ('Michelle', 'Van Lier'), ('Viktoriya', 'Lushkova'), ('Mathilda', 'Malm'), ('Andrea', 'Sanchez Sainz'), ('Iva', 'Ivkovic'), ('Kimberley', 'Koerner'), ('Ching Wen', 'Hsu'), ('Alina', 'Zubkova'), ('Ioana Florentina', 'Popescu'), ('Natsuho', 'Nakazawa'), ('Emma', 'Ek'), ('Minami', 'Sonan'), ('Diandra', 'Berliana'), ('Karolina', 'Muchova'), ('Giorgia', 'Picano'), ('Paulina Javiera', 'Obreque'), ('Jiayuan', 'Xue'), ('Leticia Nayara Moura', 'Monteiro'), ('Ingrid', 'Gamarra Martins'), ('Sofia', 'Wicker'), ('Tatiana', 'Rico Viana'), ('Janina', 'Braun'), ('Sharmeen', 'Rizvi'), ('Larissa', 'Bucher'), ('Camila', 'Giangreco Campiz'), ('Gabriela', 'Anzola'), ('Alessandra', 'Gisonna'), ('Chiara', 'Frapolli'), ('Stephanie Mariel', 'Petit'), ('Shaddae', 'Findley'), ('Anastasia', 'Nikolaou'), ('Leslie', 'Soto'), ('Jena', 'Cheng'), ('Gorica', 'Spasojevic'), ('Ksenia', 'Laskutova'), ('Carla', 'Touly'), ('Klavdija', 'Bukovec'), ('Katarina', 'Jovanovic'), ('Sara', 'Boevska'), ('Lilla', 'Barzo'), ('Tanja', 'Stojanovska'), ('Habiba', 'Shaker'), ('Rianna', 'Valdes'), ('Hannah', 'Ploner'), ('Sara', 'Gimenez'), ('Kanako', 'Morisaki'), ('Yassamine', 'Boudjadi'), ('Yana', 'Tashaev'), ('Barbora', 'Kollarova'), ('Isabelle', 'Wallace'), ('Ekaterina', 'Ilina'), ('Nanette', 'Nylund'), ('Kim Janine', 'Gefeller'), ('Katelyn', 'Jackson'), ('Devi', 'Hasan'), ('Madeleine', 'Boepple'), ('Xiao', 'Fu'), ('Margaux', 'Brabant'), ('Septiana', 'Zahiroh'), ('Dakota', 'Norton'), ('Natalia', 'Zorgovska'), ('Giulia', 'Cascapera'), ('Eugenia', 'Sanchez'), ('Amit', 'Lev Ari'), ('Irem', 'Karamanoglu'), ('Jennifer', 'Wacker'), ('Seohyeon', 'Kim'), ('Chiara', 'Pascale'), ('Maria Juliana', 'Alzate'), ('Laura', 'Roig Tortajada'), ('Ioana Loredana', 'Rosca'), ('Theresa Alison', 'Van Zyl'), ('Chiara', 'Arcangeli'), ('Kristina', 'Eremina'), ('Maia A', 'Magill'), ('Marianna', 'Zakarlyuk'), ('Alice', 'Patch'), ('Gebriela', 'Mihaylova'), ('Hannah', 'Cseplo'), ('Anastasia', 'Reshetnikova'), ('Inger', 'Van Dijkman'), ('Alexis', 'Prokopuik'), ('Julia', 'Ascua'), ('Sarah', 'Vargas'), ('Jessika', 'Ponchet'), ('Magdalena', 'Boado'), ('Agata Jadwiga', 'Bienkowska'), ('Alena', 'Gulyaeva'), ('Lyn Yuen', 'Choo'), ('Guillermina', 'Naya'), ('Arisha', 'Ladhani'), ('Margot', 'Mercier'), ('Alicia', 'Smith'), ('Evelina', 'Hennigor'), ('Risa', 'Shimizu'), ('Alexa', 'Pirok'), ('Melanie', 'Stokke'), ('Lorea', 'Ganboa'), ('Ema', 'Barkovic'), ('Jelena Karla', 'Vujicic'), ('Emmanuelle', 'De Beer'), ('Jasmin', 'Jebawy'), ('Maria', 'Schneider'), ('Ana Bianca', 'Mihaila'), ('Ke', 'Mao'), ('Laura', 'Sainsbury'), ('Annelou', 'Nab'), ('Sara', 'Sorribes Tormo'), ('Stephanie', 'Yamada'), ('Tea', 'Jandric'), ('Manae', 'Miwa'), ('Rio', 'Suzuki'), ('Rehmat', 'Johal'), ('Antonia', 'Sakic'), ('Dasha', 'Ivanova'), ('Shannon', 'Wong Hon Chan'), ('Maria Victoria', 'Quinde Serrano'), ('Anna', 'Koval'), ('Kalina', 'Bozhilova'), ('Kimberly', 'Yee'), ('Gloria', 'Liang'), ('Mirna', 'Curcic'), ('Mariana', 'Carreira'), ('Rebecca', 'Sramkova'), ('Katharine', 'Fahey'), ('Alina', 'Kuzmenkova'), ('Maria', 'Tritou'), ('Ana', 'Sirovina'), ('Tamara', 'Pichkhadze'), ('Saera', 'Kanda'), ('Vasilisa', 'Aponasenko'), ('Camila', 'Pacheco'), ('Thalia', 'Martin'), ('Khume', 'Herring'), ('Oceane', 'Dodin'), ('Zoe', 'Hives'), ('Marianna', 'Petrei'), ('Ana Marcela', 'Rengifo Caracas'), ('Pia', 'Brglez'), ('Annely', 'Pokras'), ('Josefina', 'Surraco'), ('Amanda', 'Rebol'), ('Vasundara', 'Raju'), ('Anastasija', 'Homutova'), ('Albina', 'Yanko'), ('Vittoria', 'Avvantaggiati'), ('Bojana', 'Marinkovic'), ('Caroline', 'Daxhelet'), ('Vitaliya', 'Nekhoroshikh'), ('Anastasia', 'Trunina'), ('Barbara', 'Bacic'), ('Maria Paula', 'Martinez Gelvez'), ('Melanie Isabella', 'Diaz Padron'), ('Jana', 'Fett'), ('Eva', 'Siskova'), ('Minh Trang', 'Dao'), ('Ivone', 'Alvaro'), ('Anita Ance', 'Detlava'), ('Kasandra', 'Kozub'), ('Cyrine', 'Ben Cheikh'), ('Tanasha', 'Khandpur'), ('Emma Marie', 'Jensen'), ('Mara', 'Argyriou'), ('Karina', 'Komaruk'), ('Julieta Sofia', 'Canas'), ('Dea', 'Herdzelas'), ('Guljahan', 'Kadyrova'), ('Hye Ji', 'Ju'), ('Rachel', 'Chong'), ('Ellyse', 'Hamlin'), ('Judith', 'Bohnenkamp Serena'), ('Jane', 'Wasserson'), ('Alice', 'Keddie'), ('Aleksandra', 'Karamanoleva'), ('Caitlin', 'Herb'), ('Ana', 'Yrazusta Acosta'), ('Margaux', 'Deagostini'), ('Polina', 'Novoselova'), ('Marie', 'Villet'), ('Daniela', 'Pedraza Novak'), ('Maria Paula', 'Medina Blanco'), ('Tyler', 'Smith'), ('Kristina', 'Njegus'), ('Angelina', 'Zhuravleva'), ('Rafaela', 'Francisquiny'), ('Hannah', 'Lehfeldt'), ('Juliana', 'Pena'), ('Monica', 'Matias'), ('Malak Jasim', 'Fardan'), ('Maite', 'Cano'), ('Abhilasha', 'Vishwanath'), ('Shir', 'Hornung'), ('Camila', 'Wesbrooks'), ('Gizem Melisa', 'Ates'), ('Laura', 'Argente'), ('Sindhu', 'Janagam'), ('Marketa', 'Zeminova'), ('Maria Belen', 'Vaz Teixeira'), ('Yunjeong', 'Park'), ('Nihed', 'Benkaddour'), ('Yadira', 'Rubio'), ('Hitomi', 'Watanabe'), ('Melina', 'Lyubomirova'), ('Akvile', 'Parazinskaite'), ('Stefania', 'Sismanidou'), ('Anna', 'Vrbenska'), ('Julia', 'Jung'), ('Jasmine Kaur', 'Bajaj'), ('Lee', 'Ben Or'), ('Magdelini', 'Lesvidou'), ('Aina', 'Schaffner Riera'), ('Victoria', 'Yu'), ('Kristina', 'Djamalova'), ('Alli', 'Hodges'), ('Francesca', 'Bullani'), ('Lisa', 'Phillips'), ('Sabina', 'Calancea'), ('Jamilya', 'Sadykzhanova'), ('Miryam', 'Jabri'), ('Dina', 'Hegab'), ('Milana', 'Drca'), ('Oriana Belen', 'Labaqui'), ('Angelina', 'Kholikulova'), ('Nina', 'Kalezic'), ('Claudia', 'Wiktorin'), ('Lara', 'Kralj'), ('Sarlota', 'Cesnekova'), ('Graciela Patricia', 'Rosas Alvarado'), ('Pia', 'Ender'), ('Stefanie', 'Vorih'), ('Alannah', 'Griffin'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Costanza', 'Magazzini'), ('Ana', 'Lopez Camarero'), ('Martina', 'Colmegna'), ('Elina', 'Vikhryanova'), ('Sahar', 'Najaei'), ('Natalie', 'Novotna'), ('Varvara', 'Flink'), ('Catalina', 'Vives'), ('Cristina', 'Moroi'), ('Paula', 'Rives Palau'), ('Vineeta', 'Singh'), ('Madison', 'Harrison'), ('Sofia', 'Mariotto'), ('Palina', 'Dubavets'), ('Polina', 'Ivanova'), ('Francesca', 'Wilkes'), ('Alicja', 'Zduniak'), ('Yekaterina', 'Gubanova'), ('Natalija', 'Sipek'), ('Barbara', 'Mancera Carrillo'), ('Zarina', 'Jumajanova'), ('Sara', 'Ramadan'), ('Lara', 'Dimmer'), ('Lais', 'Carvalho De Oliveira Bicca'), ('Gabrielle Faith', 'Andrews'), ('Sumitra', 'Basnyat'), ('Kamilla', 'Beisenova'), ('Aayushi', 'Chouhan'), ('Katherine', 'Lee'), ('Vivian', 'Hegeman'), ('Ana Victoria', 'Gobbi Monllau'), ('Amanda', 'Andrade Silva'), ('Dagmar', 'Janischova'), ('Sophia', 'Grippo'), ('Marta', 'Kowalska'), ('Giuliana', 'Huerta Mercado'), ('Ariana', 'Rahmanparast'), ('Ruth', 'Copas'), ('Alessandra', 'Lucchetta'), ('Ksenia', 'Dmitrieva'), ('Maria Del Rosario', 'Canero Perez'), ('Arina', 'Folts'), ('Sena Lara', 'Nural'), ('Lior', 'Pachuorkovski'), ('Simran', 'Wadhwa'), ('Yik Yan Suki', 'Law'), ('Maria', 'Siopacha'), ('Ana Luisa', 'Perez Lopez'), ('Dabin', 'Kim'), ('Martina', 'Malmqvist'), ('Natsumi', 'Okamoto'), ('Michela', 'Piccioli'), ('Cecilia', 'Bahloul'), ('Camille', 'Sireix'), ('Laura', 'Pimenta'), ('Yada', 'Vasupongchai'), ('Lilia', 'Talaboulma'), ('Arushi', 'Bhasin'), ('Jasmin', 'Buchta'), ('Valentina', 'Losciale'), ('Jessica', 'Ho'), ('Mina Guner', 'Karamercan'), ('Ziyu', 'Wang'), ('Theresa', 'Piontek'), ('Chatmanee', 'Jankiaw'), ('Napawee', 'Jankiaw'), ('Isabel Veronica', 'Boada'), ('Valeriya', 'Solopaeva'), ('Andie K', 'Daniell'), ('Uljan', 'Espolova'), ('Lauren', 'Proctor'), ('Dhruthi', 'Tatachar Venugopal'), ('Ingy', 'Hashish'), ('Pornpawee', 'Premthong'), ('Lucia', 'Ondrasova'), ('Yijia', 'Shao'), ('Eliska', 'Kleisnerova'), ('Ivona', 'Cudina'), ('Ana', 'Roman Dominguez'), ('Sanjana', 'Sudhir'), ('Ayane', 'Tachibana'), ('Esen', 'Kokce'), ('Martina', 'Basic'), ('Sejla', 'Duzel'), ('Fernanda', 'Astete'), ('Nina', 'Potocnik'), ('Minja', 'Gligic'), ('Anastasiya', 'Rychagova'), ('Sofia', 'Smagina'), ('Natalia', 'Bey Barbe'), ('Clara', 'Carotta'), ('Josephine', 'Hofmann'), ('Maharevo', 'Ramanitrarivo Rosea'), ('Ana Paula', 'Neffa De Los Rios'), ('Dona', 'Valihanova'), ('Sasipa', 'Permpanich'), ('Karina', 'Gurgenyan'), ('Raluca', 'Ciufrila'), ('Anastasia', 'Chikalkina'), ('Alexandra', 'Bezmenova'), ('Dina', 'Zhamiyeva'), ('Maria', 'Patrascu'), ('Jiaqing', 'Mo'), ('Josefin', 'Halden'), ('Angelina', 'Klimova'), ('Nikol', 'Zaikin'), ('Amy', 'Yang'), ('Luz Angelica', 'Solano Delgado'), ('Nilufar', 'Ismailova'), ('Tsvetanka', 'Trifonova'), ('Rada', 'Manataweewat'), ('Alexandra', 'Tsereteli'), ('Victoria', 'Muntean'), ('Claire', 'Verwerda'), ('Isabelle', 'Entenza'), ('Katerina', 'Stloukalova'), ('Victoria', 'Giannaccini'), ('Maria', 'Novikova'), ('Isabella', 'Hurtado'), ('Pamela', 'Wu'), ('Nozomi', 'Ohya'), ('Denisa', 'Chereches'), ('Barbora', 'Kosejkova'), ('Chiara', 'Grimm'), ('Alona', 'Puskkarevsky'), ('Imen', 'Abid'), ('Anna', 'Sviripa'), ('Julia', 'Suzuki'), ('Melis', 'Bayraktaroglu'), ('Sara Catherine', 'Parker'), ('Charlotte', 'Petrick'), ('Mafalda', 'Fernandes'), ('Damini', 'Sharma'), ('Morgane', 'Michiels'), ('Vittoria', 'Beolchi'), ('Paige Mary', 'Hourigan'), ('Lidia', 'Moreno Arias'), ('Julia', 'Schepp'), ('Francoise', 'Abanda'), ('Mirabelle', 'Njoze'), ('Kim', 'Ha Nul'), ('Stacey', 'Fung'), ('Alexus', 'Jones'), ('Andreina', 'Pino'), ('Anhelina', 'Kalinina'), ('Eeshita', 'Pande'), ('Chantal', 'Martinez Blanco'), ('Sthefanie', 'Santos'), ('Marina', 'Gennimata'), ('Valentini', 'Grammatikopoulou'), ('Lana', 'Rush'), ('Anja', 'Dokic'), ('Evelyn Briyeeth', 'Moreno Rivera'), ('Linn', 'Ehrenstrom'), ('Nadia', 'Podoroska'), ('Agustina', 'Chlpac'), ('Nicole Caroline', 'Vaz Da Silva'), ('Atlanta ', 'Patsali'), ('Valeria', 'Nikolaev'), ('Ana Lucia', 'Carneiro Revoredo'), ('Hana', 'Pektorova'), ('Kseniia', 'Bekker'), ('Snehadevi S', 'Reddy'), ('Laura', 'Botero'), ('Nicole', 'Dzenga'), ('Aparna', 'Kondaveeti'), ('Vasanti', 'Shinde'), ('Jelena', 'Janosevic'), ('Margalita', 'Tchitchashvili'), ('Muge', 'Topsel'), ('Victoria', 'Chehal'), ('Natalia', 'Vikhlyantseva'), ('Kristina', 'Kostic'), ('Tuna', 'Kaya'), ('Andreia', 'Beberechi'), ('Nur Gulsan', 'Bicen'), ('Amanda', 'Schneider'), ('Kwan Yau', 'Ng'), ('Kamonluk', 'Kittitanom'), ('Lin', 'Ma'), ('Lamiaa', 'Aziz'), ('Montana', 'Moore'), ('Kristina', 'Samardzic'), ('Carina', 'Avram'), ('Anastasija', 'Filipovic'), ('Protiksha', 'Sharma'), ('Milica', 'Cortanovacki'), ('Roosa', 'Timonen'), ('Joanna', 'Zawadzka'), ('Meng', 'Qin'), ('Federica Joe', 'Gardella'), ('Giorgie', 'Jones'), ('Andria', 'Tsaggaridou'), ('Paige', 'Cline'), ('Marla', 'Mesa'), ('Lucia Annette', 'Davila Espejo'), ('Jelena', 'Lukic'), ('Camila', 'Ramazzini'), ('Lynn', 'Janssens'), ('Valentina', 'Gazzoli'), ('Katharina', 'Herpertz'), ('Yana', 'Khon'), ('Julia Mansano', 'Gomide'), ('Rebeka', 'Stolmar'), ('Anna Maria', 'Procacci'), ('Eleonora', 'Cecchinato'), ('Yu Ting', 'Hsieh'), ('Magda', 'Aubets Macia'), ('Jasmine Marina', 'Coteanu'), ('Kateryna', 'Lymar'), ('Anna', 'Sokiran'), ('Yi Ming', 'Huang'), ('Alexandra', 'Valenstein'), ('Oceane', 'Garibal'), ('Sara', 'Lanca'), ('Hazal', 'Unlugenc'), ('Daniela', 'Farfan'), ('Rayene Nour', 'Brahimi'), ('Antonella', 'Bramato'), ('Jiaxi', 'Lu'), ('Maren', 'Helgo'), ('Gabriela', 'Slavova'), ('Marija', 'Kelava'), ('Mckenna Alexandra', 'Root'), ('Sarah', 'Schaerer'), ('Maria', 'Kononova'), ('Laura', 'Gomez'), ('Tatiana', 'Feygina'), ('Michaela', 'Odraskova'), ('Nicole', 'Kadlec'), ('Marija Vera', 'Stankovic'), ('Victoria Fernanda', 'Angulo Pimentel'), ('Arina Gabriela', 'Vasilescu'), ('Tayisiya', 'Morderger'), ('Yana', 'Morderger'), ('Nagisa', 'Morimoto'), ('Michelle', 'Yang'), ('Neus', 'Torregrosa Parets'), ('Giulia', 'Porzio'), ('Marta', 'Garcia Gausi'), ('Belinda', 'Bencic'), ('Andreea', 'Ghitescu'), ('Lina', 'Qostal'), ('Fiona', 'Ferro'), ('Sara', 'Cakarevic'), ('Viktoryia', 'Viaklenka'), ('Patricia', 'Valimaa'), ('Frederikke', 'Svarre'), ('Leticia Garcia', 'Vidal'), ('Sarra', 'Boukezzi'), ('Ty Ana', 'Williams'), ('Maryna', 'Kolb'), ('Yu Jin', 'Ahn'), ('Tamara', 'Tomic'), ('Felicity', 'Maltby'), ('Hae Ok', 'Lee'), ('Hae Seon', 'Lee'), ('Kenadi', 'Hance'), ('Emel', 'Abibula'), ('Julie', 'Razafindranaly'), ('Alexis', 'Jones'), ('Latifah Amelia', 'Dinar'), ('Elvira', 'Juravliova'), ('Alija', 'Merdeeva'), ('Iryna', 'Vardanyan'), ('Natalia', 'Serrano Garcia'), ('Bianka', 'Bekefi'), ('Diana', 'Spissakova'), ('Ghita', 'Nassik'), ('Vera', 'Sakalouskaya'), ('Anna', 'Hermann'), ('Anna', 'Ulyashchenko'), ('Nikola', 'Dolakova'), ('Siqi', 'Xie'), ('Miljana', 'Milojevic'), ('Lauren', 'Bishop'), ('Savannah', 'Sills'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Sharon', 'Pesch'), ('Kristina', 'Evtushenko'), ('Yi Chi', 'Ma'), ('Liz Andrea', 'Miranda'), ('Vanessa', 'Zemp'), ('Francesca', 'Bonometti'), ('Ayako', 'Hayashi'), ('Mariana Lucia', 'Bedon Burgos'), ('Lindsay', 'Truscott'), ('Dominique', 'Ibarra Gomez'), ('Oceane', 'Razakaboana'), ('Camilla', 'Fabbri'), ('Harshita', 'Chugh'), ('Julia', 'Izotova'), ('Anhelina', 'Kalita'), ('Jiahuan', 'He'), ('Nilay Gizem', 'Altay'), ('Darya', 'Bulatova'), ('Eliska', 'Petrackova'), ('Laura', 'Luedemann'), ('Dijana', 'Bogicevic'), ('Matilde', 'Fernandes'), ('Natalia', 'De Ugarte'), ('Iulia', 'Truca'), ('Hanna', 'Kantenwein'), ('Alisha', 'Haas'), ('Madeline', 'Rolph'), ('Pauline', 'Courcoux'), ('Meropi', 'Parousi'), ('Laura', 'Moreno Hernandez'), ('Huibre Mare', 'Botes'), ('Louise Mare', 'Botes'), ('Melan', 'Butler'), ('Rafaela', 'Gomez'), ('Eliessa', 'Vanlangendonck'), ('Kristen', 'Thoms'), ('Ioana Larisa', 'Fuiorea'), ('Farah', 'Baklouti'), ('Ivana', 'Marinov'), ('Valentina', 'Abrile'), ('Lidia', 'Mugelli'), ('Daniela Macarena', 'Lopez'), ('Blanca Elena', 'Butnaru'), ('Nariman', 'Abo Bakr'), ('Anna', 'Fajnorova'), ('Ribana', 'Roth'), ('Olivia', 'Horn'), ('Britt', 'Schreuder'), ('Alejandra', 'Gil'), ('Miriam', 'Kolodziejova'), ('Vanja', 'Klaric'), ('Kateryna', 'Karpiuk'), ('Jelena', 'Stojanovic'), ('Tamachan', 'Momkoonthod'), ('Mathilde', 'Devits'), ('Dessislava', 'Zlateva'), ('Vendula', 'Zovincova'), ('Natalia', 'Vovk'), ('Sarai Delfina', 'Monarrez Yesaki'), ('Margot', 'Yerolymos'), ('Yixuan', 'Li'), ('Chiara', 'De Vito'), ('Helen', 'Ploskina'), ('Gabriela', 'Ferreira Sanabria'), ('Gabriela Andrea', 'Knutson'), ('Nastya', 'Gordeeva'), ('Daniela', 'Diez'), ('Anabel', 'Martinovic'), ('Arina', 'Umanskaya'), ('Veronika', 'Kudermetova'), ('Jessica', 'Pieri'), ('Dalila', 'Spiteri'), ('Andra Maria', 'Nitescu'), ('Elzbieta', 'Iwaniuk'), ('Maddie', 'Antoun'), ('Jennifer', 'Jussi'), ('Ana Carolina Caiuby', 'Mattos'), ('Defne', 'Ozerden'), ('Karolina', 'Porubska'), ('Anastasia', 'Shaulskaya'), ('Maria Jose', 'Pintos'), ('Martha', 'Matoula'), ('Erika', 'Drozd Pereira'), ('Melanie', 'Kovacic'), ('Nathalia', 'Naomy Sato'), ('Moulika', 'Ram'), ('Brianna', 'Thompson'), ('Micheline', 'Aubuchon'), ('Tatum', 'Prudhomme'), ('Anastasiya', 'Fedoryshyn'), ('Qi Li', 'Ma'), ('Aleksandra', 'Stosic'), ('Sara', 'Amiri'), ('Sol Hee', 'Sim'), ('Tanja', 'Gligoric'), ('Yulieth Eliana', 'Blanco Molina'), ('Gulchekhra', 'Muhammadsidikova'), ('Julia', 'Mikulski'), ('Ksenia', 'Tortsikava'), ('Lisa Marie', 'Rioux'), ('Laura', 'Tinello'), ('Margarida', 'Abreu'), ('Kateryna', 'Baranivska'), ('Ilayda', 'Yondem'), ('Zina', 'Mehikic'), ('Ivana', 'Jorovic'), ('Maftunabonu', 'Saidova'), ('Patricia', 'Delicado Orihuela'), ('Anna', 'Pavlova'), ('Devanshi G', 'Bhimjiyani'), ('Daniela', 'Ruiz'), ('Fanny', 'Ostlund'), ('Ainhoa', 'Ramos'), ('Talya', 'Zandberg'), ('Maria', 'Smith'), ('Valeriya', 'Urzhumova'), ('Sabrina', 'Rittberger'), ('Liisa', 'Pajumets'), ('Odile', 'Maesfranckx'), ('Nupur', 'Umashankar'), ('Vinja', 'Lehmann'), ('Darya', 'Kasatkina'), ('Maria Elena', 'Medina Betancourt'), ('Rafaella', 'Sampaio'), ('Candice', 'Paya'), ('Katerina', 'Valos'), ('Lara', 'Souza Soares'), ('Rui Jie', 'Jiang'), ('Olivia', 'Tjandramulia'), ('Melanie Azucena', 'Millan Acosta'), ('Irem Talya', 'Koken'), ('Arina', 'Kuznetsova'), ('Aliki', 'Kapella'), ('Daniela', 'Kabakova'), ('Valeria', 'Mishina'), ('Agustina', 'Santamaria Teixeira'), ('Merve', 'Gulten'), ('Antonina', 'Lysakova'), ('Yuchia', 'Chen'), ('Danielle', 'McIntyre'), ('Valentina', 'Vargas'), ('Lena', 'Reichel'), ('Maho', 'Hatta'), ('Katarina', 'Weymouth'), ('Valentina', 'Todeschin'), ('Lina', 'Grabow'), ('Lorena', 'Madahuar'), ('Isabella', 'Calves'), ('Zaina', 'Sufi'), ('Eugenia', 'Todaro'), ('Liliya', 'Izmaylova'), ('May', 'Wanvisa Thurakitseree'), ('Milka', 'Genkova'), ('Meredith', 'Xepoleas'), ('Lisa', 'Ponomar'), ('Kennedy', 'Shaffer'), ('Lotte', 'Van Leeuwen'), ('Anastasia', 'Goncharova'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Ginevra', 'Chiara'), ('Pauline', 'Van Herck'), ('Alexsandra', 'Zhazhelo'), ('Carolyn', 'Xie'), ('Mercedes', 'Hammond'), ('Arezo', 'Ghannadan'), ('Thanyathorn', 'Putthuan'), ('Manuela Luz', 'Molesini'), ('Anna', 'Bondar'), ('Simona', 'Heinova'), ('Sophie', 'Chang'), ('Adela', 'Heinova'), ('Katie', 'Poluta'), ('Silvia', 'Mattiolo'), ('Maria Victoria', 'Valle Zimmernann'), ('Ines', 'Murta'), ('Milka Emilia', 'Pasanen'), ('Jacqueline', 'Pelletier'), ('Mathilde', 'Armitano'), ('Ekaterina', 'Alekseenko'), ('Jessica', 'Failla'), ('Martina', 'Okalova'), ('Darta Elizabete', 'Emulina'), ('Sena', 'Suswam'), ('Maria', 'Marfutina'), ('Kylie', 'Wilcox'), ('Melissa', 'Arnoldi'), ('Edith Ayelen', 'Monzon'), ('Deria', 'Nur Haliza'), ('Jelena', 'Ostapenko'), ('Barbara', 'Choon'), ('Lizaveta', 'Hancharova'), ('Patricia', 'Panta'), ('Meriam', 'Rhallab'), ('Zuzanna', 'Szuszkiewicz'), ('Madalina', 'Grigoriu'), ('Marie', 'Norris'), ('Gulnara', 'Axmedova'), ('Natalie', 'Kallmunzerova'), ('Masa', 'Antonijevic'), ('Marina', 'Darzyan'), ('Kiko', 'Nishizato'), ('Maximiliane', 'Wachall'), ('Radina', 'Dimitrova'), ('Maria', 'Tkachuk'), ('Ege', 'Tomey'), ('Natsumi', 'Koshino'), ('Camille', 'Mignac Haus'), ('Yelyzaveta', 'Pletnyeva'), ('Elizaveta', 'Voronova'), ('Sandra', 'Friedl'), ('Christiana', 'Mcdonald'), ('Sneha', 'Padamata'), ('Jocelijn', 'Cavero Roeper'), ('Ines Karmen', 'Vias'), ('Natasa', 'Kosanin'), ('Haruka', 'Sasaki'), ('Raluca Georgiana', 'Serban'), ('Bianca', 'Turati'), ('Anna', 'Turati'), ('Ceire', 'Mullins'), ('Imke', 'Schluenzen'), ('Yasmine', 'Ince'), ('Carla', 'Cerdan Vives'), ('Noelia', 'Lopez Lazaro'), ('Rebeca Ruth', 'Scurt'), ('Hana', 'Sisirak'), ('Joana', 'Brites'), ('Katharina', 'Hobgarski'), ('Vanessa', 'Timm'), ('Lorena', 'Clemente'), ('Ariana', 'Saki'), ('Isidora', 'Pejovic'), ('Mollie', 'Crouch'), ('Emma', 'Milicevic'), ('Leah', 'Luboldt'), ('Maria', 'Hamad'), ('Maria Giorgia', 'Farrugia Sacco'), ('Tami', 'Grende'), ('Diana', 'Krasnova'), ('Mariagrazia', 'Pedretti'), ('Mariya', 'Luss'), ('Cherise', 'Slocombe'), ('Francesca', 'Brancato'), ('Marta', 'Ruedas Burgos'), ('Emilie', 'Francati'), ('Sunae', 'Ji'), ('Melissa', 'Lord'), ('Eliza Maria', 'Dan'), ('Guzalhon', 'Nizamova'), ('Hassiba', 'Munoz Alcaman'), ('Olivia', 'Parson'), ('Machiko', 'Yahata'), ('Anastasia', 'Grosheva'), ('Chloe', 'Hule'), ('Joselyn Margarita', 'Treyes AlbarracN'), ('Katarina', 'Stresnakova'), ('Karola Patricia', 'Bejenaru'), ('Iryna', 'Shymanovich'), ('Vera', 'Aleshcheva'), ('Anna', 'Makhorkina'), ('Sasha', 'Alexander'), ('Mbolatiana', 'Randrianarisoa'), ('Sara', 'Orellana'), ('Veronica', 'Verzoletto'), ('Anna', 'Abualhaj'), ('Natalia', 'Ucros'), ('Florencia Sofia', 'Galdo'), ('Margaryta', 'Demchenko'), ('Anastasiya', 'Komardina'), ('Jessica', 'Golovin'), ('Lea', 'Gasparovic'), ('Anna', 'Popescu'), ('Raluca Adriana', 'Belehuz'), ('Ellie', 'Halbauer'), ('Anita', 'Perez Flor'), ('Nina', 'Holanova'), ('Milica', 'Cubranovic'), ('Sara', 'Grubac'), ('Petra', 'Melounova'), ('Alexandra', 'Borg'), ('Alessandra', 'Amodeo'), ('Camilla', 'Littlewood'), ('Julieta Lara', 'Estable'), ('Jil Belen', 'Teichmann'), ('Sarah', 'Adegoke'), ('Dorien', 'Cuypers'), ('Julie', 'Byrne'), ('Nana', 'Kanayama'), ('Yagmur', 'Akdemir'), ('Katerina', 'Stewart'), ('Viktoriia', 'Fedorova'), ('Silvia', 'Gualtieri'), ('Maria Juliana', 'Labrador Morales'), ('Lisa', 'Friess'), ('Patrycja', 'Polanska'), ('Polina', 'Chala'), ('Ana Lena', 'Toto'), ('Jia Qi', 'Kang'), ('Iman', 'Qureshi'), ('Isabella', 'Bizzo'), ('Mariela', 'Haug'), ('Verena', 'Meliss'), ('Tamar', 'Kutubidze'), ('Maria', 'Kompalka'), ('Alena', 'Weiss'), ('Francesca', 'Di Lorenzo'), ('Momoko', 'Sonoda'), ('Mia', 'Horvit'), ('Silvia', 'Chinellato'), ('Irene', 'Burillo Escorihuela'), ('Sara', 'Kelly'), ('Vera', 'Ploner'), ('Marta', 'Dyba'), ('Sophia', 'Chow'), ('Michalina', 'Jedrzejczak'), ('Aleksandra', 'Vostrikova'), ('Dominika', 'Haldinova'), ('Christina', 'Rosca'), ('Ya Ting', 'Chang'), ('Alejandra', 'Gutierrez'), ('Caroline', 'Lampl'), ('Paula', 'Del Cueto Castillo'), ('Arina', 'Nozdracheva'), ('Elena', 'Van Der Sypt'), ('Federica', 'Sema'), ('Svetlana', 'Klyuchnikova'), ('Sabrina', 'Rodriguez'), ('Gyselle Ximena', 'Daza'), ('Anna', 'Brogan'), ('Anamarija', 'Stevanovic'), ('Camila Andrea', 'Velasquez Moreno'), ('Kristina', 'Schmiedlova'), ('Mayu', 'Okawa'), ('Chloe', 'Hughes'), ('Nina', 'Khmelnitckaia'), ('Elina', 'Joronen'), ('Karina', 'Traxler'), ('Jovana', 'Peric'), ('Olesya', 'Nesterovich'), ('Luisa', 'Stefani'), ('Lior', 'Ifergan'), ('Lisa', 'Hofbauer'), ('Laura', 'Pennanen'), ('Chenchen', 'Feng'), ('Ayan', 'Broomfield'), ('Ana Maria', 'Carrion Rodriguez'), ('Rida', 'Khalid'), ('Arina', 'Beliaeva'), ('Greetje', 'Minnen'), ('Sara Maria', 'Farzat'), ('Elisabeth', 'Lyukshinova'), ('Mateya', 'Radisavljevic'), ('Fatima', 'Bizhukova'), ('Anastasiya', 'Smirnova'), ('Maria Virginia', 'Bosch'), ('Margarita', 'Shmeleva'), ('Maria', 'Silva'), ('Karla', 'Portalatin'), ('Sansriti', 'Ranjan'), ('Laetitia', 'Charbonnet'), ('Klara', 'Alenas'), ('Mei', 'Date'), ('Emily', 'Smith'), ('Natividad', 'Lopez Diaz'), ('Marlies', 'Steiner'), ('Mahrukh', 'Kokni'), ('Maria', 'Mukai'), ('Neharika', 'Rama'), ('Thisuri', 'Molligoda'), ('Mojca', 'Mejak'), ('Sae', 'Haraguchi'), ('Ting Ya', 'Hsu'), ('Dana', 'Kremer'), ('Aleksandra', 'Kulesza'), ('Siri', 'Victorsson'), ('Verena', 'Hofer'), ('Tiffany', 'Mylonas'), ('Natsuho', 'Arakawa'), ('Beatrice', 'Torelli'), ('Natalia', 'Jelinkova'), ('Emerald', 'Able'), ('Chloe Michele', 'Ouellet Pizer'), ('Mireia', 'Polo'), ('Polina', 'Radeva'), ('Laura', 'Falceto Font'), ('Veronika', 'Vlkovska'), ('Kei', 'Kato'), ('Natalia', 'Belova'), ('Claudia Paulina', 'Lopez'), ('Chaoyi', 'Chen'), ('Jasmine Amber', 'Asghar'), ('Roberta Maria', 'Naicu'), ('Pimpitcha', 'Jattavapornvanit'), ('Manca', 'Pislak'), ('Margot', 'Decker'), ('Harmony', 'Tan'), ('Holly', 'Hutchinson'), ('Zoe', 'Doronjski'), ('Anne Kathrin', 'Hierl'), ('Maram', 'Selim'), ('Sandra', 'Jamrichova'), ('Maria', 'Gutierrez Carrasco'), ('Angelica Maria', 'Ochoa Martinez'), ('Ema', 'Gil Pires'), ('Eleanna', 'Koukouvitaki'), ('Bianca', 'Monaco'), ('Anna', 'Dollar'), ('Guljan', 'Muhammetkuliyeva'), ('Jessica', 'Hinojosa Gomez'), ('Madison', 'Bourguignon'), ('Veronika', 'Gardazari'), ('Paula', 'Goetz'), ('Emilia', 'Occhipinti'), ('Luiza', 'Irismetova'), ('Pragya', 'Sinha'), ('Kateryna', 'Riabtseva'), ('Viktoriya', 'Gogol'), ('Alina', 'Mekhtieva'), ('Riya', 'Bhatia'), ('Avital', 'Vaysbuch'), ('Marie', 'Leduc'), ('Vinciane', 'Remy'), ('Sara', 'Amini'), ('Tulin', 'Dagilmisgul'), ('Marialuisa', 'Zirilli'), ('Myriam', 'Enmer'), ('Diana', 'Demidova'), ('Victoria', 'Naef'), ('Luca', 'Nagymihaly'), ('Yifei', 'Yang'), ('Laura D', 'Arciniegas'), ('Maria', 'Tavares'), ('Margaux', 'Bovy'), ('Maria', 'Chun'), ('Dayana', 'Sedova'), ('Claudia', 'Papi'), ('Kyla', 'Jarrar'), ('Renata', 'Zarazua'), ('Naima', 'Karamoko'), ('Andrea', 'Tomassone'), ('Lesedi Sheya', 'Jacobs'), ('Giuliana', 'Bestetti'), ('Yuna', 'Ito'), ('Julie', 'Renson Miquel'), ('Su Yeon', 'Chun'), ('Iulia', 'Savescu'), ('Claire Yoonkee Choi', 'Spackman'), ('Emily', 'Arbuthnott'), ('Rouxanne', 'Janse Van Rensburg'), ('Sabrina', 'Faybyshev'), ('Rebecca', 'Weissmann'), ('Antonella', 'Martinetti'), ('Lusine', 'Avanesyan'), ('Irys', 'Ekani'), ('Alexandra', 'Heczey'), ('Sophia', 'Kryloff'), ('Mariana', 'Alvarez'), ('Lisa', 'Matviyenko'), ('Valentina', 'Kulikova'), ('Aleksandra', 'Buczynska'), ('Sofia Daniela', 'Duran Vinueza'), ('Mary Victoria', 'Cancini'), ('Fernanda', 'Contreras Gomez'), ('Ksenia', 'Pushkareva'), ('Claudia', 'Oravcova'), ('Paula', 'Comella Aguilo'), ('Tiffany', 'Huber'), ('Seung Hee', 'Han'), ('Alexandra', 'Neamtu'), ('Janine', 'Hemmes'), ('Kate', 'Cusick'), ('Kiana', 'Marshall'), ('Mai', 'Takano'), ('Kimberly', 'Mpukusa'), ('Naomi', 'Osaka'), ('Sabina', 'Latypova'), ('Jinxuan', 'Wang'), ('Andjela', 'Reljic'), ('Julia', 'Kapitanova'), ('Gabriela', 'Tenorio'), ('Carol', 'Lombardino Petrocinio'), ('Anna', 'Ozerova'), ('Luana', 'Daus'), ('Eunji', 'Lim'), ('Salima', 'Fendri'), ('Alisa', 'Rudenko'), ('Rebecca', 'Gustafson'), ('Elise', 'Van Heuvelen'), ('Rita', 'Atik'), ('Alejandra Josefina', 'Benavides Lopez'), ('Elina', 'Nepliy'), ('Patricia', 'Boentgen'), ('Gaia', 'Squarcialupi'), ('Camila', 'Tumosa'), ('Ji', 'Lee'), ('Carlotta', 'Cima'), ('Luciene', 'Benitez Boiero'), ('Mayar', 'Eltony'), ('Ananya', 'Jha'), ('Athalis Dimitra', 'Kratouni'), ('Daniella', 'Moreno Kaste'), ('Aoi', 'Ishino'), ('Meghan', 'Kelley'), ('Shreya', 'Swarup'), ('Mariia', 'Antoniuk'), ('Sarvinoz', 'Saidhujaeva'), ('Bess', 'Waldram'), ('Pragati', 'Natraj'), ('Oktavia', 'Ayu Dewi'), ('Geraldine', 'Ang'), ('Reshma', 'Ganapathy'), ('Michelle Li Sha', 'Khoo'), ('Karolayne', 'Alexandre Da Rosa'), ('Melissa', 'Sehovic'), ('Ida Seljevoll', 'Skancke'), ('Aline', 'Thommen'), ('Ekaterina', 'Manekina'), ('Nicole', 'Baloescu'), ('Anna', 'Collins'), ('Arevik', 'Tumanyan'), ('Sandra', 'Samir'), ('Mary Catherine', 'Haffey'), ('Greta', 'Ceccomori'), ('Charlotte', 'Wellem'), ('Daniella', 'Roldan'), ('Jahana', 'Bayramova'), ('Monica', 'Malinen'), ('Elena Gabriela', 'Ruse'), ('Aliona', 'Bolsova'), ('Mariana', 'Otero'), ('Erika', 'Hendsel'), ('Lili', 'Fekete'), ('Freya', 'Christie'), ('Ni Luh Sintha', 'Eka'), ('Vivian', 'Zlatanova'), ('Maryna', 'Veksler'), ('Alisa', 'Martinov'), ('Alice', 'Rame'), ('Oyku', 'Pekgenc'), ('Milana', 'Imamniyazova'), ('Kajsa', 'Rinaldo Persson'), ('Suyeon', 'Choi'), ('Vanessa', 'Valdez Casas'), ('Jemileth', 'Aguilar'), ('Jin Sil', 'Park'), ('Rebeca', 'Reyes'), ('Paula', 'Badosa'), ('Johanna', 'Silva'), ('Federica', 'Mordegan'), ('Victoria Ariadna', 'Beccio'), ('Aulia', 'Nur Srikandhi'), ('Tatijana', 'Sheikhan'), ('Nonna', 'Kurginyan'), ('Nazrin', 'Jafarova'), ('Maddie', 'Pothoff'), ('Maricielo', 'Torres Chihuan'), ('Plobrung', 'Plipuech'), ('Anna Lena', 'Linden'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Mone'), ('Ari', 'Matsumoto'), ('Xinyu', 'Gao'), ('Hera', 'Brynjarsdottir'), ('Pamela', 'Boyanov'), ('Valerie', 'Quiceno'), ('Anupreet', 'Bedi'), ('Holly', 'Horsfall'), ('Brienne', 'Minor'), ('Anna', 'Bogoslavets'), ('Lauren', 'Deegan'), ('Constanze', 'Stepan'), ('Assel', 'Jumamukhambetova'), ('Kateryna', 'Sliusar'), ('Qiu Yu', 'Ye'), ('Mila', 'Masic'), ('Tamara', 'Culibrk'), ('Emma', 'Buczko'), ('Magali', 'Kempen'), ('Anastasiya', 'Shoshyna'), ('Florencia', 'Garcia Vazquez'), ('Margita', 'Sunjic'), ('Anna', 'Iakovleva'), ('Srishti', 'Slaria'), ('Miljana', 'Ristic'), ('Kaitlyn', 'Mccarthy'), ('Martina', 'Capurro Taborda'), ('Candela', 'Bugnon'), ('Ayano', 'Minami'), ('Anna', 'Speri'), ('Ekaterina', 'Alay'), ('Nikoleta', 'Bulatovic'), ('Emilija', 'Dancetovic'), ('Minori', 'Natsuka'), ('Nadja', 'Manjon Mihalic'), ('Kristina', 'Parviainen'), ('Camilla', 'Abbate'), ('Sabina', 'Machalova'), ('Giulia', 'Sartori'), ('Emma', 'Roenholt'), ('Alexandra Daniela', 'Nicoara'), ('Paulina', 'Rotaeche'), ('Lana', 'Slavica'), ('Celia', 'Cervino Ruiz'), ('Karina', 'Kalkenova'), ('Magdalena', 'Frech'), ('Natalia', 'Amineva'), ('Paulina', 'Jastrzebska'), ('Lize Elfrida', 'Moolman'), ('Gabriella', 'Pollner'), ('Sabrina', 'Barkdull'), ('Jamie', 'Jillissen'), ('Naiktha', 'Bains'), ('Sara', 'Daavettila'), ('Julia', 'Fisch'), ('Klaudia', 'Wira'), ('Amalia', 'Beksi'), ('Anastasia', 'Rentouli'), ('Anna', 'Pribylova'), ('Mariana', 'Galben'), ('Guzal', 'Yusupova'), ('Lizette', 'Cabrera'), ('Jue', 'Wang'), ('Karolina', 'Novotna'), ('Vlada', 'Chernikova'), ('Ndindi Inziani', 'Mwaruka'), ('Katarzyna', 'Wysoczanska'), ('Keyla Manuela', 'Cifuentes Monsalve'), ('Tamara', 'Zidansek'), ('Tamara', 'Teufl'), ('Ana', 'Konjuh'), ('Valeria', 'Mantilla'), ('Alena', 'Mashtakova'), ('Lidija', 'Samardzic'), ('Ruken Dilara', 'Kizilay'), ('Kindha', 'Nacef'), ('Jule', 'Salzburg'), ('Shiori', 'Fukuda'), ('Eva Pauline', 'Payet'), ('Bhargavi', 'Nitin Mangudkar'), ('Catalina', 'Obrecht'), ('Cristina', 'Bucsa'), ('Mariam', 'Bolkvadze'), ('Andrada Ioana', 'Surdeanu'), ('Christina', 'Wolfgruber'), ('Habiba', 'Lasheen'), ('Karen', 'Alvarez'), ('Oyku', 'Boz'), ('En Pei', 'Huang'), ('Lejla', 'Colic'), ('Gabriela', 'Feitosa Rezende'), ('Petra', 'Granic'), ('Diana', 'Valverde'), ('Lucie', 'Prochazkova'), ('Zhanlan', 'Wei'), ('Aleyna', 'Buyun'), ('Alissa', 'Selivenko'), ('Valentina', 'Sottile'), ('Yuki', 'Ukai'), ('Mbalia', 'Bangoura'), ('Anastasia', 'Zarytska'), ('Julia', 'Payola'), ('Ghada', 'Alajeely'), ('Fanny', 'Bengtsson'), ('Apolline', 'Rassat'), ('Ekaterina', 'Zaitseva'), ('Simone', 'Alipieva'), ('Shilin', 'Xu'), ('Maia', 'Lumsden'), ('Adriana', 'Sosnovschi'), ('Yasmine', 'Ben Abdallah'), ('Alba', 'Cortina Pou'), ('Megan', 'Rogers'), ('Tereza', 'Polanska'), ('Rosabianca', 'Satta'), ('Phillis', 'Vanenburg'), ('Wijitbanjong', 'Pakkaro'), ('Sena', 'Sahin'), ('Martina', 'Pratesi'), ('Jiaqi', 'Yang'), ('Tatyana', 'Vialichka'), ('Zhangwenli', 'Yan'), ('Teresa', 'Zorrilla Medrano'), ('Daniela', 'Obando'), ('Nurin Nabilah', 'Roslan'), ('Maddison', 'Inglis'), ('Camila', 'Vargas Gomez'), ('Shuo', 'Feng'), ('Barbara', 'Belis'), ('Rikeetha', 'Pereira'), ('Pei Hsuan', 'Kuo'), ('Hristina', 'Cvetkovic'), ('Shohsiyat', 'Tuhtamatova'), ('Alessandra', 'Simonelli'), ('Do Hee', 'Bae'), ('Javiera', 'Alvarez'), ('Birte', 'Langenstein'), ('Margarita', 'Markaki'), ('Farah', 'Yasser Abd El Wahab'), ('Daniela', 'Morales Beckmann'), ('Valentina', 'Mokrova'), ('Shiran', 'Arol Wiegand'), ('Lina', 'Hohnhold'), ('Irene', 'Nunez Xifre'), ('Bermet', 'Talantkyzy'), ('Julia', 'Keranovic'), ('Marie', 'Van Aelst'), ('Akshara', 'Iska'), ('Barbora', 'Palcatova'), ('Saya', 'Usui'), ('Lila', 'Humaloja'), ('Sofya', 'Gulnova'), ('Yulia', 'Bryzgalova'), ('Juliana', 'Valero'), ('Raquel', 'Pedraza'), ('Radmila', 'Djordjevic'), ('Xeniya', 'Prokopchuk'), ('Dolores', 'Molina Portela'), ('Emma Christine', 'Higuchi'), ('Zala', 'Dovnik'), ('Marjorie', 'Antohi'), ('Ambre', 'Boccard'), ('Tamara', 'Kupkova'), ('Michelle', 'Fux'), ('Kaylah', 'Mcphee'), ('Constanza', 'Gorches'), ('Sara', 'Tomic'), ('Ksenia', 'Kuznetsova'), ('Alica', 'Rusova'), ('Sofia', 'Ragona'), ('Yana', 'Grechkina'), ('Iulia Maria', 'Ivascu'), ('Laura', 'Marti'), ('Aksiniya', 'Miakota'), ('Ena', 'Ovcina'), ('Seon Young', 'Um'), ('Aloise', 'Dorey'), ('Hana', 'Mraz'), ('Ekaterina', 'Grinevich'), ('Lucia', 'Montano'), ('Girisha', 'Arora'), ('Laura', 'Rizzi'), ('Selyn', 'Ozgur'), ('Maria Paula', 'Torres'), ('Elin', 'Hellberg'), ('Ena', 'Shibahara'), ('Abinikka', 'Renganathan'), ('Dominika', 'Hrabalova'), ('Ana Luiza', 'Farinha'), ('Ioana', 'Gheorghita'), ('Yelyzaveta', 'Aksonova'), ('Elena', 'Belenova'), ('Ghita', 'Benhadi'), ('Polina', 'Novikova'), ('Ioana Diana', 'Pietroiu'), ('Anastasija', 'Cobanovic'), ('Julia', 'Tozzi'), ('Yi', 'Yuan'), ('Talya', 'Onyer'), ('Rifanty', 'Kahfiani'), ('Katharina', 'Gerlach'), ('Anna', 'Kraus'), ('Karen Sofia', 'Romero'), ('Jasmina', 'Samardzic'), ('Imren', 'Kurt'), ('Tereza', 'Kolarova'), ('Yessmine', 'Zhir'), ('Anne Marie', 'Medcalf'), ('Katerina', 'Romanyuta'), ('Taylor', 'Russo'), ('Nina', 'Kruijer'), ('Bettina', 'Kuznini'), ('Souha', 'Chibout'), ('Hanna', 'Chang'), ('Viktoriya', 'Zheleva'), ('Makenna', 'Jones'), ('Serena', 'Nash'), ('Melany Solange', 'Krywoj'), ('Gyulnara', 'Nazarova'), ('Zeynep', 'Ates'), ('Seriana', 'Saltzen'), ('Jeannine', 'Hopfgartner'), ('Katka', 'Stach'), ('Karolina', 'Silwanowicz'), ('Jelena', 'Polovina'), ('Diana', 'Monsalve'), ('Laura', 'Maluniakova'), ('Buse', 'Cehreli'), ('Anne Sophie', 'Courteau'), ('Manuela', 'Huckfeldt'), ('Gabriella', 'Taylor'), ('Yuika', 'Sano'), ('Ani', 'Safaryan'), ('Yus Syazlin Nabila Binti', 'Yusri'), ('Cristiana Miruna', 'Tudor'), ('Duda', 'Ewa'), ('Sofia', 'Sualehe'), ('Bianca', 'Bostrom'), ('Aleksandra', 'Stakhanova'), ('Angelina', 'Skidanova'), ('Florence', 'Abbott'), ('Bar', 'Shimoni'), ('Alissia', 'Gleixner'), ('Agostina', 'Zamprogno'), ('Elizaveta', 'Sokolova'), ('Erica', 'Oosterhout'), ('Mayu', 'Iwai'), ('Rosario', 'Perez Salinas'), ('Jade', 'Rafalovicz'), ('Nandini', 'Gupta'), ('Ramu', 'Ueda'), ('Natalya', 'Malenko'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Nina', 'Marjanovic'), ('Jada', 'Hart'), ('Alisa', 'Solovieva'), ('Nida', 'Shahid Kamal'), ('Jente', 'Smit'), ('Pragati', 'Solankar'), ('Julia', 'Rosenquist'), ('Mariana', 'Oliveira'), ('Allison', 'Quammen'), ('Rafaella', 'Baquerizo'), ('Saranya', 'Nagpal'), ('Linnea', 'Bjork'), ('Alma', 'Garcia Valle'), ('Hanna', 'Wikberg'), ('Camila', 'Recalde'), ('Thanushree', 'Vale'), ('Renee', 'Ren'), ('Ylona Georgiana', 'Ghioroaie'), ('Karolina', 'Benackova'), ('Ha Eun', 'Lim'), ('Beatrice', 'Reda'), ('Barbora', 'Miklova'), ('Sandra', 'Anglesjo'), ('Zeynep', 'Saricam'), ('Valeria', 'Gorlats'), ('Angela', 'Kulikov'), ('Elisa', 'Elhadj'), ('Ghita', 'Idrissi Kaitouni'), ('Kimberley', 'Van Rijn'), ('Zina', 'Graves'), ('Rafaela', 'Rodrigues Dos Santos'), ('Josephine', 'Strandfors'), ('Sonia', 'Grzywocz'), ('Mayuka', 'Aikawa'), ('Caroline', 'Sautter'), ('Patricia', 'Eftenoiu'), ('Ekaterina', 'Kunina'), ('Tatiana', 'Eftenoiu'), ('Alessia', 'Dario'), ('Ana', 'Royo Marco'), ('Satori', 'Seki'), ('Angelica E', 'Karlsson Hantzis'), ('Alla', 'Safolova'), ('Nikolina', 'Jovic'), ('Grace', 'Janis'), ('Roos', 'Nederstigt'), ('Andrea', 'Nikic'), ('Elizabeth', 'Danailova'), ('Lingwei', 'Kong'), ('Sasa', 'Klanecek'), ('Sandra', 'Ortevall'), ('Darina', 'Mueller'), ('Anastasiya', 'Klymenko'), ('Vladislava', 'Kutuzova'), ('Alexandra', 'Lazarova'), ('Yulia', 'Sokolovskaya'), ('Haluka', 'Higurashi'), ('Ruth', 'Artaza Martin'), ('Sem', 'Wensveen'), ('Ayano', 'Shimizu'), ('Oliwia', 'Szymczuch'), ('Rita', 'Pedroso'), ('Anastasiya', 'Sukhorukova'), ('Jesica', 'Audina'), ('Zhuo Ma', 'Ge Rong'), ('Stephanie', 'Nemtsova'), ('Aleksandra', 'Draganova'), ('Andrea', 'Beneroso Lacaba'), ('Jone', 'Kruger'), ('Federica', 'Pulcino'), ('Mihaela', 'Ghioca'), ('Lusine', 'Chobanyan'), ('Marleen', 'Tilgner'), ('Katarina', 'Jokic'), ('Jessie', 'Aney'), ('Oana', 'Gavrila'), ('Emmanuelle', 'Salas'), ('Nadine', 'De Villiers'), ('Ana', 'Akhalkatsi'), ('Alexandra', 'Shchipakina'), ('Kseniya', 'Savenkava'), ('Amira', 'Handous'), ('Aleksandra', 'Pospelova'), ('Anastasiya', 'Mulder Syrovatskaia'), ('Diana', 'Chehoudi'), ('Lamis', 'Alhussein Abdel Aziz'), ('Lamyae', 'Dad'), ('Petia', 'Arshinkova'), ('Polina', 'Miroshnichenko'), ('Marina', 'Ivanova'), ('Sofie', 'Woon'), ('Ekaterina', 'Tretyak'), ('Celine', 'Schepers'), ('Andrina', 'Peer'), ('Alessandra', 'Mecchi De Oliveira Silva'), ('Shura', 'Poppe'), ('Nicole', 'Frenkel'), ('Juliet Jia Wen', 'Zhang'), ('Kimberly', 'Birrell'), ('Shir', 'Azran'), ('Janja', 'Kovacevic'), ('Erem', 'Akyurt'), ('Darya', 'Startseva'), ('Katarina', 'Kozarov'), ('Yasmine', 'Ansari'), ('Ema', 'Mulalic'), ('Aleksandra', 'Rojek'), ('Zi Yi', 'Wang'), ('Anna', 'Turco'), ('Amanda', 'Zapata'), ('Aryna', 'Sabalenka'), ('Emma', 'Alos Chiquillo'), ('Adna', 'Sofradzija'), ('Susanne', 'Boyden'), ('Reagan', 'Collins'), ('Naomi', 'Jackson'), ('Laura', 'Garcia Martinez'), ('Vlada', 'Filinskaya'), ('Daria', 'Kruzhkova'), ('Nanako', 'Ono'), ('Arisa', 'Abe'), ('Alejandra', 'Tamayo Gomez'), ('Anna', 'Ustinoff'), ('Priscilla', 'Hon'), ('Viktoria', 'Kuzmova'), ('Ines', 'Mesquita'), ('Tornado Alicia', 'Black'), ('Esther', 'Thebault'), ('Ceylin', 'Gunay'), ('Ahlam', 'Shawkat'), ('Arianne', 'De Winter'), ('Deniz', 'Paykoc'), ('Judith Maria', 'Barrios Rolon'), ('Lucrezia', 'Stefanini'), ('Beatriz Rodrigues', 'Bento'), ('Francisca', 'Vasquez Pongruber'), ('Xiuyuan', 'Li'), ('Juanita', 'Diaz'), ('Dorota', 'Szczygielska'), ('Anamarija', 'Zokic'), ('Maria', 'Suarez Alonso'), ('Anna', 'Fischer'), ('May', 'Kimhi'), ('Hanyu', 'Guo'), ('Juliette', 'Bastin'), ('Askin', 'Arslan'), ('Ghita', 'Lahjouji'), ('Nina', 'Nikitovic'), ('Helen Abigail', 'Altick'), ('Tatiana', 'Papakanellou'), ('Chihiro', 'Muramatsu'), ('Teodora Elena', 'Radu'), ('Marta', 'Canas Alvarez'), ('Malalasoa Jackinah', 'Rakotohasy'), ('Andrea', 'Garcia Fernandez'), ('Gloria', 'Ceschi'), ('Natsuki', 'Asakura'), ('Anna', 'Gabric'), ('Swara', 'Kulkarni'), ('Anjana', 'Suresh'), ('Lucia', 'Diaz Saez'), ('Michelle', 'Pits'), ('Gaya', 'Solomon'), ('Eri', 'Shimizu'), ('Belen', 'Calero Vega'), ('Nora', 'Szoke'), ('Saadia', 'Belhadj'), ('Linnea', 'Malmqvist'), ('Setia Indri', 'Harti'), ('Nicoli', 'Attili Pereira'), ('Tereza', 'Mihalikova'), ('Anastassia', 'Pantelic'), ('Eliska', 'Kropackova'), ('Qianting', 'Yan'), ('Lijia', 'Huang'), ('Lavanya', 'Khanuja'), ('Jaqueline Adina', 'Cristian'), ('Marija', 'Curnic'), ('Leyla', 'Azaeva'), ('Dafni', 'Demenega'), ('Sarah', 'Stoerbrauck'), ('Karine', 'Sarkisova'), ('Hernanda Melia', 'Cholis'), ('Florencia', 'Rossi'), ('Ksenia', 'Stashenkova'), ('Linda', 'Sevcikova'), ('Junjuti', 'Dorkkulab'), ('Elena', 'Antonova'), ('Marina', 'Antonova'), ('Sara', 'Kostic'), ('Elisa', 'Cordovani'), ('Katheryne Stephanie', 'Valencia Perez'), ('Brooke', 'Lashway'), ('Enni', 'Zander'), ('Cindy', 'Oest'), ('Ingrid', 'Neel'), ('Karman', 'Thandi'), ('Valentina', 'Mariotto'), ('Marija', 'Venta'), ('Tamijean', 'Fumagalli'), ('Faiza Munabari', 'Saskia'), ('Hana', 'Mortagy'), ('Arrum', 'Damarsari'), ('Melissa Ishuan', 'Ifidzhen'), ('Anna Maria', 'Kalavska'), ('Phonexay', 'Chitdara'), ('Melanie', 'Dveksler Celin'), ('Elisa', 'Lauri'), ('Ida', 'Jarlskog'), ('Hoyeon', 'Nor'), ('Michelle', 'Roth'), ('Gabriela', 'Yakalieva'), ('Jennifer', 'Ruetten'), ('Danna Valentina', 'Galeano'), ('Tereza', 'Koplova'), ('Sophia', 'Intert'), ('Anastasia', 'Khlestova'), ('Denise', 'Buberl'), ('Theodora', 'Soldatou'), ('Soha', 'Sadiq'), ('Bianca Elena', 'Mihailescu'), ('Katarzyna', 'Skrzypczynska'), ('Joanna', 'Skrzypczynska'), ('Elianne Magali', 'Matto Chaparro'), ('Costanza', 'Pera'), ('Cindy', 'Castille'), ('Angella', 'Raman'), ('Daria', 'Ponomareva'), ('Katerina', 'Brozova'), ('Victoria', 'Dimuzio'), ('Diana', 'Dehterevich'), ('Susan', 'Bandecchi'), ('Seoin', 'Choi'), ('Ana Maria Andreea', 'Ileana'), ('Shira', 'Goldberger'), ('Andjela', 'Sebrek'), ('Mia', 'Golubovic'), ('Maria Elena', 'Rojas Loaiza'), ('Anamarija', 'Spoljaric'), ('Alexa', 'Bortles'), ('Sofia', 'Booth'), ('Zaineb', 'El Houari'), ('Brenda Sarahi', 'Baez'), ('Jacara', 'Gillis'), ('Junsai', 'Wang'), ('Joana', 'Ferreira'), ('Hjordis Rosa', 'Gudmundsdottir'), ('Arlinda', 'Herforth'), ('Alexa', 'Graham'), ('Parris', 'Todd'), ('Olga', 'Esteve Mendez'), ('Giovanna', 'Ferreira Caputo'), ('Imogen', 'Magner'), ('Chiara', 'Pusceddu'), ('Nataliya', 'Pogribnyak'), ('Hada', 'Chang'), ('Areej', 'Fareh'), ('Andrea', 'Perez Lopez'), ('Lena', 'Babunski'), ('Giorgia', 'Testa'), ('Ioana', 'Toanchina'), ('Yuenu', 'Li'), ('Julia', 'Perez Wienese'), ('Fabiola Estefania', 'Cardenas Gutierrez'), ('Jana', 'Kuzovkova'), ('Lucia', 'Gutierrez'), ('Anna', 'Ramos Vinolas'), ('Aspasia', 'Avgeri'), ('Jaipet', 'Anontaweesil'), ('Sandra', 'Maletin'), ('Lenka', 'Antonijevic'), ('Marina', 'Alcaide Bakari'), ('Olla', 'Mourad'), ('Jovana', 'Knezevic'), ('Nina', 'Van Oost'), ('Hana', 'Sakamoto'), ('Adeliya', 'Zabirova'), ('Alexandra', 'Champion'), ('Medea', 'Petriashvili'), ('Rebecca', 'Van Orshaegen'), ('Marie', 'Bouzkova'), ('Sonja', 'Krtenova'), ('Vicky', 'Geurinckx'), ('Maria', 'Shishkina'), ('Raveena', 'Kingsley'), ('Chiraz', 'Bechri'), ('Andrea', 'Solano Jimenez'), ('Sehzade', 'Gur'), ('Marina', 'Olalla Abajo'), ('Mariya', 'Koloney'), ('Jessica', 'Bruehwiler'), ('Estela', 'Perez Somarriba'), ('Costanza', 'Federici'), ('Ksenia', 'Slavina'), ('Lara Isis', 'Teodoro De Oliveira'), ('Andreea', 'Cula'), ('Victoria', 'Slavina'), ('Bunyawi', 'Thamchaiwat'), ('Mirjam', 'Bjorklund'), ('Alba', 'Conejero Gutierrez'), ('Laia', 'Conejero Gutierrez'), ('Theo', 'Gravouil'), ('Carla', 'Soto Villalobos'), ('Veronika', 'Bencova'), ('Pancha', 'Aguilar Sepulveda Francisca Gisella'), ('Annabelle', 'Hageman'), ('Valerie Ann', 'Valencia Castillo'), ('Rosie', 'Cheng'), ('Caroline', 'Ilowska'), ('Sasha', 'Bollweg'), ('Milena', 'Achlamov'), ('Elena Madalina', 'Capraru'), ('Nicole', 'Gadient'), ('Alexandra', 'Filip'), ('Yasmyn', 'Gulman'), ('Sofia Haydee', 'Nicolini'), ('Maxine', 'Palmen'), ('Paiton', 'Wagner'), ('Eleni', 'Christofi'), ('Alexis', 'Nelson'), ('Alaina', 'Miller'), ('Ayaka', 'Narita'), ('Maria', 'Toran Ribes'), ('Nethmi Himashi', 'Waduge'), ('Natsuko', 'Yamada'), ('Giulia', 'Cereghetti'), ('Eugenia', 'Ganga'), ('Alexia', 'Coutino Castillo'), ('Maria', 'Figueroa'), ('Nina', 'Furmaniak'), ('Dalma', 'Galfi'), ('Ana Maria', 'Gavrilovici'), ('Eduarda', 'Ferreira'), ('Alice', 'Gillan'), ('Stefy Lorena', 'Varon Diaz'), ('Cassie', 'Chung'), ('Elvira', 'Edstrom'), ('Marina', 'Rodriguez Garcia'), ('Vivien', 'Teglas'), ('Arina', 'Petrova'), ('Ojasvinee', 'Singh'), ('Qianxin', 'Kong'), ('Barbora', 'Slucikova'), ('Daryna', 'Gukasyan'), ('Gabija', 'Druteikaite'), ('Martina', 'Zerulo'), ('Misaki', 'Matsuda'), ('Gozal', 'Ainitdinova'), ('Paola Valentina', 'Quintana Rojas'), ('Momoko', 'Kobori'), ('Lena', 'Rueffer'), ('Khim', 'Iglupas'), ('Itzi Janikuari', 'Torres Millan'), ('Valeriya', 'Pogrebnyak'), ('Sabina', 'Safarova'), ('Julia', 'Herlogsson'), ('Chiara', 'Lommer'), ('Nami', 'Otsuka'), ('Rosellina', 'Masala'), ('Sarah', 'Fernandez Ruiz'), ('Yu', 'Morishima'), ('Ju Eun', 'Heo'), ('Dalila', 'Pejkovic'), ('Eden', 'Richardson'), ('Kennedy', 'Wicker'), ('Ghazal', 'Pakbaten'), ('Dewi', 'Dijkman'), ('Elisa', 'Gugnali'), ('Serena', 'Gugnali'), ('Laura Mariana', 'Montalvo'), ('Caroline', 'Dolehide'), ('Nadia', 'Rawson'), ('Anastasia', 'Blyukhterova'), ('Ganeshi', 'Aniya'), ('Ayaka', 'Ozeki'), ('Laura', 'Cabrera Lafuente'), ('Anna', 'Blinkova'), ('Akari', 'Kakizawa'), ('Jana', 'Jais'), ('Shahar', 'Biran'), ('Silvija', 'Perosa'), ('Kumi', 'So'), ('Rimi', 'So'), ('Victoria', 'Wuilloud'), ('Nato', 'Shaburishvili'), ('Martina', 'Lo Pumo'), ('Clara Patricia', 'Rizea'), ('Marta Huqi', 'Gonzalez Encinas'), ('Milagros', 'Montero'), ('Jovana', 'Bogicevic'), ('Virginia', 'Ciccone'), ('Moni', 'Potrc'), ('Izumi', 'Asano'), ('Yuliana', 'Monroy'), ('Lourdes', 'Ramalle'), ('Emma', 'Lioi'), ('Alessia', 'Di Pietro'), ('Maria Veronica', 'Jimenez Coello'), ('Yana', 'Kochneva'), ('Laura Alejandra', 'Gutierrez Gomez'), ('Laura', 'Illanes'), ('Isabella', 'Gaban'), ('Maria', 'Turrillo'), ('Eleonora', 'Liga'), ('Erandi Xanat', 'Martinez Hernandez'), ('Katarzyna', 'Pitak'), ('Clarissa', 'Gai'), ('Renata', 'Ivandic'), ('Ioana', 'Minca'), ('Anna', 'Skabelka'), ('Milana', 'Gasymova'), ('Panna', 'Udvardy'), ('Vera', 'Lapko'), ('Caroline', 'Dunleavy'), ('Anamaria', 'Vladescu'), ('Olga', 'Fridman'), ('Anastasia', 'Smirnova'), ('Victoria', 'Smirnova'), ('Chelsea May', 'Samways'), ('Erika', 'Yakhimovich'), ('Luciana', 'Rabines'), ('Irina', 'Tuturina'), ('Jessica', 'Zeynel'), ('Mariana', 'Gonzalez Romero'), ('Blanca', 'Puig Caballero'), ('Ena', 'Babic'), ('Liron', 'Sasson'), ('Anna', 'Savchenko'), ('Camila', 'Romero'), ('Ziyi', 'Yang'), ('Rosie', 'Johanson'), ('Eva', 'Nyikos'), ('Glauka', 'Carvajal Vicente'), ('Ana Paula', 'Leal'), ('Berta', 'Acero Garcia'), ('Miriam Bianca', 'Bulgaru'), ('Vivian', 'Wolff'), ('Maria Alexandra', 'Giura'), ('Tessah', 'Andrianjafitrimo'), ('Irene', 'Lavino'), ('Alana', 'Lolaeva'), ('Ornella', 'Garavani'), ('Christina', 'Schoener'), ('Ana M', 'Becerra'), ('Meritxell', 'Perera Ros'), ('Nency', 'Chipan'), ('Elyse', 'Lavender'), ('Liza', 'Lebedzeva'), ('Aida', 'Arafa'), ('Lara', 'Escauriza'), ('Teodora', 'Sabljarevic'), ('Karla', 'De La Luz Montalvo'), ('Mariya', 'Taukumova'), ('Shamika', 'Dhar'), ('Anna', 'Kadagidze'), ('Michela', 'Xibilia'), ('Nicole', 'Petchey'), ('Laura', 'Rincon'), ('Darya', 'Possokhova'), ('Matea', 'Mihaljevic'), ('Alessia', 'Dauria'), ('Wanda', 'Rodriguez'), ('Valeriya', 'Zeleva'), ('Sara', 'Lizariturry'), ('Karina Kristina', 'Vyrlan'), ('Mia', 'Rabinowitz'), ('Jovana', 'Jankovic'), ('Laura', 'Fitzgerald'), ('Chiara', 'Merico'), ('Djasmine', 'Garnacho'), ('Louise Line', 'Odet'), ('Kristina Tina', 'Godec'), ('Lena', 'Ruppert'), ('Mary', 'Lewis'), ('Maheen', 'Dada'), ('Trisha', 'Sundaram'), ('Usue Maitane', 'Arconada'), ('Delaney', 'Nothaft'), ('Viktoria', 'Bardarova'), ('Jana', 'Lazarevic'), ('Tasha', 'Cacciato'), ('Hyojin', 'Kong'), ('Allison', 'Bojczuk'), ('Carolin', 'Nonnenmacher'), ('Subin', 'Park'), ('Anastasia', 'Tsyganova'), ('Nikola', 'Novotna'), ('Wl Joanne', 'Koh'), ('Lola', 'Asis Espuche'), ('Dorthea', 'Faa Hviding'), ('Nevena', 'Georgieva'), ('Karthiga', 'Thavarajasingam'), ('Delfina', 'Glorioso'), ('Bojana', 'Jovanovic'), ('Sissi', 'Kroustalaki'), ('Senay', 'Ince'), ('Ludmilla', 'Samsonova'), ('Livia', 'Kraus'), ('Fanny', 'Stollar'), ('Ziyin', 'Zhu'), ('Darya', 'Shevchenko'), ('Claudia', 'Hoste Ferrer'), ('Franziska Anna', 'Hotter'), ('Nina Rebecca', 'Hotter'), ('Sofia', 'Kenin'), ('Casandra', 'Metzer'), ('Angelica', 'Raggi'), ('Valentina', 'Dancenco'), ('Mariam', 'Bayatyan'), ('Sabrina', 'Bouheddi'), ('Defne', 'Basbakkal'), ('Florencia', 'Paez'), ('Maria Del Rosario', 'Vazquez'), ('Vivien', 'Klein'), ('Miriam', 'Siljic'), ('Kimberley', 'Gintrand'), ('Marija', 'Jovicic'), ('Jiaxue', 'Zang'), ('Elisa', 'Patta'), ('Marina', 'Cozac'), ('Tamara', 'Milosevic'), ('Arely Estefania', 'Vilchis Sanchez'), ('Marthe Eugenie', 'Sime'), ('Jessica', 'Crivelletto'), ('Katarzyna', 'Kubicz'), ('Rocio Macarena', 'Parodi'), ('Diletta', 'Paperini'), ('Wushuang', 'Zheng'), ('Sachi', 'Belwal'), ('Vanesa', 'Pappa'), ('Mir', 'Ambaye'), ('Hanna', 'Yedzelkina'), ('Olga', 'Zavarotnaya'), ('Anna', 'Kalinskaya'), ('Mei', 'Otsuka'), ('Daniela', 'Vukovic'), ('Medina', 'Sahinagic'), ('Prachi', 'Sinha'), ('Linda', 'Ohanyan'), ('Taylor', 'Bridges'), ('Maria Aurelia', 'Scotti'), ('Shubhi', 'Dwivedi'), ('Andreea Giorgiana', 'Tupan'), ('Wei', 'Tang'), ('Polina', 'Malykh'), ('Julia', 'Candiotto'), ('Dzenita', 'Zverotic'), ('Daniela', 'Cozzi'), ('Shiraz', 'Bronstein'), ('Nina', 'Alibalic'), ('Lucia', 'Bronzetti'), ('Monika', 'Pavlaskova'), ('Anna', 'Sedinkina'), ('Manel', 'Refaa'), ('Tamar', 'Shoshani'), ('Anastasia', 'Detiuc'), ('Michaela', 'Bayerlova'), ('Lola', 'Benedetti'), ('Martina', 'Fricova'), ('Magdalena', 'Radkova'), ('Vanshika', 'Sawhney'), ('Mira', 'Antonitsch'), ('Elodie', 'Leune'), ('Risa', 'Fukushige'), ('Lindsay', 'Song'), ('Adilya', 'Isabekova'), ('Jade', 'Lewis'), ('Meiting', 'Liu'), ('Hanna', 'Kryvatulava'), ('Phenomena', 'Radovcic'), ('Mari Cruz', 'Garcia Sanchez'), ('Hsiang Wen', 'Huang'), ('Hanna', 'Sokal'), ('Weronika Jasmina', 'Forys'), ('Aylen', 'Hubeaut'), ('Anastasia', 'Bursa'), ('Daniela', 'Ramirez'), ('Alvina', 'Lai'), ('Ema', 'Lazic'), ('Lauren', 'Dowling'), ('Malika', 'Auger Aliassime'), ('Xianlin', 'Zeng'), ('Yuseung', 'Suh'), ('Alicia', 'Herrero Linana'), ('Keren', 'Rozen'), ('Sean', 'Lodzki'), ('Gorana', 'Kadijevic'), ('Zhanelya', 'Turarbek'), ('Sihem', 'Sahli'), ('Maria', 'Naoum'), ('Kristina', 'Miletic'), ('Harsha Sai', 'Challa'), ('Monique', 'Belovukovic'), ('Ines', 'Ibbou'), ('Sofiya', 'Esterman'), ('Katherine', 'Sebov'), ('Viktoriia', 'Kalinina'), ('Alexandra', 'Sanford'), ('Janice', 'Shin'), ('Pei Ju', 'Chien'), ('Nicole', 'Bunea'), ('Zanya Manola', 'Sanchez'), ('Philippine', 'Picard'), ('Dominique', 'Schaefer'), ('Hristina', 'Djokic'), ('Monica', 'Cappelletti'), ('Kelia', 'Le Bihan'), ('Tamara', 'Arnold'), ('Nandini', 'Sharma'), ('Marta', 'Bettinelli'), ('Maya', 'Tahan'), ('Sara', 'Cvorovic'), ('Zhou', 'Mingjun'), ('Diana', 'Belalova'), ('Ekaterina', 'Trashchenko'), ('Wanyu', 'Tang'), ('Ares', 'Llobera Irun'), ('Arina', 'Taluenko'), ('Tatiana', 'Nikolaeva'), ('Vanessa', 'Wong'), ('Stanislava', 'Starostoyants'), ('Anastasia Evgenyevna', 'Nefedova'), ('Muazzez', 'Demirci'), ('Charlotte', 'Robillard Millette'), ('Inbar', 'Cohen'), ('Ekaterina', 'Kazionova'), ('Niditra', 'Rajmohan'), ('Tijana', 'Spasojevic'), ('Maria', 'Galiy'), ('Rocio', 'Safont Branchadell'), ('Alisa', 'Deen'), ('Carolin', 'Jung'), ('Inasse', 'Hamouti'), ('Kariann', 'Pierre Louis'), ('Radina', 'Rakic'), ('Siqi', 'Cao'), ('Luisa', 'Pelayo'), ('Schena', 'Benamar'), ('Chen', 'Wang'), ('Anna', 'Makarova'), ('Laura', 'Bente'), ('Vasavi', 'Ganesan'), ('Rukshika', 'Wijesooriya'), ('Jovana', 'Gvozdenovic'), ('Bojana', 'Vuksan'), ('Yufei', 'Long'), ('Milena', 'Amedieva'), ('Nadezhda', 'Sedysheva'), ('Karla', 'Contreras'), ('Maria', 'Soler Valverde'), ('Laylo', 'Bahodyrova'), ('Arianna Maria', 'Stagni Lailla'), ('Alejandra', 'Morales'), ('Hanna', 'Levina'), ('Sarah', 'Funedda'), ('Shauna', 'Casey'), ('Natalia', 'Garcia Molina'), ('Seira', 'Shimizu'), ('Maria', 'Toma'), ('Manuela Stephania', 'Cruz Rodriguez'), ('Georgie', 'Walker'), ('Catalina', 'Medici'), ('Yui', 'Chikaraishi'), ('Meredith G', 'Jones'), ('Katharina', 'Kukaras'), ('Sara', 'Ramirez'), ('Magdalena', 'Pantuckova'), ('Anastasiia', 'Gevel'), ('Jada', 'Robinson'), ('Lara', 'Salden'), ('Yu Tong', 'Tang'), ('Victoria', 'Walter'), ('Valentina', 'Gonzalez Ramirez'), ('Yi', 'Wang'), ('Kassandra', 'Davesne'), ('Gitte', 'Heynemans'), ('Napharat', 'Swangkaew'), ('Nika', 'Shytkouskaya'), ('Nadia', 'Justiniano'), ('Medhira', 'Samarasinghe'), ('Elena', 'De Santis'), ('Ingrid', 'Di Carlo'), ('Shrishti', 'Daas'), ('Camille', 'Verden Anderson'), ('Florencia', 'Devincenti'), ('Ramya', 'Natarajan'), ('Ksieniia', 'Rudenko'), ('Sofia', 'Johansson'), ('Le', 'Zhao'), ('Ashley', 'Kratzer'), ('Yulia', 'Almiron Solano'), ('Matilda', 'Lenngren'), ('Natalie', 'Kohoutkova'), ('Isabella', 'Montini'), ('Tzarina', 'Tuen Matthews'), ('Giana', 'Cormos'), ('Nastja', 'Rettich'), ('Lenka', 'Piskova'), ('Eimear', 'Maher'), ('Michaela', 'Haet'), ('Rosanna', 'Maffei'), ('Ioana', 'Guna'), ('Eimi', 'Friant'), ('Alina', 'Karazhova'), ('Lucie', 'Wargnier'), ('Mouna', 'Idlkadi'), ('Aanandita', 'Gupta'), ('Altea', 'Ricci'), ('Nitzan', 'Bruner'), ('Alexandra', 'Bozovic'), ('Alona', 'Kruglov'), ('Boba', 'Kotlica'), ('Aza', 'Petrova'), ('Sara', 'Gambogi'), ('Tamara', 'Bojanic'), ('Klara', 'Mrcela'), ('Yuval', 'Keren'), ('Momoka', 'Chimura'), ('Laila', 'Elnimr'), ('Daria', 'Zheludchenko'), ('Mika', 'Misgav'), ('Zeel', 'Desai'), ('Isha', 'Budwal'), ('Guiomar', 'Maristany Zuleta De Reales'), ('Alessandra', 'Traub'), ('Anna Lena', 'Neuwirth'), ('Marta', 'Magalhaes'), ('Nora Lima', 'Dahl'), ('Barbara', 'Huyskes'), ('Rebecca', 'Ehn'), ('Tomiris', 'Koshmukhanova'), ('Lorena', 'Marruffo'), ('Sidal', 'Ak'), ('Nermeen', 'Shawky'), ('Maria Vittoria', 'Viviani'), ('Olivia', 'Robert'), ('Dana Katherine', 'Santiago Benavides'), ('Maria', 'Mikhaylova'), ('Ciney', 'Bekker'), ('Catalina', 'Bloch'), ('Daniela Alejandra', 'La Fuente Strassburger'), ('Amelie', 'Boy'), ('Daria', 'Kuczer'), ('Victoria', 'Tournebize'), ('Adrienn', 'Zsitvay'), ('Bojana', 'Markovic'), ('Iesha', 'Shepherd'), ('Sofija', 'Zecevic'), ('Jiatian', 'Qi'), ('Hind', 'Abdelouahid'), ('Esther', 'Lopez Alcaraz'), ('Tina', 'Sojkova'), ('Paulina', 'Cota'), ('Megan', 'Davies'), ('Nao', 'Shimoji'), ('Marta', 'Paigina'), ('Isidora', 'Zivkovic'), ('Xiangruyi', 'Ji'), ('Xinyu', 'Jiang'), ('Sakura', 'Hondo'), ('Petra', 'Hule'), ('Marta', 'Oliveira'), ('Karolina', 'Szmit'), ('Ylena', 'In Albon'), ('Natasha', 'Irani'), ('Sangeeta', 'Roopan'), ('Miranda', 'Ramirez'), ('Madeline', 'Meredith'), ('Marcelle', 'Cirino'), ('Pauline', 'Dore'), ('Olivia', 'Rohrbacher'), ('Tara', 'Damnjanovic'), ('Meredith', 'Roberts'), ('Katarina', 'Sasaroga'), ('Camila', 'Millan Santacruz'), ('Steph', 'Booth'), ('Jiakang', 'Li'), ('Zoe', 'Richard'), ('Tinkara', 'Kovac'), ('Jia Qi', 'Yang'), ('Cecilia', 'Engback'), ('Shaline Doreen', 'Pipa'), ('Isabel', 'Iglesias Prieto'), ('Fernanda', 'Labrana'), ('Mar', 'Gendra Felip'), ('Anezka', 'Bartosova'), ('Lee', 'Barnard'), ('Zani', 'Barnard'), ('Birdem', 'Oz'), ('Maria Celeste', 'Lamagni'), ('Camilla', 'Ciaccia'), ('Florencia Natalia', 'Grieco'), ('Maria Jose', 'Zacarias'), ('Alexia', 'Carlone'), ('Andreea Amalia', 'Rosca'), ('Jo', 'Weisen'), ('Sofia', 'Gorovits'), ('Kylie', 'Mckenzie'), ('Polina', 'Golubovskaya'), ('Katie', 'Swan'), ('Anastasiya', 'Joyner'), ('Jenny', 'Duerst'), ('Anna', 'Ukolova'), ('Mixcoatl', 'Trabulse Garcia'), ('Tea', 'Jezidzic'), ('Eva Marie', 'Voracek'), ('Itza', 'Trabulse Garci'), ('Arlinda', 'Rushiti'), ('Emelie Luisa', 'Schwarte'), ('Valeriia', 'Bazhanova'), ('Tatiana', 'Pieri'), ('Mikaela', 'Molina Bugarija'), ('Carolina', 'Bulatovic'), ('Pranjala', 'Yadlapalli'), ('Aastha', 'Dargude'), ('Leia', 'Balkevarn'), ('Palina', 'Padabed'), ('Rachel', 'Zipfel'), ('Ludovica', 'Infantino'), ('Arianna', 'Capogrosso'), ('Ekaterina', 'Korzhova'), ('Victoria', 'Flores'), ('Paola', 'Exposito Diaz Delgad'), ('Milena', 'Avetisyan'), ('Anna', 'Slovakova'), ('Anna', 'Tonoyan'), ('Mina Adelin', 'Pedersen'), ('Yusta', 'Dorofeeva'), ('Mihaela', 'Kaftanova'), ('Snehal', 'Mane'), ('Alika', 'Ismailova'), ('Isolde', 'De Jong'), ('Silvia', 'Saccani'), ('Vivien', 'Abraham'), ('Catherine Cartan', 'Bellis'), ('Nicole', 'De O Crispino De Souza'), ('Mia', 'Mijatovic'), ('Mako', 'Ganaha'), ('Halla', 'Alajeely'), ('Francescamaria', 'Pannarale'), ('Serena', 'Buonaccorso'), ('Anastasia', 'Abramyan'), ('Alexandra', 'Parra'), ('Bronte', 'Murgett'), ('Victoria', 'Saldh'), ('Lalita', 'Devarakonda'), ('Olivia Alexandra', 'Placzek'), ('Nino', 'Memishishi'), ('Morgan', 'Coppoc'), ('Klara', 'Hajkova'), ('Kristina', 'Kislyak'), ('Ines', 'Milosevic'), ('Dea', 'Lako'), ('Tania Andrada', 'Mare'), ('Eden Sophie', 'Schlagenhauf'), ('Famke', 'Wilhelm'), ('Madison', 'Gallegos'), ('Anastasia', 'Ushakova'), ('Annalisa', 'Molino'), ('Evelyne Christelle Atticia', 'Tiron'), ('Rana', 'Essam'), ('Soomin', 'Kim'), ('Yarden', 'Akler'), ('Ai Qi', 'Chen'), ('Adrianna', 'Sosnowska'), ('Jana', 'Bojovic'), ('Flavia', 'Gutierrez'), ('Matea', 'Mamic'), ('Polina', 'Bakhmutkina'), ('Gerda', 'Zykute'), ('Dominique', 'Meyer'), ('Nicole Taylor', 'Pafundi'), ('Mahiro', 'Date'), ('Lucie', 'Devier'), ('Malin', 'Falk'), ('Nurseda', 'Akovalier'), ('Julita', 'Saner'), ('Lucelena', 'Hoyo'), ('Sydney', 'Van Alphen'), ('Jiaying', 'He'), ('Radia', 'Lalami'), ('Lixin', 'Wang'), ('Annick', 'Melgers'), ('Nidhi', 'Surapaneni'), ('Mathilde', 'Trigaux'), ('Giulia', 'Turconi'), ('Elisa Teodora', 'Sararu'), ('Ysabel', 'Gonzalez Rico'), ('Alexandra', 'Zaicenco'), ('Janina', 'Scheffbuch'), ('Alena', 'Kovaleva'), ('Katarina', 'Marinkovikj'), ('Sofia', 'Munera Sanchez'), ('Anusha', 'Kondaveeti'), ('Jitasha', 'Shastri M'), ('Nicole', 'Coopersmith'), ('Maria Jose', 'Portillo Ramirez'), ('Kelly', 'Chen'), ('Ellie Rose', 'Griffiths'), ('Selin GLseren', 'Simsek'), ('Claudia', 'Kieffer'), ('Kathleen', 'Biong Percegona'), ('Ryan', 'Peus'), ('Oumeima', 'Charrad'), ('Ema', 'Vasic'), ('Kimika', 'Sakata'), ('Lilya', 'Hadab'), ('Neta', 'Berman'), ('Alice', 'Di Matteo'), ('Andrea', 'Hernando Gutierrez'), ('Thai Sa Grana', 'Pedretti'), ('Mariana', 'Borges'), ('Anastasia', 'Gasanova'), ('Seone', 'Mendez'), ('Nadia', 'Van Heerden'), ('Anastasiya', 'Gorbacheva'), ('Johana', 'Markova'), ('Ginevra', 'Peiretti'), ('Stefani', 'Arsova'), ('Afroditi', 'Tzanopoulou'), ('Rina', 'Tateyama'), ('Meible', 'Chi'), ('Maria', 'Casas Blas'), ('Yuka', 'Hosoki'), ('Irina', 'Lapustina'), ('Fariza', 'Abdullaeva'), ('Habiba', 'Khaled Aly'), ('Georgina', 'Axon'), ('Wiktoria', 'Kulik'), ('Minette', 'Van Vreden'), ('Marcelina', 'Podlinska'), ('Evgeniya', 'Levashova'), ('Jodie Anna', 'Burrage'), ('Anastasia', 'Mikheeva'), ('Anastasia', 'Veselova'), ('Teresia', 'Londol'), ('Lourdes', 'Sprinckmoller'), ('Lucia', 'Natal Gomez'), ('Martina', 'Bokulic'), ('Marharyta', 'Smolyak'), ('Daria', 'Shelomentseva'), ('Andiyo', 'Inwang'), ('Adelaide', 'Maesfranckx'), ('Carmen', 'Schultheiss'), ('Vilma', 'Berglund'), ('Luna', 'Meers'), ('Andreea', 'Stanescu'), ('Francesca', 'Denti'), ('Carolina', 'Torrico'), ('Salma', 'El Garhi'), ('Zainab', 'Bendahhou'), ('Anna Soffia', 'Gronholm'), ('Izabela Gabriela', 'Novac'), ('Avital', 'Vulf'), ('Denisa', 'Pospisilova'), ('Agustina Belen', 'Diaz'), ('Ulyana', 'Grib'), ('Csenge', 'Furak'), ('Katarina', 'Ljujic'), ('Moira Valeria', 'Miranda'), ('Makenzie', 'Myers'), ('Ye Xin', 'Ma'), ('Yanni', 'Liu'), ('Sina', 'Zuger'), ('Adi', 'Spiegelman'), ('Angie', 'Laporal'), ('Irem', 'Kaftan'), ('Irma Elita', 'Evania'), ('Mei', 'Yamaguchi'), ('Alessandra', 'Maya Thompson'), ('Valentine', 'Bacher'), ('Riley', 'Mcquaid'), ('Taylor', 'Gruber'), ('Maria Paula', 'Uhrich'), ('Kamilla', 'Bolatova'), ('Aleksandra', 'Kasatkina'), ('Paulina Ela', 'Mihokova'), ('Sybella', 'Garvin'), ('Elena', 'Rybakina'), ('Aleksandra', 'Kulik'), ('Mara', 'Vasiliev'), ('Kintan Pratiwi', 'Anwar'), ('Kateryna', 'Popova'), ('Alexandra', 'Almborg'), ('Sol Maria', 'Terracina'), ('Carla', 'Hassaine'), ('Alina', 'Povidalo'), ('Tereza', 'Prochazkova'), ('Brooke', 'Winley'), ('Valeriya', 'Denisenko'), ('Franziska Marie', 'Ahrend'), ('Ellie', 'Tsimbilakis'), ('Mila', 'Hartig'), ('Astrid Wanja', 'Brune Olsen'), ('Noa', 'Lasry'), ('Nagomi', 'Higashitani'), ('Maryna', 'Chernyshova'), ('Sonia', 'Poveda Marsal'), ('Valeriya', 'Yushchenko'), ('Himani', 'Mor'), ('Isabel', 'Donaldson'), ('Anjelika', 'Vlasenkova'), ('Veronika', 'Koberlingova'), ('Erika', 'Botalieva'), ('Marketa', 'Vondrousova'), ('Maria Sol', 'Zeyen'), ('Shuyue', 'Ma'), ('Alisha', 'Reayer'), ('Alexandra', 'Belaya'), ('Tizia', 'Brocks'), ('Yesica', 'De Lucas'), ('Marion', 'Chatenet'), ('Anna Marija', 'Bukina'), ('Susanna', 'Giovanardi'), ('Nefisa', 'Berberovic'), ('Victoria', 'Rey'), ('Sofiya', 'Kuzina'), ('Martina', 'Kudelova'), ('Suzan', 'Lamens'), ('Arina', 'Amaning'), ('Federica', 'Bilardo'), ('Hazal', 'Karaaliler'), ('Sofia', 'Ayuso'), ('Emmanuelle', 'Girard'), ('Ipek', 'Oz'), ('Shelly', 'Krolitzky'), ('Mccartney', 'Kessler'), ('Ana', 'Biskic'), ('Malaika Alex', 'Fernandes'), ('Angela', 'Fita Boluda'), ('Franziska', 'Kommer'), ('Laura', 'Gil Lerin'), ('Romana', 'Tarajova'), ('Georgia Andreea', 'Craciun'), ('Anastazja', 'Rosnowska'), ('Fang Hsien', 'Wu'), ('Emma', 'Lene'), ('Julia', 'Saving'), ('Sandra', 'Azorin Vilella'), ('Yumi', 'Takaichi'), ('Cagla', 'Badem'), ('Claudia', 'Bartolome Ortiz'), ('Ecaterina', 'Ivasco'), ('Yelyzaveta', 'Rachenko'), ('Dominika', 'Paczena'), ('Chiara', 'Catini'), ('Dami', 'Lee'), ('Amanda', 'Meyer'), ('Maria', 'Mateas'), ('Sofia', 'Sewing'), ('Mikayla', 'Parks'), ('Zaklin', 'Bokan'), ('Celine', 'Kern'), ('Ana', 'Martinez Bencomo'), ('Luna', 'Milovanovic'), ('Michaela', 'Gordon'), ('Sadaf', 'Sadeghvaziri'), ('Lauryn', 'John Baptiste'), ('Jaeda', 'Daniel'), ('Rishika', 'Ravindran'), ('Kim', 'Fontana'), ('Somer', 'Dalla Bona'), ('Michelle', 'Janis'), ('Bianca', 'Vitale'), ('Sabina', 'Smirnova'), ('Vlada', 'Medvedcova'), ('Dakshata', 'Girishkumar Patel'), ('Daria', 'Orichkevitch'), ('Paola', 'Landin Lopez'), ('Pamela', 'Hernandez'), ('Anna', 'Bowtell'), ('Angeles', 'Moreno Barranquero'), ('Ginelle  Michelle', 'Samson'), ('Jiahe', 'Cai'), ('Mariella', 'Minetti'), ('Sandra', 'Bozinovic'), ('Rebeka', 'Masarova'), ('Natalija', 'Popovic'), ('Victoria', 'Emma'), ('Gaelle', 'Ratianarimanana'), ('Ivon', 'Mihaleva'), ('Selin', 'Karaer'), ('Caroline', 'Szabo'), ('Alina', 'Kislitskaya'), ('Sharmada', 'Iyer'), ('Diana', 'Bakuta'), ('Urska', 'Velec'), ('Jule', 'Niemeier'), ('Nastasia', 'Jedrychowski'), ('Jasmine', 'Boyd'), ('Lorena', 'Vano  Martin'), ('Lily', 'Ghodrati'), ('Poschanun', 'Warakulnukroh'), ('Leonor', 'Meliveo Saragusti'), ('Camilla', 'Priuli'), ('Elisa', 'Visentin'), ('Yuliya', 'Kim'), ('Sofija', 'Mandic'), ('Merel', 'Hoedt'), ('Frana', 'Ugarkovic'), ('Gabriella', 'Akopian'), ('Sabrina Mary', 'Woll'), ('Silvia', 'Bordes Caselles'), ('Eliza', 'Omirou'), ('Imren', 'Bilgic'), ('Malene', 'Helgo'), ('Vitoria', 'Okuyama'), ('Ines Belkis', 'Alimoussa'), ('Mai', 'Hontama'), ('Anna', 'Stefani'), ('Tatiana', 'Simova'), ('Emily', 'Appleton'), ('Katerina', 'Filip'), ('Neri', 'Cohen'), ('Defne', 'Olcay'), ('Eva', 'Guerrero Alvarez'), ('Vasilisa', 'Mikhaylova'), ('Caragh', 'Courtney'), ('Angela', 'Charles Alfred'), ('Magdalini', 'Adaloglou'), ('Lauren', 'Gish'), ('Inci', 'Ogut'), ('Noelia', 'Bouzo Zanotti'), ('Julieta', 'Albornoz'), ('Marta', 'Perez Mur'), ('Eva', 'Alexandrova'), ('Ebba', 'Rosberg'), ('Amina', 'Anshba'), ('Zhijie', 'Ma'), ('Lisa', 'Zang'), ('Pareen', 'Shivekar'), ('Daryna', 'Kovalenko'), ('Agnes Ornella', 'Biba'), ('Paula', 'Baranano'), ('Shivani', 'Manjanna'), ('Dilara', 'Spicer'), ('Andrea', 'Arratia Fernandez'), ('Zhima', 'Du'), ('Alexandra', 'Alegre Ferre'), ('Georgia', 'Gulin'), ('Teodora', 'Golubovic'), ('Adelina', 'Baravi'), ('Peyton', 'Pesavento'), ('Nina', 'Kolar'), ('Daniela', 'Flores Gerez'), ('Advaitas', 'Saravanan'), ('Jaimee', 'Fourlis'), ('Penelope', 'Abreu'), ('Donnaroza', 'Gouvernante'), ('Antje', 'Rubbrecht'), ('Mathilda', 'Vidgren'), ('Sofia', 'Carlsson'), ('Cameron', 'Morra'), ('Adriana', 'Marikova'), ('Lea', 'Boskovic'), ('Petra Maria', 'Kerdikova'), ('Katrina', 'Sammut'), ('Chelsea', 'Vanhoutte'), ('Martina', 'Girardi'), ('Satsuki', 'Takamura'), ('Maria', 'Viarkhusha'), ('Nafees Bano', 'Syed'), ('Mukadas', 'Yussupova'), ('Asli', 'Yucebilgin'), ('Maria Gabriela', 'Linares De Faria'), ('Viktoria', 'Surova'), ('Kayla', 'Day'), ('Alexandra', 'Dubrovina'), ('Katie', 'Lafrance'), ('Yunuen', 'Elizarraras Bahena'), ('Karolina', 'Hakala'), ('Teresa', 'Franco Dias'), ('Aleksandra', 'Kuznetsova'), ('Anastasia', 'Konstantinova'), ('Lily', 'Reynolds'), ('Madoka', 'Tominaga'), ('Timea', 'Pavlickova'), ('Jennifer', 'Luikham'), ('Tamara', 'Musulbes'), ('Nathalia', 'Wolf Gasparin'), ('Nikola', 'Neumannova'), ('Ajda', 'Bukovec'), ('Yulia', 'Shishova'), ('Milana', 'Lysova'), ('Polina', 'Nazarchuk'), ('Hanine', 'Boudjadi'), ('Deepshikha', 'Saw'), ('Monika', 'Kilnarova'), ('Zorica', 'Spasojevic'), ('Anna', 'Bright'), ('Zarema', 'Mekhtieva'), ('Angelica Maria', 'Vargas Saavedra'), ('Vicky Irma Margaretha', 'Oktaviana'), ('Salma', 'Ziouti'), ('Noramon', 'Tacharungroj'), ('Agustina', 'Rimoldi Godoy'), ('Dragana', 'Radisic'), ('Helene', 'Heiberg'), ('Putri Sanjungan', 'Insani'), ('Mouna', 'Bouzgarrou'), ('Ya Yun', 'Pai'), ('Lara', 'Schmidt'), ('Alana', 'Tuayeva'), ('Laura', 'Barona'), ('Berfu', 'Cengiz'), ('Komola', 'Umarova'), ('Tamara', 'Racine Beauchamp'), ('Sanja', 'Fabijancic'), ('Marta', 'Vicens Miquel'), ('Ioana', 'Bogdan'), ('Rebeka Margareta', 'Mertena'), ('Ashley', 'Lahey'), ('Haruna', 'Arakawa'), ('Jimena Paula', 'Garbino'), ('Alejandra', 'Garmendia'), ('Amelie Carolin', 'Kurpiers'), ('Zinovia', 'Vaneva'), ('Alara', 'Sener'), ('Zuzanna', 'Wilk'), ('Anasztazia', 'Fouraev'), ('Priyachanok', 'Sukkanha'), ('Nora', 'Ayala Serra'), ('Sofya', 'Dobronevskaya'), ('Anna', 'Ureke'), ('Angelina', 'Shakhraychuk'), ('Jennifer', 'Timotin'), ('Albertina', 'Giacomino'), ('Alina', 'Gazizova'), ('Margaux', 'Orange'), ('Alexandra', 'Tutecky'), ('Novela Rezha', 'Millenia Putri'), ('Gabriela Nicole', 'Tatarus'), ('Mihika', 'Yadav'), ('Naiara', 'Uriarte Morillas'), ('Lillian', 'Gabrielsen'), ('Kalpaka', 'Pradip'), ('Bhargavi', 'Kalaga'), ('Anais', 'Defossez'), ('Anastassiya', 'Sharapova'), ('Marie', 'Vicente'), ('River', 'Hart'), ('Jacqueline', 'Boepple'), ('Karin', 'Hiraoka'), ('Valentina', 'Giavazzi'), ('Maria', 'Tyrina'), ('Maria', 'Ryshchina'), ('Julie', 'Ball'), ('Anastasia', 'Golubeva'), ('Maria Jazmin', 'Amicuzi'), ('Aleksa', 'Cveticanin'), ('Zuleykha', 'Safarova'), ('Ekaterina', 'Vishnevskaya'), ('Lea', 'Romain'), ('Sophie', 'Gerits'), ('Tanit', 'Lopez Lopez'), ('Sofya', 'Zhuk'), ('Vered', 'Bert'), ('Ekaterina', 'Kurtukova'), ('Miku', 'Kajishita'), ('Matilda', 'Vainio'), ('Shakhnoza', 'Khatamova'), ('Klara', 'Silka'), ('Marija', 'Radosavovic'), ('Sofia', 'San Jose'), ('Helena', 'Jansen Figueras'), ('Laura', 'Cazacu'), ('Valeria Paulina', 'Humpierres Novikow'), ('Imperia', 'Martinez Mora'), ('Katerina', 'Krizova'), ('Marina', 'Bassols Ribera'), ('Greta Louise', 'Von Peschke'), ('Olivia', 'Peet'), ('Alessandra', 'Mazzola'), ('Valeriya', 'Deminova'), ('Laura', 'Rijkers'), ('Varvara', 'Kuksina'), ('Barbora', 'Kolackova'), ('Camila', 'Andrade'), ('Mi Zhuoma', 'You'), ('Yidi', 'Yang'), ('Kristina', 'Vasina'), ('Veronika', 'Pribylova'), ('Chiara', 'Giaquinta'), ('Renee', 'McBryde'), ('Elizaveta', 'Volodko'), ('Tingting', 'Pei'), ('Maria', 'Ribeiro'), ('Ekaterina', 'Davletova'), ('Linda', 'Puppendahl'), ('Veronika', 'Erjavec'), ('Emily', 'Seibold'), ('Gaia', 'Bandini'), ('Alejandra', 'Aguilar'), ('Irina', 'Cantos Siemers'), ('Elena', 'Griessner'), ('Muskaan', 'Ranjan'), ('Balsen', 'Kaya'), ('Teodora', 'Ristic'), ('Aylin', 'Abdioglu'), ('Alena', 'Yurchenko'), ('Perla', 'Nieuwboer'), ('Petra', 'Kucerova'), ('Marie', 'Mattel'), ('Vera', 'Markovic'), ('Carlotta', 'Romito'), ('Laura', 'Raimkhanova'), ('Sara', 'Raimkhanova'), ('Hortencia', 'Birnbaumer'), ('Simran', 'Kejriwal'), ('Meiqi', 'Guo'), ('Yinglak', 'Jittakoat'), ('Oceane', 'Mialon'), ('Lucie', 'Kankova'), ('Kaitlin', 'Staines'), ('Reka', 'Szalai'), ('Ana', 'Giraldi Requena'), ('Vivian', 'Glozman'), ('Lina', 'Glushko'), ('Emilie', 'Lindh Gallagher'), ('Margarita', 'Skryabina'), ('Karolina', 'Jaskiewicz'), ('Katarina', 'Kostic'), ('Tiffany', 'Lagarde'), ('Juliana', 'Castellanos Fernandez'), ('Ikram', 'Rassif'), ('Jovana', 'Vukovic'), ('Namu', 'Zeren'), ('Watsachol', 'Sawasdee'), ('Joleta', 'Budiman'), ('Shakhzoda', 'Asimova'), ('Hsin Yuan', 'Shih'), ('Alisiya', 'Soto'), ('Angela', 'Rinaldi'), ('Juliette', 'Bertagnol'), ('Chunxi', 'Xin'), ('Shoval', 'Fanani'), ('Derya', 'Yahe'), ('Eun Se', 'Jang'), ('Katyarina', 'Paulenka'), ('Stephanie Judith', 'Visscher'), ('Nina', 'Rudiukova'), ('Julia', 'Konishi Camargo Silva'), ('Isabella', 'Perez'), ('Sara', 'Urquizu'), ('Hannah', 'Mccolgan'), ('Summer', 'Yardley'), ('Alisa', 'Savina'), ('Sofia', 'Bezukladova'), ('Ellen', 'Ashley'), ('Karla', 'Kilic'), ('Ines', 'Salvador'), ('Yusra', 'Hegy'), ('Camila', 'Rebelo Felizzola'), ('Suzuka', 'Takoi'), ('Amanda', 'Citre'), ('Evaggelia', 'Kokkinaki'), ('Rayen', 'Turki'), ('Ece', 'Tan'), ('Evgenia', 'Kokkinaki'), ('Lucia', 'Marzal Martinez'), ('Evelin', 'Taise Baziloni Gouveia'), ('Lea', 'Dubois Rebiere'), ('Reka', 'Farbas'), ('Martina', 'Paladini Jennings'), ('Ulyana', 'Shirokova'), ('Katarina', 'Zavatska'), ('Lucia', 'De La Puerta Uribe'), ('Kaaviya', 'Balasubramanian'), ('Arina', 'Karbolina'), ('Olivia', 'Alfredsson'), ('Dainah', 'Cameron'), ('Julia', 'Rehberg'), ('Kristina', 'Sorokolet'), ('Alexis', 'Tensfeldt'), ('Amit', 'Miran'), ('Andreea', 'Prisacariu'), ('Abigail', 'Cazarez Gonzalez'), ('Laura', 'Prenant'), ('Maria Lourdes', 'Carle'), ('Anca', 'Craciun'), ('Mila', 'Mejic'), ('Alyssa', 'Mayo'), ('Svenja', 'Ochsner'), ('Natalia', 'Nikolopoulou'), ('Axana', 'Mareen'), ('Sofia', 'Ramirez'), ('Darya', 'Mukhina'), ('Baijing', 'Lin'), ('Yulia', 'Starodubtsewa'), ('Emma', 'Decoste'), ('Deniza', 'Marcinkevica'), ('Ilana', 'Tetruashvili'), ('Vaidehi', 'Chaudhari'), ('Basak', 'Akbas'), ('Anna', 'Titova'), ('Sofia Nami', 'Samavati'), ('Tejasvi', 'Kate'), ('Anastasia', 'Kulikova'), ('Yu', 'Shan'), ('Isabela', 'Campos Bifano'), ('Warona', 'Mdlulwa'), ('Natalia', 'Boltinskaya'), ('Emma', 'Brust'), ('Adelaida', 'Allakhverdiyeva'), ('Ainur', 'Suleimenova'), ('I Hsuan', 'Cho'), ('Ipek', 'Cevik'), ('Valeriya', 'Zhupanska'), ('Emna', 'Fahmia'), ('Gergana', 'Topalova'), ('Meiling', 'Wang'), ('Megan', 'Lombardi'), ('Wing Kiu Jacqueline', 'Lam'), ('Polina', 'Avdzhiyan'), ('Tamari', 'Sumbadze'), ('Maria Paula', 'Tobias'), ('Nell', 'Miller'), ('Charmaine Shi Yi', 'Seah'), ('Flaminia Maria', 'Valci'), ('Dariya', 'Detkovskaya'), ('Paula', 'Arias Manjon'), ('Jordan', 'Ortega Mendez'), ('Megan', 'Forster'), ('Pei Hsuan', 'Chen'), ('Ella', 'Husrefovic'), ('Nevena', 'Sokovic'), ('Aynur Cemre', 'Aka'), ('Cristina', 'Moll Alles'), ('Cherry', 'Kim'), ('Radka', 'Buzkova'), ('Mireille', 'Moreau'), ('Hili', 'Kronzon'), ('Ji Min', 'Park'), ('Anastasia', 'Kharitonova'), ('Nicole', 'Conard'), ('Nada', 'Dimovska'), ('Carla', 'Girbau Romero'), ('Marie Perla', 'Biansumba'), ('Denise Antonela', 'Stoica'), ('Magdalena', 'Santer'), ('Sri Sai Shivani', 'K'), ('Laura', 'Lopez Giese'), ('Sihem', 'Bellahouel'), ('Natalia', 'Pietras'), ('Julia', 'Khamula'), ('Paulina', 'Bednarczyk'), ('Sofia', 'Shaykis'), ('Arushi', 'Gupta'), ('Ana', 'Castillo'), ('Mijeong', 'Park'), ('Wing Sze', 'Yu'), ('Noa', 'Revivo'), ('Kolie', 'Allen'), ('Amparo Del Pino', 'Hernandez Alonso'), ('Molly', 'Helgesson'), ('Alicia Liliana', 'Rahem'), ('Prakriti', 'Banwani'), ('Patricia', 'Zeriu'), ('Alexandra', 'Pisareva'), ('Radhika', 'Yadav'), ('Elysia', 'Bolton'), ('Yanin', 'Wisitwarapron'), ('Adeline', 'Lardinois'), ('Zhibek', 'Kulambayeva'), ('Carlota', 'Molina Megias'), ('Ekaterina', 'Kholopenko'), ('Doga Selen', 'Takunyaci'), ('Yasmin', 'Mansouri'), ('Olga', 'Helmi'), ('Lenka', 'Stara'), ('Yuliya', 'Mazur'), ('Vasilisa', 'Polunova'), ('Kiara', 'Petrovicka'), ('Noya', 'Ohana'), ('Nastassia', 'Chamoun'), ('Erika Abigail', 'Gauto Martinez'), ('Ghizlane', 'El Amrani Tchaha'), ('Pauline', 'Demel'), ('Anastasia', 'Bovolskaya'), ('Serena', 'Dercole'), ('Leeloo', 'Obrul'), ('Sofie Bomark', 'Syversen'), ('Denisa Elena', 'Gheorghe'), ('Florencia', 'Massardo Brain'), ('Valentina', 'Likic'), ('Mariia', 'Skuba'), ('Kristina', 'Pukhaeva'), ('Kristina', 'Baran'), ('Annick', 'Verhaar'), ('Sofia', 'Bruno'), ('Sonja', 'Keranen'), ('Zehra Lara', 'Tekbas'), ('Lucia', 'Quiterio'), ('Alexandra', 'Hunter'), ('Isabelle', 'Boulais'), ('Emeline', 'Dartron'), ('Mileva', 'Cardenas Serna'), ('Eliza', 'Askarova'), ('Dilara Romy', 'Kubak'), ('Sofia', 'Blanco Andrade'), ('Alicia', 'Melosch'), ('Georgia', 'Drummy'), ('Francisca', 'Jorge'), ('Melis', 'Yasar'), ('Yuliya', 'Hatouka'), ('Emilia', 'Dejonckheere'), ('Ekaterina', 'Lushnikova'), ('Selma Stefania', 'Cadar'), ('Draginja', 'Vukovic'), ('Riddhi', 'Ramesh Sharma'), ('Jiawen', 'Li'), ('Ann Cathrin', 'Hummel'), ('Olesya', 'Pervushina'), ('Estella', 'Jaeger'), ('Maria Lota', 'Kaul'), ('Ida', 'Ferding'), ('Margo', 'Landmann'), ('Teodora', 'Mitrovic'), ('Priscila', 'Baptista'), ('Alyvia', 'Jones'), ('Anri', 'Nagata'), ('Gulsina', 'Khalimullina'), ('Zoe', 'Imes'), ('Laura Sofia', 'Rico Garcia'), ('Nikoleta', 'Antoniou Karademitrou'), ('Jessie Jiaxin', 'Gong'), ('Jayden', 'Nielsen'), ('Clara', 'Froget'), ('Destanee', 'Aiava'), ('Eunhye', 'Lee'), ('Alice', 'Robbe'), ('Aneta', 'Laboutkova'), ('Sofya', 'Golubovskaya'), ('Mayssa', 'Tebourbi'), ('Alisa', 'Axyanova'), ('Katerina', 'Tsygourova'), ('Iva', 'Krivic'), ('Louise', 'Wittouck'), ('Andrijana', 'Stoilkovic'), ('Han Byeol', 'Lee'), ('Maria', 'Oliver Sanchez'), ('Dayana', 'Yastremska'), ('Wanning', 'Zhu'), ('Lisa Marie', 'Lausecker'), ('Lana', 'Kentchiashvili'), ('Francisca Emilia', 'Vergara Jofre'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Tiphanie', 'Fiquet'), ('Yang', 'Lee'), ('Noa', 'Liauw A Fong'), ('Lungile', 'Ntuli'), ('Isabella', 'Tcherkes Zade'), ('Chanel', 'Janssen'), ('Mei Xu', 'Wu'), ('Aneta', 'Kladivova'), ('Ellie', 'Douglas'), ('Tatiana', 'Terwindt'), ('Maileen', 'Nuudi'), ('Yasmine', 'Wagner'), ('Maja', 'Issler'), ('Anna', 'Khudoley'), ('Claire', 'Liu'), ('Danica', 'Malan'), ('Alisa', 'Grachova'), ('Xenia', 'De Luna'), ('Ali', 'Collins'), ('Elena', 'Malygina'), ('Daria', 'Solovyeva'), ('Francesca', 'Gaida'), ('Jia', 'Ren'), ('Mara', 'Vidal'), ('Ekaterina', 'Shalimova'), ('Julia', 'Iglesias'), ('Anna Maria', 'Jovanovic'), ('Nadja', 'Ramskogler'), ('Lucia', 'Cortez Llorca'), ('Marina', 'Benito'), ('Julieanne', 'Bou'), ('Ye Jin', 'Kim'), ('Haruna', 'Sakamoto'), ('Maria', 'Manilova'), ('Oxi', 'Gravitas Putri'), ('Polina', 'Altukhova'), ('Nicole', 'Nadel'), ('Avital', 'Kandelis'), ('Ambre', 'Feder'), ('Ariana', 'Chan Baratau'), ('Svetlana', 'Iansitova'), ('Justine', 'Pysson'), ('Sophie', 'Muntean'), ('Dariya', 'Sovich'), ('Bianca', 'Andreescu'), ('Gabriela Ana Maria', 'Davidescu'), ('Gabriella', 'Mujan'), ('Sanjeevani', 'Patil'), ('Weronika', 'Falkowska'), ('Anja', 'Gal'), ('Giulia', 'Peoni'), ('Neli', 'Sunjic'), ('Mamiko', 'Harada'), ('Camille', 'Corenthy'), ('Mercedes', 'Aristegui'), ('Camilla', 'Ceppellini'), ('Nuria', 'Brancaccio'), ('Rosa', 'Vicens Mas'), ('Ann', 'Li'), ('Elizaveta', 'Avdonina'), ('Vasiliki', 'Karvouni'), ('Daniela', 'Baez Friedrich'), ('Maria Jose', 'Reynaldo'), ('Sara', 'Gvozdenovic'), ('Ana Paula', 'Melilo'), ('Azul Agustina', 'Pedemonti'), ('Yuki', 'Ando'), ('Yasemin Ada', 'Boru'), ('Angelina', 'Fedorova'), ('Elizabeth', 'Popova'), ('Salma', 'Abdel Rahim'), ('Ruoyu', 'Chen'), ('Maria Jose', 'Hernandez Magro Quiroz'), ('Jimena', 'Rodriguez Benito'), ('Loretto', 'Villalba Rubio'), ('Anna', 'Loughlan'), ('Taysia', 'Rogers'), ('Shelly', 'Bereznyak'), ('Deborah', 'Raia'), ('Vanessa Olimpia', 'Rauta'), ('Zara', 'Lennon'), ('Maria Victoria', 'Negoita'), ('Domenika', 'Turkovic'), ('Kamilla', 'Kokeladze'), ('Silvia Paulina', 'Vilchis Sanchez'), ('Viktoria', 'Glotova'), ('Enola', 'Chiesa'), ('Mariona', 'Perez Noguera'), ('Luminita', 'Tutunaru'), ('Aurora', 'Ciavarelli'), ('Judith', 'Van Kessel'), ('Dalia', 'Ahmed'), ('Maria', 'Marnellou'), ('Paula', 'Veyhle'), ('Costanza', 'Traversi'), ('Samanta', 'Villegas'), ('Olga', 'Terletska'), ('Maria', 'Pereyra Sellart'), ('Tal', 'Zinn'), ('Jodie Annie', 'Lawrence Taylor'), ('Dyane Estefania', 'Barcena Del Bosque'), ('Ana', 'Makatsaria'), ('Aino', 'Alkio'), ('Elinor', 'Storkaas'), ('Nikoletta', 'Muller'), ('Dalila', 'Said'), ('Meriem', 'Turki'), ('Irem', 'Soylu'), ('Adriana', 'Senkarova'), ('Gabriel', 'Karatantcheva'), ('Ayumi', 'Koshiishi'), ('Kathleen', 'Kanev'), ('Yashu', 'Yang'), ('Lizi', 'Morgoshia'), ('Valentina', 'Cvackova'), ('Natalie', 'Slezakova'), ('Therese', 'Ekdahl'), ('Yuxin', 'Zhang'), ('Emily', 'Welker'), ('Emmanouela', 'Antonakis'), ('Leonarda', 'Horvat'), ('Anda', 'Karanusic'), ('Sabhyata', 'Nihalani'), ('Varvara', 'Gracheva'), ('Bianca', 'Bevione'), ('Yasmine', 'Bengebara'), ('Kristina', 'Novak'), ('Ana', 'Fernandez Villa'), ('Hei Ching Claudia', 'Ng'), ('Caitlin', 'Ward'), ('Bhavya', 'Ramineni'), ('Renata', 'Lombera'), ('Nicole', 'Mossmer'), ('Elizaveta', 'Zaritscaya'), ('Franziska', 'Sziedat'), ('Tatiana', 'Makarova'), ('Juliette', 'Colard'), ('Taylor', 'Johnson'), ('Benedetta', 'Ivaldi'), ('Catherine', 'Roche'), ('Ramona Eva', 'Chivu'), ('Malkia', 'Menguene'), ('Fadona Titalyana', 'Kusumawati'), ('Kalliopi', 'Gkouskou'), ('Hanna', 'Tarlouskaya'), ('Daniela', 'Vismane'), ('Eliz', 'Maloney'), ('Lara', 'Panfilov'), ('Rita Maria', 'Bentes De Oliveira Pinto'), ('Mikaela', 'Konstantinova'), ('Susan', 'Salinas'), ('Nicole', 'Knickerbocker'), ('Diana Maria', 'Mihail'), ('Thea Sund', 'Jacobsen'), ('Chelsea', 'Kung'), ('Giulia', 'Spicacci'), ('Danel', 'Ashirova'), ('Cristina', 'Torres Sanchez'), ('Gabriella', 'Da Silva Fick'), ('Paula Andrea', 'Coronado'), ('Chengyiyi', 'Yuan'), ('Christina', 'Berchtold'), ('Fidana', 'Khalilzada'), ('Giulia', 'La Rocca'), ('Simone', 'Simas'), ('Sura', 'Assadova'), ('Salma', 'Ewing'), ('Katia Monserrat', 'De La Garza Valdez'), ('Ana', 'Stefanovic'), ('Suhana Sofia', 'Mohd Adam Das'), ('Prarisa', 'Rachdanone'), ('Arabella', 'Koller'), ('Danai', 'Petroula'), ('Kisa', 'Yoshioka'), ('Julia', 'Oczachowska'), ('Adela', 'Joldic'), ('Ana', 'Lantigua De La Nuez'), ('Eleonora', 'Molinaro'), ('Alexandra', 'Marina'), ('Giulia', 'Carbonaro'), ('Elene', 'Mchedlidze'), ('Carson', 'Branstine'), ('Qianhui', 'Tang'), ('Andreea', 'Craciun'), ('Arielle', 'Nealy'), ('Anastasia', 'Iamachkine'), ('Mihaela Lorena', 'Marculescu'), ('Anna', 'Solovyeva'), ('Klaudia', 'Fedosenkova'), ('Jessica', 'Bruyns'), ('Itxaso', 'Blanco Fernandez De Leceta'), ('Keyi', 'Zhou'), ('Fiona', 'Ganz'), ('Elizabet', 'Hamaliy'), ('Lana', 'Sipek'), ('Zorana', 'Samardzic'), ('Francesca', 'Jones'), ('Ivana', 'Popovic'), ('Adele Diana', 'Biba'), ('Olivia', 'Sonnekus Williams'), ('Maria', 'Oreshkina'), ('Barbara', 'Quagliardi'), ('Shevita', 'Aulana'), ('Wai Yiu', 'Tsang'), ('Ilaria', 'Sposetti'), ('Thitirat', 'Kanaphuet'), ('Liubov', 'Demidova'), ('Dina', 'Chayka'), ('Tamara', 'Malesevic'), ('Sofya', 'Lansere'), ('Julia', 'Vulpio'), ('Kanyalak', 'Boonyarat'), ('Milica', 'Vujovic'), ('En Shuo', 'Liang'), ('Antonia', 'Balzert'), ('Andrea Agostina', 'Farulla Di Palma'), ('Karolina', 'Berankova'), ('Adi', 'Gavish'), ('Nasty', 'Surkova'), ('Kanna', 'Nishida'), ('Aurora', 'Urso'), ('Abla', 'El Kadri'), ('Zeynep', 'Cakirer'), ('Manuela', 'Hernandez'), ('Pamela', 'Cohen'), ('Lisa', 'Mays'), ('Maria', 'SOLNYSHKINA'), ('Victoria', 'Schnell Jacobsen'), ('Tiana', 'Windbuchler'), ('Marcella', 'Cruz'), ('Milana', 'Semenova'), ('Alexandra', 'Viktorovitch'), ('Diae', 'El Jardi'), ('Paulina', 'Engback'), ('Nicha', 'Jitmanee'), ('Fran', 'Booth'), ('Sara', 'Yadav'), ('Ludovica', 'Fusco'), ('Leonie', 'Kung'), ('Victoria', 'Mikhaylova'), ('Deeksha', 'Manju Prasad'), ('Ania', 'Hertel'), ('Aurora', 'Zantedeschi'), ('Taisia', 'Polyarush'), ('Stephanie', 'Belovukovic'), ('Oleksandra', 'Andrieieva'), ('Sofia', 'Voll'), ('Chiara', 'Fermi'), ('Viktoriia', 'Dema'), ('Marily', 'Canellopoulos'), ('Mila', 'Saric'), ('Evangeline', 'Du Toit'), ('Tuana', 'Oz'), ('Yubarani', 'Banerjee'), ('Syeda', 'Gulras Begum'), ('Dagmar', 'Zdrubecka'), ('Solomiya', 'Rohovets'), ('Maria', 'Fernandez Zaragoza'), ('Polina', 'Goloputova'), ('Angel', 'Macleod'), ('Joanne', 'Zuger'), ('Akanksha A', 'Bhan'), ('Lledo', 'Tena Guzman'), ('Anhzelika', 'Isaeva'), ('Elina', 'Sharipova'), ('Alexandra Maria', 'Staiculescu'), ('Lisa', 'Piccinetti'), ('Kaja', 'Juvan'), ('Celine', 'Fritsch'), ('Lena', 'Greiner'), ('Marianthi', 'Tsesmetzi'), ('Emiliana', 'Arango'), ('Tamara', 'Barad Itzhaki'), ('Sarra', 'Ata'), ('Shou Na', 'Mu'), ('Alicia', 'Alegre'), ('Marina', 'Davtyan'), ('Shalimar', 'Talbi'), ('Katherine', 'Fleischman'), ('Brindtha', 'Ramasamy'), ('Alice', 'Viglianisi'), ('Anna', 'TSELYKOVSKAYA'), ('Jennifer Rosa', 'Dourado'), ('Jacquline', 'Nylander Altelius'), ('Ryeong Gyeong', 'Park'), ('Ekaterina', 'Grib'), ('Simona', 'Waltert'), ('Elisabeth', 'Chantraine'), ('Sing Le', 'Fan Chiang'), ('Svetlana', 'Bubnova'), ('Dalayna', 'Hewitt'), ('Mariya', 'Ponomareva'), ('Ayumi', 'Miyamoto'), ('Zejda', 'Veljacic'), ('Nikolina', 'Dzunov'), ('Maren', 'Nordklev'), ('Sofya', 'Treshcheva'), ('Anabel', 'Aran Torrente'), ('Zhuoma', 'Ni Ma'), ('Adrienn', 'Horvath'), ('Alise', 'Cernecka'), ('Priscilla', 'Baron Zichar'), ('Xiaoxi', 'Zhao'), ('Eleftheria', 'Gkogkou'), ('Takalani', 'Molaoa'), ('Alexandera', 'Inozemtseva'), ('Ekaterina', 'Ovcharenko'), ('Alycia', 'Parks'), ('Oleksandra', 'Balaba'), ('Andreea', 'Velcea'), ('Irene', 'Garceran'), ('Ebru Zeynep', 'Yazgan'), ('Selin', 'Ovunc'), ('Vitalia', 'Stamat'), ('Lucianna', 'Piedra'), ('Stephanie', 'Bertschmann'), ('Chloe', 'Cirotte'), ('Yasmeen', 'Ghaoui'), ('Azaliya', 'Badegyeva'), ('Saara', 'Kunakunova'), ('Samantha', 'Nanere'), ('Aleksandra', 'Efremova'), ('Carmen Roxana', 'Manu'), ('Vicky', 'Van De Peer'), ('Maria Ignacia', 'Yapur Lopez'), ('Nicole', 'Khirin'), ('Timea', 'Visontai'), ('Ares', 'Teixido Garcia'), ('Maria Aran', 'Teixido Garcia'), ('Evgeniya', 'Burdina'), ('Emma Erin', 'Kiernan'), ('Ellie', 'Murphy'), ('Maayan', 'Shtern'), ('Laetitia', 'Pulchartova'), ('Manon', 'Leonard'), ('Ines', 'Benito'), ('Kseniya', 'Yersh'), ('Oona', 'Orpana'), ('Abigail', 'Desiatnikov'), ('Zeynep', 'Ay'), ('Gal', 'Shemesh'), ('Martina', 'Biagianti'), ('Olga', 'Danilovic'), ('Rozalina', 'Youseva'), ('Shir', 'Bakshi'), ('Sarah', 'Heckel'), ('Carmen', 'Aizpurua Bernabe'), ('Adva', 'Dabah'), ('Rebeca', 'C Silva'), ('Alice', 'Tubello'), ('Elena', 'Milovanovic'), ('Angie Carolina', 'Yepes Medina'), ('Christina', 'Baer'), ('Heden', 'Ly'), ('Nerea', 'Guerra Santana'), ('Yuzuka', 'Shimizu'), ('Anna', 'Kubareva'), ('Daria', 'Rakitskaya'), ('Sara', 'Neves'), ('Raffaela', 'Alhach'), ('Katherine', 'Lyman'), ('Marta', 'Gonzalez Ballbe'), ('Iariniaina', 'Tsantaniony'), ('Yuki', 'Naito'), ('Mariana', 'Vargas Carrascal'), ('Catarina Castro', 'Cerqueira'), ('Lavinia', 'Lancellotti'), ('Lina', 'Sachica'), ('Anja', 'Draskovic'), ('Yaroslava', 'Gadiatska'), ('Elisabeth', 'Andryukhova'), ('Celine', 'El Ghali'), ('Shani', 'Dubinchik'), ('Carolina', 'Cerowska'), ('Honami', 'Sodeyama'), ('Victoria', 'Allen'), ('Oleksandra', 'Gorchanyuk'), ('Vivien', 'Sandberg'), ('Hurricane Tyra', 'Black'), ('Ayana', 'Noguchi'), ('Marthina Diyani', 'Schwencke'), ('Oumaima', 'Aziz'), ('Zoe', 'Hitt'), ('Gaini', 'Ibrasheva'), ('Maria Florencia', 'Urrutia'), ('Viktoria', 'Morvayova'), ('Abigail', 'Forbes'), ('Lynda', 'Benkaddour'), ('Valeriya', 'Olyanovskaya'), ('Nina', 'Olyanovskaya'), ('Ting Pei', 'Chang'), ('Sivan', 'Raizman'), ('Andei', 'Fukushige'), ('Elena', 'Jamshidi'), ('Valentina Andrea', 'Vasquez Pongruber'), ('Paula', 'Joukanen'), ('Nesrine', 'Troubia'), ('Ksenija', 'Tmusic'), ('Caijsa Wilda', 'Hennemann'), ('Valentina', 'Gaggini'), ('Valentina', 'Ryser'), ('Djihane', 'Tefani'), ('Adrienn', 'Nagy'), ('Clara', 'Burel'), ('Avril', 'Look'), ('Margaryta', 'Bilokin'), ('Xiyu', 'Wang'), ('Lizaveta', 'Artsiomenka'), ('Iulia Bianca', 'Ilinca'), ('Anastasia', 'Potapova'), ('Andrea', 'Cetkovic'), ('Amine', 'Dik'), ('Rut', 'Galindo'), ('Kristin', 'Younes'), ('Marilyn', 'Shekhter'), ('Taylor', 'Dean'), ('Sabina', 'Dadaciu'), ('Alexia', 'Witthaus Vine'), ('Elena', 'Di Battista'), ('Lina', 'Shokry'), ('Luiza', 'Fullana'), ('Sofia', 'Epur'), ('Ya Hsin', 'Lee'), ('Nazli Nader', 'Redha'), ('Amina', 'Lasheen'), ('Lulu', 'Radovcic'), ('Nikol', 'Dobrilova'), ('Nicole', 'Bueno Sandoval'), ('Alice', 'Amendola'), ('Alesya', 'Yakubovich'), ('Azradeniz', 'Comlek'), ('Ekin', 'Ercetin'), ('Sada', 'Nahimana'), ('Andjela', 'Skrobonja'), ('Natalia', 'Roca Ward'), ('Giorgia', 'Di Muzio'), ('Hyeran', 'Yun'), ('Aleksandra', 'Pitak'), ('Liisa', 'Vehvilainen'), ('Sherry', 'Sherry Ayad Abd Elmalek Wassef'), ('Yi Tsen', 'Cho'), ('Maria', 'Pages Mere'), ('Riva', 'Hondiashvili'), ('Anita', 'Hutellier'), ('Tamara', 'Cherkassova'), ('Reka', 'Zadori'), ('Valentina', 'Del Marco'), ('Jillian', 'Taggart'), ('Camille', 'Kirket'), ('Yasmine', 'Mansouri'), ('Kristin', 'Yordanova'), ('Anna', 'Novikova'), ('Emma', 'Navarro'), ('Elizabeth', 'Mandlik'), ('Noor', 'Omara'), ('Anamaria', 'Kiszner Luca'), ('Buket', 'Dogan'), ('Nicole Marlene', 'Sanjon'), ('Rachida', 'Berjane'), ('Laia', 'Conde Monfort'), ('Karolina', 'Kubanova'), ('Loudmilla', 'Bencheikh'), ('Anne', 'Knuettel'), ('Iga', 'Swiatek'), ('Alexandra', 'Vagramov'), ('Manar', 'Charrouf'), ('Ana', 'Shanidze'), ('Anastasiya', 'Zaharova'), ('Anna', 'Laguza'), ('Iveta', 'Daujotaite'), ('Ruxandra', 'Schech'), ('Martyna', 'Habrych'), ('Kristina', 'Milenkovic'), ('Salma', 'Abdelbaset'), ('Mariia', 'Bergen'), ('Ferdaous', 'Bahri'), ('Shauna', 'Heffernan'), ('Zoe', 'Bourbotte'), ('Emma', 'Nurgazieva'), ('Xinyu', 'Cai'), ('Zeynep', 'Erman'), ('Sara', 'El Ghazouly'), ('Isabel', 'Adrover Gallego'), ('Antonia', 'Schmidt'), ('Feriel', 'Mahbouli'), ('Burcak', 'Ekin Yildiztekin'), ('Mahak', 'Jain'), ('Oana Smaranda', 'Corneanu'), ('Benedetta', 'Prato'), ('Adelina', 'Doguzova'), ('Funa', 'Kozaki'), ('Anand Dharana', 'Mudaliar'), ('Sophia', 'Edwards'), ('Anna', 'Siskova'), ('Katarina', 'Trickovic'), ('Myriam', 'Gheziel'), ('Camila Magali', 'Romero'), ('Isabella', 'Harvison'), ('Stefania', 'Rogozinska Dzik'), ('Alexia', 'Alvarez Gerochristodoulou'), ('Arina', 'Solomatina'), ('Elizaveta', 'Koklina'), ('Melody', 'Todorova'), ('Vlada', 'Koval'), ('Kexuan', 'Zhou'), ('Elizabeth', 'Scotty'), ('Lana', 'Stefanovic'), ('Giuliana', 'Liga'), ('Maram Mohamed', 'Sharif'), ('Nikola', 'Breckova'), ('Zoziya', 'Kardava'), ('Katarina Duic', 'Plumtree'), ('Eliza', 'Eglit'), ('Joanna', 'Garland'), ('Ksenia', 'Domnina'), ('Alexandra Diana', 'Braga'), ('Dorra', 'Roumani'), ('Sophia', 'Kermet'), ('Angela', 'Diez Plagaro'), ('Nadja', 'Bay Christians'), ('Nesrine', 'Korso Feciane'), ('Lauren', 'Cooper'), ('Aisha', 'Kukushkina'), ('Alexandra', 'Anttila'), ('Mariami', 'Akhalaia'), ('Mana', 'Kawamura'), ('Aida', 'Garcia Mendez'), ('Tanysha', 'Dissanayake'), ('Laura', 'Ashley'), ('Anika', 'Yarlagadda'), ('Caroline', 'Furlaneto'), ('Mylene', 'Halemai'), ('Moyuka', 'Uchijima'), ('Gemma', 'Heath'), ('Andreea Elena', 'Iordachi'), ('Milana', 'Maslenkova'), ('Zeynep Naz', 'Ozturk'), ('Nicolle Andrea', 'Gomez Romero'), ('Anna', 'Baranovski'), ('Sai Dedeepya', 'Yeddula'), ('Carolina', 'Velazquez'), ('Alisa', 'Yakimakho'), ('Diana', 'Khodan'), ('Layne', 'Sleeth'), ('Thasaporn', 'Naklo'), ('Yasmina', 'Karimjanova'), ('Leana', 'Atlan'), ('Laure Line', 'Glaude'), ('Fanni', 'Gecsek'), ('Natthapat', 'Piwbangruk'), ('Kamilla', 'Rakhimova'), ('Ana Luiza', 'Cruz'), ('Chloe', 'Beck'), ('Amanda', 'Anisimova'), ('Vladlena', 'Samenkova'), ('Lara', 'Biter'), ('Alexa', 'Ryngler'), ('Koral', 'Koldobski'), ('Najah', 'Dawson'), ('Milica', 'Bojic'), ('Alessia Beatrice', 'Ciuca'), ('Alexandra', 'Ferreira Da Silva'), ('Vlada', 'Zvereva'), ('Nikol', 'Docheva'), ('Barbara', 'Dessolis'), ('Lucia', 'Garrigues Melendez'), ('Xin Yu', 'Wang'), ('Sanyukta', 'Gawande'), ('Lilly Elida', 'Haseth'), ('Jesse', 'Hollins'), ('Valerie', 'Litzell'), ('Peyton', 'Stearns'), ('Anastasiya', 'Belogrivceva'), ('Maja', 'Makoric'), ('Lorena', 'Alves Castellanos'), ('Maja', 'Chwalinska'), ('Ivana', 'Loncar Antic'), ('Shale', 'Bouchard'), ('Mey', 'Ayari'), ('Yekaterina', 'Dmitrichenko'), ('Dana', 'Ferreyra'), ('Assel', 'Tuzelbekova'), ('Pilar', 'Astigarraga Harper'), ('Nikki', 'Redelijk'), ('Polina', 'Lushnikova'), ('Laura', 'Masic'), ('Nour', 'Damergi'), ('Dolavee', 'Tumthong'), ('Cristina', 'Mayorova Bakhtina'), ('Havana', 'Dauncey'), ('Daniella', 'Medvedeva'), ('Ingrid Carolina', 'Millan'), ('Ilay', 'Yoruk'), ('Nuria', 'Garrido Femenias'), ('Mariam', 'Dalakishvili'), ('Anastasiya', 'Poplavska'), ('Sarah', 'Mar'), ('Isabella', 'Bozicevic'), ('Mumtoza', 'Mamadaliyeva'), ('Gozde', 'Turhan'), ('Zoi', 'Meers'), ('Caty', 'Mcnally'), ('Selina', 'Atay'), ('Jazmin', 'Ortenzi'), ('Mihaela', 'Djakovic'), ('Alessia', 'Tagliente'), ('Jiangxue', 'Han'), ('Adithya', 'Karunaratne'), ('Xue', 'Cao'), ('Valeriya', 'Rozenkova'), ('Mariam Ashraf', 'Mohamed Mostafa'), ('Imani', 'Graham'), ('Maria Camila', 'Osorio Serrano'), ('Jasmin', 'Bruni'), ('Saara', 'Orav'), ('Katie', 'Volynets'), ('Anna', 'Kalabukhova'), ('Tuana', 'Tinaztepe'), ('Alexandra', 'Vecic'), ('Ran', 'Miyachi'), ('Angelina', 'Melki'), ('Sevil', 'Yuldasheva'), ('Alexandra', 'Silna'), ('Shavit', 'Kimchi'), ('Eva', 'Lys'), ('Giulia', 'Morlet'), ('Zeynep  Sena', 'Sarioglan'), ('Nina', 'Nikprelevic'), ('Anastasia', 'Zakharova'), ('Lotta', 'Heiskanen'), ('Fabiana', 'Marmiroli'), ('Sumin', 'Kim'), ('Matilde', 'Mariani'), ('Judith', 'Perello Saavedra'), ('Dayeon', 'Back'), ('Kristyna', 'Lavickova'), ('Ange Oby', 'Kajuru'), ('Caterina', 'Greco'), ('Luisa', 'Meyer Auf Der Heide'), ('Maria Ines', 'Fonte'), ('Manni', 'Zhang'), ('Sara', 'Ziodato'), ('Gaia', 'Morganti'), ('Jana', 'Knaab'), ('Elisa Andrea', 'Camerano'), ('Chloe', 'Compson'), ('Odul', 'Okur'), ('Ludmila', 'Kareisova'), ('Ana Maria', 'Gonzalez Ruiz'), ('Ana Maria', 'Zamfir'), ('Andrea', 'Sauco Roque'), ('Valentina', 'Shleyn'), ('Carol', 'Plakk'), ('Lina', 'Sfar'), ('Peppi', 'Ramstedt'), ('Tara', 'Gancev'), ('Anna', 'Zhang'), ('Maria', 'Petrovic'), ('Emilie', 'Elde'), ('Renon', 'Mano'), ('Katriin', 'Saar'), ('Hong Yi Cody', 'Wong'), ('Irawan', 'Deewajee'), ('Maelys', 'Bougrat'), ('Lorena Maria', 'Danaila'), ('Daniela', 'Schekaiban'), ('Jessica', 'Plazas'), ('Ella', 'Haavisto'), ('Supapitch', 'Kuearum'), ('Isabella', 'Nunez'), ('Anda', 'Ghinga'), ('Marina', 'Delgado Valero'), ('Himari', 'Sato'), ('Monika', 'Popovic'), ('Saki', 'Imamura'), ('Whitney', 'Osuigwe'), ('Helene', 'Pellicano'), ('Miku', 'Yamamoto'), ('Olivia', 'Gadecki'), ('Zeynep', 'Sonmez'), ('Ksenia', 'Brich'), ('Wing Ka', 'Lin'), ('Dakota', 'Fordham'), ('Betina', 'Tokac'), ('Chantal', 'Sauvant'), ('Leila', 'Koster'), ('Emma', 'Eerola'), ('Carlota', 'Martin Santana'), ('Megan', 'Basson'), ('Naomi', 'Cheong'), ('Lizette', 'Reding'), ('Lauren', 'Stein'), ('Momoko', 'Nishio'), ('Hedda', 'Gurholt'), ('Ana', 'Geller'), ('Anastasia', 'Petrova'), ('Mina', 'Hodzic'), ('Fiona', 'Arrese Mata'), ('Angela', 'Juarez Blanco'), ('Muslima', 'Akhunova'), ('Ariana', 'Arseneault'), ('Angelina', 'Wirges'), ('Berna', 'Yahe'), ('Giulia', 'Tedesco'), ('Jihane', 'Megdiche'), ('Avelina', 'Sayfetdinova'), ('Marta', 'Kostyuk'), ('Sohyun', 'Park'), ('Leonor', 'Oliveira'), ('Mananchaya', 'Sawangkaew'), ('Lola', 'Marandel'), ('Emilia', 'Salo'), ('Denisa', 'Hindova'), ('Jovana', 'Trickovic'), ('Lian', 'Tran'), ('Federica', 'Trevisan'), ('Marketa', 'Panackova'), ('Zoe', 'Kruger'), ('Mariana', 'Zuluaga Robledo'), ('Lunda', 'Kumhom'), ('Marta', 'Cuevas Guerrero'), ('Nasiba', 'Espolova'), ('Mai Napatt', 'Nirundorn'), ('Elena', 'Trencheva'), ('Miyuka', 'Kimoto'), ('Diane', 'Parry'), ('Leylah Annie', 'Fernandez'), ('Alexa', 'Noel'), ('Romana', 'Cisovska'), ('Dami', 'Edibson Messiah'), ('Aunchisa', 'Chanta'), ('Elina', 'Avanesyan'), ('Doga', 'Turkmen'), ('Sophie', 'Abrams'), ('Viktoriya', 'Kanapatskaya'), ('Lisa', 'Kung'), ('Natcharee', 'Teerachodjiranon'), ('Salma', 'Djoubri'), ('Nelly', 'Mezan'), ('Beyda', 'Baykal'), ('Rebeka', 'Kern'), ('Hania', 'Abouelsaad'), ('Punnin', 'Kovapitukted'), ('Milana', 'Zhabrailova'), ('Jimin', 'Kwon'), ('Ryoko', 'Ikeda'), ('Paulina Ailin', 'Sainz'), ('Yuna', 'Saito'), ('Yeon Woo', 'Ku'), ('Sapfo', 'Sakellaridi'), ('Alice', 'Gubertini'), ('Noa', 'Krznaric'), ('Sheena Jade', 'Masuda Karrasch'), ('Maddalena', 'Giordano'), ('Fernanda', 'Castillo Huerta'), ('Dorothy', 'Whitely'), ('Kay', 'Williams'), ('Eva', 'De Jong'), ('Valerie', 'Caulley'), ('L', 'Griffiths'), ('Sandra', 'Hole'), ('Beryl', 'Jenkins'), ('Loris', 'Butterfield'), ('Geri', 'Shepard'), ('Marilyn', 'Tesch'), ('Helen', 'Sheedy'), ('S', 'Washbourne'), ('S', 'Stephen'), ('Lexie', 'Kenny'), ('Lynette', 'Mansfield'), ('Janine', 'Whyte'), ('Helen', 'Oconnor'), ('Joan', 'Johnson'), ('Patricia', 'Edwards'), ('Heather', 'Mckechnie'), ('Ann', 'Jenkins'), ('Caroline', 'Cooper'), ('Kaye', 'Dening'), ('Kerry', 'Wilkinson'), ('Alison', 'Mckenzie'), ('Sue', 'Hastings'), ('Margaret', 'Starr'), ('E', 'Staples'), ('Yveline', 'Boy'), ('Janine', 'Murdoch'), ('D', 'Brennan'), ('Frances', 'Luff'), ('Helen', 'Kayser'), ('H', 'Rush'), ('Caroline', 'Langsford'), ('Sally', 'Irvine'), ('Sharon', 'Thomson'), ('Teresa', 'Van Haren'), ('Sandra', 'Walsham'), ('Judy', 'Harris'), ('L', 'Cameron'), ('Cheryl', 'Norquay'), ('Mandy', 'Morgan'), ('Norma', 'Eastburn'), ('Susan', 'Alexander'), ('Janet', 'Fallis'), ('Helen', 'Taylor'), ('Anne', 'Coleman'), ('Kati', 'Athorne'), ('Diane', 'James'), ('Robyn', 'Knobel'), ('Patricia', 'Billing'), ('Brenda', 'Dart'), ('Maureen', 'Pratt'), ('Patricia', 'King'), ('Kathy', 'Walker'), ('Helen', 'Young'), ('Moira', 'Whitely'), ('Leslie', 'Walker'), ('Marion', 'Proisy'), ('Joan', 'Walker'), ('Helen', 'Crozier'), ('Isabelle', 'Larsson'), ('Frances', 'Candy'), ('Jd', 'Griffiths'), ('Anneloes', 'Schothurst'), ('Sally', 'Arnott'), ('Gail', 'Williams'), ('Miki', 'Yokobori'), ('Chris', 'Cerato'), ('Vivicca', 'Andersson'), ('Gwen', 'Stirton'), ('Ai', 'Iida'), ('Lois', 'Raymond'), ('Julie', 'Staines'), ('Cheree', 'Walker'), ('Kerry', 'Neill'), ('Merrilyn', 'Robinson'), ('Julie', 'Hanrahan'), ('Karen', 'Gulley'), ('Pamela', 'Bailey'), ('Michelle', 'Pekovitch'), ('Sharon', 'Pinchbeck'), ('Jitka', 'Volavkova'), ('Paola', 'Palacios'), ('Anne Marie', 'Studer'), ('Kora', 'Schediwy'), ('Marion', 'Cristiani'), ('Aline', 'Nenot'), ('Gillian', 'Dove'), ('Ann', 'Phillips Moore'), ('Nicole', 'Niox Chateau'), ('Eugenia', 'Isopaitis'), ('Ilse', 'Buding'), ('Chantal', 'Langanay'), ('Janine', 'Mauroy Toffier'), ('Michelle', 'Rodriguez'), ('Dionissia', 'Asteri'), ('Francesca', 'Gordigiani'), ('Margarita', 'Zuleta'), ('Erzsebet', 'Polgar'), ('Yaeko', 'Matsuda'), ('Tiiu', 'Kivi'), ('Sharon', 'Van Brandis'), ('Becky', 'Vest'), ('Joan', 'Koudelka'), ('Aleksandra', 'Ivanova'), ('Marina', 'Chuvirina'), ('Carmen', 'Ibarra'), ('Alison', 'Mcmillan'), ('Sylvie', 'Rual'), ('Mimi', 'Wheeler'), ('Pixie', 'Lamm'), ('Margaret', 'Lee'), ('Pauline', 'Roberts'), ('Wendy', 'Hall'), ('Victoria', 'Rogers'), ('Maria Teresa', 'Riedl'), ('Marion', 'Boundy'), ('Susan', 'Northen'), ('Anita', 'Van Deventer'), ('Chikako', 'Murakami'), ('Lisa', 'Fleming'), ('Elena', 'Granaturova'), ('Martina', 'Walsh'), ('Elizabeth', 'Gordon'), ('Shawna', 'Martin'), ('Vija', 'Vuskalns'), ('Farel', 'Footman'), ('Peggy', 'Moore'), ('Tish', 'Adams'), ('Jade', 'Schiffman'), ('Carole', 'Herrick'), ('Emilie', 'Fisher'), ('Diane', 'Matzner'), ('Mary', 'Lowdon'), ('Ann', 'Moore'), ('Tina', 'Lyman'), ('Maricaye', 'Christenson'), ('Raymonde', 'Jones'), ('Carol', 'Hunter'), ('Carol', 'Aucamp'), ('Emilie', 'Burrer'), ('Pam', 'Farmer'), ('Shari', 'Barman'), ('Marcy', 'Okeefe'), ('Sally', 'Moore'), ('Lucy', 'Gordon'), ('Xenia', 'Anastasiados'), ('Judith', 'Mercade'), ('Ana', 'Aubone'), ('Iris', 'Thompson'), ('Ingrid', 'Jonge'), ('Nancy', 'Harris'), ('Maria', 'Muntanola'), ('Birthe', 'Glatzel'), ('Rosemary', 'Eden'), ('Patricia', 'Gomez'), ('Laura', 'Giussani'), ('Kathy', 'Barton'), ('Kathleen', 'Carey'), ('Keiko', 'Morimoto'), ('Suzie', 'Holm'), ('Lili', 'Bell'), ('Susana', 'Rojas'), ('Jane', 'Holdren'), ('Darlene', 'Williamson'), ('Janthe', 'Cunningham'), ('Sherry', 'Hull'), ('Edie', 'Carell'), ('Robin', 'Boss'), ('Annalisa', 'Pesce'), ('Clare', 'Schmoyer'), ('Marsha', 'Bladel'), ('Karen', 'Denman'), ('Stephanie', 'Hales'), ('Glynis', 'Oconnor'), ('Allegra', 'Cesare'), ('Kuniyo', 'Tsukamoto'), ('Natalya', 'Borodina'), ('Yoko', 'Mitsuko'), ('Rie', 'Nakazaka'), ('Barbara', 'Hambridge'), ('Maree', 'Booth'), ('Susan', 'Kreymborg'), ('Helen', 'Middleton'), ('Helen', 'Luscombe'), ('Jenny', 'Combs'), ('Jackie', 'Monsour'), ('Jackie', 'Pinto'), ('G', 'Wilson'), ('Julie', 'Peters'), ('Kathy', 'Mantle'), ('Kerrie', 'Byrne'), ('Gwen', 'Warnock'), ('Petra', 'Tesarova'), ('Alison', 'De Vries'), ('Gina', 'Fogarty'), ('Jennifer', 'Fenwick'), ('J', 'Tobin'), ('Miyoko', 'Sugawara'), ('Diane', 'Eastburn'), ('Donna', 'Kelly'), ('Sue', 'Chancellor'), ('Amanda', 'Pryor'), ('Rosalyn', 'Mccann'), ('Eri', 'Murata'), ('M', 'Berta'), ('V', 'Von Demleaux'), ('S', 'Matthews'), ('C', 'Crawford'), ('K', 'Leslie'), ('Wendy', 'Pearson'), ('J', 'Carey'), ('Helen', 'Rice'), ('Evelyn', 'Lim'), ('M', 'Earl'), ('C', 'Mcquaide'), ('S', 'Middleton'), ('G', 'Thacker'), ('G', 'Ayre'), ('Michele', 'Mizen'), ('Stephanie', 'Bardsley'), ('Jacqueline', 'Berson'), ('Marie Christine', 'Brochard'), ('Kumarani', 'Ranga Rao'), ('T', 'Novaco'), ('Maria', 'Hollingsworth'), ('Christiane', 'Sarrazin'), ('J', 'Turner'), ('Chantal', 'Puget'), ('Susanne', 'Korpas'), ('Andrea', 'Menezes'), ('J', 'Ray'), ('Huguette', 'Barat'), ('D', 'Jainer'), ('K', 'Bluhm'), ('Martine', 'Le Rays'), ('B', 'Dalzell'), ('J', 'James'), ('R', 'Witeker'), ('L', 'Rios De Almeida'), ('Meiko', 'Miyashita'), ('Patricia', 'Rime'), ('Elisabeth', 'Du Fresne Girard'), ('Catherine', 'De Lorme'), ('Cristina', 'Ribeiro Britto'), ('Martine', 'Cazaux'), ('N', 'Marman'), ('Soraya', 'Guellas'), ('Saadia', 'Mezdel'), ('E', 'Kogl'), ('Satoyo', 'Funaki'), ('F', 'Dawson'), ('Natalie', 'Scaramanga'), ('Agnes', 'Figueras'), ('Elizabeth', 'Dinopoulos'), ('Dominique', 'Oustric'), ('Carla', 'Mei'), ('Catherine', 'Chevalier'), ('A', 'Belladonna'), ('D', 'Maccloskey'), ('Helen', 'Liebenberg'), ('Martine', 'Jodin'), ('Pascale', 'Bonneteau'), ('', 'Marine'), ('Catherine', 'Alzate'), ('Ayi', 'Sutarno'), ('Cecilia', 'Barbat'), ('M', 'Mesek'), ('Wendy', 'Maccloskey'), ('Diana', 'Flickier'), ('Marion', 'Foldina'), ('Anne Marie', 'Casado'), ('Anne', 'Fritz'), ('Jeske', 'Van Erven'), ('Sabine', 'Mueller'), ('Kim', 'Seddon'), ('Ellen', 'Walliser'), ('Maria', 'Mendez'), ('Ann', 'Garbay'), ('Carole', 'Luccarelli'), ('Lorrayne', 'Gracie'), ('Susan', 'Leach'), ('Tonia', 'Bayley'), ('A', 'Schroeder'), ('Maria', 'Fernandez'), ('Karen', 'Kennington'), ('Karen', 'Dawson'), ('Jenny', 'Gardiner'), ('Lisa', 'Kearney'), ('Kathy', 'Mueller'), ('Pascale', 'Bernateau'), ('Judith', 'Principe'), ('Becky', 'Bell'), ('Connie', 'Yowell'), ('Lori', 'Miller'), ('Lisa', 'Bublitz'), ('Suzanne', 'Jarell'), ('Merrilee', 'Keller'), ('Hee Jeong', 'Baek'), ('Chris', 'Gillis'), ('Karen', 'Frawley'), ('Xiaojing', 'Lu'), ('Natalia', 'Vizhunova'), ('Florinda', 'Videa'), ('Solma', 'Norovz Najeri'), ('Joelie', 'Brousseaud'), ('Geraldine', 'Rimes'), ('Charlotte', 'Sikorra'), ('Joy', 'Rodrigues'), ('Maria Carmen', 'Gaso'), ('Gabriela', 'Delgado'), ('D', 'ESPINAL'), ('Y', 'FARID'), ('S', 'BACCAR'), ('Veronica', 'Osogo Nabwire'), ('Gladys', 'Imperial'), ('Marisa', 'Sanchez'), ('Stefania', 'Sernaglia'), ('Paula', 'Alvarez'), ('Cleopatra', 'Lopez'), ('Monika', 'Hassmann'), ('Jacqueline', 'Morales'), ('Alice', 'Alexandri'), ('Silvia', 'Gubler'), ('Norma', 'Baylon'), ('Lea', 'Degen'), ('Eleanor', 'Mcfadden'), ('Klara', 'Bardoczy'), ('Sonja', 'Fetz'), ('Xantippe', 'Vassiliadou'), ('Ping Sr', 'Wang'), ('Parvin', 'Afshar'), ('Sadigheh', 'Akbari'), ('Elza', 'Bellens'), ('Ulla', 'Pontoppidan'), ('Alice', 'Wavre'), ('Janine', 'Bourgnon'), ('Rosario', 'Briones'), ('Liu Shang', 'Ku'), ('Antonia', 'Prado'), ('Maureen', 'Schwartz'), ('Marketa', 'Prochova'), ('Nenni', 'Delmestre'), ('Narayanee', 'Gopal'), ('Deepika', 'Krishnappa'), ('Praveeni', 'Srinivasan'), ('Simona', 'Borisova'), ('Corin', 'De Waal'), ('Eva', 'Kolarovska'), ('Loveth', 'Donatus'), ('Nina', 'Kolar'), ('Aanu', 'Ayegbusi'), ('Christie', 'Nwankwo'), ('Fabienne', 'Schmidt'), ('Delisha', 'Guttikonda'), ('Haley', 'Giavara'), ('Claudia Cecilia', 'Rosas Garcia'), ('Jenna', 'Friedel'), ('Hoda', 'Habib'), ('Paulina', 'Bakaite'), ('Karolina', 'Kowall'), ('Maia', 'Sosa'), ('Haina', 'Franco'), ('G', 'NILAND'), ('M', 'POOS'), ('Analisa', 'Miro'), ('Van', 'Nguyen Ai Ngoc'), ('Kaoru', 'Okamoto'), ('Helen', 'Fraser'), ('Robin', 'Lesh'), ('S', 'Goot'), ('Jennifer', 'Nelson'), ('Sei Rei', 'Cho'), ('Robyn', 'Davis'), ('Christine', 'King'), ('Barbara', 'Murphy'), ('Sharon', 'Oconnor'), ('J', 'Lin'), ('Pamela', 'Southcombe'), ('Bernadette', 'Heavey'), ('Patricia', 'Ahern'), ('Michelle', 'Arnott'), ('Jennifer', 'Glynn'), ('Mary', 'Liddle'), ('Judy', 'Forbes'), ('Cheryl', 'Germaine'), ('Suzanne', 'Lundgren'), ('Jenny', 'Burrows'), ('Wendy', 'Moore'), ('Beatrice', 'Abbas'), ('Maud', 'Galtier'), ('Dominique', 'Burel'), ('Eleanora', 'Dumitrescu'), ('Ekaterina', 'Rosianu'), ('Jean', 'Knight'), ('Valerie', 'Forbes'), ('Barbara', 'Walsh'), ('Wendy', 'Slaughter'), ('Jan', 'Morton'), ('Mary', 'Mcanally'), ('Mary', 'Johnson'), ('Claire', 'Chapman'), ('', 'Brown'), ('Barbara', 'Lemberg'), ('Denise', 'Taylor'), ('Revonne', 'Du Toit'), ('Rayleen', 'Henningson'), ('Leanne', 'Palmisano'), ('Maureen', 'Rankine'), ('Hiroko', 'Sato'), ('Meg', 'Boyle'), ('B', 'Rupp'), ('Tanya', 'Kovachka'), ('Wendy', 'Pattenden'), ('Nancy', 'Killingsworth'), ('Keiko', 'Hayashi'), ('Stephanie', 'Meier'), ('Karen', 'Hueffman'), ('', 'Mckinney'), ('Ann', 'Gorneva Krulevitz'), ('', 'Munsell'), ('Michaela', 'Masur'), ('Jill', 'Patterson'), ('Sheila', 'Ohlsson'), ('Aura', 'Gheorge'), ('Barbel', 'Wohlfahrt'), ('Jennifer', 'Rothschild'), ('Akiko', 'Ueda'), ('Ellen', 'Drieberger'), ('Lynn', 'Rolley'), ('I', 'Norman'), ('Alexandra', 'Boutellier'), ('', 'Raimo'), ('Aschara', 'Moranon'), ('', 'Yoivera'), ('G', 'Read'), ('Kiki', 'Reuter'), ('Cathy', 'Canuti'), ('', 'Stafford'), ('Emmy', 'Ho'), ('', 'Gratton'), ('Claudette', 'Laliberte'), ('Daniela', 'Russino'), ('Marine', 'Jacquet'), ('Ting', 'Wang'), ('Lisa', 'Barg'), ('Chisa', 'Packard'), ('Lindsay', 'Lee'), ('Virginia', 'Brown'), ('Anne Sophie', 'Bruner'), ('Anje', 'Lauber'), ('M', 'Mcgrath'), ('Christine', 'Moroe'), ('Kyung Yee', 'Chang'), ('Noemi', 'Minzberg'), ('Skywalkie', 'Raimrova'), ('Marta', 'Rozas'), ('Monica', 'Jimenez'), ('Nowlenn', 'Peltier'), ('Anne', 'Walrick'), ('Makiko', 'Inekaku'), ('Grace', 'Summerside'), ('Elena', 'Ravnlanska'), ('Katja', 'Nossik'), ('Dina', 'Jovanovic'), ('Robertina', 'Marcu'), ('Inna', 'Brioukhovets'), ('Machiko', 'Fujiwara'), ('Cindy', 'Hill'), ('Yanet', 'Yanez'), ('Melanie', 'Tu'), ('Keri', 'Preng'), ('Katherine', 'Zordani'), ('Marina', 'Komatsu'), ('Yasmeen', 'Parviz'), ('Anastasia', 'Sukhotina'), ('Hei Ching Claudia', 'Ng'), ('Nina', 'Knez'), ('Katsiaryna', 'Skachkova'), ('Natasha', 'Subhash'), ('Addison', 'Brown'), ('Safiya', 'Carrington'), ('Alisia Stephanie', 'Manolescu'), ('Venia', 'Yeung'), ('Andrea', 'Gerhardt'), ('Dionissia', 'Kotsia'), ('Lise', 'Hahn Evers'), ('Lena', 'Dvornik'), ('Carmencita', 'De La Rosa'), ('Margaret', 'Burns'), ('Mary', 'Marechal'), ('Deanne', 'Bell'), ('Meenal', 'Maharwal'), ('Farah', 'Khalil'), ('Anastasiia', 'Chesnokova'), ('Lidya', 'Yargovan'), ('Isabella', 'Caballero'), ('Paola', 'Cortez Vargas'), ('Liria', 'Loria Pereyra'), ('Daria', 'Lukyanova'), ('Shufaa Changawa', 'Ruwa'), ('Katarina', 'Karanja'), ('Paige Wanjiku', 'Mbugua'), ('Polina', 'Smolskaya'), ('Idoia', 'Huerta Gallardo'), ('Paulina', 'Mecho Hernandez'), ('Shani', 'Gatterer'), ('Oluchukwu Jennifer', 'Ibeto'), ('Nour', 'Dib'), ('Viktoriya', 'Petrenko'), ('Daria', 'Nazarkina'), ('Anastasiya', 'Khrustaleva'), ('Yasmine', 'Khiri'), ('Ghita', 'Courdi'), ('Hind', 'Semlali'), ('Michele', 'Zmau')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name of every student who has a dog but does not have a cat?' in SQLite? I currently have 'SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat'', which outputs [('Tracy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name of every student who has a dog but does not have a cat?' in SQLite? I currently have 'SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')', which outputs [('Tracy', 19), ('Tracy', 19)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the pixel aspect ratio and country of origin for all TV channels that do not use English?' in SQLite? I currently have 'SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'', which outputs [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airlines that have some flight departing from airport 'AHD'?' in SQLite? I currently have 'SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city is the most frequent source airport?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many shops are there in each location?' in SQLite? I currently have 'SELECT COUNT(*) ,  Location FROM shop GROUP BY Location', which outputs [(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries has more than 2 car makers ?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Id), Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2', which outputs [(4, '1'), (4, '2'), (3, '3'), (5, '4')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries has more than 2 car makers ?' in SQLite? I currently have 'select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2', which outputs [(4,), (4,), (3,), (5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average number of injuries caused each time?' in SQLite? I currently have 'SELECT AVG(injured) FROM death', which outputs [(1.0769230769230769,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(injured) FROM death\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.' in SQLite? I currently have 'SELECT T2.first_name, T2.middle_name, T2.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id JOIN Students AS T2 ON T3.student_id = T2.student_id WHERE T1.degree_summary_name = 'Bachelor'', which outputs [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Reva', 'Golda', 'Osinski'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.' in SQLite? I currently have 'SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'', which outputs [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much surface area do the countires in the Carribean cover together?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean'', which outputs [(234423.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \\\"Caribbean\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?' in SQLite? I currently have 'SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3 ', which outputs [(1, 'usa'), (2, 'germany'), (4, 'japan')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?' in SQLite? I currently have 'select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';', which outputs [(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population of Gelderland district?' in SQLite? I currently have 'SELECT sum(Population) FROM city WHERE District = 'Gelderland'', which outputs [(545548,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM city WHERE District  =  \\\"Gelderland\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and name of the museum that has the most staff members?' in SQLite? I currently have 'SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1', which outputs [(1, 'Plaza Museum')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the different car makers who produced a car in 1970?' in SQLite? I currently have 'SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T4 ON T1.Id = T4.Maker JOIN car_names AS T2 ON T4.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = 1970', which outputs [('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the cost and treatment type description of each treatment?' in SQLite? I currently have 'SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code', which outputs [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the final tables made and best finishes for all poker players?' in SQLite? I currently have 'SELECT Final_Table_Made, Best_Finish FROM poker_player', which outputs [(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Final_Table_Made ,  Best_Finish FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airline has most number of flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline ORDER BY count(FlightNo) DESC LIMIT 1', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airline has most number of flights?' in SQLite? I currently have 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1', which outputs [('Virgin America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of template types that have fewer than 3 templates?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING count(T2.Template_ID) < 3', which outputs [('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the money rank of the player with the greatest earnings.' in SQLite? I currently have 'SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1', which outputs [(58.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List pairs of the owner's first name and the dogs's name.' in SQLite? I currently have 'SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id', which outputs [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population and maximum GNP in Asia?' in SQLite? I currently have 'SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'', which outputs [(3705025700, 3787042.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.' in SQLite? I currently have 'SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')', which outputs [('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.' in SQLite? I currently have 'SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'', which outputs [('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.' in SQLite? I currently have 'SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'', which outputs [('uboehm@example.org',), ('mekhi.little@example.org',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights that arrive in Aberdeen.' in SQLite? I currently have 'SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the hometown of the youngest teacher?' in SQLite? I currently have 'SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)', which outputs [('Farnworth Municipal Borough',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of the dogs of the rarest breed and the treatment dates of them.' in SQLite? I currently have 'SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )', which outputs [('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of visitors who did not visit any museum opened after 2010.' in SQLite? I currently have 'SELECT count(ID) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > 2010)', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template ids and number of documents using each template.' in SQLite? I currently have 'SELECT T1.Template_ID, COUNT(T2.Document_ID)  FROM Templates AS T1  JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID', which outputs [(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of countries that are in Europe and have a population equal to 80000.' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE continent  =  \\\"Europe\\\" AND Population  =  \\\"80000\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .' in SQLite? I currently have 'SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000)', which outputs [('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the locations and names of all stations with capacity between 5000 and 10000?' in SQLite? I currently have 'SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and descriptions for all the sections?' in SQLite? I currently have 'SELECT section_name, section_description FROM Sections', which outputs [('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name ,  section_description FROM Sections\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of Airline \"United Airlines\"?' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are flight numbers of Airline \"United Airlines\"?' in SQLite? I currently have 'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"', which outputs [(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the degree summary name that has the most number of students enrolled?' in SQLite? I currently have 'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1', which outputs [('Bachelor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name and the release year of the song by the youngest singer.' in SQLite? I currently have 'SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)', which outputs [('Love', '2016')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of all tv channels that have more than 2 TV channels?' in SQLite? I currently have 'SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.id HAVING count(*) > 2', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of all tv channels that have more than 2 TV channels?' in SQLite? I currently have 'SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2', which outputs [('700',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the property type descriptions of properties belonging to that code.' in SQLite? I currently have 'SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code', which outputs [('House, Bungalow, etc.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Field, Meadow.',), ('Apartment, Flat, Condo, etc.',), ('Shop, Retail Outlet.',), ('Shop, Retail Outlet.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the property type descriptions of properties belonging to that code.' in SQLite? I currently have 'SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code', which outputs [('Apartment, Flat, Condo, etc.',), ('Field, Meadow.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Shop, Retail Outlet.',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of people living in the nations that do not use English?' in SQLite? I currently have 'SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', which outputs [(5451331150,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models for the cards produced after 1980?' in SQLite? I currently have 'SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN model_list AS T3 ON T1.Model = T3.Model WHERE T2.Year > 1980', which outputs [('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the area code in which the most voters voted?' in SQLite? I currently have 'SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(T2.vote_id) DESC LIMIT 1', which outputs [(212,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find number of pets owned by students who are older than 20.' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different descriptions for templates that have been used in a document.' in SQLite? I currently have 'SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID', which outputs [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the player with the most tours?' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  WHERE T2.tours = (SELECT max(tours) FROM rankings)', which outputs [('Julia', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the player with the most tours?' in SQLite? I currently have 'SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1', which outputs [('USA', 'Julia')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium name and the number of concerts in each stadium.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name', which outputs [('Balmoor', 1), ('Glebe Park', 1), ('Recreation Park', 1), ('Somerset Park', 2), (\"Stark's Park\", 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium name and the number of concerts in each stadium.' in SQLite? I currently have 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', which outputs [(\"Stark's Park\", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id and name of the document with the most paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(*) DESC LIMIT 1', which outputs [(2394, 'Customer reviews')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of United Airlines flights leaving from AHD Airport.' in SQLite? I currently have 'SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what are the different names of the singers that have sales more than 300000?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000', which outputs [('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which cities are in European countries where English is not the official language?' in SQLite? I currently have 'SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND T2.Code NOT IN (SELECT T3.CountryCode FROM countrylanguage AS T3 WHERE T3.Language = 'English' AND T3.IsOfficial = 'T')', which outputs [('Tirana',), ('Andorra la Vella',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tallinn',), ('Tartu',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Tórshavn',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Monte-Carlo',), ('Monaco-Ville',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Skopje',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Zeleznogorsk',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Longyearbyen',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Città del Vaticano',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which cities are in European countries where English is not the official language?' in SQLite? I currently have 'SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')', which outputs [('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me Brazilâ€™s population and life expectancies.' in SQLite? I currently have 'SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'', which outputs [(170115000, 62.9)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights have destination ATO?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \\\"ATO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have a republic as their form of government?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'', which outputs [(143,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have a republic as their form of government?' in SQLite? I currently have 'SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"', which outputs [(122,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name and results of the battles when the bulgarian commander is not 'Boril'' in SQLite? I currently have 'SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'', which outputs [('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and id of the department with the most number of degrees ?' in SQLite? I currently have 'SELECT T1.department_id, T1.department_name, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1', which outputs [(8, 'statistics', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and id of the department with the most number of degrees ?' in SQLite? I currently have 'select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1', which outputs [('statistics', 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id with least number of paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1', which outputs [(3, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id with least number of paragraphs?' in SQLite? I currently have 'SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the airport code and name in the city of Anthony.' in SQLite? I currently have 'SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \\\"Anthony\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the people who teach math courses?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \\\"Math\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the people who teach math courses?' in SQLite? I currently have 'SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"', which outputs [('Kearsley Brown',), ('Vicente Carretero',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \\\"Math\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cartoones written by Joseph Kuhr?' in SQLite? I currently have 'SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.' in SQLite? I currently have 'SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC', which outputs [('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many people live in Asia, and what is the largest GNP among them?' in SQLite? I currently have 'SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'', which outputs [(3705025700, 3787042.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many states are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE', which outputs [(51,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM area_code_state\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many states are there?' in SQLite? I currently have 'SELECT count(*) FROM area_code_state', which outputs [(305,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM area_code_state\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the number of distinct country codes of all players.' in SQLite? I currently have 'SELECT COUNT(DISTINCT country_code) FROM players', which outputs [(153,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?' in SQLite? I currently have 'SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make', which outputs [('110', 'mazda rx-4'), ('100', 'mazda rx-7 gs'), ('97', 'mazda rx2 coupe'), ('90', 'mazda rx3')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the largest amount of horsepower for the models with 3 cylinders and what make is it?' in SQLite? I currently have 'SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;', which outputs [('97', 'mazda rx2 coupe')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name of the countries where there is not a single car maker?' in SQLite? I currently have 'SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)', which outputs [('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name of the countries where there is not a single car maker?' in SQLite? I currently have 'SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;', which outputs [('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many museums were opened after 2013 or before 2008?' in SQLite? I currently have 'SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the nationalities for which there are two or more people.' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2', which outputs [('Russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each citizenship, how many singers are from that country?' in SQLite? I currently have 'SELECT COUNT(*) ,  Citizenship FROM singer GROUP BY Citizenship', which outputs [(1, 'Australia'), (1, 'Chile'), (1, 'France'), (1, 'Germany'), (4, 'United States')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each citizenship, how many singers are from that country?' in SQLite? I currently have 'SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship', which outputs [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show me the cost of the most recently performed treatment.' in SQLite? I currently have 'SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments)', which outputs [(407,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the money rank of the poker player with the highest earnings?' in SQLite? I currently have 'SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1', which outputs [(58.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the model of the car with the smallest amount of horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower LIMIT 1', which outputs [('amc',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum and minimum share for the TV series?' in SQLite? I currently have 'SELECT max(Share), min(Share) FROM TV_series', which outputs [(9.0, 5.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of the battles that led to more than 10 people killed in total.' in SQLite? I currently have 'SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T3.killed) > 10', which outputs [(5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (8, 'Siege of Constantinople')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight for each type of pet?' in SQLite? I currently have 'SELECT AVG(weight), PetType FROM Pets GROUP BY PetType', which outputs [(12.0, 'cat'), (11.350000000000001, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries does each continent have? List the continent id, continent name and the number of countries.' in SQLite? I currently have 'SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent', which outputs [(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the country with the most number of TV Channels and how many does it have?' in SQLite? I currently have 'SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1', which outputs [('Italy', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Where is the youngest teacher from?' in SQLite? I currently have 'SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1', which outputs [('Farnworth Municipal Borough',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of the country with the most players?' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1', which outputs [('USA',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different nationalities do conductors have?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM conductor', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different degree names are offered?' in SQLite? I currently have 'SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which of the countries has the most car makers? List the country name.' in SQLite? I currently have 'SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY count(*) DESC LIMIT 1', which outputs [('japan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is name of the country that speaks the largest number of languages?' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(T2.Language) DESC LIMIT 1', which outputs [('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most common singer citizenship ?' in SQLite? I currently have 'SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1', which outputs [('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select citizenship from singer group by citizenship order by count(*) desc limit 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has most number of departing flights?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the version number and template type code for the template with version number later than 5?' in SQLite? I currently have 'SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5', which outputs [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maker of the carr produced in the earliest year and what year was it?' in SQLite? I currently have 'SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN model_list AS T3 ON T1.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T2 ON T4.MakeId = T2.Id ORDER BY T2.Year ASC LIMIT 1', which outputs [('gm', 1970)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maker of the carr produced in the earliest year and what year was it?' in SQLite? I currently have 'SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);', which outputs [('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of languages used in Aruba?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'', which outputs [(4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the code of the country where has the greatest number of players.' in SQLite? I currently have 'SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1', which outputs [('USA',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights does airline 'JetBlue Airways' have?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'', which outputs [(100,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average horsepower of the cars before 1980?' in SQLite? I currently have 'SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980', which outputs [(111.13291139240506,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which flight numbers correspond to United Airlines flights?' in SQLite? I currently have 'SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which flight numbers correspond to United Airlines flights?' in SQLite? I currently have 'SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"', which outputs [(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different citizenships and the maximum net worth of singers of each citizenship.' in SQLite? I currently have 'SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship', which outputs [('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many continents speak Chinese?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'', which outputs [(4,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Chinese\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of poker players.' in SQLite? I currently have 'SELECT COUNT(*) FROM poker_player', which outputs [(5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'which countries' tv channels are not playing any cartoon written by Todd Casey?' in SQLite? I currently have 'SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey')', which outputs [('Italy',), ('Italy',), ('Italy',), ('Italy',), ('United Kingdom',), ('Italy',), ('Poland',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'which countries' tv channels are not playing any cartoon written by Todd Casey?' in SQLite? I currently have 'SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'', which outputs [('Poland',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all paragraph texts for the document \"Customer reviews\".' in SQLite? I currently have 'SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'', which outputs [('Korea',), ('Ukraine',), ('Korea',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \\\"Customer reviews\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the different record companies and the corresponding number of orchestras.' in SQLite? I currently have 'SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company', which outputs [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which year has most number of concerts?' in SQLite? I currently have 'SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1', which outputs [('2015',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of conductors that do not have the nationality \"USA\".' in SQLite? I currently have 'SELECT Name FROM conductor WHERE Nationality != 'USA'', which outputs [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the opening year and staff number of the museum named Plaza Museum?' in SQLite? I currently have 'SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'', which outputs [('2000', 62)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the opening year and staff number of the museum named Plaza Museum?' in SQLite? I currently have 'SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'', which outputs [(62, '2000')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average grade of all students who have some friends.' in SQLite? I currently have 'SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)', which outputs [(10.428571428571429,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the average earnings across all poker players.' in SQLite? I currently have 'SELECT AVG(Earnings) FROM poker_player', which outputs [(301891.2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names, countries, and ages for every singer in descending order of age?' in SQLite? I currently have 'SELECT Name, Country, Age FROM singer ORDER BY Age DESC', which outputs [('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  country ,  age FROM singer ORDER BY age DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the car model with the highest mpg ?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.MPG DESC LIMIT 1', which outputs [('citroen',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the template ids with template type description \"Presentation\".' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'', which outputs [(6,), (7,), (10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \\\"Presentation\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average grade of students who have friends?' in SQLite? I currently have 'SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)', which outputs [(10.428571428571429,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many owners temporarily do not have any dogs?' in SQLite? I currently have 'SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is Kyle's id?' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE name = 'Kyle'', which outputs [(1934,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all cartoon directed by \"Ben Jones\".' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'', which outputs [('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors whose nationalities are not \"USA\"?' in SQLite? I currently have 'SELECT Name FROM conductor WHERE Nationality != 'USA'', which outputs [('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor WHERE Nationality != 'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of airport that has the highest number of flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)', which outputs [('Decca Records',), ('Decca Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003', which outputs [('Decca Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all document ids, names and the number of paragraphs in each document.' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name', which outputs [(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is the most popular in Aruba?' in SQLite? I currently have 'SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1', which outputs [('Papiamento',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Aruba\\\" ORDER BY Percentage DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all document names using templates with template type code BK.' in SQLite? I currently have 'SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'', which outputs [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the id, name and age for visitors who visited some museums more than once.' in SQLite? I currently have 'SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 WHERE T1.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING count(*) > 1)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the id, name and age for visitors who visited some museums more than once.' in SQLite? I currently have 'SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1', which outputs [(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all the grades of the high schoolers.' in SQLite? I currently have 'SELECT DISTINCT grade FROM Highschooler', which outputs [(9,), (10,), (11,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all the grades of the high schoolers.' in SQLite? I currently have 'SELECT grade FROM Highschooler', which outputs [(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the email, cell phone and home phone of all the professionals.' in SQLite? I currently have 'SELECT email_address, cell_number, home_phone FROM Professionals', which outputs [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and country code of the oldest player?' in SQLite? I currently have 'SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1', which outputs [('Thelma', 'AUS')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id of students who do not have a cat pet.' in SQLite? I currently have 'SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat')', which outputs [(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) >= 3', which outputs [('Afghanistan', 5), ('Albania', 3), ('American Samoa', 3), ('Andorra', 4), ('Angola', 9), ('Argentina', 3), ('Aruba', 4), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Bangladesh', 7), ('Belarus', 4), ('Belgium', 6), ('Belize', 4), ('Benin', 7), ('Bhutan', 3), ('Bolivia', 4), ('Botswana', 5), ('Brazil', 5), ('Brunei', 4), ('Bulgaria', 4), ('Burkina Faso', 6), ('Burundi', 3), ('Cambodia', 4), ('Cameroon', 8), ('Canada', 12), ('Central African Republic', 6), ('Chad', 8), ('Chile', 4), ('China', 12), ('Colombia', 5), ('Comoros', 5), ('Congo', 6), ('Congo, The Democratic Republic of the', 10), ('Costa Rica', 4), ('Czech Republic', 8), ('Côte d’Ivoire', 5), ('Denmark', 7), ('Djibouti', 3), ('Eritrea', 6), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('French Polynesia', 3), ('Gabon', 4), ('Gambia', 5), ('Georgia', 6), ('Germany', 6), ('Ghana', 6), ('Guam', 5), ('Guatemala', 5), ('Guinea', 7), ('Guinea-Bissau', 6), ('Guyana', 3), ('Honduras', 4), ('Hong Kong', 5), ('Hungary', 6), ('India', 12), ('Indonesia', 9), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Japan', 6), ('Jordan', 3), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Laos', 4), ('Latvia', 6), ('Lebanon', 3), ('Lesotho', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Macao', 4), ('Macedonia', 5), ('Malawi', 4), ('Malaysia', 6), ('Mali', 6), ('Mauritania', 6), ('Mauritius', 6), ('Mayotte', 3), ('Mexico', 6), ('Micronesia, Federated States of', 6), ('Moldova', 5), ('Monaco', 4), ('Mongolia', 6), ('Mozambique', 10), ('Myanmar', 8), ('Namibia', 8), ('Nauru', 5), ('Nepal', 7), ('Netherlands', 4), ('Netherlands Antilles', 3), ('New Caledonia', 3), ('Nicaragua', 4), ('Niger', 5), ('Nigeria', 10), ('Northern Mariana Islands', 6), ('Norway', 5), ('Pakistan', 8), ('Palau', 4), ('Panama', 6), ('Paraguay', 4), ('Peru', 3), ('Philippines', 10), ('Poland', 4), ('Romania', 6), ('Russian Federation', 12), ('Réunion', 5), ('Samoa', 3), ('Senegal', 6), ('Seychelles', 3), ('Sierra Leone', 8), ('Singapore', 3), ('Slovakia', 5), ('Slovenia', 3), ('Solomon Islands', 3), ('South Africa', 11), ('Spain', 4), ('Sri Lanka', 3), ('Sudan', 10), ('Sweden', 6), ('Switzerland', 4), ('Taiwan', 6), ('Tajikistan', 3), ('Tanzania', 11), ('Thailand', 6), ('Togo', 8), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Turkmenistan', 4), ('Tuvalu', 3), ('Uganda', 10), ('Ukraine', 7), ('United Kingdom', 3), ('United States', 12), ('Uzbekistan', 6), ('Vanuatu', 3), ('Venezuela', 3), ('Vietnam', 9), ('Virgin Islands, U.S.', 3), ('Yugoslavia', 6), ('Zambia', 6), ('Zimbabwe', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.' in SQLite? I currently have 'SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2', which outputs [(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of paragraphs in the document named 'Summer Show'.' in SQLite? I currently have 'SELECT count(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find all airlines that have flights from both airports 'APG' and 'CVO'.' in SQLite? I currently have 'SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"APG\\\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"CVO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the car accelerate that makes amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the car accelerate that makes amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';', which outputs [(13.5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players in descending order of earnings?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC', which outputs [('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the department description for the one whose name has the word computer?' in SQLite? I currently have 'SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'', which outputs [('error',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different addresses do the students currently live?' in SQLite? I currently have 'SELECT count(DISTINCT T1.address_id) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT current_address_id) FROM Students\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cars with a horsepower greater than 150?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150', which outputs [(281,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many employees are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM employee', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two types of treatments? List the professional id and cell phone.' in SQLite? I currently have 'SELECT T3.professional_id, T3.cell_number FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Professionals AS T3 ON T1.professional_id = T3.professional_id GROUP BY T1.professional_id, T3.cell_number HAVING count(DISTINCT T1.treatment_type_code) >= 2', which outputs [(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two types of treatments? List the professional id and cell phone.' in SQLite? I currently have 'SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2', which outputs [(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the nation that uses the greatest amount of languages.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1', which outputs [('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average edispl of the cars of model volvo?' in SQLite? I currently have 'SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo'', which outputs [(133.5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and release years for all the songs of the youngest singer?' in SQLite? I currently have 'SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)', which outputs [('Love', '2016')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different results are there for the battles?' in SQLite? I currently have 'SELECT COUNT(DISTINCT result) FROM battle', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT RESULT) FROM battle\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the date of each treatment, together with the first name of the professional who operated it.' in SQLite? I currently have 'SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id', which outputs [('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of distinct languages used around the world?' in SQLite? I currently have 'SELECT COUNT(DISTINCT Language) FROM countrylanguage', which outputs [(457,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who have 3 or more friends?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 3', which outputs [('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers that teach at least two courses.' in SQLite? I currently have 'SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2', which outputs [('Anne Walker',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average life expectancy in African countries that are republics?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'', which outputs [(51.0612244897959,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \\\"Africa\\\" AND GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average life expectancy in African countries that are republics?' in SQLite? I currently have 'SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"', which outputs [(50.84347826086956,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \\\"Africa\\\" AND GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the distinct template type descriptions for the templates ever used by any document?' in SQLite? I currently have 'SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID', which outputs [('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'In which years cars were produced weighing no less than 3000 and no more than 4000 ?' in SQLite? I currently have 'SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000', which outputs [(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select distinct year from cars_data where weight between 3000 and 4000;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the earliest date of a transcript release, and what details can you tell me?' in SQLite? I currently have 'SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', which outputs [('1975-05-06 12:04:47', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?' in SQLite? I currently have 'SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1', which outputs [('Frida', 'Aisha', 'Huel', 7, 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?' in SQLite? I currently have 'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1', which outputs [(7, 'Frida', 'Aisha', 'Huel', 3, 7)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which template type code is used by most number of documents?' in SQLite? I currently have 'SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1', which outputs [('BK',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which first names are used for professionals or owners but are not used as dog names?' in SQLite? I currently have 'SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs)', which outputs [('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?' in SQLite? I currently have 'SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'', which outputs [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the maximum final tables made across all poker players who have earnings below 200000.' in SQLite? I currently have 'SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000', which outputs [(26.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler', which outputs [(16,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different types of pet are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT PetType) FROM Pets', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT pettype) FROM pets\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of each teacher and what course they teach?' in SQLite? I currently have 'SELECT T1.Name, T2.Course  FROM teacher AS T1  JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID  JOIN course AS T2 ON T3.Course_ID = T2.Course_ID', which outputs [('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?' in SQLite? I currently have 'SELECT max(count(T1.student_course_id)), T2.student_enrolment_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T2.student_enrolment_id', which outputs misuse of aggregate function count(). If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?' in SQLite? I currently have 'SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1', which outputs [(4, 0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the number of players for each country.' in SQLite? I currently have 'SELECT COUNT(player_id), country_code FROM players GROUP BY country_code', which outputs [(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  country_code FROM players GROUP BY country_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the winner and loser who played in the longest match?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 JOIN matches ON T1.player_id = matches.winner_id JOIN players AS T2 ON T2.player_id = matches.loser_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)', which outputs [('Petra', 'Kvitova', 'Angelique', 'Kerber')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the winner and loser who played in the longest match?' in SQLite? I currently have 'SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1', which outputs [('Petra Kvitova', 'Angelique Kerber')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of people who are not from Russia?' in SQLite? I currently have 'SELECT Name FROM people WHERE Nationality != 'Russia'', which outputs [('Teodor Salparov',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE Nationality != \\\"Russia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.' in SQLite? I currently have 'SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Kelly Clauss'', which outputs [(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'' in SQLite? I currently have 'SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'', which outputs [('Siege of Constantinople', '1235'), ('Siege of Constantinople', '1235')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'' in SQLite? I currently have 'SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'', which outputs [('Siege of Constantinople', '1235')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give average earnings of poker players who are taller than 200.' in SQLite? I currently have 'SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200', which outputs [(309445.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and birth dates of people, ordered by their names in alphabetical order?' in SQLite? I currently have 'SELECT Name, Birth_Date FROM people ORDER BY Name', which outputs [('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dogs have an age below the average?' in SQLite? I currently have 'SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids, names, and descriptions for all documents?' in SQLite? I currently have 'SELECT Document_ID, Document_Name, Document_Description FROM Documents', which outputs [(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  document_name ,  document_description FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the high schoolers and how many friends does each have?' in SQLite? I currently have 'SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', which outputs [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of countries where Spanish is spoken by the largest percentage of people?' in SQLite? I currently have 'SELECT count(*) FROM (SELECT CountryCode FROM countrylanguage AS T1 WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE CountryCode = T1.CountryCode)) AS T2', which outputs [(21,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \\\"Spanish\\\" GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of countries where Spanish is spoken by the largest percentage of people?' in SQLite? I currently have 'SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode', which outputs [(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \\\"Spanish\\\" GROUP BY CountryCode\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When was the last transcript released?' in SQLite? I currently have 'SELECT MAX(transcript_date) FROM Transcripts', which outputs [('2013-06-30 13:01:40',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars has over 6 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6', which outputs [(108,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries that are not playing cartoons written by Todd Casey?' in SQLite? I currently have 'SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey')', which outputs [('Poland',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the lowest version number, along with its corresponding template type code.' in SQLite? I currently have 'SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Lowest_Version_Number ASC', which outputs [(0, 'PP'), (1, 'PPT'), (2, 'BK'), (5, 'CV'), (7, 'AD')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the lowest version number, along with its corresponding template type code.' in SQLite? I currently have 'SELECT min(Version_Number) ,  template_type_code FROM Templates', which outputs [(0, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name of students who have both cat and dog pets .' in SQLite? I currently have 'SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of orchestras whose record format is \"CD\" or \"DVD\".' in SQLite? I currently have 'SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'', which outputs [(11,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \\\"CD\\\" OR Major_Record_Format  =  \\\"DVD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different citizenship of singers and the number of singers of each citizenship.' in SQLite? I currently have 'SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship', which outputs [('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are there for each hand type?' in SQLite? I currently have 'SELECT count(*) , hand FROM players GROUP BY hand', which outputs [(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  hand FROM players GROUP BY hand\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many conductors are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM conductor', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the number of all matches who played in years of 2013 or 2016.' in SQLite? I currently have 'SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016', which outputs [(170,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of the 3 countries with the fewest people.' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population ASC LIMIT 3', which outputs [('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population ASC LIMIT 3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average rank of winners in all matches.' in SQLite? I currently have 'SELECT AVG(winner_rank) FROM matches', which outputs [(13.715827338129497,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'On average, when were the transcripts printed?' in SQLite? I currently have 'SELECT AVG(transcript_date) FROM Transcripts', which outputs [(1989.9333333333334,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(transcript_date) FROM Transcripts\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the regions that use English or Dutch?' in SQLite? I currently have 'SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'', which outputs [('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" OR T2.Language  =  \\\"Dutch\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me the id, role and email of the professionals who did not perform any treatment on dogs.' in SQLite? I currently have 'SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)', which outputs [(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many United Airlines flights go to City 'Aberdeen'?' in SQLite? I currently have 'SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \\\"Aberdeen\\\" AND T3.Airline  =  \\\"United Airlines\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of cities in each district whose population is greater than the average population of cities?' in SQLite? I currently have 'SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District', which outputs [(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the titles of the cartoons sorted alphabetically?' in SQLite? I currently have 'SELECT Title FROM Cartoon ORDER BY Title ASC', which outputs [('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon ORDER BY title\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the employees who never received any evaluation?' in SQLite? I currently have 'SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)', which outputs [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the type codes and descriptions for all template types?' in SQLite? I currently have 'SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types', which outputs [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average expected life expectancy for countries in the region of Central Africa?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'', which outputs [(50.31111111111111,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average, minimum, and maximum age of all singers from France?' in SQLite? I currently have 'SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'', which outputs [(34.5, 25, 43)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors as well as the corresonding orchestras that they have conducted?' in SQLite? I currently have 'SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID', which outputs [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and rank points of the winner who won the most times.' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.rank_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )', which outputs no such column: T2.rank_points. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and rank points of the winner who won the most times.' in SQLite? I currently have 'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1', which outputs [('Angelique Kerber', 3715)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .' in SQLite? I currently have 'SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000', which outputs [(480753000, 1344763.7222222222)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .' in SQLite? I currently have 'select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000', which outputs [(None, None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the contestant numbers and names, ordered by contestant name descending.' in SQLite? I currently have 'SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC', which outputs [(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which states have both owners and professionals living there?' in SQLite? I currently have 'SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state  =  T2.state GROUP BY T1.state', which outputs [('Indiana',), ('Mississippi',), ('Wisconsin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many departments offer any degree?' in SQLite? I currently have 'SELECT count(distinct department_id) FROM Degree_Programs', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT department_id) FROM Degree_Programs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average earnings of poker players?' in SQLite? I currently have 'SELECT AVG(Earnings) FROM poker_player', which outputs [(301891.2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Earnings) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date of the transcript which shows the least number of results, also list the id.' in SQLite? I currently have 'SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) = (     SELECT MIN(COUNT(*))     FROM Transcript_Contents     GROUP BY transcript_id )', which outputs misuse of aggregate function COUNT(). If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date of the transcript which shows the least number of results, also list the id.' in SQLite? I currently have 'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1', which outputs [('1975-10-28 15:16:51', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many poker players are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM poker_player', which outputs [(5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM poker_player\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the record companies of orchestras in descending order of years in which they were founded?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC', which outputs [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id, role, and first name of the professionals who have performed two or more treatments?' in SQLite? I currently have 'SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2', which outputs [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?' in SQLite? I currently have 'SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name  FROM Students AS T1  JOIN (     SELECT student_id, semester_id      FROM Student_Enrolment      GROUP BY student_id, semester_id      HAVING count(degree_program_id) = 2 ) AS T2  ON T1.student_id = T2.student_id', which outputs [(7, 'Frida', 'Aisha', 'Huel')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?' in SQLite? I currently have 'SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2', which outputs [('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and cell phone of the professionals who operate two or more types of treatments.' in SQLite? I currently have 'SELECT T2.professional_id, T2.cell_number FROM Professionals AS T2 WHERE T2.professional_id IN (     SELECT T1.professional_id     FROM Treatments AS T1     GROUP BY T1.professional_id     HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2 )', which outputs [(6, '139-321-7313'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and cell phone of the professionals who operate two or more types of treatments.' in SQLite? I currently have 'SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2', which outputs [(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shops' number products is above the average? Give me the shop names.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)', which outputs [('HJK',), ('FC Inter',), ('FC Lahti',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shop has the most employees? Give me the shop name.' in SQLite? I currently have 'SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name HAVING count(T1.Employee_ID)  =  (SELECT max(counted) FROM (SELECT count(Employee_ID) AS counted FROM hiring GROUP BY Shop_ID) AS subquery)', which outputs [('FC Haka',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of all players, and their average rankings?' in SQLite? I currently have 'SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name', which outputs [('Mirjana', 186.76587795765877), ('Tamarine', 121.82273948075202), ('Katarina', 196.02280912364947), ('Jana', 178.44725111441306), ('Lisa', 101.55520833333334), ('Maureen', 1070.21875), ('Serena', 14.654294803817603), ('Nicole', 153.08190476190475), ('Virginie', 114.47024504084014), ('Patty', 385.8135593220339), ('Nadia', 61.8536866359447), ('Cara', 236.07412398921832), ('Alexandra', 281.5547667342799), ('Paola', 132.12638580931264), ('Kveta', 159.62397820163488), ('Jelena', 183.76478318002628), ('Anne', 220.68534906588005), ('Brenda', 128.8655462184874), ('Kimiko', 95.03465982028241), ('Yayuk', 114.78806907378336), ('Janette', 240.5306603773585), ('Romana', 402.49931972789113), ('Katerina', 205.56581986143186), ('Lindsay', 275.6055900621118), ('Svetlana', 428.6868029739777), ('Venus', 32.984862819299906), ('Jill', 121.9579326923077), ('Elena', 263.2128174123337), ('Katalin', 331.93949394939494), ('Stephanie', 170.97505422993493), ('Liezel', 284.8326771653543), ('Sophie', 576.5778364116095), ('Greta', 274.5718623481781), ('Elizabeth', 1140.1973684210527), ('Kyra', 263.821608040201), ('Francesca', 117.2057942057942), ('Anabel', 144.3264367816092), ('Maria Jose', 256.4249699879952), ('Daniela', 52.9563679245283), ('Nuria', 228.1888198757764), ('Catalina', 260.55779427359494), ('Marion', 105.36299435028249), ('Anne', 205.10836762688615), ('Elena', 237.35254691689008), ('Eleni', 189.36174863387978), ('Maria Elena', 194.2392065344224), ('Roberta', 150.96681415929203), ('Bethanie', 146.59709379128137), ('Svetlana', 35.72872340425532), ('Samantha', 116.44005102040816), ('Vera', 81.09357541899442), ('Iveta', 117.95684523809524), ('Zuzana', 273.0369928400955), ('Renata', 251.02574002574002), ('Klara', 137.5751708428246), ('Maria', 42.25396825396825), ('Jelena', 64.19160104986877), ('Casey', 242.36818181818182), ('Melinda', 169.13578500707214), ('Stanislava', 312.54158964879855), ('Flavia', 158.83442265795208), ('Eva', 235.0951008645533), ('Anais', 447.1293900184843), ('Edina', 211.67325428194994), ('Barbora', 102.04657933042212), ('Arantxa', 268.76683937823833), ('Carly', 318.69978858350953), ('Anastasia', 215.67872340425532), ('Vera', 141.8237951807229), ('Maria', 85.55817610062893), ('Yuliya', 238.01381909547737), ('Claudine', 383.6413199426112), ('Marie Eve', 300.56296296296296), ('Chia Jung', 359.3764705882353), ('Jie', 114.05571428571429), ('Sofia', 147.30172413793105), ('Zuzana', 295.0), ('Mervana', 337.5292682926829), ('Severine', 218.4701086956522), ('Anna Lena', 168.40409683426444), ('Shuai', 112.48686030428769), ('Emily', 457.0421511627907), ('Nicole', 417.51063829787233), ('Abigail', 322.00815217391306), ('Sesil', 162.3505747126437), ('Anna', 185.06484641638227), ('Evgenia', 414.66339869281046), ('Monique', 363.6527293844367), ('Aiko', 230.80138169257341), ('Anastasia', 248.8754098360656), ('Michaella', 185.3469387755102), ('Alona', 1175.0625), ('Marta', 187.96103896103895), ('Na', 82.13112391930835), ('Sania', 177.22695035460993), ('Ana', 54.12816188870152), ('Yvonne', 168.8637083993661), ('Shahar', 166.41358024691357), ('Lucie', 63.76451612903226), ('Pauline', 173.570987654321), ('Alize', 150.6958762886598), ('Mathilde', 225.54984894259817), ('Rika', 290.0614657210402), ('Aravane', 200.97080291970804), ('Sarah', 417.0098765432099), ('Kateryna', 184.2012012012012), ('Ivana', 297.1693989071038), ('Ekaterina', 200.24960753532181), ('Laura', 231.16949152542372), ('Emma', 412.71140939597313), ('Yung Jan', 166.6586270871985), ('Alexa', 278.57538994800694), ('Su Wei', 217.2493188010899), ('Vania', 185.75), ('Galina', 185.0057224606581), ('Tsvetana', 131.02074074074073), ('Kathrin', 291.4792817679558), ('Lourdes', 188.06095041322314), ('Akgul', 215.25185185185185), ('Elena', 110.90505359877488), ('Olga', 205.99685534591194), ('Jarmila', 149.46360759493672), ('Victoria', 92.10391822827938), ('Zi', 291.11032028469754), ('Alberta', 343.22432701894314), ('Kirsten', 178.02928257686676), ('Kaia', 127.06775067750678), ('Yaroslava', 211.41240310077518), ('Melanie', 385.1445182724253), ('Kristina', 167.9602510460251), ('Naomi', 582.2777777777778), ('Romina', 283.63246554364474), ('Vasilisa', 563.1287878787879), ('Agnieszka', 122.19587628865979), ('Ahsha', 728.5), ('Lauren', 420.47591522157995), ('Stephanie', 202.60919540229884), ('Varvara', 168.25584795321637), ('Olga', 295.493487698987), ('Tamira', 135.88910505836577), ('Andreja', 424.64521739130436), ('Madison', 268.11610486891385), ('Sandra', 294.9404958677686), ('Alla', 217.85922330097088), ('Aleksandra', 257.66568483063327), ('Jessica', 441.5659229208925), ('Mariya', 281.871335504886), ('Timea', 172.28095238095239), ('Andrea', 176.82479338842975), ('Angelique', 140.94803149606298), ('Raluca', 304.4619771863118), ('Dominika', 104.85343228200371), ('Caroline', 50.034274193548384), ('Agnes', 218.52747252747253), ('Karin', 252.99188311688312), ('Anastasia', 117.10590631364562), ('Olga', 208.31903945111492), ('Tatjana', 274.4980988593156), ('Ayumi', 191.73745173745175), ('Julia', 188.6425855513308), ('Ekaterina', 128.51776649746193), ('Sara', 197.24117647058824), ('Petra', 221.0070521861777), ('Ashley', 453.49585062240664), ('Ekaterina', 351.4223385689354), ('Monica', 205.06020558002936), ('Sabine', 203.5871080139373), ('Sorana', 213.75043630017453), ('Alisa', 266.65635738831617), ('Evgeniya', 258.0659340659341), ('Magdalena', 188.7824561403509), ('Yanina', 150.74395161290323), ('Petra', 75.06681034482759), ('Carla', 155.3848797250859), ('Jelena', 449.3012939001848), ('Marina', 172.7581818181818), ('Urszula', 229.35687022900763), ('Eva', 380.8822463768116), ('Julie', 284.07964601769913), ('Stefanie', 241.69011406844106), ('Melanie', 223.3237885462555), ('Kristie', 445.18918918918916), ('Gail', 526.2644836272041), ('Mariana', 260.6950998185118), ('Anastasia', 321.59166666666664), ('Shuai', 237.83595113438045), ('Asia', 453.43392070484583), ('Coco', 270.5896860986547), ('Patricia', 324.9109848484849), ('Isabella', 523.5121293800539), ('Christina', 228.9607390300231), ('Kristina', 263.1496062992126), ('Chanelle', 195.57309941520467), ('Olivia', 359.037527593819), ('Emelyn', 672.730407523511), ('Anastasija', 192.35827664399093), ('Michelle', 168.98067632850243), ('Ajla', 302.84831460674155), ('Petra', 188.66216216216216), ('Tamaryn', 386.7025316455696), ('Arantxa', 179.59712230215828), ('Lenka', 391.9670781893004), ('Vitalia', 293.81748071979433), ('Polona', 173.26180257510728), ('Lucie', 169.75233644859813), ('Corinna', 356.8219696969697), ('Lauren', 615.8323699421966), ('Irena', 288.74423480083857), ('Kinnie', 606.1467576791808), ('Claire', 406.7672131147541), ('Silvia', 298.4636510500808), ('Darya', 422.06724137931036), ('Lenka', 430.4562937062937), ('Katarzyna', 396.4295302013423), ('Agnes', 501.8861283643892), ('Alexandra', 274.33022388059703), ('Kristina', 300.7413043478261), ('Vesna', 240.0448979591837), ('Masa', 263.1043307086614), ('Regina', 289.60283687943263), ('Laura', 242.01152737752162), ('Heidi', 417.44323483670297), ('Kai Chen', 272.08855291576674), ('Yurika', 322.17758620689654), ('Xinyun', 309.35767790262173), ('Chun Mei', 692.390625), ('Jing Jing', 369.1620469083156), ('Yana', 725.9122807017544), ('Ksenia', 229.89227166276348), ('Sloane', 259.63589743589745), ('Heather', 167.50632911392404), ('Bojana', 177.8061797752809), ('Anna', 239.51930501930502), ('Sharon', 296.5792682926829), ('Alison', 263.70631067961165), ('Margalita', 325.5912596401028), ('Beatriz', 463.1709741550696), ('Irina Camelia', 285.84388185654007), ('Simona', 145.9185185185185), ('Misaki', 208.95263157894738), ('Johanna', 261.31778929188255), ('Kurumi', 165.96132596685084), ('Noppawan', 374.93926247288505), ('Andrea', 270.69384615384615), ('Jamie', 381.56892230576443), ('Chelsey', 719.3061224489796), ('Beatrice', 676.8051118210863), ('Shelby', 293.45733788395904), ('Irina', 358.4449244060475), ('Mandy', 299.5691176470588), ('Rebecca', 414.0690690690691), ('Sally', 529.583908045977), ('Sheng Nan', 451.8657487091222), ('Yi Miao', 418.2566137566138), ('Zarina', 222.81428571428572), ('Daria', 314.1638795986622), ('Junri', 262.30884808013354), ('Arina', 344.75), ('Caroline', 217.325), ('Lesia', 205.17590361445784), ('Lauren', 208.0751879699248), ('Ana', 293.9810495626822), ('Fatma', 648.2984054669704), ('Madison', 219.54063604240284), ('Monica', 222.481884057971), ('Mona', 273.57517899761336), ('Iryna', 419.9982269503546), ('Nicha', 515.3191489361702), ('Estrella', 347.34943639291464), ('Maria Teresa', 359.81081081081084), ('Nadia', 702.8116438356165), ('Fatima', 673.7509157509157), ('Eva', 460.72909698996654), ('Maria Joao', 486.6092544987147), ('Jasmin', 445.3071553228621), ('Naomi', 381.3239130434783), ('Lenka', 378.54046997389037), ('Irina', 445.6770072992701), ('Ksenia', 447.35916824196596), ('Ellen', 754.8923076923077), ('Sandra', 793.5132075471698), ('Anna', 360.4993234100135), ('Tadeja', 343.0985324947589), ('Nastja', 593.1772853185596), ('Melanie', 440.77246653919696), ('Tereza', 490.3264705882353), ('Tina', 382.1750380517504), ('Karolina', 344.97713097713097), ('Ekaterina', 374.29928315412184), ('Pemra', 465.24962852897477), ('Ipek', 655.8983666061706), ('Cagla', 311.87854251012146), ('Ling', 418.81925343811395), ('Alexandra', 367.9034941763727), ('Amra', 415.9078341013825), ('Ksenia', 423.12334801762114), ('Nigina', 376.7617554858934), ('Sabina', 376.1625), ('So Jung', 514.1732026143791), ('Ye Ra', 431.3144424131627), ('Mi', 554.3953934740883), ('Sacha', 340.2890442890443), ('Varatchaya', 450.4642082429501), ('Nudnida', 436.66881028938906), ('Bianca', 411.2672955974843), ('Lina', 847.7010869565217), ('Claire', 476.3121693121693), ('Nina', 250.36305732484075), ('Dia', 383.7832512315271), ('Michaela', 511.1923076923077), ('Timea', 201.32704402515722), ('Silvia', 673.017094017094), ('Laura', 396.82570162481534), ('Kristyna', 389.73932584269664), ('Liana Gabriela', 387.87113402061857), ('Martina', 575.696335078534), ('Nikola', 485.7513966480447), ('Basak', 587.9803278688524), ('Malou', 947.3333333333334), ('Yi Fan', 381.5512572533849), ('Alina', 1060.0184049079755), ('Sachie', 368.26881720430106), ('Natalie', 394.5745222929936), ('Yulia', 262.494623655914), ('Petra', 360.89268292682925), ('Galina', 449.05308219178085), ('Vanessa', 371.69403973509935), ('Shiho', 1070.5714285714287), ('Cory Ann', 406.5511363636364), ('Habiba', 1051.623188405797), ('Liga', 567.9464544138929), ('Mariana', 1211.258064516129), ('Olga', 525.3591954022988), ('Kyung Mi', 533.433770014556), ('Maria', 461.9377990430622), ('Maria Fernanda', 373.0431137724551), ('Diana', 472.8539007092199), ('Darija', 464.95631067961165), ('Sandra', 494.09510086455333), ('Magdalena', 571.8631346578367), ('Klaudia', 780.7905027932961), ('Ayu Fani', 479.5530612244898), ('Daniella', 625.4092920353983), ('Karolina', 406.56919642857144), ('Lina', 371.00802568218296), ('Rushmi', 573.8729603729604), ('Andrea', 496.8243243243243), ('Nikola', 614.3153526970955), ('Madalina', 324.63613231552165), ('Chin Wei', 385.2651515151515), ('Marrit', 783.1711711711712), ('Erika', 397.3320537428023), ('Teodora', 411.579476861167), ('Lavinia', 612.736), ('Raquel', 578.120792079208), ('Kirsten', 1084.4173913043478), ('Chieh Yu', 533.9586374695864), ('Ksenia', 527.0520547945206), ('Kyra', 727.8778280542987), ('Sung Hee', 570.6993736951983), ('Vlada', 585.0383795309168), ('Sandra', 551.0725593667546), ('Akiko', 466.9746434231379), ('Andrea', 553.5460122699386), ('Camila', 647.9409090909091), ('Maria', 351.9477756286267), ('Anna', 626.9345372460497), ('Amanda', 775.6847826086956), ('Leticia', 481.3229166666667), ('Alexis', 589.8897637795276), ('Natasa', 666.2853403141361), ('Amanda', 684.5194444444444), ('Alisa', 933.8396226415094), ('Sofia', 461.0702987697715), ('Maria', 680.1504424778761), ('Florencia', 364.22522522522524), ('Catherine', 969.9928571428571), ('Ximena', 646.3770491803278), ('Nungnadda', 537.577922077922), ('Tetiana', 437.4119658119658), ('Lara', 284.14021164021165), ('Barbara', 697.5), ('An Sophie', 460.8932038834951), ('Alison', 277.85227272727275), ('Shuko', 421.44179894179894), ('Sarah', 367.33684210526314), ('Conny', 390.0), ('Samantha', 699.2705882352941), ('Julia', 543.4917012448133), ('Johanna', 256.5040431266846), ('Kiki', 287.71625344352617), ('Camila', 316.69181034482756), ('Alize', 412.9482288828338), ('Tetyana', 398.83478260869566), ('Hilda', 673.6635071090047), ('Anna Giulia', 428.5496828752643), ('Aleksandra', 215.03548387096774), ('Vanda', 696.4126984126984), ('Reka Luca', 323.1388101983003), ('Anastasia', 460.7960687960688), ('Ani', 574.4025641025642), ('Silvia', 1013.3469387755102), ('Paula', 374.0572207084469), ('Nina', 1181.1190476190477), ('Tatia', 1075.0), ('Valeria', 389.49271844660194), ('Kamilla', 1162.8301886792453), ('Valeria', 339.99632352941177), ('Eugenie', 421.3669467787115), ('Alexandra', 502.8416149068323), ('Zoe Gwen', 935.081081081081), ('Victoria', 465.5233333333333), ('Jana', 262.31929824561405), ('Nicole', 653.0375), ('Yi Jing', 656.8787276341948), ('Saisai', 297.39032258064515), ('Erika', 397.39929328621906), ('Yue Yue', 444.96190476190475), ('Alexandra', 435.7653846153846), ('Bibiane', 550.1941544885177), ('Ashleigh', 331.3681818181818), ('Bojana', 513.439024390244), ('Ons', 435.1470588235294), ('Julia', 404.706390328152), ('Karen', 674.4780600461894), ('Ines', 546.3460559796438), ('Yuliana', 694.0), ('Maria', 501.8732943469786), ('Nadia', 861.640625), ('Elitsa', 418.39748953974896), ('Jessica', 386.18394648829434), ('Garbine', 229.3774193548387), ('Annika', 265.79487179487177), ('Karen', 675.4691943127962), ('Laura', 481.1577909270217), ('Annalisa', 583.9347826086956), ('Jasmina', 513.1592689295039), ('Csilla', 894.8397790055249), ('Dinah', 268.05945945945945), ('Tara', 475.2979683972912), ('Grace', 389.61876832844575), ('Richel', 246.19871794871796), ('Chi Chi', 464.1367781155015), ('Barbara', 460.1609195402299), ('Sandra', 510.56216216216217), ('Nicole', 408.45185185185187), ('Jana', 568.4027149321267), ('Mallory', 143.48235294117646), ('Nastassja', 554.5290322580645), ('Valentyna', 368.14331210191085), ('Carina', 416.3666666666667), ('Rebecca', 511.37888198757764), ('Varvara', 573.6621621621622), ('Qiang', 383.4714587737844), ('Ekaterine', 553.9434782608696), ('Elina', 203.95604395604394), ('Jennifer', 477.20512820512823), ('Samantha', 424.93981481481484), ('Victoria', 540.4605263157895), ('Julia', 405.8921568627451), ('Donna', 223.50900900900902), ('Maria', 393.4439834024896), ('Hyun Hui', 729.0671936758894), ('So Ra', 572.2654545454545), ('Luksika', 284.22813688212926), ('Ying Ying', 403.8775981524249), ('Belinda', 499.7090909090909), ('Margarita', 371.1981566820277), ('Wing Yau Venise', 585.2589641434263), ('Yuxuan', 545.449074074074), ('Stefania', 618.7228525121556), ('Giulia', 576.740350877193), ('Erika', 792.7021696252466), ('Marina', 513.1254019292604), ('Natalia', 589.568306010929), ('Estelle', 571.8520084566596), ('Ana', 556.0942028985507), ('Federica', 626.0774647887324), ('Alison', 579.0348162475822), ('Neda', 708.8378378378378), ('Alexia', 694.5176470588235), ('Vivienne', 659.2103004291846), ('Eleni', 742.5714285714286), ('Afroditi', 1155.0392156862745), ('Stamatia', 841.8387096774194), ('Stephanie', 541.0248618784531), ('Hulya', 888.0055096418732), ('Veronika', 447.5016501650165), ('Anna', 531.44921875), ('Olga', 614.2371794871794), ('Evelyn', 471.5439093484419), ('Anna', 528.8242894056848), ('Yumi', 784.9147465437788), ('Hao Ching', 1153.936507936508), ('Chi Fan', 1039.3902439024391), ('Wen Hsin', 440.35214446952597), ('Remi', 494.6111111111111), ('Kumiko', 488.76107382550333), ('Laura Ioana', 516.1982942430703), ('Giulia', 527.75), ('Federica', 637.367139959432), ('Chanel', 343.2835365853659), ('Megan', 622.6036585365854), ('Nicole', 608.3569131832797), ('Lena', 500.8991354466859), ('Katie', 627.6082004555809), ('Diana', 550.6178707224335), ('Elena', 517.8571428571429), ('Alexandra', 806.576), ('Mihaela', 376.7356115107914), ('Natalie', 582.6028368794326), ('Alice', 625.4850948509485), ('Viktoriya', 598.6225165562914), ('Patrycja', 601.0849673202614), ('Despina', 665.686684073107), ('Julia', 448.98591549295776), ('Claudia', 661.1353965183753), ('Yi', 693.3742802303263), ('Akari', 704.9618138424821), ('Aki', 710.9617224880383), ('Oksana', 533.9652351738241), ('Jacqueline', 545.6203966005666), ('Natasha', 847.62), ('Justyna', 585.8517745302714), ('Ema', 734.71), ('Yuliya', 487.0730593607306), ('Elixane', 579.5214723926381), ('Lyudmyla', 382.82479784366575), ('Valentine', 691.1423076923077), ('Stephanie', 398.5627906976744), ('Fiona', 1041.7790697674418), ('Maryna', 276.67868852459014), ('Gabriela', 465.2834890965732), ('Eleanor', 1067.7619047619048), ('Lara', 731.8966666666666), ('Nina', 626.2072368421053), ('Chen', 524.7444668008048), ('Jin A', 492.8915187376726), ('Zuzana', 518.3550724637681), ('Shivika', 935.2322946175638), ('Chiaki', 437.73858921161826), ('Akiko', 504.54647887323944), ('Irina', 522.2766666666666), ('Natalia', 600.1), ('Gioia', 567.8518518518518), ('Yasmin', 688.6819923371647), ('Ting Fei', 739.7727272727273), ('Jessy', 967.6708860759494), ('Ana Clara', 524.9192825112108), ('Madrie', 958.0955414012739), ('Zarah', 709.625), ('Lynn', 920.6734693877551), ('Lisa', 459.5925925925926), ('Kim Alice', 762.4081632653061), ('Denisa', 419.1633466135458), ('Martina', 1000.8086419753087), ('Estelle', 714.7387387387388), ('Dijana', 669.2982456140351), ('Audrey', 576.5012531328321), ('Tereza', 418.1658878504673), ('Jade', 674.0), ('Lucy', 756.3141592920354), ('Camilla', 845.3106382978723), ('Magda', 300.3974358974359), ('Roxane', 479.51738241308794), ('Jessica', 776.3333333333334), ('Nicola', 649.751256281407), ('Natela', 566.4943396226415), ('Sina', 728.7443609022556), ('Cristina', 395.9633333333333), ('Cristina Andreea', 439.5747863247863), ('Ekaterina', 541.26953125), ('Anastasiya', 1020.3069306930693), ('Alexandra', 761.5461254612546), ('Aselya', 1181.27868852459), ('Prerna', 740.5361842105264), ('Ekaterina', 1035.1683673469388), ('Polina', 440.11052631578946), ('Yuliya', 658.64), ('Maria', 664.4128440366973), ('Gabriela', 580.905701754386), ('Sara', 1037.076923076923), ('Wan Ting', 701.4009009009009), ('Lin', 497.42124542124543), ('Misa', 466.3361111111111), ('Di', 736.1650485436893), ('Ran', 557.2607003891051), ('Isabella', 386.4824902723735), ('Vaszilisza', 859.8103448275862), ('Ani', 977.9270833333334), ('Radina', 955.7833333333333), ('Ya Hsuan', 586.865), ('Teliana', 461.06702898550725), ('Aleksandrina', 578.07962529274), ('Federica', 894.3545706371191), ('Anne Liz', 762.7606382978723), ('Alessondra', 1145.1641791044776), ('Ryann', 1069.0379746835442), ('Simone', 982.58), ('Irina', 273.65966386554624), ('Tereza', 347.5242718446602), ('Constance', 570.2723004694835), ('Rocio', 762.0532150776053), ('Veronica', 450.6966019417476), ('Manon', 537.3451776649746), ('Myrtille', 485.40168539325845), ('Kelly S', 312.7584269662921), ('Tinatin', 810.6666666666666), ('Mariana', 760.0), ('Katerina', 646.5019083969465), ('Vladimira', 823.8770833333333), ('Alicja', 855.813627254509), ('Vojislava', 555.6572164948453), ('Ria', 669.448275862069), ('Anne', 365.46034816247584), ('Tomoko', 828.09375), ('Natsumi', 490.70992366412213), ('Ana', 509.5892857142857), ('Chayenne', 593.9759036144578), ('Simona', 797.6269662921349), ('Indire', 627.7027027027027), ('Maya', 704.4129930394431), ('Sherazad', 737.1428571428571), ('Agustina', 565.3363914373089), ('Mari', 483.27852998065765), ('Justine', 443.1351888667992), ('Ayumi', 579.3763919821827), ('Yurina', 746.4803493449782), ('Romana Caroline', 669.8542372881356), ('Maria Fernanda', 447.0668058455115), ('Antonela', 1051.7096774193549), ('Marija', 521.0897009966777), ('Kaitlyn', 705.1531531531532), ('Miyabi', 447.93283582089555), ('Anastasiya', 407.95652173913044), ('Jara', 1121.767857142857), ('Georgina', 314.4109589041096), ('Raluca Elena', 672.2258064516129), ('Danielle', 643.331983805668), ('Chang', 575.4626436781609), ('Yi', 936.7860465116279), ('Shiho', 449.41388174807196), ('Michaela', 425.4343434343434), ('Anastasia', 669.2153392330383), ('Francesca', 798.2897959183673), ('Kotomi', 844.7460317460317), ('Korina', 567.0507399577167), ('Jessica', 904.7658227848101), ('Nicola', 864.8258426966293), ('Marta', 504.7244897959184), ('Celine', 619.094512195122), ('June', 1189.0), ('Krista', 522.984693877551), ('Kanae', 635.346516007533), ('Yuka', 646.8995433789954), ('Zuzana', 520.1380597014926), ('Makoto', 516.6615384615385), ('Maiko', 438.4245810055866), ('Ioana', 957.8421052631579), ('Rui', 1209.625), ('Danica', 380.609375), ('Tomoko', 1238.75), ('Danielle', 893.4137168141593), ('Yoon Young', 844.9310344827586), ('Hae Sung', 844.3856812933026), ('Etsuko', 781.3218390804598), ('Virginie', 890.4780361757106), ('Angelina', 677.4700193423598), ('Jillian', 721.14), ('Ai', 841.9686520376175), ('Maya', 682.8406862745098), ('Sakiko', 832.9585365853659), ('Kaori', 871.0790513833992), ('Nadja', 631.8181818181819), ('Gracia', 783.8288043478261), ('Amandine', 597.5297297297298), ('Katerina', 582.2656546489563), ('Veronika', 1053.8061224489795), ('Jia Jing', 682.961038961039), ('Piia', 668.2581196581197), ('Karolina', 625.8927038626609), ('Nadiya', 515.4014423076923), ('Marion', 819.0524017467249), ('Ana', 534.9107142857143), ('Tatiana', 742.8783185840708), ('Kristy', 837.7730496453901), ('Alexa', 489.4848484848485), ('Amandine', 876.4279069767442), ('Shu Ying', 1042.6802325581396), ('Martina', 696.7325301204819), ('Lisa', 538.9791271347249), ('Allie', 616.5055555555556), ('Ionela Andreea', 799.0552486187845), ('Yumi', 812.5773420479303), ('Veronica', 1273.838888888889), ('Sanaz', 703.1372549019608), ('Milana', 626.441935483871), ('Jasmina', 782.965811965812), ('Nikola', 797.2966101694915), ('Martina', 317.94520547945206), ('Libby', 899.9150326797386), ('Khristina', 1087.972972972973), ('Lauren', 848.126582278481), ('Vivian', 558.0348583877995), ('Vanesa', 579.437984496124), ('Tatiana', 562.8954081632653), ('Mailen', 410.8463541666667), ('Jasmin', 751.9386281588447), ('Tori', 841.7167381974249), ('Eugeniya', 620.6746411483253), ('Ksenia', 622.453744493392), ('Marina', 510.5781990521327), ('Julia', 742.8611111111111), ('Ganna', 628.8181818181819), ('Julia', 771.8067885117493), ('Miki', 586.2250489236791), ('Poojashree', 729.1047904191616), ('Danielle Rose', 434.68), ('Martina', 694.8266129032259), ('Danielle', 353.4719101123595), ('Ellen', 715.0604026845638), ('Tea', 1068.7457627118645), ('Svenja', 843.2311557788945), ('Ana', 878.8), ('Lucia', 757.5247524752475), ('Pilar', 740.5879828326181), ('Macall', 607.3360995850622), ('Nicole', 679.4014084507043), ('Ilona', 452.625), ('Natalia', 1137.2954545454545), ('Nanuli', 542.7168141592921), ('Avgusta', 1208.4285714285713), ('Elisabeth', 914.2566371681415), ('Marianne', 993.175925925926), ('Lena Marie', 657.8934169278997), ('Vivien', 607.2810218978102), ('Tamara', 577.373801916933), ('Keren', 643.422641509434), ('Rashmi', 1089.2100840336134), ('Rishika', 775.7269624573379), ('Dalila', 424.83561643835617), ('Anastasia', 768.875), ('Alexandra', 616.9638989169675), ('Sviatlana', 691.9934640522875), ('Aminat', 613.195652173913), ('Sofie', 724.5), ('Alexandra', 928.4886363636364), ('Sarah Rebecca', 743.6062176165804), ('Yana', 658.0246305418719), ('Marina', 604.295652173913), ('Aranza', 490.4144736842105), ('Elizabeth', 685.5346534653465), ('Andreea Roxana', 726.2657657657658), ('Jelena', 718.2207792207793), ('Polona', 833.6775), ('Cristina Madalina', 720.6428571428571), ('Lucie', 774.558521560575), ('Martina', 629.4468085106383), ('Kateryna', 344.7721518987342), ('Nuria', 713.6415094339623), ('Benedetta', 705.4688346883469), ('Amanda', 496.64941176470586), ('Iris', 866.1075949367089), ('Dariya', 1133.9636363636364), ('Alexandra', 994.2234636871508), ('Albina', 775.2734375), ('Anna', 928.7887323943662), ('Nika', 825.7028571428572), ('Carol', 564.1434426229508), ('Alejandra', 1116.6883116883116), ('Silvia', 872.2721518987341), ('Charlene', 766.4794520547945), ('Oceane', 911.1595744680851), ('Jennifer', 916.4569536423841), ('Jan', 592.5990783410139), ('Viktoryia', 845.7530864197531), ('Julia', 692.8122605363984), ('Celine', 821.992277992278), ('Andrea', 640.0540540540541), ('Doroteja', 520.9397993311037), ('Hao Chen', 680.1050228310502), ('Alyona', 496.9431818181818), ('Hirono', 860.8104265402843), ('Emi', 770.8472222222222), ('Chinami', 615.2230215827338), ('Sophie', 611.3353293413173), ('Simone', 1110.9722222222222), ('Elizabeth', 623.0714285714286), ('Gabrielle Faith', 985.7211538461538), ('Sachia', 400.8093385214008), ('Taylor', 348.2173913043478), ('Lindsey', 986.82), ('Kazusa', 772.2402912621359), ('Miyu', 594.9036697247707), ('Tereza', 1208.5535714285713), ('Giorgia', 843.6716417910447), ('Diana', 454.04788732394366), ('Nathalia', 543.031185031185), ('Alexandra', 580.3488372093024), ('Robin', 431.19607843137254), ('Katarzyna', 493.671826625387), ('Nadiya', 833.5096525096525), ('Chihiro', 870.6453488372093), ('Paula', 432.7289972899729), ('Arabela', 658.5074074074074), ('Andrea', 408.486301369863), ('Yevgeniya', 724.8712871287129), ('Isabel', 724.9178743961353), ('Morgane', 812.2753623188406), ('Anaeve', 922.2255639097745), ('Tammi', 601.906914893617), ('Khristina', 926.5274261603375), ('Nicola', 852.8411214953271), ('Sonja', 879.4974619289341), ('Viktorija', 454.87593984962405), ('Klara', 944.5289256198347), ('Michaela', 983.0747126436781), ('Anna Karolina', 345.51020408163265), ('Melis', 520.0968992248062), ('Sultan', 944.2432432432432), ('Nadezda', 868.6521739130435), ('Victoria', 425.08252427184465), ('Polina', 541.8262295081968), ('Anastasia', 660.0541871921182), ('Elizaveta', 468.5403225806452), ('Daria', 579.6666666666666), ('Stefanie', 1078.6511627906978), ('Monika', 1209.5), ('Anja', 725.3893333333333), ('Zuzana', 694.4581395348837), ('Agnese', 694.0659898477157), ('Olga', 592.1270903010034), ('Brianna', 854.3170731707318), ('Risa', 317.2361809045226), ('Riko', 495.22641509433964), ('Yuriko', 982.5393258426966), ('Mai', 550.2509960159363), ('Yuuki', 608.1309090909091), ('Mana', 689.891129032258), ('Lou', 661.2633928571429), ('Clothilde', 620.4120171673819), ('Whitney', 873.0103626943005), ('Charlotte', 1129.861111111111), ('Erin', 760.3974358974359), ('Emily J', 1041.948717948718), ('Chloe', 675.2445414847161), ('Alice', 911.6255506607929), ('Christina', 706.2669683257918), ('Ipek', 598.1783783783784), ('Naz', 1087.3823529411766), ('Olga', 668.3825136612022), ('Bermet', 717.7932330827068), ('Polina', 620.6008771929825), ('Lisanne', 673.6507936507936), ('Danka', 302.83268482490274), ('Kai Lin', 522.6561403508772), ('Caroline B', 1161.5675675675675), ('Fangzhou', 406.9281767955801), ('Chalena', 650.1367521367522), ('Elizabeth Anita Alexandria', 1006.2982456140351), ('Adriana', 361.5919540229885), ('Tatsiana', 912.1077844311377), ('Ioana Loredana', 646.0441176470588), ('Diana', 963.0), ('Cristina', 837.1969696969697), ('Camelia Elena', 803.7139479905437), ('Katy', 492.6608695652174), ('Dianne', 809.697247706422), ('Tyra', 992.4870588235294), ('Peangtarn', 514.586319218241), ('Samantha', 1040.40625), ('Paula Catalina', 868.7624113475177), ('Ingrid Esperanza', 748.6622691292876), ('Victoria', 1099.8367346938776), ('Ivette', 1136.8535031847134), ('Intissar', 1192.5454545454545), ('Fatyha', 1015.5), ('Lesley', 514.7174515235457), ('Csilla', 977.5013927576601), ('Paulina', 1022.5), ('Annie', 1042.037037037037), ('Jeannine', 767.7730496453901), ('Karolina', 790.4990925589836), ('Janina', 699.7864583333334), ('Martina', 716.4880636604775), ('Petra', 764.9778393351801), ('Natalie', 889.5686274509804), ('Anastasiya', 814.1554054054054), ('Ji Young', 833.5061082024433), ('Seung Yeon', 784.0465949820789), ('Ji Hee', 781.4336734693877), ('Mi Rae', 992.7225433526012), ('Min Hwa', 819.8425531914894), ('Na Lae', 608.7791798107255), ('Hyojung', 1069.3208955223881), ('Seo Kyung', 858.9173789173789), ('Su Jeong', 426.3886462882096), ('Christine', 841.4051724137931), ('Anna Arina', 760.639175257732), ('Viktorija', 559.3382899628252), ('Ashling', 823.0909090909091), ('Barbara', 817.0503144654089), ('Ashley', 1036.9322033898304), ('Jawairiah', 1070.5648854961833), ('Trang', 1029.3196721311476), ('Stephanie', 1085.9809523809524), ('Rita', 1115.6666666666667), ('Margarida', 987.6739130434783), ('Sofia', 1071.1351351351352), ('Maria', 1220.904761904762), ('Agata', 960.6770186335403), ('Mai', 945.8666666666667), ('Kimberley', 1077.1702127659576), ('Alice', 757.4059040590406), ('Seda', 1003.5367647058823), ('Cecilie Lundgaard', 1141.842105263158), ('Nazari', 825.7291666666666), ('Nan Nan', 890.4455445544554), ('Polina', 1004.5175438596491), ('Yvonne', 733.6431718061674), ('Chihiro', 864.5165289256198), ('Katherine', 859.8135593220339), ('Emily', 1137.5128205128206), ('Caroline', 831.92), ('Carolina', 812.9764150943396), ('Tanaporn', 1113.2325581395348), ('Camila', 916.7307692307693), ('Josie', 993.2105263157895), ('Victoria', 809.776397515528), ('Valerie', 730.6881720430108), ('Natasha', 1207.75), ('Julie', 1121.4102564102564), ('Frederikke', 1244.3333333333333), ('Demi', 983.4174757281553), ('Indy', 485.9559748427673), ('Matilda', 799.1875), ('Brenda', 827.4954954954954), ('Rebecca', 1192.6632653061224), ('Louise', 1019.520325203252), ('Valeria', 1103.178947368421), ('Beatrice', 762.469512195122), ('Agnes', 544.9512195121952), ('Marisa', 1067.3413173652696), ('Vincenza', 1214.1142857142856), ('Carolina', 622.8725868725869), ('Lisa Maria', 758.06), ('Anna Maria', 1057.1584158415842), ('Pia', 729.6136363636364), ('Sofia', 646.4561403508771), ('Valentini', 479.8914728682171), ('Brooke', 711.3770491803278), ('Arina', 988.8534031413612), ('Maftuna', 1173.75), ('Yana', 1019.9629629629629), ('Natella', 962.0188679245283), ('Priscila', 1132.0), ('Ah', 1156.340425531915), ('Ki Ryang', 1164.090909090909), ('Zi', 661.3205741626795), ('Yoshimi', 1096.9130434782608), ('Kanami', 799.9940828402367), ('Storm', 573.6708333333333), ('Belinda', 932.1125), ('Azra', 556.2303370786517), ('Nattawadee', 1177.622641509434), ('Alexandra', 981.0702247191011), ('Robyn', 1054.606896551724), ('Hana', 1083.407894736842), ('Daniella', 1062.3), ('Ana Sofia', 496.7156398104265), ('Marcela', 496.35593220338984), ('Ana Paula', 1112.0245398773006), ('Valeria', 1232.2), ('Hayley', 914.5321100917431), ('Anett', 367.2274678111588), ('Sara', 464.9339622641509), ('Miriam', 1015.6524822695036), ('Antonia', 589.1298076923077), ('Anna Lena', 287.06635071090045), ('Syna', 791.1240506329113), ('Ysaline', 458.86633663366337), ('Emma', 1184.625), ('Jessica', 1089.9884393063585), ('Daneika', 977.4539007092199), ('Sabrina', 1025.6526315789474), ('Kim', 613.8346774193549), ('Karina Ildor', 696.9606060606061), ('Magy', 1092.7621951219512), ('Marta', 798.5882352941177), ('Alice', 651.2678571428571), ('Gaelle', 1028.9708737864078), ('Juliana', 1110.0816326530612), ('Anamika', 859.3059701492538), ('Fatimah', 1070.9463414634147), ('Natalia', 749.6095717884131), ('Martina', 831.9251700680272), ('Beatrice', 743.3013698630137), ('Blessing', 1196.8064516129032), ('Cristina', 598.08), ('Shao Yuan', 967.9034090909091), ('Alessia', 1036.8349056603774), ('Agni', 940.2125603864735), ('Sun Jung', 812.4581005586592), ('Anouk', 1032.224358974359), ('Nicolette', 778.1648648648649), ('Lara', 920.5872093023256), ('Sylwia', 787.7645348837209), ('Giulia', 1105.4458598726114), ('Melisa', 993.1351351351351), ('Blessing', 1251.673076923077), ('Ekaterina', 1120.7931034482758), ('Ashmitha', 1018.6637931034483), ('Asha', 1151.95), ('Jana', 846.9828767123288), ('Misa', 1001.8085106382979), ('Yoo Ri', 1263.7666666666667), ('Lu', 907.3557312252965), ('Sara', 1050.9178082191781), ('Ioana', 1080.0555555555557), ('Naoko', 1180.3828125), ('Kady', 1055.020202020202), ('Marcella', 657.0171919770773), ('Yasmine', 972.7345132743363), ('Paula Cristina', 508.4679802955665), ('Aleksandra', 1028.6904761904761), ('Kateryna', 852.3478260869565), ('Viktoria', 299.6986301369863), ('Marcela Guimaraes', 1143.7957746478874), ('Marcela', 1174.1489361702127), ('Julia', 832.207100591716), ('Xin', 694.4808743169399), ('Nevena', 1031.0), ('Adnya', 1122.4423076923076), ('Tereza', 786.047619047619), ('Pavla', 915.5892857142857), ('Ester', 950.9090909090909), ('Eden', 1153.2553191489362), ('Christie', 1112.875), ('Ronke', 1072.857142857143), ('Karina', 882.3758865248227), ('Keri', 1018.6534653465346), ('Diana', 915.0235849056604), ('Emma', 784.240174672489), ('Brittany', 938.6777777777778), ('Julie', 745.4150943396227), ('Anna', 589.570652173913), ('Ineke', 919.6147540983607), ('Ema', 946.2142857142857), ('Carmen', 876.66472303207), ('Karin', 649.9320388349514), ('Dunja', 910.3070175438596), ('Natasha', 925.0068728522336), ('Ai', 998.4620689655172), ('Guadalupe', 790.8422535211267), ('Margarita', 734.7166666666667), ('Johanna', 1011.1739130434783), ('Ingrid Alexandra', 869.3571428571429), ('Dalia', 801.6933333333334), ('Adriana', 1048.4444444444443), ('Deeon', 1115.0851063829787), ('Stephanie', 1046.5884773662551), ('Noel', 965.5343511450382), ('Francesca', 776.0992907801418), ('Na Ri', 573.5197368421053), ('Alexandra', 860.8079470198676), ('Chun Yan', 986.3944099378882), ('Cynthia', 998.7722772277227), ('Yi', 921.5733333333334), ('Iryna', 993.2272727272727), ('Anastasiya', 1092.3584905660377), ('Julia', 787.3385416666666), ('Eri', 321.23595505617976), ('Ema', 803.3813229571984), ('Veronika', 938.3714285714286), ('Sabrina', 1115.8979591836735), ('Isabella', 701.0719696969697), ('Isabela', 1114.99375), ('Karina', 869.4357976653697), ('Beatriz Maria', 971.2865853658536), ('Melina', 1017.2560553633218), ('Monique', 726.3315789473684), ('Carla', 630.7457627118644), ('Li', 988.7425149700599), ('Carla', 597.8743169398907), ('Nathaly', 617.4615384615385), ('Yoko', 1128.901098901099), ('Elyne', 652.1984732824427), ('Anouk', 911.0778443113772), ('Makiho', 784.8009049773756), ('Veronika', 1016.5), ('Alix', 822.3459915611814), ('Silvia', 1158.1186440677966), ('Anna', 726.5689655172414), ('Stefania', 1028.2814371257484), ('Chantal', 609.90625), ('Angelique', 434.77777777777777), ('Ekaterina', 1085.9857142857143), ('Barbara', 704.8923766816143), ('Giuliana', 584.359375), ('Olawaseun', 1397.5), ('Abiodun', 1039.6744186046512), ('Beauty', 1382.1538461538462), ('Rana', 1117.6666666666667), ('Ola', 660.8924731182796), ('Florencia', 941.3030303030303), ('Luciana', 880.0536779324055), ('Kyle', 887.502487562189), ('Ulrikke', 506.39344262295083), ('Darya', 708.9009900990098), ('Vladislava', 1006.1769911504425), ('Chanelle', 587.027027027027), ('Abbie', 808.4545454545455), ('Malin', 825.039603960396), ('Aliaksandra', 441.9846743295019), ('Alina', 893.7272727272727), ('Hye Min', 1020.28125), ('Samantha', 1052.38), ('Eduarda', 656.2851711026616), ('Stefani', 1167.3333333333333), ('Maya', 1179.5555555555557), ('Carolina', 546.5490196078431), ('Anna', 542.1207729468599), ('Ganna', 573.6335078534031), ('Lidziya', 797.2128378378378), ('Shiori', 1070.6666666666667), ('Se Jin', 1122.4545454545455), ('Elena', 1101.55), ('Dilara', 1248.2), ('Busra', 1140.981981981982), ('Zsofia', 916.559633027523), ('Ivana', 929.7837837837837), ('Yawna', 1110.4594594594594), ('Giulia', 766.5333333333333), ('Laetitia', 677.4458598726114), ('Alejandra', 1041.6666666666667), ('Yana', 601.5174129353234), ('Beatriz', 1128.4444444444443), ('Mariona', 1163.0), ('Verena', 866.6914893617021), ('Gabriela', 891.4626865671642), ('Lucia', 1072.9156626506024), ('Josepha', 924.9325842696629), ('Linda', 916.4411764705883), ('Carmen', 947.5849056603773), ('Elisabeth', 749.4285714285714), ('Stephanie', 823.2670454545455), ('Manisha', 897.0974358974358), ('Kana', 924.2782608695652), ('Tamara', 881.8430232558139), ('Laura', 733.6889763779527), ('Diana', 798.7529411764706), ('Laura', 662.4254385964912), ('Liz Tatiane', 870.9007633587786), ('Giovanna', 1197.0), ('Flavia', 933.0194552529183), ('Flavia', 1086.0625), ('Asiya', 790.46875), ('Xiao', 814.4171122994652), ('Sirui', 949.7916666666666), ('Voni', 999.0215053763441), ('Yuka', 858.2450980392157), ('Laili', 996.8148148148148), ('Angelica', 637.6573705179283), ('Alena', 714.1326530612245), ('Bianca', 788.8869565217391), ('Julia', 783.424), ('Carolin', 592.2685714285715), ('Lisa Marie', 989.175925925926), ('Saana', 1117.88), ('Katerina', 1072.3333333333333), ('Petra', 905.1104294478528), ('Daniela', 519.1768707482993), ('Mariana', 926.6914285714286), ('Laura', 1022.2115384615385), ('Andrea', 1093.313725490196), ('Victoire', 1138.8490566037735), ('Bernice', 834.1005025125628), ('Quirine', 633.9770491803279), ('Carlotta', 1121.4414414414414), ('Jovana', 553.87), ('Marina', 711.544), ('Costanza', 1039.9928057553957), ('Helen', 1162.3125), ('Claudia Antonia', 967.2978723404256), ('Claudia Gianina', 996.2574257425742), ('Simona', 782.7252747252747), ('Ani', 620.7623762376238), ('Caroline', 816.65625), ('Liubov', 887.2875), ('Marianna', 637.9914893617022), ('Sofiya', 541.1570881226054), ('Erin', 1106.3275862068965), ('Nina', 1121.9622641509434), ('Eleanor', 1057.3870967741937), ('Ebony', 1073.1752577319587), ('Hiroko', 534.890243902439), ('Miharu', 523.2788844621514), ('Brooke', 1160.1458333333333), ('Karis', 1001.0679611650486), ('Caitlin', 652.5196078431372), ('Rachael', 859.2706766917294), ('Mai', 957.7058823529412), ('Yolande', 1068.4619883040937), ('Valeriya', 1022.25), ('Viktoriya', 1169.4814814814815), ('Lucia', 788.8130841121496), ('Raquel', 1065.0882352941176), ('Nikola', 1075.5029239766081), ('Ankita', 618.4714285714285), ('Ashvarya', 803.3904761904762), ('Sharmada', 851.5633802816901), ('Rutuja', 808.5096774193548), ('Prarthana G', 653.5070422535211), ('Zhaoxuan', 629.0081967213115), ('Jennifer', 326.64102564102564), ('Aishwarya', 1024.625), ('Hua Chen', 726.1737089201878), ('Carolina', 883.1845238095239), ('Sofia', 1050.469696969697), ('Amina', 1187.0), ('Chiara', 874.2444444444444), ('Desiree', 1032.2666666666667), ('Tereza', 487.1965811965812), ('Ju Eun', 812.6), ('Tjasa', 743.1953125), ('Francesca', 891.8471337579617), ('Martina', 1082.9313725490197), ('Yanina', 1023.5898876404494), ('Valeria', 843.5209580838323), ('Lutfiye', 1190.0629921259842), ('Deniz', 494.2918287937743), ('Oleksandra', 1070.409691629956), ('Tanya', 1023.089430894309), ('Xenia', 661.2222222222222), ('Diana', 781.0616113744076), ('Catalina', 417.07086614173227), ('Sofia', 780.7583333333333), ('Gabriela', 923.6264591439689), ('Napatsakorn', 929.4388489208633), ('Kamonwan', 765.1395348837209), ('Anna', 761.9615384615385), ('Varunya', 894.3846153846154), ('Lorenza', 1231.2727272727273), ('Natalie', 733.1492537313433), ('Zalina', 867.5288461538462), ('Alisa', 1130.1267605633802), ('Kamila', 568.2547169811321), ('Elizaveta Anna', 981.9814814814815), ('Yelena', 897.4873949579832), ('Jade', 700.3270142180095), ('Taisiya', 969.6588235294117), ('Rachel', 1147.8526315789475), ('Alice', 853.2352941176471), ('Chiara', 1183.7407407407406), ('Beatrice', 1029.9769230769232), ('Cecilia', 692.07299270073), ('Tess', 696.2878787878788), ('Samira', 932.8940397350993), ('Joana', 803.9454545454546), ('Susanne', 417.8053097345133), ('Nika', 1145.642857142857), ('Ghislaine', 1150.6607142857142), ('Eva', 735.4837209302326), ('Sabrina', 879.2727272727273), ('Cindy', 607.5764705882353), ('Kelly', 803.2569832402235), ('Ekaterina', 1103.125), ('Varvara', 1114.527027027027), ('Viktoryia', 1104.1830985915492), ('Anastasia', 1015.6833333333333), ('Ximena', 1101.3064516129032), ('Gabriela', 517.7974137931035), ('Ya', 1225.75), ('Xi Yao', 714.8653846153846), ('Ai Wen', 912.1523178807947), ('Alice Andrada', 951.9764150943396), ('Min', 866.0693069306931), ('Francesca', 877.6940639269407), ('Giulia', 797.895652173913), ('Maria', 1116.7941176470588), ('Anna', 755.8634146341464), ('Amy', 605.6197916666666), ('Franziska', 915.9846153846154), ('Olga', 589.388), ('Andjela', 1063.4736842105262), ('Oceane', 553.8112244897959), ('Mathilde', 963.45), ('Magalie', 1036.1214953271028), ('Madeline', 1217.469387755102), ('Sabina', 773.2608695652174), ('Evgeniya', 912.5755395683453), ('Cemre', 1123.3855421686746), ('Anette', 969.8181818181819), ('Natia', 929.6928104575163), ('Alicia', 1076.1882352941177), ('Alexandra', 1025.8503937007874), ('Abbi', 1110.0434782608695), ('Rocio', 1216.138888888889), ('Marina', 1116.394366197183), ('Patricia', 563.7251461988304), ('Beatriz', 413.5833333333333), ('Priscila', 1137.2424242424242), ('Gulchekhra', 1196.0), ('Ofri', 839.4923664122138), ('Iva', 782.2297297297297), ('Nicky', 843.9007633587786), ('Michaela', 930.5444444444445), ('Kimberley', 776.6428571428571), ('Barbora', 482.9059405940594), ('Ivonne', 591.3809523809524), ('Patricia Maria', 403.935), ('Dunja', 977.1011235955057), ('Katarina', 1099.1985815602836), ('Veronica M', 951.0075757575758), ('Patricia', 1155.4489795918366), ('Dejana', 850.3064516129032), ('Danijela', 1107.0919540229886), ('Ashley', 960.984), ('Chisa', 874.8181818181819), ('Claudia', 1055.3680981595091), ('Maud', 1013.4761904761905), ('Ainhoa', 943.7397959183673), ('Marine', 774.5654761904761), ('Lyann', 982.6666666666666), ('Stephanie', 744.9586776859504), ('Elena', 1041.1176470588234), ('Mayya', 619.9064748201439), ('Ziyue', 878.4606741573034), ('Ani', 1054.5243902439024), ('Tamari', 1146.3934426229507), ('Maria', 498.3878504672897), ('Nives', 841.0514705882352), ('Mary Ann', 1188.7096774193549), ('Astra', 829.5625), ('Yue', 983.359649122807), ('Nour', 1202.2), ('Nidhi', 762.1578947368421), ('Gaia', 759.5352697095435), ('Sylvia', 869.1702127659574), ('Sherry', 1024.0116279069769), ('Katrine Isabel', 1111.08), ('Ekaterina', 975.6143790849674), ('Lee', 908.156862745098), ('Libi', 1035.327868852459), ('Rona', 1125.5471698113208), ('Gulben', 1168.3396226415093), ('Vita', 1201.25), ('Boyan', 992.4222222222222), ('Leah', 1179.6216216216217), ('Dana', 874.3333333333334), ('Montserrat', 541.952380952381), ('Daniela', 911.4528301886793), ('Jazmin', 1035.46), ('Camila', 703.7586206896551), ('Linda', 907.8590604026846), ('Alena', 1160.6857142857143), ('Jesika', 501.5860215053763), ('Julia', 661.8320610687023), ('Clelia', 823.6306306306307), ('Stefania', 871.703488372093), ('Olga', 994.2792207792207), ('Paula', 1070.8273381294964), ('Maria Constanza De Las Mercedes', 861.5050505050505), ('Ornella', 978.7321428571429), ('Stephanie Mariel', 1035.5548387096774), ('Fernanda', 632.03), ('Victoria', 564.8894736842105), ('Denise', 956.2231404958678), ('Aimee', 1200.2), ('Mayo', 407.029702970297), ('Christina', 874.1980198019802), ('Rio', 1125.0363636363636), ('Noelle', 883.7787610619469), ('Lina', 1186.3684210526317), ('Angelique', 853.6762589928057), ('Claudia', 1131.0384615384614), ('Yihong', 1209.625), ('Nicole', 960.8412698412699), ('Naiktha', 767.4963503649635), ('Anna', 588.4468085106383), ('Paula', 976.5729166666666), ('Breaunna', 872.0930232558139), ('Spurti', 1149.3125), ('Veronika', 500.6933333333333), ('Emiliya', 1092.2771084337348), ('Daria', 712.054347826087), ('Alina', 783.5474452554745), ('Yafan', 325.6162790697674), ('Sonia', 1029.0980392156862), ('Nour', 1038.7702702702702), ('Elke', 1036.406976744186), ('Nicole', 978.0188679245283), ('Gabriella', 988.0208333333334), ('Carmen', 927.5833333333334), ('Sarahi', 1139.2340425531916), ('Maria Andrea', 1072.9591836734694), ('Ana Gabriela', 1084.7916666666667), ('Isabella', 1227.0), ('Aymet', 915.5932203389831), ('Clementina Eugenia', 964.1224489795918), ('Domenica', 803.8666666666667), ('Isabelle', 725.5555555555555), ('Ellen', 806.7682926829268), ('Yosr', 1222.24), ('Sarvinoz', 1235.1960784313726), ('Da Hye', 1010.3333333333334), ('Ji Hee', 1027.3658536585365), ('Francesca', 1060.8163265306123), ('Martina', 820.1656050955414), ('Sanae', 1105.171875), ('Kanako', 1105.3125), ('Alona', 801.0), ('Elizaveta', 416.8855421686747), ('Sofia', 990.6554054054054), ('Berta', 1005.75), ('Carolina', 857.370786516854), ('Nadia', 500.37654320987656), ('Guadalupe', 806.4901960784314), ('Agustina', 1075.2736842105264), ('Shakhlo', 924.8818897637796), ('Guzal', 995.4074074074074), ('Leolia', 773.5666666666667), ('Imane Maelle', 845.375), ('Karin', 739.3035714285714), ('Ekaterina', 423.656050955414), ('Nam Yeon', 878.6666666666666), ('Anastasia', 843.5766871165645), ('Sandra', 925.6860465116279), ('Katharina', 590.3914893617022), ('Giulia', 1153.275), ('Giulia', 897.0818181818182), ('Daiana', 720.7490039840637), ('Luisa', 1112.9183673469388), ('Marcela', 1178.1724137931035), ('Carolina Meligeni Rodrigues', 799.0650406504066), ('Andressa Cristina', 1184.0416666666667), ('Ivone', 872.0), ('Nadia', 933.3885350318471), ('Sarah', 1013.655737704918), ('Assia', 1172.5531914893618), ('Adriana', 738.4942528735633), ('Sarah', 1286.48), ('Daniela', 1146.5454545454545), ('Carmen Raluca', 842.1553398058253), ('Kirsten Andrea', 1035.0384615384614), ('Joanna', 931.025641025641), ('Amira', 1075.8260869565217), ('Olena', 1360.6666666666667), ('Mitsumi', 1121.04), ('Magdalena', 1231.421052631579), ('Lenka', 767.4705882352941), ('Wen Ling', 1117.55), ('Yasmin', 1142.5), ('Larikah', 1054.9019607843138), ('Alexandra', 1373.3673469387754), ('Jelena', 1046.944), ('Elena', 1106.5), ('Patricia', 1226.3164556962026), ('Micaela', 1332.0737704918033), ('Natalia', 1405.2424242424242), ('Emma', 819.7254901960785), ('Amy', 1084.030303030303), ('Julia', 1170.6774193548388), ('Jade', 934.6125), ('Lisa', 1106.1351351351352), ('Julia', 1049.0833333333333), ('Abigail', 1203.9285714285713), ('Jordana', 1022.6198347107438), ('Elaine', 1221.7931034482758), ('Risa', 1086.25), ('Stephanie', 896.3787878787879), ('Marina', 964.1477272727273), ('Grace', 1238.892857142857), ('Bianca', 892.3639575971731), ('Marianna', 1027.8082191780823), ('Milena', 1114.4074074074074), ('Treta', 1009.8666666666667), ('Almudena', 1157.8), ('Eveliina', 1023.8690476190476), ('Francesca', 1117.75), ('Sabina', 895.1770334928229), ('Katharina', 949.5916666666667), ('Priscilla', 668.9642857142857), ('Nikol', 1054.0813953488373), ('Maria Jesus', 1170.1830985915492), ('Denise', 941.5221238938053), ('Molly', 998.1320754716982), ('Jin', 1267.0), ('Sandy', 1028.9565217391305), ('Katherine Gabriela', 910.396694214876), ('Noelia', 1054.6531791907514), ('Brynn', 952.5619834710744), ('Cecilia', 999.125), ('Ushna', 1132.4109589041095), ('Ratnika', 1021.6504854368932), ('Shweta', 897.6951219512196), ('Natasha', 1047.6377952755906), ('Anna', 1177.15625), ('Yekaterina', 1146.8846153846155), ('Violetta', 1137.5135135135135), ('Anita', 947.472972972973), ('Ludmila', 846.2727272727273), ('Malika', 1004.7428571428571), ('Kathinka', 415.7), ('Meng Ning', 1035.95), ('Giulia', 986.8349514563107), ('Alina', 854.8849557522124), ('Gabriela', 1087.6161616161617), ('Rosalie', 1018.328947368421), ('Natalija', 591.7393162393163), ('Carlotta', 1200.0), ('Sandra', 1092.165137614679), ('Mara', 908.3962264150944), ('Francesca', 954.444976076555), ('Emiliana', 1165.945205479452), ('Arantxa', 1134.896551724138), ('Sowjanya', 813.1357142857142), ('Carla', 1015.8947368421053), ('Belen', 1167.3368421052633), ('Kate', 1117.7142857142858), ('Sabrina', 551.3582089552239), ('Alessia', 961.4230769230769), ('Mami', 1153.590909090909), ('Qianqian', 943.421052631579), ('Gabriela', 1150.0), ('India', 954.046875), ('Ella', 1151.021505376344), ('Patricia', 1105.537037037037), ('Lina', 1020.8352941176471), ('Veronika', 1153.1025641025642), ('Lynn', 1034.3684210526317), ('Mi Jeong', 1071.3076923076924), ('Angelina', 1230.5625), ('Despoina', 746.0962962962963), ('Karla', 807.616), ('Kayla', 1101.55), ('Valeria', 757.0555555555555), ('Haine', 1179.4153846153847), ('Dan Ni', 994.4769230769231), ('Michika', 718.047619047619), ('Camila Vital', 1192.3783783783783), ('Martina', 986.3452380952381), ('Andrea Renee', 878.3939393939394), ('Brandy', 970.9846153846154), ('Fiona', 908.4414414414415), ('Daphne', 1226.5454545454545), ('Jazzamay', 983.1290322580645), ('Yujia', 1034.1304347826087), ('Andrea', 759.2765957446809), ('Ilze', 847.0941176470589), ('Saray', 840.0776699029126), ('Liniques', 1184.7222222222222), ('Jasmin', 1094.5833333333333), ('Elena Teodora', 686.6470588235294), ('Stefanie', 1003.1884057971015), ('Stefania', 1071.142857142857), ('Federica', 799.6744186046511), ('Michele Alexandra', 946.8846153846154), ('Joana', 910.6521739130435), ('Valeria', 935.9090909090909), ('Chantelle', 1128.030303030303), ('Polina', 504.54545454545456), ('Gaelle', 1085.6), ('Anna Katalina', 916.7115384615385), ('Saska', 747.3695652173913), ('Elizabeta', 1154.2714285714285), ('Sari', 1081.1666666666667), ('Pauline', 793.5889570552147), ('Steffi', 891.8120805369127), ('Irina Maria', 578.1381578947369), ('Stefana', 993.4255319148937), ('Alory Regina Elorriaga', 1181.6078431372548), ('Madeleine', 1028.0365853658536), ('Elise', 334.7118644067797), ('Kyra', 1143.2608695652175), ('Aida', 1110.3333333333333), ('Jelena', 1025.25), ('Viktoria', 811.72), ('Laura', 901.8187919463087), ('Xiaorong', 848.4418604651163), ('Stefanie', 506.79487179487177), ('Iva', 692.2707182320441), ('Mariana', 868.2702702702703), ('Sonja', 946.3888888888889), ('Hanna', 1115.7714285714285), ('Vivian', 770.6042780748663), ('Francesca', 1031.2119205298013), ('Karolina', 1034.92), ('Jaimy Gayle', 1243.875), ('Gabriela', 1000.4246575342465), ('Kristina', 1016.5903614457832), ('Anastasia', 661.2774193548387), ('Barbara', 1014.9026548672566), ('Dagmara', 1159.1818181818182), ('Zuzanna', 794.5416666666666), ('Catherine', 918.6078431372549), ('Carolin', 1160.111111111111), ('Beatriz Magdalena', 1253.4), ('Marta', 1112.4528301886792), ('Claudia', 1175.2058823529412), ('Giada', 813.1351351351351), ('Miriana', 950.6263736263736), ('Valeria', 874.1242236024844), ('Jessica', 583.9622641509434), ('Marie', 916.5714285714286), ('Marijana', 1215.0), ('Natalia', 852.420731707317), ('Steffi', 1020.9090909090909), ('Suellen', 911.7619047619048), ('Borislava', 834.2066115702479), ('Mayar', 711.1785714285714), ('Diana', 1026.5037593984962), ('Kanika', 962.8536585365854), ('Apichaya', 1016.5714285714286), ('Laura', 1089.6666666666667), ('Pei Chi', 673.9809523809524), ('Chia Hsien', 950.8813559322034), ('Ching Wen', 583.530303030303), ('Ferny', 1187.0384615384614), ('Cornelia', 757.2253521126761), ('Alexandra', 628.2191780821918), ('Linda', 1232.2), ('Colomba', 1165.093023255814), ('Ivania', 871.109375), ('Macarena', 692.1515151515151), ('Se Hyun', 1210.2571428571428), ('Eva', 1134.9772727272727), ('Audrey', 647.8557692307693), ('Lea', 837.0), ('Maria', 881.1304347826087), ('Dominique', 1248.9166666666667), ('Sarah Beth', 875.9277108433735), ('Pippa', 1041.0740740740741), ('Natasha', 707.7594936708861), ('Vilma Y', 1243.0), ('Maria Paulina', 1047.98224852071), ('Paula Andrea', 1175.909090909091), ('Sri Vaishnavi', 792.1927710843373), ('Giorgia', 997.28), ('Valeriya', 621.5885714285714), ('Charlotte', 1207.0), ('Neda', 930.0), ('Sharon Sanchana', 1097.0), ('Aleksandra', 1097.741573033708), ('Smriti', 1184.8260869565217), ('Sai Samhitha', 998.5238095238095), ('Mariia', 1148.9166666666667), ('Vaniya', 1130.6037735849056), ('Anushka', 1037.0833333333333), ('Julia', 739.8951048951049), ('Bernarda', 541.273631840796), ('Cristina', 709.8819444444445), ('Nicoleta Catalina', 485.46875), ('Ioana', 876.3333333333334), ('Shelby', 788.5178571428571), ('Sara', 1016.6752136752136), ('Akvile', 1038.35), ('Katie', 555.3473684210526), ('Mafalda', 1139.7), ('Darya', 1119.6931818181818), ('Anna', 1201.08), ('Charlotte', 958.1869158878504), ('Casey', 1046.134328358209), ('Yukako', 1071.5833333333333), ('Julie', 1164.6818181818182), ('Jasmine', 437.86915887850466), ('Agustina Elena', 1154.25), ('Camila', 1201.25), ('Nikki', 1017.3134328358209), ('Mandy', 787.2551020408164), ('Isabella', 1166.8), ('Nina Isabella', 1124.1666666666667), ('Lena', 1153.6666666666667), ('Jessica', 797.6951219512196), ('Kelsey', 1012.325), ('Blair', 912.71875), ('Amanda', 1068.35), ('Patricia', 985.0350877192982), ('Jainy', 1037.5274725274726), ('Theresa', 1159.5632183908046), ('Angeliki', 1089.1603773584907), ('Eetee', 842.7045454545455), ('Sara', 1052.1315789473683), ('Ho Ching', 925.9865771812081), ('Cristiana', 554.5376344086021), ('Chiara', 1212.0), ('Jamie', 455.56410256410254), ('Quinn', 883.2352941176471), ('Lina', 607.5721393034826), ('Vladyslava', 856.0782608695653), ('Deria', 1123.6486486486488), ('Catherine', 959.6216216216217), ('Daniela', 1111.2), ('Marie', 518.2080536912752), ('Karolina', 1151.59375), ('Yulia', 970.7878787878788), ('Daniela', 1000.0769230769231), ('Laura', 1003.8620689655172), ('Eudice Wong', 911.7241379310345), ('Justine', 996.6626506024096), ('Michelle', 989.4), ('Harriet', 694.341935483871), ('Sophie', 981.4137931034483), ('Karoline', 873.6229508196722), ('Tayisiya', 747.3172413793103), ('Mia Nicole', 987.504761904762), ('Sybille', 1002.6792452830189), ('Dea', 550.9545454545455), ('Eugenie', 1125.5483870967741), ('Deborah', 650.7578947368421), ('Jessika', 818.2043795620438), ('Olaya', 1112.75), ('Klaartje', 576.9), ('Natalia', 833.9051724137931), ('Katherine', 924.3037037037037), ('Deborah', 741.02), ('Tena', 614.9346733668342), ('Marlies', 946.8934426229508), ('Georgia', 533.5940594059406), ('Charlotte', 824.1891891891892), ('Tamara', 354.43809523809523), ('Katharina', 782.1232876712329), ('Sarah', 1116.9423076923076), ('Gabriela', 856.4285714285714), ('Caroline', 868.6283185840708), ('Jil Nora', 1116.4190476190477), ('Chiara', 1154.0980392156862), ('Ayaka', 552.4653465346535), ('Alejandra', 1003.1176470588235), ('Nozomi', 936.3392857142857), ('Hikari', 1095.1176470588234), ('Hazal', 1214.7692307692307), ('Caroline', 575.8761904761905), ('Rosalia', 1059.73), ('Georgina', 1249.4285714285713), ('Melis', 1097.171875), ('Mari', 685.5), ('Ana', 1066.1382978723404), ('Ena', 1006.0392156862745), ('Gabriela', 699.9121621621622), ('Dejana', 684.156862745098), ('Kerstin', 1020.4271844660194), ('Nina', 225.57534246575344), ('Bojana', 737.0410958904109), ('Elena', 829.0), ('Ines', 1196.3461538461538), ('Giulia', 1208.3125), ('Esen', 1218.5652173913043), ('Lenka', 894.1379310344828), ('Sadafmoh', 665.8219178082192), ('Violetta', 1209.375), ('Nastassia', 1138.9166666666667), ('Eden', 945.7478260869565), ('Corina', 832.7818181818182), ('Bhuvana', 878.0138888888889), ('Charlotte', 1178.4166666666667), ('Manya', 1181.3548387096773), ('Daniela', 1000.1896551724138), ('Louise', 1095.060606060606), ('Eva', 1064.5657894736842), ('Sabina Elena', 1184.6666666666667), ('Julia', 386.24657534246575), ('Naomi', 769.8858695652174), ('Anna', 1264.2727272727273), ('Alena', 1070.6666666666667), ('Gulnaz', 1236.6153846153845), ('Oleksandra', 601.169014084507), ('Yekaterina', 1197.7333333333333), ('Polina', 1212.0), ('Victoria', 1185.75), ('Lou', 1209.625), ('Elodie', 1211.2333333333333), ('Manon', 973.3541666666666), ('Leslie', 1180.5454545454545), ('Maria Agustina', 1190.0833333333333), ('Helen', 912.234375), ('Nikita', 1174.0), ('Juliana Rocha', 1175.7666666666667), ('Josephine', 684.4892086330935), ('Wendy Qi Wen', 1011.469696969697), ('Rosalie', 1143.0), ('Ulyana', 844.0692307692308), ('Daria', 1108.2295081967213), ('Sandra', 489.4657534246575), ('Oana', 1168.2307692307693), ('Jelena', 460.47904191616766), ('Erika', 1108.8), ('Camille', 1029.8), ('Mathilde', 1083.6575342465753), ('Carla', 810.7826086956521), ('Fiona', 531.6888888888889), ('Jacqueline', 691.6936936936937), ('Jennifer', 861.2063492063492), ('Nagi', 828.0675675675676), ('Mihoki', 1110.4411764705883), ('Harmony', 574.8723404255319), ('Viktoriya', 1087.4782608695652), ('Helene', 682.3052631578947), ('Nina', 838.5604395604396), ('Vladica', 943.5432098765432), ('Martina', 1035.6969696969697), ('Danielle', 946.1477272727273), ('Wan Yi', 1081.142857142857), ('Alessandra', 1123.4864864864865), ('Jamilya', 1247.3333333333333), ('Diana', 1142.1315789473683), ('Yuliya', 1167.5428571428572), ('Aleksandra', 1209.625), ('Madina', 1203.5), ('Julia Mansano', 1024.6666666666667), ('Leticia Garcia', 1072.4), ('Ingrid', 853.2375), ('Anna', 823.74), ('Ailen', 1034.5833333333333), ('Ana Victoria', 961.2631578947369), ('Fernanda', 1243.875), ('Louisa', 380.5308641975309), ('Tornado Alicia', 878.1666666666666), ('Madison', 1074.8536585365853), ('Kajsa', 661.9589041095891), ('Oana Georgeta', 686.3047619047619), ('Elke', 906.75), ('Paula', 406.53846153846155), ('Ana Bianca', 842.8446601941747), ('Amrita', 1209.4), ('Simran Kaur', 974.8), ('Shreya', 1148.0), ('Riya', 651.4246575342465), ('Camila', 1212.5263157894738), ('Paulina', 1011.5109489051094), ('Aleksandra', 1210.764705882353), ('Magdalena', 586.9224137931035), ('Rebecca', 563.75), ('Deniz', 1220.1818181818182), ('Eva', 1063.9213483146068), ('Pernilla', 619.4154929577464), ('Karolina', 819.18), ('Barbora', 444.9727272727273), ('Katerina', 291.7972027972028), ('Nao', 313.45625), ('Polina', 1073.5), ('Jaqueline Adina', 748.7238095238096), ('Shilin', 632.2824427480916), ('Akiho', 1145.8235294117646), ('Szabina', 772.3186813186813), ('Nicole', 539.8356164383562), ('Kim', 1221.6470588235295), ('Sofico', 1084.107142857143), ('Melissa', 1154.093023255814), ('Aleksandra', 1018.3636363636364), ('Ekaterina', 1241.8), ('Alessia', 1134.12), ('Ivana', 473.54), ('Pia', 766.21875), ('Olena', 1113.1515151515152), ('Lauren', 1198.909090909091), ('Alexandra', 992.4444444444445), ('Laura', 1129.7818181818182), ('Patcharin', 863.5507246376811), ('Margaux', 1154.0), ('Sandra', 1226.25), ('Anastasiya', 834.7169811320755), ('Anna', 784.5217391304348), ('Emina', 682.0972222222222), ('Naomi', 390.5), ('Nicole', 884.4117647058823), ('Julia', 603.5777777777778), ('Ina', 1165.5573770491803), ('Beatrice', 945.1636363636363), ('Erika', 821.4102564102565), ('Yana', 845.5966386554621), ('Alexa', 1033.6486486486488), ('Monique', 940.5479452054794), ('Francoise', 437.05298013245033), ('Aldana', 1185.7142857142858), ('Luciana', 1243.875), ('Anke', 1228.388888888889), ('Daria', 782.2476190476191), ('Chiara', 1173.4186046511627), ('Deborah', 1219.448275862069), ('Luisa Marie', 820.59375), ('Julia', 418.26027397260276), ('Elena Gabriela', 392.44444444444446), ('Martina', 783.9285714285714), ('Chiara', 826.9069767441861), ('Darya', 1117.0222222222221), ('Anastasiya', 899.5407407407407), ('Hongrui', 914.8607594936709), ('You Na', 1170.3461538461538), ('Maxine', 973.8717948717949), ('Katie', 868.8571428571429), ('Eleonore', 1160.5238095238096), ('Anhelina', 432.6949152542373), ('Haruka', 774.6837606837607), ('Kyoka', 348.54794520547944), ('Rafaela', 1121.2432432432433), ('Emma Christine', 1193.3529411764705), ('Maria', 1048.2156862745098), ('Katerina', 555.9921875), ('Jessica', 863.9344262295082), ('Anastasiya', 394.16), ('Dominika', 1009.7674418604652), ('Emmanuelle', 1184.7692307692307), ('Ana Paula', 684.6578947368421), ('Maria Fernanda', 877.6076923076923), ('Vishesh', 1208.952380952381), ('Victoria', 462.3642857142857), ('Angelina', 830.6666666666666), ('Lizette', 666.1496062992126), ('Samantha', 1012.2051282051282), ('Priscilla', 678.396694214876), ('Olivia', 637.563829787234), ('Michelle', 852.36), ('Chiara', 1028.4310344827586), ('Alice', 536.8039215686274), ('Maia', 745.433962264151), ('Kaitlyn', 891.3095238095239), ('Donika', 1131.6333333333334), ('Gloria', 794.7118644067797), ('Andreea', 833.8493150684932), ('Aliona', 611.35), ('Jacqueline', 1033.34), ('Barbara', 734.2), ('Talya', 1230.2), ('Valeria', 1118.015625), ('Alona', 1037.3055555555557), ('Anastasija', 1144.7142857142858), ('Martina', 779.1060606060606), ('Julieta Lara', 707.1467889908257), ('Eliza', 978.2708333333334), ('Yana', 978.8979591836735), ('Aleksandra', 835.16), ('Teodora', 938.0540540540541), ('Gebriela', 1152.142857142857), ('Vivian', 922.4666666666667), ('Parris', 1099.625), ('Zoe', 677.8082191780821), ('Gabriela', 1003.4827586206897), ('Ana', 276.82481751824815), ('Nicole', 1088.6315789473683), ('Ariadna', 951.4146341463414), ('Ksenija', 975.6271186440678), ('Lilla', 722.5087719298245), ('Emmanuelle', 864.0645161290323), ('Muge', 1186.9444444444443), ('Ege', 1214.857142857143), ('Ilka', 868.2191780821918), ('Jasmin', 969.8666666666667), ('Ksenia', 851.2647058823529), ('Nina', 688.2054794520548), ('Natsumi', 974.3428571428572), ('Angelina', 1229.6521739130435), ('Chanikarn', 1281.8461538461538), ('Marija', 1241.8), ('Adrijana', 627.12), ('Janneke', 861.5102040816327), ('Anastasiya', 1002.2307692307693), ('Sarai Delfina', 1191.6470588235295), ('Sneha', 1225.388888888889), ('Victoria', 1232.2), ('Natalia', 414.9479166666667), ('Ivanka', 1079.05), ('Valeriya', 1029.9850746268658), ('Dhruthi', 615.1506849315068), ('Nelise', 1164.107142857143), ('Vanja', 1089.7111111111112), ('Jessica', 1003.0540540540541), ('Caitlin', 1237.090909090909), ('Yan', 768.560975609756), ('Yuenu', 961.876923076923), ('Kwan Yau', 1070.0377358490566), ('Fang Ying', 612.0185185185185), ('Si Qi', 1047.7575757575758), ('Veronika', 1127.8181818181818), ('Emilia', 1232.0), ('Paulina', 1195.9473684210527), ('Freya', 544.1627906976744), ('Katharina', 673.986301369863), ('Sinead', 975.3484848484849), ('Shiran', 1187.9245283018868), ('Nataliya', 1247.909090909091), ('Anastasia', 430.17808219178085), ('Amelie', 1011.3666666666667), ('Mariaryeni', 1085.4242424242425), ('Lesedi Sheya', 887.4545454545455), ('Justina', 1212.9166666666667), ('Paige Mary', 1156.28125), ('Anais', 1010.2222222222222), ('Petra', 607.7978723404256), ('Ting Jr', 789.6113989637306), ('Damilola', 1493.0), ('Brittany', 1151.4137931034484), ('Megan', 1142.4782608695652), ('Jil Belen', 501.0619469026549), ('Sara', 891.0576923076923), ('Allie', 338.2395833333333), ('Maria', 504.45054945054943), ('Olga', 426.958904109589), ('Pamela', 989.1904761904761), ('Elizaveta', 1180.12), ('Jana', 353.3222222222222), ('Sofia', 433.7792207792208), ('Adeliya', 790.1538461538462), ('Camille', 1214.341463414634), ('Louise', 1208.5128205128206), ('Theo', 650.1206896551724), ('Maria', 905.6805555555555), ('Ao', 617.3333333333334), ('Karina Kristina', 1062.795918367347), ('Maria Jose', 817.8518518518518), ('Mahitha', 1007.15), ('Risa', 741.123595505618), ('Megumi', 1025.0), ('Iryna', 747.6422018348624), ('Oyku', 866.0454545454545), ('Yasmyn', 1261.8181818181818), ('Kristyna', 1077.4736842105262), ('Kateryna', 866.1971830985915), ('Tatjana', 131.44628099173553), ('Irina', 669.6590909090909), ('Hana', 1212.0), ('Tatiana', 1225.578947368421), ('Anna', 1052.1333333333334), ('Ksenia', 1046.2075471698113), ('Sandra', 838.4905660377359), ('Lisa', 1150.15), ('Jelena', 1010.1142857142858), ('Emily', 773.5352112676056), ('Gabriella', 557.6849315068494), ('Luisa', 911.8913043478261), ('Damini', 1242.0), ('Jessica', 457.1111111111111), ('Anna', 1084.9577464788733), ('Yana', 1200.1052631578948), ('Melanie', 597.8504672897196), ('Marie', 512.1145833333334), ('Zaineb', 1227.344827586207), ('Rita', 1002.7659574468086), ('Yukun', 824.3936170212766), ('Tina', 966.9056603773585), ('Vera', 1126.2), ('Eleni', 1069.25), ('Dalma', 279.16438356164383), ('Ahlam', 1248.72), ('Agne', 1231.5), ('Martha', 1056.0588235294117), ('Alexa', 704.0958904109589), ('Yukina', 857.1692307692308), ('Maddison', 748.0), ('Marie', 939.6129032258065), ('Alexandra', 801.0), ('Usue Maitane', 411.5068493150685), ('Ellie', 479.0652173913044), ('Jade', 1120.590909090909), ('Sung Hee', 1138.274193548387), ('Evgeniya', 1221.904761904762), ('Ivana', 1225.9166666666667), ('Silvia', 1212.0), ('Camilla', 661.2465753424658), ('Cecilia', 1237.34375), ('Sandra', 1222.5862068965516), ('Lisa', 758.609756097561), ('Costanza', 1153.3333333333333), ('Marta', 1045.0588235294117), ('Irene', 579.2153846153847), ('Chaoyi', 1232.8), ('Cristina', 820.3085106382979), ('Maja', 1190.6363636363637), ('Fanny', 707.972972972973), ('Ines', 749.6309523809524), ('Sean', 1240.92), ('May', 1084.0294117647059), ('Maria Del Rosario', 1119.4897959183672), ('Aina', 1164.95), ('Mariam', 662.1182795698925), ('Anastasia Evgenyevna', 956.5754716981132), ('Ana Luisa', 1243.4285714285713), ('Constanza', 835.1132075471698), ('Alexia', 1255.421052631579), ('Maia A', 1206.6666666666667), ('Eva', 961.8630136986301), ('Peggy', 755.5813953488372), ('Zhanlan', 627.7777777777778), ('En Pei', 1229.7333333333333), ('Thai Sa Grana', 802.7222222222222), ('Erika', 1146.8823529411766), ('Karyn', 903.5769230769231), ('Damira', 1198.3333333333333), ('Marina', 1029.6296296296296), ('Dajana', 1181.4736842105262), ('Ayla', 397.83561643835617), ('Amy', 908.546875), ('Yeong Won', 973.8617021276596), ('Yu Jin', 1098.357142857143), ('Maurien', 1121.0869565217392), ('Raluca Georgiana', 539.6164383561644), ('Andreea Amalia', 801.84375), ('Iulia Maria', 1170.9411764705883), ('Emilija', 1209.625), ('Katarina', 920.1794871794872), ('Sofia', 1157.6190476190477), ('Gozal', 716.3150684931506), ('Petra', 796.97), ('Yuanyi', 891.2340425531914), ('Aiko', 774.046875), ('Inger', 1039.0), ('Marie', 938.0645161290323), ('Mary', 869.1666666666666), ('Cristina', 1147.4583333333333), ('Alisa', 1240.2727272727273), ('Muazzez', 1227.0), ('Wushuang', 937.7878787878788), ('Verena', 931.780487804878), ('Plobrung', 937.7945205479452), ('Magdalena', 1223.9016393442623), ('Chompoothip', 1112.1458333333333), ('Qiu Yu', 705.8493150684932), ('Teodora', 1156.2424242424242), ('Rebeka', 842.0806451612904), ('Alba', 843.7260273972603), ('Federica Joe', 1204.7272727272727), ('Ylena', 892.3561643835617), ('Tamachan', 949.8059701492538), ('Nicole', 1132.0), ('Barbara', 1193.433962264151), ('Karolina', 1047.0243902439024), ('Hollie', 1185.75), ('Eliessa', 876.1730769230769), ('Elena', 1116.5), ('Magali', 734.0), ('Nonna', 1167.2758620689656), ('Angela', 1116.2571428571428), ('Ana', 1203.1698113207547), ('Ronit', 427.0), ('Kristina N', 1060.5633802816901), ('Ekaterina', 1014.2592592592592), ('Emma', 1215.698113207547), ('Anna', 1098.5135135135135), ('Nina', 1039.7272727272727), ('Antonina', 1049.4655172413793), ('Barbara', 895.763440860215), ('Lena', 938.4), ('Rosie', 984.1714285714286), ('Renata', 485.2386363636364), ('Britt', 647.5205479452055), ('Greetje', 547.277108433735), ('Morgane', 1105.3214285714287), ('Elina', 1116.5652173913043), ('Maria', 1080.3076923076924), ('Frances', 999.2), ('Yuriko', 1101.2045454545455), ('Clemence', 875.9772727272727), ('Milica', 1221.904761904762), ('Nina', 690.1022727272727), ('Tamara', 1245.6190476190477), ('Bianca', 561.1369863013699), ('Veronica', 1032.2), ('Ekaterina', 866.0357142857143), ('Nora', 921.6216216216217), ('Tereza', 1039.076923076923), ('Nikola', 1237.2666666666667), ('Anastasia', 710.9433962264151), ('Pranjala', 795.4736842105264), ('Jin Ju', 1035.6470588235295), ('Ying', 661.3972602739726), ('Dabin', 920.1276595744681), ('Hanna', 587.2), ('Sabina', 1161.3384615384616), ('Margaux', 1144.4594594594594), ('Sara', 1217.851851851852), ('Natasha', 871.4054054054054), ('Minami', 1238.0625), ('Ines', 974.8732394366198), ('Lamis', 1062.3666666666666), ('Yulia', 814.5192307692307), ('Sandra', 1103.658536585366), ('Elisabeth', 1211.2424242424242), ('Yulia', 1230.5625), ('Valentina', 921.3333333333334), ('Tamara', 1023.8333333333334), ('Ipek', 976.7878787878788), ('Inci', 1069.0925925925926), ('Irina', 1082.0), ('Natalie', 999.3636363636364), ('Nikola', 1182.1944444444443), ('Vendula', 729.0117647058823), ('Petia', 710.3972602739726), ('Dasha', 722.6986301369863), ('Elizabeth', 1242.6666666666667), ('Adriana', 1064.7826086956522), ('Raveena', 487.6268656716418), ('Amina', 670.2222222222222), ('Petra', 1203.0), ('Natalija', 812.4642857142857), ('Milagros', 1234.2857142857142), ('Chiraz', 749.3582089552239), ('Kimberly', 618.6923076923077), ('Bianka', 696.952380952381), ('Masa', 951.2911392405064), ('Vasilisa', 886.9589041095891), ('Katarina', 1059.4054054054054), ('Laura D', 910.5714285714286), ('Sofia', 977.12), ('Yuliana', 1082.5882352941176), ('Diana', 1217.7142857142858), ('Idia', 1232.2), ('Weronika Jasmina', 1152.7837837837837), ('Nicole', 618.8135593220339), ('Katharina', 434.52054794520546), ('Darya', 105.02597402597402), ('Mercedes', 1213.2142857142858), ('Vera', 1191.6571428571428), ('Karolina', 340.82191780821915), ('Caroline', 1242.0), ('Guillermina', 1027.0), ('Ekaterina', 1137.2), ('Luca', 859.8644067796611), ('Rebeka', 461.7291666666667), ('Kristina', 501.8493150684931), ('Anastasia', 1173.9333333333334), ('Melany Solange', 1039.8333333333333), ('Jasmine Amber', 1117.64), ('Julia', 943.6666666666666), ('Magdalena', 581.3275862068965), ('Viktoria', 434.8452380952381), ('Federica', 969.0845070422536), ('Anastasiya', 600.95), ('Eva', 1133.25), ('Margot', 925.1666666666666), ('Natalia', 1159.1458333333333), ('Valeria', 1048.5), ('Anna', 1062.509090909091), ('Anastasia', 524.7534246575342), ('Veronica', 792.015625), ('Anastasia', 1149.640625), ('Victoria', 1086.888888888889), ('Alicia', 1132.94), ('Seone', 889.8028169014085), ('Sofia', 1190.8461538461538), ('Simona', 875.5769230769231), ('Noelia', 1036.6031746031747), ('Marta Huqi', 851.1224489795918), ('Tessah', 390.2361111111111), ('Margot', 549.7671232876712), ('Ralina', 1176.5), ('Snehadevi S', 632.3150684931506), ('Man Ying Maggie', 1202.2692307692307), ('Julie', 1075.6031746031747), ('Angela', 1177.2222222222222), ('Verena', 1123.6153846153845), ('Sara', 570.8888888888889), ('Julia', 1047.1666666666667), ('Lena', 859.5757575757576), ('Alice', 1014.060606060606), ('Vinciane', 1150.0), ('Valeriya', 1217.7368421052631), ('Ana', 1151.3333333333333), ('Michaela', 667.082191780822), ('Ena', 931.7777777777778), ('Catherine Cartan', 134.21917808219177), ('Lisa', 909.9589041095891), ('Jaeda', 760.4920634920635), ('Ksenia', 1108.2222222222222), ('Yuan', 1054.0), ('Bunyawi', 555.3384615384615), ('Mizuno', 593.1506849315068), ('Mila', 1201.16), ('Alina', 1235.909090909091), ('Jiahui', 794.4931506849315), ('Kseniia', 990.6), ('Alisa', 1212.0), ('Tereza', 540.7397260273973), ('Erica', 788.0384615384615), ('Andie K', 970.3620689655172), ('Lucie', 1219.093023255814), ('Alexandria', 945.625), ('Tatiana', 869.0425531914893), ('Vera', 431.26027397260276), ('Kelly', 813.1428571428571), ('Ines', 1154.0857142857142), ('Sherazad', 271.3972602739726), ('Karin', 1194.591836734694), ('Mallaurie', 1031.5342465753424), ('Eleonore', 1028.2884615384614), ('Sara', 616.7735849056604), ('Valentine', 1185.5), ('Karolayne', 1077.8095238095239), ('Julia', 1083.05), ('Huijie', 1118.904761904762), ('Xu Liu', 488.7671232876712), ('Shangqing', 1228.3235294117646), ('Maria', 1178.9), ('Katya', 1050.7), ('Marta', 454.7945205479452), ('Shakhnoza', 1236.7627118644068), ('Terri', 963.5), ('Doga Selen', 1234.6176470588234), ('Natalie', 1172.3720930232557), ('Arthi', 1281.8461538461538), ('Daniela', 1183.4285714285713), ('Vera', 1171.0588235294117), ('Yixuan', 801.6712328767123), ('Xinyu', 370.7671232876712), ('Anna', 485.23809523809524), ('Maria', 1047.0), ('Alexis', 1207.8333333333333), ('Rianna', 638.6666666666666), ('Mirjam', 843.6428571428571), ('Savannah', 1142.9285714285713), ('Agata Jadwiga', 1082.3548387096773), ('Ida', 962.5), ('Lidia', 1147.8529411764705), ('Estela', 966.0540540540541), ('Mouna', 1258.5), ('Caroline', 553.5762711864406), ('Sophie', 676.4722222222222), ('Andrina', 1045.6666666666667), ('Lucia', 901.7966101694915), ('Manca', 838.1780821917808), ('Tamara', 298.32876712328766), ('Yuval', 1230.2), ('Shir', 1154.4166666666667), ('Maya', 1165.5714285714287), ('Sarlota', 1209.7777777777778), ('Phenomena', 1211.0), ('Alina', 1206.9), ('Yarden', 1166.875), ('Miriam Bianca', 628.075), ('Ioana', 1070.878787878788), ('Warona', 1249.3333333333333), ('Valeriya', 814.3333333333334), ('Haruna', 512.1515151515151), ('Berfu', 625.013698630137), ('Greta', 1252.608695652174), ('Yulia', 1162.0), ('Anastasia', 976.054794520548), ('Polina', 954.6), ('Andrea', 1039.448275862069), ('Lea', 833.2105263157895), ('Jessica', 1208.7142857142858), ('Komola', 826.0238095238095), ('Petra', 1152.5555555555557), ('Yuki Kristina', 698.8285714285714), ('Chihiro', 695.4794520547945), ('Fanny', 428.5068493150685), ('Anastasia', 851.3), ('Aryna', 349.54794520547944), ('Ekaterina', 708.8813559322034), ('Natalie', 1128.3934426229507), ('Paula', 1119.7272727272727), ('Lauren', 1242.3478260869565), ('Ingrid', 670.931506849315), ('Alexandra', 1178.888888888889), ('Farah', 1106.3076923076924), ('Dina', 1094.4583333333333), ('Maria', 993.375), ('Ayan', 901.8717948717949), ('Pei Hsuan', 1106.5), ('I Hsuan', 1038.6911764705883), ('Lucrezia', 845.986301369863), ('Giorgia', 1129.4333333333334), ('Gabriela Nicole', 994.0612244897959), ('Oana', 927.0909090909091), ('Georgia Andreea', 763.1014492753624), ('Jelena', 1139.418181818182), ('Jovana', 1157.1538461538462), ('Maria Lourdes', 918.0769230769231), ('Agustina', 1182.5), ('Margot', 1238.7777777777778), ('Sang Hee', 857.9508196721312), ('Jia Qi', 529.7777777777778), ('Anastasia', 996.76), ('Ludmilla', 787.5416666666666), ('Arina', 1098.1323529411766), ('Anastasiya', 1098.4347826086957), ('Xiaodi', 467.24657534246575), ('Andreea', 1145.8085106382978), ('Anna', 1027.6986301369864), ('Lusine', 974.2702702702703), ('Yuqi', 1047.3529411764705), ('Sunam', 611.0757575757576), ('Katherine', 653.4305555555555), ('Ylona Georgiana', 642.9487179487179), ('Marta', 1151.1818181818182), ('Karman', 652.917808219178), ('Tamar', 1118.4166666666667), ('Jessica', 820.6849315068494), ('Charlotte', 676.013698630137), ('Joanne', 1227.8), ('Natalia', 1135.0), ('Dana', 724.0), ('Georgiana', 1153.9166666666667), ('Valerie', 1232.2424242424242), ('Camila', 997.8333333333334), ('Jana', 1034.3392857142858), ('Sabrina', 1180.421052631579), ('Jiaxi', 578.5), ('Isabelle', 884.6296296296297), ('Anca', 1127.7368421052631), ('Ashley', 698.9076923076923), ('Suzuho', 980.6666666666666), ('Angelina', 967.4772727272727), ('Federica', 874.3333333333334), ('Barbora', 927.2641509433962), ('Alena', 1274.9444444444443), ('Gyulnara', 1087.6216216216217), ('Mirabelle', 721.1643835616438), ('Karolina', 1235.8461538461538), ('Margarita', 779.5217391304348), ('Emilie', 705.4716981132076), ('Sara', 988.6666666666666), ('Daria', 1025.0), ('Sophia', 1221.3333333333333), ('Sabastiani', 982.7397260273973), ('Evgeniya', 830.875), ('Satsuki', 888.7272727272727), ('Aleksandra', 962.4629629629629), ('Julyette Maria Josephine', 732.1666666666666), ('Aleksandra', 747.5342465753424), ('Anna', 1032.157894736842), ('Mira', 788.2622950819672), ('Moulika', 1243.4), ('Ioana Diana', 482.43243243243245), ('Janja', 1262.5416666666667), ('Susan', 1015.6792452830189), ('Carolyn', 1197.578947368421), ('Jodie Anna', 925.4230769230769), ('Maegan', 787.0), ('Karola Patricia', 928.3333333333334), ('Martina', 1042.4137931034484), ('Sofya', 483.3235294117647), ('Valeriya', 943.8), ('Ekaterina', 1260.6363636363637), ('Victoria', 923.1578947368421), ('Kennedy', 807.7222222222222), ('Iana', 1085.581818181818), ('Oliwia', 1006.5128205128206), ('Francesca', 1147.8461538461538), ('Meritxell', 1182.9107142857142), ('Stephanie', 1019.9512195121952), ('Petra', 1221.6363636363637), ('Tereza', 860.8055555555555), ('Kimika', 1097.219512195122), ('Martina', 1174.7142857142858), ('Abigail', 605.425925925926), ('Claire', 581.8194444444445), ('Jada', 909.2), ('Dalila', 876.6444444444444), ('Basak', 1235.0555555555557), ('Ema', 1234.2692307692307), ('Clara', 1218.2857142857142), ('Astrid Wanja', 1086.45), ('Malene', 999.15625), ('Eva', 852.1194029850747), ('Anna', 435.0281690140845), ('Claudia', 1148.5142857142857), ('Chelsea', 1132.0), ('Marketa', 353.44444444444446), ('Miriam', 564.547619047619), ('Nika', 1134.3055555555557), ('Anna', 947.0714285714286), ('Dariya', 1090.0), ('Laura Sofia', 1198.1538461538462), ('Kim', 1224.8823529411766), ('Shanshan', 694.2), ('Linnea', 959.6981132075472), ('Anhzelika', 850.9791666666666), ('Akiko', 1275.8235294117646), ('Jessica', 930.1315789473684), ('Elena', 632.6888888888889), ('Mihika', 1064.142857142857), ('Wiktoria', 1083.1454545454546), ('Zhibek', 1058.0), ('Polina', 1064.1025641025642), ('Sofya', 895.952380952381), ('Karina', 1246.3636363636363), ('Anna', 1024.904761904762), ('Siyu', 1241.1379310344828), ('Yijia', 1063.9411764705883), ('Marcelina', 1247.3636363636363), ('Karine', 868.8904109589041), ('Eleonora', 950.0277777777778), ('Destanee', 483.77464788732397), ('Anna', 319.4736842105263), ('Naima', 930.7027027027027), ('Elena', 1151.6666666666667), ('Kristina', 1218.0740740740741), ('Andra Maria', 1275.8235294117646), ('Dominique', 979.3589743589744), ('Dayana', 576.4307692307692), ('Kayla', 418.6031746031746), ('Pei Ju', 1061.3076923076924), ('Lara', 1180.5), ('Dalila', 1096.972972972973), ('Katie', 498.1111111111111), ('Qianhui', 826.1388888888889), ('Yu Tong', 1239.6666666666667), ('Xinyu', 681.175), ('Mi Zhuoma', 999.375), ('Michela', 1228.9285714285713), ('Schena', 1188.2941176470588), ('Dorien', 1196.56), ('Siqi', 980.9076923076923), ('Zhima', 1144.45), ('Reina', 1019.0), ('Carson', 1020.6), ('Maria', 835.2926829268292), ('Kylie', 798.3181818181819), ('Jenny', 902.1470588235294), ('Viktoriia', 1236.5333333333333), ('Polina', 1089.12), ('Laura', 937.5555555555555), ('Jaimee', 562.8450704225352), ('Emma', 1071.59375), ('Anna Maria', 1069.063492063492), ('Melissa Ishuan', 1104.357142857143), ('Alexandra', 1123.3461538461538), ('Natalie', 1062.0188679245282), ('Chengyiyi', 789.2857142857143), ('Lulu', 1098.2888888888888), ('Eugenia', 1157.5), ('Daniela', 1181.3684210526317), ('Shelly', 1171.0), ('Lina', 1153.5833333333333), ('Olesya', 501.44444444444446), ('Victoria Ariadna', 1236.0), ('Zeel', 791.2352941176471), ('Lizaveta', 1120.5652173913043), ('Aneta', 1149.9705882352941), ('Claudia', 1057.923076923077), ('Seira', 1115.72), ('Zhou', 1237.9), ('Alana', 1119.1639344262296), ('Sabina', 1057.837837837838), ('Veronika', 1080.3728813559321), ('Anda', 1150.0), ('Nicole', 1222.5135135135135), ('Mihaela Lorena', 1223.4), ('Anna', 1110.9333333333334), ('Kaja', 633.5454545454545), ('Aastha', 1199.8235294117646), ('Abigail', 915.0), ('Cameron', 1192.1818181818182), ('Katharine', 882.1071428571429), ('Elina', 1164.0), ('Daria', 859.4912280701755), ('Maria', 1078.25), ('Diana Maria', 1205.7692307692307), ('Nermeen', 1069.15), ('Mathilde', 1107.5166666666667), ('Daniela', 1024.888888888889), ('Yanni', 1059.2702702702702), ('Shou Na', 1120.388888888889), ('Hanyu', 543.968253968254), ('Leonie', 825.972972972973), ('Constanze', 1245.3333333333333), ('Zhuoma', 989.75), ('Ana', 1097.1025641025642), ('Alina', 1273.6842105263158), ('Katarina', 520.968253968254), ('Kristina', 1169.3725490196077), ('Karolina', 1277.1875), ('Desirae', 863.7826086956521), ('Emiliana', 732.8888888888889), ('Sing Le', 1141.842105263158), ('Yang', 1177.8823529411766), ('Margaux', 874.0), ('Olga', 710.5862068965517), ('Hortencia', 1251.1333333333334), ('Nina', 788.4166666666666), ('Lucia', 1144.4), ('Axana', 1064.0), ('Blanca', 904.6538461538462), ('Bianca', 408.7096774193548), ('Francesca', 533.8709677419355), ('Ksenia', 1136.24), ('Eva', 1162.1698113207547), ('Miranda', 1169.4864864864865), ('Vivian', 940.7358490566038), ('Sandra', 1251.6), ('Judith', 1224.0), ('Tijana', 1017.7777777777778), ('Lucia', 1122.3333333333333), ('Hana', 1233.0625), ('Boba', 1254.6341463414635), ('Vanessa', 1235.625), ('Kassandra', 927.0350877192982), ('Abir', 1228.75), ('Caroline', 1105.313725490196), ('Vicky', 1252.9130434782608), ('Patrycja', 982.4150943396227), ('Nikola', 1236.142857142857), ('Emily', 822.6792452830189), ('Olivia', 1149.3870967741937), ('Alessia', 1184.5217391304348), ('Monika', 893.7413793103449), ('Cindy', 1059.030303030303), ('Alicia', 1161.421052631579), ('Zinovia', 1221.5), ('Denise Antonela', 1160.3125), ('Marina', 1010.5454545454545), ('Carlota', 1236.7777777777778), ('Emily', 1099.6756756756756), ('Momoko', 772.6981132075472), ('Lorraine M', 972.75), ('Fiona', 1142.5882352941176), ('Suzan', 982.7222222222222), ('Ramu', 1010.4545454545455), ('Lisa Marie', 1015.0512820512821), ('Laura', 1035.7567567567567), ('Livia', 1179.875), ('Johana', 1111.8333333333333), ('Adva', 1255.3333333333333), ('Anna Maria', 1141.45), ('Laura', 947.6756756756756), ('Ayano', 597.6981132075472), ('Irina', 1227.8), ('Maryna', 735.0285714285715), ('Roosh', 1168.2857142857142), ('Guiomar', 957.9512195121952), ('Selin', 1168.6571428571428), ('Hsin Yuan', 1107.7142857142858), ('Kateryna', 1088.6), ('Anastasiia', 1245.75), ('Yasmine', 1018.3333333333334), ('Franziska', 1223.25), ('Elizabeth', 1249.0), ('Kei', 1003.1212121212121), ('Nicole', 1180.7272727272727), ('Lara', 1221.5), ('Kelia', 1114.9433962264152), ('Phillis', 826.6486486486486), ('Anne Sophie', 1252.0), ('Michaela', 754.8378378378378), ('Arlinda', 1074.3333333333333), ('Paula', 1122.6190476190477), ('Lucia', 1117.2702702702702), ('Dewi', 1154.2857142857142), ('Anna', 1112.7368421052631), ('Xiaoxi', 737.7547169811321), ('Anastasia', 337.23809523809524), ('Rebeca', 1145.4333333333334), ('Daria', 1186.6296296296296), ('Ekaterina', 1257.5238095238096), ('Sara', 1205.4), ('Ana', 1026.6842105263158), ('Mayar', 1252.5357142857142), ('Lea', 950.2093023255813), ('Mahak', 875.0), ('Oleksandra', 1012.4782608695652), ('Sarah', 869.3846153846154), ('Salma', 1249.3333333333333), ('Emmanuelle', 909.8205128205128), ('Emma', 1122.5384615384614), ('Maria Camila', 1188.5277777777778), ('Alexandra', 660.4509803921569), ('Eden', 1243.3333333333333), ('Lauryn', 1107.0882352941176), ('Rosa', 965.0), ('Kaylah', 1163.3478260869565), ('Alexandra', 1050.9130434782608), ('Shuyue', 966.0588235294117), ('Yidi', 1185.030303030303), ('Gabriella', 1027.5454545454545), ('Erina', 733.1351351351351), ('Vitalia', 1224.0), ('Laylo', 1226.076923076923), ('Ilay', 1135.5), ('Kaitlin', 901.3333333333334), ('Alexandra', 1225.6206896551723), ('Jule', 1243.904761904762), ('Simona', 995.3055555555555), ('Bojana', 857.6111111111111), ('Adrienn', 1200.4117647058824), ('Panna', 683.1081081081081), ('Salma', 1195.7333333333333), ('Julita', 1019.9411764705883), ('Francesca', 1121.0), ('Shuo', 864.1538461538462), ('Alexa', 971.0909090909091), ('Ye Xin', 1048.081081081081), ('Jia', 1169.6923076923076), ('Nina', 1220.3823529411766), ('Yasmina', 1227.7777777777778), ('Suzy', 698.7567567567568), ('Sasa', 1033.027027027027), ('Stefania', 1172.0714285714287), ('Katarzyna', 1045.344827586207), ('Valeriya', 735.3589743589744), ('Ann', 907.4), ('Mai', 721.4571428571429), ('Whitney', 1152.8947368421052), ('Julia', 1064.0), ('Draginja', 913.7272727272727), ('Yuliya', 963.9666666666667), ('Xiyu', 954.6), ('Jiatian', 1232.032258064516), ('Katyarina', 1010.1818181818181), ('Luna', 1139.0), ('Sunae', 1229.8), ('Yuki', 876.7428571428571), ('Svenja', 1231.0), ('Angelica', 1240.3181818181818), ('Francisca', 903.1666666666666), ('Meiling', 812.85), ('Tingting', 1015.2352941176471), ('Ella', 1223.9), ('Anna', 1136.2857142857142), ('Ashley', 460.9), ('Ran', 917.6060606060606), ('Maja', 717.1388888888889), ('Caty', 744.0), ('Michaela', 882.2424242424242), ('Loudmilla', 1220.0), ('Maileen', 1152.888888888889), ('Akilah', 772.8571428571429), ('Xin Yu', 1022.3333333333334), ('Vlada', 1034.090909090909), ('Romy', 758.1714285714286), ('Alessia', 1224.0), ('Marta', 536.0), ('Anna', 1228.5454545454545), ('Lara', 1104.076923076923), ('Amanda', 474.4166666666667), ('Himari', 1219.0), ('Ayumi', 1036.3666666666666), ('Meiqi', 1029.1666666666667), ('Mei Xu', 1031.6), ('Karolina', 938.375), ('Aneta', 1224.0), ('Ana', 1224.0), ('Sohyun', 1004.6666666666666), ('Adrienn', 1229.8461538461538), ('Ramya', 1121.8846153846155), ('Anne Marie', 1237.6363636363637), ('Yekaterina', 1224.0), ('Giulia', 1173.2631578947369), ('Clara', 1075.0), ('Yulia', 1117.6923076923076), ('Irina', 1137.75), ('Lucia', 1169.6923076923076), ('Ayumi', 1047.7575757575758), ('Ange Oby', 1226.3333333333333), ('Genevieve', 772.2857142857143), ('Eva Marie', 1083.8333333333333), ('Iga', 705.5625), ('Giorgie', 1226.5), ('Layne', 1184.0), ('Daria', 1178.2068965517242), ('Zoe', 1141.4117647058824), ('Jiaxue', 1161.0), ('Laura', 1231.7), ('Kariann', 1068.9166666666667), ('Caroline', 1231.904761904762), ('Mananchaya', 1230.6), ('Zeynep  Sena', 1229.5714285714287), ('Brienne', 917.0), ('Jiakang', 1230.6), ('Varvara', 1159.3076923076924), ('Betina', 1229.5714285714287), ('Viktoriya', 1174.608695652174), ('Eva', 1168.2857142857142), ('Taylor', 1066.3333333333333), ('Margaux', 1231.421052631579), ('Molly', 1210.7777777777778), ('Leylah Annie', 1030.5), ('Ellie', 1047.0), ('Moyuka', 1198.25), ('Nina', 1229.5714285714287), ('Brindtha', 1126.3333333333333), ('Naomi', 1104.5714285714287), ('Merel', 900.75), ('Arina Gabriela', 1224.0), ('Helene', 920.8333333333334), ('Kristina', 995.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of all players, and their average rankings?' in SQLite? I currently have 'SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name', which outputs [(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet'), (541.273631840796, 'Bernarda'), (834.1005025125628, 'Bernice'), (1005.75, 'Berta'), (146.59709379128137, 'Bethanie'), (1229.5714285714287, 'Betina'), (878.0138888888889, 'Bhuvana'), (653.2805383022775, 'Bianca'), (696.952380952381, 'Bianka'), (550.1941544885177, 'Bibiane'), (912.71875, 'Blair'), (904.6538461538462, 'Blanca'), (1221.8333333333333, 'Blessing'), (1254.6341463414635, 'Boba'), (392.7313829787234, 'Bojana'), (834.2066115702479, 'Borislava'), (992.4222222222222, 'Boyan'), (970.9846153846154, 'Brandy'), (872.0930232558139, 'Breaunna'), (211.01377118644066, 'Brenda'), (854.3170731707318, 'Brianna'), (917.0, 'Brienne'), (1126.3333333333333, 'Brindtha'), (647.5205479452055, 'Britt'), (990.5210084033613, 'Brittany'), (804.6277056277056, 'Brooke'), (952.5619834710744, 'Brynn'), (555.3384615384615, 'Bunyawi'), (1140.981981981982, 'Busra'), (311.87854251012146, 'Cagla'), (709.4247787610619, 'Caitlin'), (803.7139479905437, 'Camelia Elena'), (1192.1818181818182, 'Cameron'), (539.7944621938232, 'Camila'), (1192.3783783783783, 'Camila Vital'), (801.6850649350649, 'Camilla'), (1112.9450549450548, 'Camille'), (236.07412398921832, 'Cara'), (416.3666666666667, 'Carina'), (411.70779777206513, 'Carla'), (1236.7777777777778, 'Carlota'), (1127.9338842975208, 'Carlotta'), (318.69978858350953, 'Carly'), (890.6351351351351, 'Carmen'), (842.1553398058253, 'Carmen Raluca'), (564.1434426229508, 'Carol'), (645.2279792746114, 'Carolin'), (718.725321888412, 'Carolina'), (799.0650406504066, 'Carolina Meligeni Rodrigues'), (342.40130505709624, 'Caroline'), (1161.5675675675675, 'Caroline B'), (1197.578947368421, 'Carolyn'), (1020.6, 'Carson'), (378.0163727959698, 'Casey'), (293.76942355889724, 'Catalina'), (941.4724409448819, 'Catherine'), (134.21917808219177, 'Catherine Cartan'), (744.0, 'Caty'), (755.4649681528663, 'Cecilia'), (1141.842105263158, 'Cecilie Lundgaard'), (708.618398637138, 'Celine'), (1123.3855421686746, 'Cemre'), (650.1367521367522, 'Chalena'), (343.2835365853659, 'Chanel'), (215.6615811373093, 'Chanelle'), (575.4626436781609, 'Chang'), (1281.8461538461538, 'Chanikarn'), (609.90625, 'Chantal'), (1128.030303030303, 'Chantelle'), (1232.8, 'Chaoyi'), (766.4794520547945, 'Charlene'), (927.7647058823529, 'Charlotte'), (593.9759036144578, 'Chayenne'), (1132.0, 'Chelsea'), (719.3061224489796, 'Chelsey'), (524.7444668008048, 'Chen'), (789.2857142857143, 'Chengyiyi'), (464.1367781155015, 'Chi Chi'), (1039.3902439024391, 'Chi Fan'), (950.8813559322034, 'Chia Hsien'), (359.3764705882353, 'Chia Jung'), (437.73858921161826, 'Chiaki'), (977.9640591966173, 'Chiara'), (533.9586374695864, 'Chieh Yu'), (848.9908952959029, 'Chihiro'), (385.2651515151515, 'Chin Wei'), (615.2230215827338, 'Chinami'), (583.530303030303, 'Ching Wen'), (749.3582089552239, 'Chiraz'), (874.8181818181819, 'Chisa'), (675.2445414847161, 'Chloe'), (1112.1458333333333, 'Chompoothip'), (1112.875, 'Christie'), (454.9920529801324, 'Christina'), (841.4051724137931, 'Christine'), (692.390625, 'Chun Mei'), (986.3944099378882, 'Chun Yan'), (659.3055555555555, 'Cindy'), (443.45754716981133, 'Claire'), (1190.7307692307693, 'Clara'), (826.2619047619048, 'Claudia'), (967.2978723404256, 'Claudia Antonia'), (996.2574257425742, 'Claudia Gianina'), (383.6413199426112, 'Claudine'), (823.6306306306307, 'Clelia'), (875.9772727272727, 'Clemence'), (964.1224489795918, 'Clementina Eugenia'), (620.4120171673819, 'Clothilde'), (270.5896860986547, 'Coco'), (1165.093023255814, 'Colomba'), (390.0, 'Conny'), (570.2723004694835, 'Constance'), (835.1132075471698, 'Constanza'), (1245.3333333333333, 'Constanze'), (832.7818181818182, 'Corina'), (356.8219696969697, 'Corinna'), (757.2253521126761, 'Cornelia'), (406.5511363636364, 'Cory Ann'), (1049.0, 'Costanza'), (554.5376344086021, 'Cristiana'), (643.616049382716, 'Cristina'), (439.5747863247863, 'Cristina Andreea'), (720.6428571428571, 'Cristina Madalina'), (949.7944444444445, 'Csilla'), (998.7722772277227, 'Cynthia'), (1010.3333333333334, 'Da Hye'), (920.1276595744681, 'Dabin'), (1159.1818181818182, 'Dagmara'), (720.7490039840637, 'Daiana'), (1181.4736842105262, 'Dajana'), (801.6933333333334, 'Dalia'), (525.9552572706936, 'Dalila'), (279.16438356164383, 'Dalma'), (1493.0, 'Damilola'), (1242.0, 'Damini'), (1198.3333333333333, 'Damira'), (994.4769230769231, 'Dan Ni'), (805.7028985507246, 'Dana'), (977.4539007092199, 'Daneika'), (380.609375, 'Danica'), (348.6364892881825, 'Daniela'), (643.9216101694915, 'Daniella'), (744.7453250222618, 'Danielle'), (434.68, 'Danielle Rose'), (1107.0919540229886, 'Danijela'), (302.83268482490274, 'Danka'), (1226.5454545454545, 'Daphne'), (629.6443987667009, 'Daria'), (464.95631067961165, 'Darija'), (1132.1744186046512, 'Dariya'), (531.1829405162739, 'Darya'), (722.6986301369863, 'Dasha'), (576.4307692307692, 'Dayana'), (550.9545454545455, 'Dea'), (764.6785714285714, 'Deborah'), (1115.0851063829787, 'Deeon'), (758.5342960288808, 'Dejana'), (983.4174757281553, 'Demi'), (419.1633466135458, 'Denisa'), (949.1239316239316, 'Denise'), (1160.3125, 'Denise Antonela'), (551.5304659498208, 'Deniz'), (1123.6486486486488, 'Deria'), (863.7826086956521, 'Desirae'), (1032.2666666666667, 'Desiree'), (665.686684073107, 'Despina'), (746.0962962962963, 'Despoina'), (483.77464788732397, 'Destanee'), (1154.2857142857142, 'Dewi'), (615.1506849315068, 'Dhruthi'), (736.1650485436893, 'Di'), (383.7832512315271, 'Dia'), (654.3773657782928, 'Diana'), (1205.7692307692307, 'Diana Maria'), (809.697247706422, 'Dianne'), (669.2982456140351, 'Dijana'), (1248.2, 'Dilara'), (1094.4583333333333, 'Dina'), (268.05945945945945, 'Dinah'), (1234.6176470588234, 'Doga Selen'), (803.8666666666667, 'Domenica'), (171.71134020618555, 'Dominika'), (1042.7843137254902, 'Dominique'), (1131.6333333333334, 'Donika'), (223.50900900900902, 'Donna'), (1196.56, 'Dorien'), (520.9397993311037, 'Doroteja'), (913.7272727272727, 'Draginja'), (929.0599369085173, 'Dunja'), (1073.1752577319587, 'Ebony'), (1029.6888888888889, 'Eden'), (211.67325428194994, 'Edina'), (656.2851711026616, 'Eduarda'), (842.7045454545455, 'Eetee'), (1214.857142857143, 'Ege'), (471.8367290748899, 'Ekaterina'), (553.9434782608696, 'Ekaterine'), (1221.7931034482758, 'Elaine'), (1066.5343511450383, 'Eleanor'), (324.3720930232558, 'Elena'), (392.44444444444446, 'Elena Gabriela'), (686.6470588235294, 'Elena Teodora'), (249.5244140625, 'Eleni'), (950.0277777777778, 'Eleonora'), (1087.372340425532, 'Eleonore'), (876.1730769230769, 'Eliessa'), (421.6573033707865, 'Elina'), (888.2213114754098, 'Elisabeth'), (334.7118644067797, 'Elise'), (418.39748953974896, 'Elitsa'), (579.5214723926381, 'Elixane'), (978.2708333333334, 'Eliza'), (1154.2714285714285, 'Elizabeta'), (736.9747747747748, 'Elizabeth'), (1006.2982456140351, 'Elizabeth Anita Alexandria'), (489.5307517084282, 'Elizaveta'), (981.9814814814815, 'Elizaveta Anna'), (1011.9433962264151, 'Elke'), (1168.7967479674796, 'Ella'), (750.9460093896714, 'Ellen'), (508.340206185567, 'Ellie'), (1211.2333333333333, 'Elodie'), (652.1984732824427, 'Elyne'), (819.3400503778338, 'Ema'), (672.730407523511, 'Emelyn'), (770.8472222222222, 'Emi'), (1232.0, 'Emilia'), (1022.9174311926605, 'Emiliana'), (705.4716981132076, 'Emilie'), (1209.625, 'Emilija'), (1092.2771084337348, 'Emiliya'), (585.093851132686, 'Emily'), (1041.948717948718, 'Emily J'), (682.0972222222222, 'Emina'), (641.046992481203, 'Emma'), (1193.3529411764705, 'Emma Christine'), (943.7716535433071, 'Emmanuelle'), (1229.7333333333333, 'En Pei'), (980.3333333333334, 'Ena'), (321.23595505617976, 'Eri'), (788.0384615384615, 'Erica'), (544.5041866028708, 'Erika'), (942.7969696969697, 'Erin'), (733.1351351351351, 'Erina'), (1218.5652173913043, 'Esen'), (966.0540540540541, 'Estela'), (617.4935251798561, 'Estelle'), (950.9090909090909, 'Ester'), (347.34943639291464, 'Estrella'), (781.3218390804598, 'Etsuko'), (911.7241379310345, 'Eudice Wong'), (1157.5, 'Eugenia'), (477.62886597938143, 'Eugenie'), (620.6746411483253, 'Eugeniya'), (500.29483037156706, 'Eva'), (1083.8333333333333, 'Eva Marie'), (1023.8690476190476, 'Eveliina'), (471.5439093484419, 'Evelyn'), (414.66339869281046, 'Evgenia'), (442.0344827586207, 'Evgeniya'), (612.0185185185185, 'Fang Ying'), (406.9281767955801, 'Fangzhou'), (569.1904761904761, 'Fanny'), (1106.3076923076924, 'Farah'), (673.7509157509157, 'Fatima'), (1070.9463414634147, 'Fatimah'), (648.2984054669704, 'Fatma'), (1015.5, 'Fatyha'), (722.7286493034525, 'Federica'), (1204.7272727272727, 'Federica Joe'), (647.922077922078, 'Fernanda'), (1187.0384615384614, 'Ferny'), (853.3908045977012, 'Fiona'), (376.47888446215137, 'Flavia'), (451.5810397553517, 'Florencia'), (999.2, 'Frances'), (570.534951862704, 'Francesca'), (903.1666666666666, 'Francisca'), (437.05298013245033, 'Francoise'), (949.6575342465753, 'Franziska'), (1244.3333333333333, 'Frederikke'), (544.1627906976744, 'Freya'), (696.7697332607512, 'Gabriela'), (994.0612244897959, 'Gabriela Nicole'), (792.5, 'Gabriella'), (985.7211538461538, 'Gabrielle Faith'), (1052.8314606741574, 'Gaelle'), (759.5352697095435, 'Gaia'), (526.2644836272041, 'Gail'), (305.19563522992985, 'Galina'), (606.7211740041929, 'Ganna'), (229.3774193548387, 'Garbine'), (1152.142857142857, 'Gebriela'), (772.2857142857143, 'Genevieve'), (533.5940594059406, 'Georgia'), (763.1014492753624, 'Georgia Andreea'), (1153.9166666666667, 'Georgiana'), (396.225, 'Georgina'), (1150.6607142857142, 'Ghislaine'), (813.1351351351351, 'Giada'), (567.8518518518518, 'Gioia'), (960.4941860465116, 'Giorgia'), (1226.5, 'Giorgie'), (1197.0, 'Giovanna'), (693.6215943491422, 'Giulia'), (584.359375, 'Giuliana'), (794.7118644067797, 'Gloria'), (716.3150684931506, 'Gozal'), (454.06233062330625, 'Grace'), (783.8288043478261, 'Gracia'), (547.277108433735, 'Greetje'), (296.8219584569733, 'Greta'), (797.383606557377, 'Guadalupe'), (1027.0, 'Guillermina'), (957.9512195121952, 'Guiomar'), (1168.3396226415093, 'Gulben'), (1196.0, 'Gulchekhra'), (1236.6153846153845, 'Gulnaz'), (995.4074074074074, 'Guzal'), (1087.6216216216217, 'Gyulnara'), (1051.623188405797, 'Habiba'), (844.3856812933026, 'Hae Sung'), (1179.4153846153847, 'Haine'), (1110.5376344086021, 'Hana'), (957.2, 'Hanna'), (543.968253968254, 'Hanyu'), (680.1050228310502, 'Hao Chen'), (1153.936507936508, 'Hao Ching'), (574.8723404255319, 'Harmony'), (694.341935483871, 'Harriet'), (774.6837606837607, 'Haruka'), (512.1515151515151, 'Haruna'), (914.5321100917431, 'Hayley'), (1214.7692307692307, 'Hazal'), (167.50632911392404, 'Heather'), (417.44323483670297, 'Heidi'), (1019.4107142857143, 'Helen'), (696.4752475247525, 'Helene'), (1095.1176470588234, 'Hikari'), (673.6635071090047, 'Hilda'), (1219.0, 'Himari'), (534.890243902439, 'Hiroko'), (860.8104265402843, 'Hirono'), (925.9865771812081, 'Ho Ching'), (1185.75, 'Hollie'), (914.8607594936709, 'Hongrui'), (1251.1333333333334, 'Hortencia'), (1107.7142857142858, 'Hsin Yuan'), (726.1737089201878, 'Hua Chen'), (1118.904761904762, 'Huijie'), (888.0055096418732, 'Hulya'), (1020.28125, 'Hye Min'), (1069.3208955223881, 'Hyojung'), (729.0671936758894, 'Hyun Hui'), (1038.6911764705883, 'I Hsuan'), (1085.581818181818, 'Iana'), (962.5, 'Ida'), (1232.2, 'Idia'), (705.5625, 'Iga'), (1135.5, 'Ilay'), (868.2191780821918, 'Ilka'), (452.625, 'Ilona'), (847.0941176470589, 'Ilze'), (845.375, 'Imane Maelle'), (1165.5573770491803, 'Ina'), (1069.0925925925926, 'Inci'), (954.046875, 'India'), (627.7027027027027, 'Indire'), (485.9559748427673, 'Indy'), (919.6147540983607, 'Ineke'), (687.0229885057471, 'Ines'), (1039.0, 'Inger'), (766.2549019607843, 'Ingrid'), (869.3571428571429, 'Ingrid Alexandra'), (748.6622691292876, 'Ingrid Esperanza'), (1192.5454545454545, 'Intissar'), (980.2232142857143, 'Ioana'), (482.43243243243245, 'Ioana Diana'), (646.0441176470588, 'Ioana Loredana'), (799.0552486187845, 'Ionela Andreea'), (655.7828348504552, 'Ipek'), (288.74423480083857, 'Irena'), (579.2153846153847, 'Irene'), (436.84339509862525, 'Irina'), (285.84388185654007, 'Irina Camelia'), (578.1381578947369, 'Irina Maria'), (866.1075949367089, 'Iris'), (489.5294964028777, 'Iryna'), (724.9178743961353, 'Isabel'), (1114.99375, 'Isabela'), (566.7873931623932, 'Isabella'), (781.6993464052288, 'Isabelle'), (1170.9411764705883, 'Iulia Maria'), (732.7386018237082, 'Iva'), (439.81414868105514, 'Ivana'), (871.109375, 'Ivania'), (1079.05, 'Ivanka'), (117.95684523809524, 'Iveta'), (1136.8535031847134, 'Ivette'), (872.0, 'Ivone'), (591.3809523809524, 'Ivonne'), (624.6089494163424, 'Jacqueline'), (909.2, 'Jada'), (739.04802259887, 'Jade'), (760.4920634920635, 'Jaeda'), (562.8450704225352, 'Jaimee'), (1243.875, 'Jaimy Gayle'), (1037.5274725274726, 'Jainy'), (402.36756756756756, 'Jamie'), (1247.3333333333333, 'Jamilya'), (592.5990783410139, 'Jan'), (406.6258503401361, 'Jana'), (240.5306603773585, 'Janette'), (699.7864583333334, 'Janina'), (1262.5416666666667, 'Janja'), (861.5102040816327, 'Janneke'), (748.7238095238096, 'Jaqueline Adina'), (1121.767857142857, 'Jara'), (149.46360759493672, 'Jarmila'), (633.027027027027, 'Jasmin'), (642.1811989100818, 'Jasmina'), (437.86915887850466, 'Jasmine'), (1117.64, 'Jasmine Amber'), (1070.5648854961833, 'Jawairiah'), (1035.46, 'Jazmin'), (983.1290322580645, 'Jazzamay'), (767.7730496453901, 'Jeannine'), (348.19338235294117, 'Jelena'), (556.7936681222708, 'Jennifer'), (902.1470588235294, 'Jenny'), (501.5860215053763, 'Jesika'), (655.7464059804486, 'Jessica'), (818.2043795620438, 'Jessika'), (967.6708860759494, 'Jessy'), (823.9789029535865, 'Ji Hee'), (833.5061082024433, 'Ji Young'), (1169.6923076923076, 'Jia'), (682.961038961039, 'Jia Jing'), (529.7777777777778, 'Jia Qi'), (794.4931506849315, 'Jiahui'), (1230.6, 'Jiakang'), (1232.032258064516, 'Jiatian'), (578.5, 'Jiaxi'), (1161.0, 'Jiaxue'), (114.05571428571429, 'Jie'), (501.0619469026549, 'Jil Belen'), (1116.4190476190477, 'Jil Nora'), (121.9579326923077, 'Jill'), (721.14, 'Jillian'), (1267.0, 'Jin'), (492.8915187376726, 'Jin A'), (1035.6470588235295, 'Jin Ju'), (369.1620469083156, 'Jing Jing'), (863.3225806451613, 'Joana'), (931.025641025641, 'Joanna'), (1227.8, 'Joanne'), (925.4230769230769, 'Jodie Anna'), (1111.8333333333333, 'Johana'), (310.3405299313052, 'Johanna'), (1022.6198347107438, 'Jordana'), (924.9325842696629, 'Josepha'), (684.4892086330935, 'Josephine'), (993.2105263157895, 'Josie'), (601.9846625766871, 'Jovana'), (812.6, 'Ju Eun'), (1224.0, 'Judith'), (1243.904761904762, 'Jule'), (576.9173467252564, 'Julia'), (1024.6666666666667, 'Julia Mansano'), (1110.0816326530612, 'Juliana'), (1175.7666666666667, 'Juliana Rocha'), (512.3787128712871, 'Julie'), (707.1467889908257, 'Julieta Lara'), (1019.9411764705883, 'Julita'), (732.1666666666666, 'Julyette Maria Josephine'), (1189.0, 'June'), (262.30884808013354, 'Junri'), (1212.9166666666667, 'Justina'), (521.5358361774744, 'Justine'), (585.8517745302714, 'Justyna'), (1055.020202020202, 'Kady'), (272.08855291576674, 'Kai Chen'), (522.6561403508772, 'Kai Lin'), (127.06775067750678, 'Kaia'), (901.3333333333334, 'Kaitlin'), (756.2549019607843, 'Kaitlyn'), (633.5454545454545, 'Kaja'), (661.9589041095891, 'Kajsa'), (568.2547169811321, 'Kamila'), (1162.8301886792453, 'Kamilla'), (765.1395348837209, 'Kamonwan'), (924.2782608695652, 'Kana'), (635.346516007533, 'Kanae'), (1105.3125, 'Kanako'), (799.9940828402367, 'Kanami'), (962.8536585365854, 'Kanika'), (871.0790513833992, 'Kaori'), (674.9672514619883, 'Karen'), (1068.9166666666667, 'Kariann'), (472.338003502627, 'Karin'), (883.6090909090909, 'Karina'), (696.9606060606061, 'Karina Ildor'), (1062.795918367347, 'Karina Kristina'), (868.8904109589041, 'Karine'), (1001.0679611650486, 'Karis'), (807.616, 'Karla'), (652.917808219178, 'Karman'), (928.3333333333334, 'Karola Patricia'), (1077.8095238095239, 'Karolayne'), (586.9412296564195, 'Karolina'), (873.6229508196722, 'Karoline'), (903.5769230769231, 'Karyn'), (927.0350877192982, 'Kassandra'), (331.93949394939494, 'Katalin'), (401.0998263888889, 'Katarina'), (459.29286608260327, 'Katarzyna'), (1117.7142857142858, 'Kate'), (491.8507295173962, 'Katerina'), (294.33209990749305, 'Kateryna'), (680.677700348432, 'Katharina'), (882.1071428571429, 'Katharine'), (836.6804511278195, 'Katherine'), (910.396694214876, 'Katherine Gabriela'), (415.7, 'Kathinka'), (291.4792817679558, 'Kathrin'), (620.9404580152672, 'Katie'), (1111.08, 'Katrine Isabel'), (492.6608695652174, 'Katy'), (1050.7, 'Katya'), (1010.1818181818181, 'Katyarina'), (583.1686746987951, 'Kayla'), (1163.3478260869565, 'Kaylah'), (772.2402912621359, 'Kazusa'), (1003.1212121212121, 'Kei'), (1114.9433962264152, 'Kelia'), (804.873831775701, 'Kelly'), (312.7584269662921, 'Kelly S'), (1012.325, 'Kelsey'), (807.7222222222222, 'Kennedy'), (643.422641509434, 'Keren'), (1018.6534653465346, 'Keri'), (1020.4271844660194, 'Kerstin'), (978.0229885057471, 'Khristina'), (1164.090909090909, 'Ki Ryang'), (287.71625344352617, 'Kiki'), (687.3120567375887, 'Kim'), (762.4081632653061, 'Kim Alice'), (846.9154228855722, 'Kimberley'), (618.6923076923077, 'Kimberly'), (1097.219512195122, 'Kimika'), (95.03465982028241, 'Kimiko'), (606.1467576791808, 'Kinnie'), (308.64912280701753, 'Kirsten'), (1035.0384615384614, 'Kirsten Andrea'), (576.9, 'Klaartje'), (235.31431431431432, 'Klara'), (780.7905027932961, 'Klaudia'), (826.0238095238095, 'Komola'), (567.0507399577167, 'Korina'), (844.7460317460317, 'Kotomi'), (522.984693877551, 'Krista'), (445.18918918918916, 'Kristie'), (343.25546975546973, 'Kristina'), (1060.5633802816901, 'Kristina N'), (837.7730496453901, 'Kristy'), (443.8467908902692, 'Kristyna'), (482.36648501362396, 'Ksenia'), (990.6, 'Kseniia'), (975.6271186440678, 'Ksenija'), (488.76107382550333, 'Kumiko'), (165.96132596685084, 'Kurumi'), (159.62397820163488, 'Kveta'), (1070.0377358490566, 'Kwan Yau'), (887.502487562189, 'Kyle'), (798.3181818181819, 'Kylie'), (348.54794520547944, 'Kyoka'), (443.76148409893995, 'Kyra'), (533.433770014556, 'Kyung Mi'), (677.4458598726114, 'Laetitia'), (996.8148148148148, 'Laili'), (1062.3666666666666, 'Lamis'), (643.6939163498099, 'Lara'), (1054.9019607843138, 'Larikah'), (504.4145867098865, 'Laura'), (910.5714285714286, 'Laura D'), (516.1982942430703, 'Laura Ioana'), (1198.1538461538462, 'Laura Sofia'), (484.9442231075697, 'Lauren'), (1107.0882352941176, 'Lauryn'), (612.736, 'Lavinia'), (1226.076923076923, 'Laylo'), (1184.0, 'Layne'), (858.4107142857143, 'Lea'), (1179.6216216216217, 'Leah'), (908.156862745098, 'Lee'), (594.9436936936937, 'Lena'), (657.8934169278997, 'Lena Marie'), (451.33577981651376, 'Lenka'), (773.5666666666667, 'Leolia'), (825.972972972973, 'Leonie'), (887.4545454545455, 'Lesedi Sheya'), (205.17590361445784, 'Lesia'), (514.7174515235457, 'Lesley'), (1180.5454545454545, 'Leslie'), (481.3229166666667, 'Leticia'), (1072.4, 'Leticia Garcia'), (1030.5, 'Leylah Annie'), (988.7425149700599, 'Li'), (387.87113402061857, 'Liana Gabriela'), (899.9150326797386, 'Libby'), (1035.327868852459, 'Libi'), (1147.8529411764705, 'Lidia'), (797.2128378378378, 'Lidziya'), (284.8326771653543, 'Liezel'), (567.9464544138929, 'Liga'), (722.5087719298245, 'Lilla'), (497.42124542124543, 'Lin'), (574.9808362369338, 'Lina'), (929.4398496240601, 'Linda'), (275.6055900621118, 'Lindsay'), (986.82, 'Lindsey'), (418.81925343811395, 'Ling'), (1184.7222222222222, 'Liniques'), (959.6981132075472, 'Linnea'), (356.0105210420842, 'Lisa'), (758.06, 'Lisa Maria'), (996.0408163265306, 'Lisa Marie'), (673.6507936507936, 'Lisanne'), (887.2875, 'Liubov'), (1179.875, 'Livia'), (870.9007633587786, 'Liz Tatiane'), (1120.5652173913043, 'Lizaveta'), (666.1496062992126, 'Lizette'), (1231.2727272727273, 'Lorenza'), (972.75, 'Lorraine M'), (680.1724137931035, 'Lou'), (1220.0, 'Loudmilla'), (380.5308641975309, 'Louisa'), (1070.1025641025642, 'Louise'), (188.06095041322314, 'Lourdes'), (907.3557312252965, 'Lu'), (859.8644067796611, 'Luca'), (845.740638002774, 'Lucia'), (885.7495107632094, 'Luciana'), (322.62611607142856, 'Lucie'), (845.986301369863, 'Lucrezia'), (756.3141592920354, 'Lucy'), (846.2727272727273, 'Ludmila'), (787.5416666666666, 'Ludmilla'), (981.7517730496454, 'Luisa'), (820.59375, 'Luisa Marie'), (284.22813688212926, 'Luksika'), (1098.2888888888888, 'Lulu'), (1139.0, 'Luna'), (974.2702702702703, 'Lusine'), (1190.0629921259842, 'Lutfiye'), (982.6666666666666, 'Lyann'), (952.4411764705883, 'Lynn'), (382.82479784366575, 'Lyudmyla'), (607.3360995850622, 'Macall'), (692.1515151515151, 'Macarena'), (324.63613231552165, 'Madalina'), (748.0, 'Maddison'), (1028.0365853658536, 'Madeleine'), (1217.469387755102, 'Madeline'), (1203.5, 'Madina'), (290.64452214452217, 'Madison'), (958.0955414012739, 'Madrie'), (787.0, 'Maegan'), (1139.7, 'Mafalda'), (1173.75, 'Maftuna'), (734.0, 'Magali'), (1036.1214953271028, 'Magalie'), (300.3974358974359, 'Magda'), (443.6296006264683, 'Magdalena'), (1092.7621951219512, 'Magy'), (875.0, 'Mahak'), (1007.15, 'Mahitha'), (687.25, 'Mai'), (745.433962264151, 'Maia'), (1206.6666666666667, 'Maia A'), (438.4245810055866, 'Maiko'), (1152.888888888889, 'Maileen'), (410.8463541666667, 'Mailen'), (896.7413793103449, 'Maja'), (784.8009049773756, 'Makiho'), (516.6615384615385, 'Makoto'), (999.15625, 'Malene'), (1004.7428571428571, 'Malika'), (825.039603960396, 'Malin'), (1031.5342465753424, 'Mallaurie'), (143.48235294117646, 'Mallory'), (947.3333333333334, 'Malou'), (1153.590909090909, 'Mami'), (1202.2692307692307, 'Man Ying Maggie'), (689.891129032258, 'Mana'), (1230.6, 'Mananchaya'), (838.1780821917808, 'Manca'), (361.0, 'Mandy'), (897.0974358974358, 'Manisha'), (622.7673469387755, 'Manon'), (1181.3548387096773, 'Manya'), (908.3962264150944, 'Mara'), (774.64, 'Marcela'), (1143.7957746478874, 'Marcela Guimaraes'), (1247.3636363636363, 'Marcelina'), (657.0171919770773, 'Marcella'), (325.5912596401028, 'Margalita'), (987.6739130434783, 'Margarida'), (611.4060995184591, 'Margarita'), (1051.1224489795918, 'Margaux'), (753.8346456692914, 'Margot'), (526.3698630136986, 'Mari'), (426.6002565198803, 'Maria'), (1190.0833333333333, 'Maria Agustina'), (1072.9591836734694, 'Maria Andrea'), (1188.5277777777778, 'Maria Camila'), (861.5050505050505, 'Maria Constanza De Las Mercedes'), (1119.4897959183672, 'Maria Del Rosario'), (194.2392065344224, 'Maria Elena'), (443.0228531855956, 'Maria Fernanda'), (1170.1830985915492, 'Maria Jesus'), (486.6092544987147, 'Maria Joao'), (306.1794310722101, 'Maria Jose'), (918.0769230769231, 'Maria Lourdes'), (1047.98224852071, 'Maria Paulina'), (359.81081081081084, 'Maria Teresa'), (662.1182795698925, 'Mariam'), (556.0428051001821, 'Mariana'), (730.3831168831168, 'Marianna'), (993.175925925926, 'Marianne'), (1085.4242424242425, 'Mariaryeni'), (695.574074074074, 'Marie'), (300.56296296296296, 'Marie Eve'), (1148.9166666666667, 'Mariia'), (544.2636655948553, 'Marija'), (1215.0, 'Marijana'), (532.6881807180315, 'Marina'), (774.5654761904761, 'Marine'), (279.78655282817505, 'Marion'), (1163.0, 'Mariona'), (1067.3413173652696, 'Marisa'), (281.871335504886, 'Mariya'), (353.44444444444446, 'Marketa'), (946.8934426229508, 'Marlies'), (783.1711711711712, 'Marrit'), (419.32988047808766, 'Marta'), (851.1224489795918, 'Marta Huqi'), (1056.0588235294117, 'Martha'), (751.8679119412942, 'Martina'), (869.1666666666666, 'Mary'), (1188.7096774193549, 'Mary Ann'), (323.86176470588236, 'Maryna'), (355.7223168654174, 'Masa'), (437.11396648044695, 'Mathilde'), (799.1875, 'Matilda'), (1013.4761904761905, 'Maud'), (1070.21875, 'Maureen'), (1121.0869565217392, 'Maurien'), (973.8717948717949, 'Maxine'), (1084.0294117647059, 'May'), (732.4260679079956, 'Maya'), (891.6309523809524, 'Mayar'), (407.029702970297, 'Mayo'), (619.9064748201439, 'Mayya'), (736.4809523809524, 'Megan'), (1025.0, 'Megumi'), (1031.6, 'Mei Xu'), (812.85, 'Meiling'), (1029.1666666666667, 'Meiqi'), (372.32502965599053, 'Melanie'), (1039.8333333333333, 'Melany Solange'), (1017.2560553633218, 'Melina'), (169.13578500707214, 'Melinda'), (634.7950310559006, 'Melis'), (993.1351351351351, 'Melisa'), (1154.093023255814, 'Melissa'), (1104.357142857143, 'Melissa Ishuan'), (1035.95, 'Meng Ning'), (1213.2142857142858, 'Mercedes'), (900.75, 'Merel'), (1182.9107142857142, 'Meritxell'), (337.5292682926829, 'Mervana'), (554.3953934740883, 'Mi'), (1071.3076923076924, 'Mi Jeong'), (992.7225433526012, 'Mi Rae'), (999.375, 'Mi Zhuoma'), (987.504761904762, 'Mia Nicole'), (1332.0737704918033, 'Micaela'), (676.90589198036, 'Michaela'), (185.3469387755102, 'Michaella'), (1228.9285714285713, 'Michela'), (946.8846153846154, 'Michele Alexandra'), (280.79959100204496, 'Michelle'), (718.047619047619, 'Michika'), (376.7356115107914, 'Mihaela'), (1223.4, 'Mihaela Lorena'), (523.2788844621514, 'Miharu'), (1064.142857142857, 'Mihika'), (1110.4411764705883, 'Mihoki'), (586.2250489236791, 'Miki'), (1201.16, 'Mila'), (1234.2857142857142, 'Milagros'), (626.441935483871, 'Milana'), (1114.4074074074074, 'Milena'), (1221.904761904762, 'Milica'), (866.0693069306931, 'Min'), (819.8425531914894, 'Min Hwa'), (1238.0625, 'Minami'), (788.2622950819672, 'Mira'), (721.1643835616438, 'Mirabelle'), (1169.4864864864865, 'Miranda'), (912.120218579235, 'Miriam'), (628.075, 'Miriam Bianca'), (950.6263736263736, 'Miriana'), (843.6428571428571, 'Mirjam'), (186.76587795765877, 'Mirjana'), (617.0379241516966, 'Misa'), (208.95263157894738, 'Misaki'), (1121.04, 'Mitsumi'), (447.93283582089555, 'Miyabi'), (594.9036697247707, 'Miyu'), (593.1506849315068, 'Mizuno'), (1029.0, 'Molly'), (772.6981132075472, 'Momoko'), (273.57517899761336, 'Mona'), (210.0846394984326, 'Monica'), (980.575, 'Monika'), (462.4270462633452, 'Monique'), (541.952380952381, 'Montserrat'), (880.6527777777778, 'Morgane'), (1243.4, 'Moulika'), (1258.5, 'Mouna'), (1198.25, 'Moyuka'), (1227.0, 'Muazzez'), (1186.9444444444443, 'Muge'), (485.40168539325845, 'Myrtille'), (82.13112391930835, 'Na'), (608.7791798107255, 'Na Lae'), (573.5197368421053, 'Na Ri'), (868.6521739130435, 'Nadezda'), (407.5463976945245, 'Nadia'), (637.4607407407408, 'Nadiya'), (631.8181818181819, 'Nadja'), (828.0675675675676, 'Nagi'), (767.4963503649635, 'Naiktha'), (930.7027027027027, 'Naima'), (878.6666666666666, 'Nam Yeon'), (890.4455445544554, 'Nan Nan'), (542.7168141592921, 'Nanuli'), (313.45625, 'Nao'), (1180.3828125, 'Naoko'), (483.97225572979494, 'Naomi'), (929.4388489208633, 'Napatsakorn'), (1138.9166666666667, 'Nastassia'), (554.5290322580645, 'Nastassja'), (593.1772853185596, 'Nastja'), (720.132932166302, 'Natalia'), (577.9677419354839, 'Natalie'), (634.3620689655172, 'Natalija'), (1247.909090909091, 'Nataliya'), (666.2853403141361, 'Natasa'), (883.0777142857143, 'Natasha'), (566.4943396226415, 'Natela'), (962.0188679245283, 'Natella'), (543.031185031185, 'Nathalia'), (617.4615384615385, 'Nathaly'), (929.6928104575163, 'Natia'), (547.7037037037037, 'Natsumi'), (1177.622641509434, 'Nattawadee'), (1087.3823529411766, 'Naz'), (825.7291666666666, 'Nazari'), (745.421052631579, 'Neda'), (1164.107142857143, 'Nelise'), (1069.15, 'Nermeen'), (1031.0, 'Nevena'), (515.3191489361702, 'Nicha'), (843.9007633587786, 'Nicky'), (753.2253164556962, 'Nicola'), (499.4127634660422, 'Nicole'), (485.46875, 'Nicoleta Catalina'), (778.1648648648649, 'Nicolette'), (762.1578947368421, 'Nidhi'), (376.7617554858934, 'Nigina'), (913.4380165289256, 'Nika'), (1174.0, 'Nikita'), (1017.3134328358209, 'Nikki'), (1054.0813953488373, 'Nikol'), (723.484076433121, 'Nikola'), (528.8673050615595, 'Nina'), (1124.1666666666667, 'Nina Isabella'), (841.0514705882352, 'Nives'), (965.5343511450382, 'Noel'), (1049.834745762712, 'Noelia'), (883.7787610619469, 'Noelle'), (1167.2758620689656, 'Nonna'), (374.93926247288505, 'Noppawan'), (921.6216216216217, 'Nora'), (1096.1140350877192, 'Nour'), (936.3392857142857, 'Nozomi'), (436.66881028938906, 'Nudnida'), (537.577922077922, 'Nungnadda'), (395.6680227827502, 'Nuria'), (1027.1382978723404, 'Oana'), (686.3047619047619, 'Oana Georgeta'), (728.7630208333334, 'Oceane'), (839.4923664122138, 'Ofri'), (533.9652351738241, 'Oksana'), (660.8924731182796, 'Ola'), (1397.5, 'Olawaseun'), (1112.75, 'Olaya'), (903.4289156626506, 'Oleksandra'), (1179.1555555555556, 'Olena'), (501.44444444444446, 'Olesya'), (432.6511627906977, 'Olga'), (446.7231833910035, 'Olivia'), (1006.5128205128206, 'Oliwia'), (435.1470588235294, 'Ons'), (978.7321428571429, 'Ornella'), (866.0454545454545, 'Oyku'), (1156.28125, 'Paige Mary'), (989.1904761904761, 'Pamela'), (683.1081081081081, 'Panna'), (132.12638580931264, 'Paola'), (1099.625, 'Parris'), (863.5507246376811, 'Patcharin'), (572.8059701492538, 'Patricia'), (403.935, 'Patricia Maria'), (657.3816155988858, 'Patrycja'), (385.8135593220339, 'Patty'), (558.0162601626016, 'Paula'), (1175.909090909091, 'Paula Andrea'), (868.7624113475177, 'Paula Catalina'), (508.4679802955665, 'Paula Cristina'), (1035.7780678851175, 'Paulina'), (298.1861898890259, 'Pauline'), (915.5892857142857, 'Pavla'), (514.586319218241, 'Peangtarn'), (755.5813953488372, 'Peggy'), (673.9809523809524, 'Pei Chi'), (1106.5, 'Pei Hsuan'), (1061.3076923076924, 'Pei Ju'), (465.24962852897477, 'Pemra'), (619.4154929577464, 'Pernilla'), (710.3972602739726, 'Petia'), (365.50280484204313, 'Petra'), (1211.0, 'Phenomena'), (826.6486486486486, 'Phillis'), (737.862676056338, 'Pia'), (668.2581196581197, 'Piia'), (740.5879828326181, 'Pilar'), (1041.0740740740741, 'Pippa'), (937.7945205479452, 'Plobrung'), (630.7953529937444, 'Polina'), (478.30369515011546, 'Polona'), (729.1047904191616, 'Poojashree'), (795.4736842105264, 'Pranjala'), (653.5070422535211, 'Prarthana G'), (740.5361842105264, 'Prerna'), (1137.19, 'Priscila'), (675.4124293785311, 'Priscilla'), (383.4714587737844, 'Qiang'), (826.1388888888889, 'Qianhui'), (943.421052631579, 'Qianqian'), (705.8493150684932, 'Qiu Yu'), (883.2352941176471, 'Quinn'), (633.9770491803279, 'Quirine'), (859.2706766917294, 'Rachael'), (1147.8526315789475, 'Rachel'), (955.7833333333333, 'Radina'), (1121.2432432432433, 'Rafaela'), (1176.5, 'Ralina'), (304.4619771863118, 'Raluca'), (672.2258064516129, 'Raluca Elena'), (539.6164383561644, 'Raluca Georgiana'), (1010.4545454545455, 'Ramu'), (1121.8846153846155, 'Ramya'), (598.2655172413793, 'Ran'), (1117.6666666666667, 'Rana'), (700.7644444444444, 'Raquel'), (1089.2100840336134, 'Rashmi'), (1021.6504854368932, 'Ratnika'), (487.6268656716418, 'Raveena'), (1145.4333333333334, 'Rebeca'), (568.3374316939891, 'Rebecca'), (676.1090909090909, 'Rebeka'), (289.60283687943263, 'Regina'), (1019.0, 'Reina'), (323.1388101983003, 'Reka Luca'), (494.6111111111111, 'Remi'), (274.85317919075146, 'Renata'), (669.448275862069, 'Ria'), (638.6666666666666, 'Rianna'), (246.19871794871796, 'Richel'), (290.0614657210402, 'Rika'), (495.22641509433964, 'Riko'), (1125.0363636363636, 'Rio'), (489.65909090909093, 'Risa'), (775.7269624573379, 'Rishika'), (1051.7349397590363, 'Rita'), (651.4246575342465, 'Riya'), (150.96681415929203, 'Roberta'), (431.19607843137254, 'Robin'), (1054.606896551724, 'Robyn'), (795.6201232032854, 'Rocio'), (402.49931972789113, 'Romana'), (669.8542372881356, 'Romana Caroline'), (283.63246554364474, 'Romina'), (758.1714285714286, 'Romy'), (1125.5471698113208, 'Rona'), (427.0, 'Ronit'), (1072.857142857143, 'Ronke'), (1168.2857142857142, 'Roosh'), (965.0, 'Rosa'), (1059.73, 'Rosalia'), (1066.5887096774193, 'Rosalie'), (984.1714285714286, 'Rosie'), (479.51738241308794, 'Roxane'), (1209.625, 'Rui'), (573.8729603729604, 'Rushmi'), (808.5096774193548, 'Rutuja'), (1069.0379746835442, 'Ryann'), (1117.88, 'Saana'), (982.7397260273973, 'Sabastiani'), (682.2005532503458, 'Sabina'), (1184.6666666666667, 'Sabina Elena'), (203.5871080139373, 'Sabine'), (905.6324786324786, 'Sabrina'), (340.2890442890443, 'Sacha'), (400.8093385214008, 'Sachia'), (368.26881720430106, 'Sachie'), (665.8219178082192, 'Sadafmoh'), (998.5238095238095, 'Sai Samhitha'), (297.39032258064515, 'Saisai'), (832.9585365853659, 'Sakiko'), (529.583908045977, 'Sally'), (1204.6666666666667, 'Salma'), (406.21702404158543, 'Samantha'), (932.8940397350993, 'Samira'), (1105.171875, 'Sanae'), (703.1372549019608, 'Sanaz'), (563.964505613908, 'Sandra'), (1028.9565217391305, 'Sandy'), (857.9508196721312, 'Sang Hee'), (177.22695035460993, 'Sania'), (509.80945757997216, 'Sara'), (546.5551763367463, 'Sarah'), (875.9277108433735, 'Sarah Beth'), (743.6062176165804, 'Sarah Rebecca'), (1139.2340425531916, 'Sarahi'), (1191.6470588235295, 'Sarai Delfina'), (840.0776699029126, 'Saray'), (1081.1666666666667, 'Sari'), (1209.7777777777778, 'Sarlota'), (1235.1960784313726, 'Sarvinoz'), (1033.027027027027, 'Sasa'), (747.3695652173913, 'Saska'), (888.7272727272727, 'Satsuki'), (1142.9285714285713, 'Savannah'), (1188.2941176470588, 'Schena'), (1210.2571428571428, 'Se Hyun'), (1122.4545454545455, 'Se Jin'), (1240.92, 'Sean'), (1003.5367647058823, 'Seda'), (1115.72, 'Seira'), (1168.6571428571428, 'Selin'), (858.9173789173789, 'Seo Kyung'), (889.8028169014085, 'Seone'), (14.654294803817603, 'Serena'), (162.3505747126437, 'Sesil'), (784.0465949820789, 'Seung Yeon'), (218.4701086956522, 'Severine'), (166.41358024691357, 'Shahar'), (924.8818897637796, 'Shakhlo'), (1236.7627118644068, 'Shakhnoza'), (1228.3235294117646, 'Shangqing'), (694.2, 'Shanshan'), (967.9034090909091, 'Shao Yuan'), (851.5633802816901, 'Sharmada'), (296.5792682926829, 'Sharon'), (1097.0, 'Sharon Sanchana'), (372.89398280802294, 'Shelby'), (1171.0, 'Shelly'), (451.8657487091222, 'Sheng Nan'), (649.5154639175257, 'Sherazad'), (1024.0116279069769, 'Sherry'), (500.688679245283, 'Shiho'), (632.2824427480916, 'Shilin'), (1070.6666666666667, 'Shiori'), (1154.4166666666667, 'Shir'), (1187.9245283018868, 'Shiran'), (935.2322946175638, 'Shivika'), (1120.388888888889, 'Shou Na'), (1148.0, 'Shreya'), (1042.6802325581396, 'Shu Ying'), (167.90740740740742, 'Shuai'), (421.44179894179894, 'Shuko'), (864.1538461538462, 'Shuo'), (966.0588235294117, 'Shuyue'), (897.6951219512196, 'Shweta'), (1047.7575757575758, 'Si Qi'), (565.8211508553654, 'Silvia'), (542.2382851445662, 'Simona'), (1070.3417721518988, 'Simone'), (974.8, 'Simran Kaur'), (728.7443609022556, 'Sina'), (975.3484848484849, 'Sinead'), (1141.842105263158, 'Sing Le'), (980.9076923076923, 'Siqi'), (949.7916666666666, 'Sirui'), (1241.1379310344828, 'Siyu'), (259.63589743589745, 'Sloane'), (1184.8260869565217, 'Smriti'), (1225.388888888889, 'Sneha'), (632.3150684931506, 'Snehadevi S'), (514.1732026143791, 'So Jung'), (572.2654545454545, 'So Ra'), (526.3535641547861, 'Sofia'), (1084.107142857143, 'Sofico'), (724.5, 'Sofie'), (541.1570881226054, 'Sofiya'), (640.8727272727273, 'Sofya'), (1004.6666666666666, 'Sohyun'), (1029.0980392156862, 'Sonia'), (885.0976744186047, 'Sonja'), (1221.3333333333333, 'Sophia'), (600.6881091617934, 'Sophie'), (213.75043630017453, 'Sorana'), (813.1357142857142, 'Sowjanya'), (1149.3125, 'Spurti'), (792.1927710843373, 'Sri Vaishnavi'), (841.8387096774194, 'Stamatia'), (312.54158964879855, 'Stanislava'), (993.4255319148937, 'Stefana'), (1167.3333333333333, 'Stefani'), (759.2894995093228, 'Stefania'), (387.73412112259973, 'Stefanie'), (939.746835443038, 'Steffi'), (439.87772357723577, 'Stephanie'), (1035.5548387096774, 'Stephanie Mariel'), (573.6708333333333, 'Storm'), (426.3886462882096, 'Su Jeong'), (217.2493188010899, 'Su Wei'), (911.7619047619048, 'Suellen'), (944.2432432432432, 'Sultan'), (812.4581005586592, 'Sun Jung'), (1229.8, 'Sunae'), (611.0757575757576, 'Sunam'), (635.7449168207024, 'Sung Hee'), (1015.6792452830189, 'Susan'), (417.8053097345133, 'Susanne'), (982.7222222222222, 'Suzan'), (980.6666666666666, 'Suzuho'), (698.7567567567568, 'Suzy'), (844.203007518797, 'Svenja'), (267.03227571115974, 'Svetlana'), (691.9934640522875, 'Sviatlana'), (1002.6792452830189, 'Sybille'), (869.1702127659574, 'Sylvia'), (787.7645348837209, 'Sylwia'), (791.1240506329113, 'Syna'), (772.3186813186813, 'Szabina'), (343.0985324947589, 'Tadeja'), (969.6588235294117, 'Taisiya'), (1230.2, 'Talya'), (949.8059701492538, 'Tamachan'), (1118.4166666666667, 'Tamar'), (614.0434782608696, 'Tamara'), (1146.3934426229507, 'Tamari'), (121.82273948075202, 'Tamarine'), (386.7025316455696, 'Tamaryn'), (135.88910505836577, 'Tamira'), (601.906914893617, 'Tammi'), (1113.2325581395348, 'Tanaporn'), (1023.089430894309, 'Tanya'), (475.2979683972912, 'Tara'), (1075.0, 'Tatia'), (681.9417582417583, 'Tatiana'), (247.7449768160742, 'Tatjana'), (912.1077844311377, 'Tatsiana'), (747.3172413793103, 'Tayisiya'), (387.5662100456621, 'Taylor'), (1068.7457627118645, 'Tea'), (461.06702898550725, 'Teliana'), (614.9346733668342, 'Tena'), (489.27513227513225, 'Teodora'), (557.241418764302, 'Tereza'), (963.5, 'Terri'), (696.2878787878788, 'Tess'), (390.2361111111111, 'Tessah'), (437.4119658119658, 'Tetiana'), (398.83478260869566, 'Tetyana'), (802.7222222222222, 'Thai Sa Grana'), (650.1206896551724, 'Theo'), (1159.5632183908046, 'Theresa'), (1017.7777777777778, 'Tijana'), (182.02426160337552, 'Timea'), (425.82394366197184, 'Tina'), (810.6666666666666, 'Tinatin'), (739.7727272727273, 'Ting Fei'), (789.6113989637306, 'Ting Jr'), (1015.2352941176471, 'Tingting'), (743.1953125, 'Tjasa'), (838.8065217391304, 'Tomoko'), (841.7167381974249, 'Tori'), (878.1666666666666, 'Tornado Alicia'), (1029.3196721311476, 'Trang'), (1009.8666666666667, 'Treta'), (131.02074074074073, 'Tsvetana'), (992.4870588235294, 'Tyra'), (506.39344262295083, 'Ulrikke'), (844.0692307692308, 'Ulyana'), (229.35687022900763, 'Urszula'), (1132.4109589041095, 'Ushna'), (411.5068493150685, 'Usue Maitane'), (921.3333333333334, 'Valentina'), (751.2668918918919, 'Valentine'), (479.8914728682171, 'Valentini'), (368.14331210191085, 'Valentyna'), (661.8474576271186, 'Valeria'), (806.2648401826484, 'Valerie'), (799.8668224299065, 'Valeriya'), (696.4126984126984, 'Vanda'), (579.437984496124, 'Vanesa'), (398.3106546854942, 'Vanessa'), (185.75, 'Vania'), (1130.6037735849056, 'Vaniya'), (1089.7111111111112, 'Vanja'), (450.4642082429501, 'Varatchaya'), (894.3846153846154, 'Varunya'), (382.6888217522659, 'Varvara'), (613.5330490405117, 'Vasilisa'), (859.8103448275862, 'Vaszilisza'), (729.0117647058823, 'Vendula'), (32.984862819299906, 'Venus'), (195.66923570969814, 'Vera'), (958.1327800829876, 'Verena'), (726.1852387843704, 'Veronica'), (951.0075757575758, 'Veronica M'), (734.6018957345972, 'Veronika'), (240.0448979591837, 'Vesna'), (1252.9130434782608, 'Vicky'), (1138.8490566037735, 'Victoire'), (444.9760935910478, 'Victoria'), (1236.0, 'Victoria Ariadna'), (566.9148936170212, 'Viktoria'), (1236.5333333333333, 'Viktoriia'), (507.4, 'Viktorija'), (736.2288557213931, 'Viktoriya'), (966.4671052631579, 'Viktoryia'), (1243.0, 'Vilma Y'), (1214.1142857142856, 'Vincenza'), (1150.0, 'Vinciane'), (1170.840579710145, 'Violetta'), (355.88102893890675, 'Virginie'), (1208.952380952381, 'Vishesh'), (1201.25, 'Vita'), (296.2025641025641, 'Vitalia'), (670.9108527131783, 'Vivian'), (607.2810218978102, 'Vivien'), (659.2103004291846, 'Vivienne'), (595.3291666666667, 'Vlada'), (943.5432098765432, 'Vladica'), (823.8770833333333, 'Vladimira'), (1006.1769911504425, 'Vladislava'), (856.0782608695653, 'Vladyslava'), (555.6572164948453, 'Vojislava'), (999.0215053763441, 'Voni'), (701.4009009009009, 'Wan Ting'), (1081.142857142857, 'Wan Yi'), (1249.3333333333333, 'Warona'), (440.35214446952597, 'Wen Hsin'), (1117.55, 'Wen Ling'), (1011.469696969697, 'Wendy Qi Wen'), (1152.7837837837837, 'Weronika Jasmina'), (886.1407407407407, 'Whitney'), (1083.1454545454546, 'Wiktoria'), (585.2589641434263, 'Wing Yau Venise'), (937.7878787878788, 'Wushuang'), (661.2222222222222, 'Xenia'), (714.8653846153846, 'Xi Yao'), (814.4171122994652, 'Xiao'), (467.24657534246575, 'Xiaodi'), (848.4418604651163, 'Xiaorong'), (737.7547169811321, 'Xiaoxi'), (712.2780373831775, 'Ximena'), (694.4808743169399, 'Xin'), (1022.3333333333334, 'Xin Yu'), (480.646017699115, 'Xinyu'), (309.35767790262173, 'Xinyun'), (954.6, 'Xiyu'), (488.7671232876712, 'Xu Liu'), (1225.75, 'Ya'), (586.865, 'Ya Hsuan'), (325.6162790697674, 'Yafan'), (768.560975609756, 'Yan'), (740.0214504596527, 'Yana'), (1177.8823529411766, 'Yang'), (381.2581602373887, 'Yanina'), (1059.2702702702702, 'Yanni'), (1166.875, 'Yarden'), (211.41240310077518, 'Yaroslava'), (702.1784386617101, 'Yasmin'), (1227.7777777777778, 'Yasmina'), (983.0410958904109, 'Yasmine'), (1261.8181818181818, 'Yasmyn'), (1110.4594594594594, 'Yawna'), (114.78806907378336, 'Yayuk'), (431.3144424131627, 'Ye Ra'), (1048.081081081081, 'Ye Xin'), (1155.8191489361702, 'Yekaterina'), (897.4873949579832, 'Yelena'), (973.8617021276596, 'Yeong Won'), (724.8712871287129, 'Yevgeniya'), (791.0756207674943, 'Yi'), (381.5512572533849, 'Yi Fan'), (656.8787276341948, 'Yi Jing'), (418.2566137566138, 'Yi Miao'), (1185.030303030303, 'Yidi'), (1209.625, 'Yihong'), (1063.9411764705883, 'Yijia'), (661.3972602739726, 'Ying'), (403.8775981524249, 'Ying Ying'), (801.6712328767123, 'Yixuan'), (892.3561643835617, 'Ylena'), (642.9487179487179, 'Ylona Georgiana'), (1128.901098901099, 'Yoko'), (1068.4619883040937, 'Yolande'), (1263.7666666666667, 'Yoo Ri'), (844.9310344827586, 'Yoon Young'), (1096.9130434782608, 'Yoshimi'), (1222.24, 'Yosr'), (1170.3461538461538, 'You Na'), (458.86633663366337, 'Ysaline'), (1098.357142857143, 'Yu Jin'), (1239.6666666666667, 'Yu Tong'), (1054.0, 'Yuan'), (891.2340425531914, 'Yuanyi'), (983.359649122807, 'Yue'), (444.96190476190475, 'Yue Yue'), (961.876923076923, 'Yuenu'), (1034.1304347826087, 'Yujia'), (748.8250591016548, 'Yuka'), (1071.5833333333333, 'Yukako'), (876.7428571428571, 'Yuki'), (698.8285714285714, 'Yuki Kristina'), (857.1692307692308, 'Yukina'), (824.3936170212766, 'Yukun'), (485.35135135135135, 'Yulia'), (725.5322195704057, 'Yuliana'), (384.87776983559684, 'Yuliya'), (799.1332586786115, 'Yumi'), (166.6586270871985, 'Yung Jan'), (1047.3529411764705, 'Yuqi'), (322.17758620689654, 'Yurika'), (1041.5367231638418, 'Yuriko'), (746.4803493449782, 'Yurina'), (608.1309090909091, 'Yuuki'), (1230.2, 'Yuval'), (545.449074074074, 'Yuxuan'), (318.2867132867133, 'Yvonne'), (1227.344827586207, 'Zaineb'), (867.5288461538462, 'Zalina'), (709.625, 'Zarah'), (222.81428571428572, 'Zarina'), (791.2352941176471, 'Zeel'), (1229.5714285714287, 'Zeynep  Sena'), (627.7777777777778, 'Zhanlan'), (629.0081967213115, 'Zhaoxuan'), (1058.0, 'Zhibek'), (1144.45, 'Zhima'), (1237.9, 'Zhou'), (989.75, 'Zhuoma'), (391.4656290531777, 'Zi'), (1221.5, 'Zinovia'), (878.4606741573034, 'Ziyue'), (765.3777777777777, 'Zoe'), (935.081081081081, 'Zoe Gwen'), (916.559633027523, 'Zsofia'), (451.92875448487956, 'Zuzana'), (794.5416666666666, 'Zuzanna')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?' in SQLite? I currently have 'SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  <  2009 INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  >  2011', which outputs [('Fernando Gago',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the names of employees who never won any award in the evaluation.' in SQLite? I currently have 'SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)', which outputs [('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the minimum weight of the car with 8 cylinders produced in 1974 ?' in SQLite? I currently have 'SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974', which outputs [(4141,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'', which outputs [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of singers that do not have any song.' in SQLite? I currently have 'SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)', which outputs [('Alice Walton',), ('Abigail Johnson',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the song names by singers who are older than average?' in SQLite? I currently have 'SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)', which outputs [('You',), ('Sun',), ('Gentleman',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM people', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM people\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first and last name of all players in the order of birth date.' in SQLite? I currently have 'SELECT first_name, last_name FROM players ORDER BY birth_date', which outputs [('Thelma', 'Long'), ('Pauline', 'Addie'), ('Milly', 'Vagn Nielsen'), ('Vera', 'Johansen'), ('Reiko', 'Miyagi'), ('Louise', 'Brown'), ('Gertrude', 'Moran'), ('Zsuzsa', 'Kormoczy'), ('Peggy', 'Brixhe'), ('Betty', 'Pratt'), ('Doris', 'Hart'), ('Dorothy', 'Knode'), ('Ruth', 'Hauknes'), ('Althea', 'Gibson'), ('Suzanne', 'Le Besnerais'), ('Margarita', 'De Zuleta'), ('Helen', 'Parez'), ('Beverley', 'Rae'), ('Nora', 'Somoza'), ('Vera', 'Sukova'), ('Rita', 'Lauder'), ('Heather', 'Segal'), ('Benita', 'Senn'), ('Christiane', 'Mercelis'), ('Angela', 'Barrett'), ('Monique', 'Bedoret'), ('Florence', 'De La Courtie Billat'), ('Lorna', 'Greville Collins'), ('Shiu Man', 'Chan'), ('Tova', 'Epstein'), ('Nancy', 'Reed'), ('Ana Maria', 'Estalella Manso'), ('Sylvana', 'Lazzarino'), ('Jennifer', 'Hoad'), ('Shirley', 'Brasher'), ('Pat', 'Stewart'), ('Renee', 'Richards'), ('Yolande', 'Ramirez'), ('Lea', 'Pericoli'), ('Zsofia', 'Broszmann'), ('Yu Lan', 'Liu'), ('Jeanne', 'Arth'), ('Margot', 'Dittmeyer'), ('Francoise', 'Repoux'), ('Jacqueline', 'Rees Lewis'), ('Darlene', 'Hard'), ('Norma', 'Marsh'), ('Ruia', 'Morrison Davy'), ('Irene', 'Fraisse'), ('Jelena', 'Gencic'), ('Jenny', 'Ridderhof'), ('Edda', 'Buding'), ('Lucia', 'Bassi'), ('Patricia', 'Mattes'), ('Renata', 'Ostermann'), ('Lorraine', 'Robinson'), ('Judy', 'Dalton'), ('Bernice', 'Vukovich'), ('Anne Marie', 'Rouchon'), ('Maria', 'Chakarova'), ('Susan', 'Butt'), ('Janine', 'Lieffrig'), ('Roberta', 'Beltrame'), ('Elizabeth', 'Starkie'), ('Danuta', 'Rylska'), ('Ann', 'Jones'), ('Michele', 'Kahn'), ('Rosy', 'Darmon'), ('Claudine', 'Rouire'), ('Mimi', 'Kanarek'), ('Jean', 'Drysdale'), ('Maria', 'Bueno'), ('Renee', 'Schuurman'), ('Patricia', 'Cody'), ('Ann', 'Barclay'), ('Helga', 'Hosl'), ('Edda', 'Herdy'), ('Carmen', 'Mandarino'), ('Pia', 'Balling'), ('Deidre', 'Keller'), ('Andrea', 'Winkler'), ('Daniele', 'Bouteleux'), ('Anna', 'Dmitrieva'), ('Christine', 'Janes'), ('Katarina', 'Bartholdson'), ('Almut', 'Sturm'), ('Yohko', 'Obata'), ('Sonja', 'Pachta'), ('Tone', 'Schirmer'), ('Yuen Yuen', 'Ling'), ('Jan', 'Oneill'), ('Virginia', 'Caceres'), ('Kazuko', 'Kuromatsu'), ('Patricia', 'Reese'), ('Brenda', 'Dale'), ('Charleen', 'Hillebrand'), ('Gillian', 'Kay'), ('Helga', 'Masthoff'), ('Mary', 'Puljak'), ('Joyce', 'Davenport'), ('Jacqueline', 'Le Boubennec'), ('Margaret', 'Hunt'), ('Lynne', 'Nette'), ('Margaret', 'Court'), ('Tory Ann', 'Fretz'), ('Heide', 'Schildknecht'), ('Lesley', 'Bowrey'), ('Nancy', 'Richey'), ('Vincerzo', 'Napolio'), ('Geraldine', 'Barniville'), ('Alice', 'Tym'), ('Karen', 'Susman'), ('Francoise', 'Durr'), ('Ulla', 'Sandulf'), ('Liv', 'Jagge'), ('Carol Ann', 'Kalogeropoulos'), ('Judy', 'Alvarez'), ('Maria Jose', 'Aubet'), ('Carole', 'Graebner'), ('Maylis', 'Burel'), ('Kerstin', 'Seelbach'), ('Jennifer', 'Waggott'), ('Leena', 'Mutanen'), ('Annette', 'Du Plooy'), ('Billie Jean', 'King'), ('Maria Victoria', 'De Moggio'), ('Barbara', 'Olszewska'), ('Gill', 'Butterfield'), ('Ingrid', 'Bentzer'), ('Elsie', 'Veentjer Spruyt'), ('Faye', 'Moore'), ('Ana Maria', 'Bocio'), ('Frances', 'Maclennan'), ('Gitte', 'Ejlerskov'), ('Gertruida', 'Walhof'), ('Sally', 'Holdsworth'), ('Robin', 'Lloyd'), ('Monique', 'Krecke'), ('Vlasta', 'Kodesova'), ('Marketa', 'Wallenfels'), ('Kimiyo', 'Yagahara'), ('Joy', 'Emerson'), ('Robyn', 'Ebbern'), ('Madeleine', 'Pegel'), ('Joyce', 'Williams'), ('Maryna', 'Proctor'), ('Evelyne', 'Terras'), ('Yulia', 'Berberian'), ('Nadine', 'Netter'), ('Marijke', 'Schaar'), ('Maria Carmen', 'Arnoso'), ('Pamela', 'Brand'), ('Eva', 'Lundquist'), ('Liv', 'Hubert'), ('Elizabeth', 'Terry'), ('Alena', 'Palmeova West'), ('Hsiu', 'Lee'), ('Margaret', 'Harris'), ('Lubka', 'Radkova'), ('Gail', 'Benedetti'), ('Christiane', 'Spinoza'), ('Kerryl', 'Chute'), ('Kirsten', 'Robsahm'), ('Judith', 'Gohn'), ('Monique', 'Di Maso'), ('Betty', 'Stove'), ('Greta', 'Delport'), ('Virginia', 'Wade'), ('Galina', 'Baksheeva'), ('Vicky', 'Berner'), ('Patricia', 'Faulkner'), ('Maria Eugenia', 'Guzman'), ('Nancy', 'Spelman'), ('Brenda', 'Nunns'), ('Mary', 'Mclean'), ('Christina', 'Lindstrom'), ('Faye', 'Urban'), ('Eva', 'Szabo'), ('Glenda', 'Swan'), ('Erzsebet', 'Szell'), ('Julie', 'Heldman'), ('Lloyd', 'Hatcher'), ('Nell', 'Truman'), ('Johanne', 'Venturino'), ('Monica', 'Giorgi'), ('Irena', 'Skulj'), ('Marilyn', 'Greenwood'), ('Mabel', 'Vrancovich'), ('Patricia', 'Walkden'), ('Lita', 'Sugiarto'), ('Martha', 'Wolf Peterdy'), ('Stephanie', 'Johnson'), ('Dianne', 'Berkinshaw'), ('Patricia', 'Reyes'), ('Mara', 'Cohen Mintz'), ('Helen', 'Lennon'), ('Elizabeth', 'James'), ('Fiona', 'Mckenzie'), ('Susi', 'Eichenberger'), ('Laura', 'Rossouw'), ('Ana Maria', 'Arias'), ('Bunny', 'Smith'), ('Yolanda', 'Sumarno'), ('Ellen', 'Grindvold'), ('Ingrid', 'Sadlon'), ('Marie', 'Pinterova'), ('Lidy', 'Venneboer'), ('Marta', 'Galli'), ('Carol', 'Zeeman'), ('Lucia', 'Gongora'), ('Kathleen', 'Harter'), ('Mary Ann', 'Beattie'), ('Elizabeth', 'Allan'), ('Kathy', 'Blake'), ('Helen', 'Cawley'), ('Rita', 'Felix'), ('Estela', 'Benavides'), ('Gail', 'Falkenberg'), ('Winnie', 'Wooldridge'), ('Karen', 'Krantzcke'), ('Astrid', 'Suurbeck'), ('Jeong Soon', 'Yang'), ('Penelope', 'Hardgrave'), ('Toshiko', 'Sade'), ('Louise', 'Gonnerman'), ('Wendy', 'Overton'), ('Mari Ann', 'Klougart'), ('Edith', 'Winkens'), ('Alex', 'Cowie'), ('Cecilia', 'Martinez'), ('Janice', 'Wainwright'), ('Esme', 'Emanuel'), ('Tine', 'Zwaan'), ('Conceicao', 'Rio'), ('Anne Mette', 'Sorensen'), ('Sue', 'Mappin'), ('Maria Teresa', 'Nasuelli'), ('Kerry', 'Reid'), ('Beverley', 'Billington'), ('Suzana', 'Gesteira'), ('Loanita', 'Rachman'), ('Violette', 'Percy'), ('Leonora', 'Peralta'), ('Elena', 'Subirats'), ('Christina', 'Sandberg'), ('Ingrid', 'Palmieri'), ('Julie', 'Anthony'), ('Birgitta', 'Lindstrom'), ('Graciela', 'Moran'), ('Marilyn', 'Aschner'), ('Ada', 'Bakker'), ('Junko', 'Sawamatsu'), ('Josiane', 'Graas'), ('Evagreth', 'Emmenegger'), ('Katja', 'Ebbinghaus'), ('Daphne', 'Pattison'), ('Helen', 'Amos'), ('Marianne', 'Kindler'), ('Barbara', 'Kral'), ('Monique', 'Van Haver'), ('Rosie', 'Casals'), ('Nicole', 'Bimes'), ('Odile', 'De Roubin'), ('Ching Ling', 'Chang'), ('Leyla', 'Musalem'), ('Mona', 'Guerrant'), ('Judy', 'Congdon'), ('Peggy', 'Michel'), ('Ivona', 'Matulikova'), ('Judith', 'Salome'), ('Maria Teresa', 'Salvidea Diaz'), ('Olga', 'Morozova'), ('Andree', 'Martin'), ('Veronika', 'Buche'), ('Hideko', 'Goto'), ('Jill', 'Cooper'), ('Peaches', 'Bartkowicz'), ('Lany', 'Kaligis'), ('Danuta', 'Wieczorek'), ('Laura', 'Du Pont'), ('Raquel', 'Giscafre'), ('Gina', 'Genovese'), ('Roylee', 'Bailey'), ('Wanda', 'Ferraz De Oliveira'), ('Di', 'Riste'), ('Corinne', 'Molesworth'), ('Valerie', 'Ziegenfuss'), ('Kayoko', 'Fukuoka'), ('Judy', 'Dixon'), ('Biljana', 'Kostic'), ('Sonoe', 'Yonezawa'), ('Alex', 'Rotas'), ('Kerry', 'Harris'), ('Miroslava', 'Holubova'), ('Sue', 'Roux'), ('Heidi', 'Eisterlehner'), ('Susie', 'Witwer'), ('Marianna', 'Brummer'), ('Judith', 'Szorenyi'), ('Kerry', 'Ballard'), ('Patti', 'Hogan'), ('Elvira', 'Weisenberger'), ('Lindsey', 'Beaven'), ('Louise', 'Bysiek'), ('Diana', 'Moskova'), ('Susan', 'Stone'), ('Ines', 'Roget'), ('Betty Ann', 'Dent'), ('Yoshiro', 'Tanaka'), ('Pamela', 'Austin'), ('Vera Lucia', 'Giugni'), ('Margaret', 'Cooper'), ('Paulina', 'Peled'), ('Agnes', 'Graczol'), ('Helen', 'Worland'), ('Wendy', 'Gilchrist'), ('Lesley', 'Hunt'), ('Daniela', 'Marzano'), ('Jenny', 'Helliar'), ('Shelby', 'Torrance'), ('Stephanie', 'Grant'), ('Janice', 'Tindle'), ('Mary', 'Struthers'), ('Denise', 'Carter Triolo'), ('Flore', 'Wagner'), ('Kristy', 'Pigeon'), ('Wendy', 'Tomlinson'), ('Isabel', 'Fernandez De Soto'), ('Kerry', 'Young'), ('Ana', 'Cavadini'), ('Alenka', 'Pipan'), ('Barbara', 'Hawcroft'), ('Christina', 'Sotirova'), ('Linda', 'Tuero'), ('Carol', 'Baily'), ('Patricia', 'Rivera'), ('Pam', 'Richmond'), ('Adrienne', 'Avis'), ('Janine', 'Strauss'), ('Marlie', 'Buehler'), ('Robyn', 'Hunt'), ('Kazuko', 'Sawamatsu'), ('Brenda', 'Kirk'), ('Zaiga', 'Yansone'), ('Vicki', 'Lancaster Kerr'), ('Cynthia', 'Doerner'), ('Jane', 'Kincaid'), ('Nora', 'Lauteslager'), ('Anne Marie', 'Cassaigne'), ('Margareta', 'Forsgardh'), ('Pam', 'Teeguarden'), ('Gail', 'Hansen'), ('Dorte', 'Ekner'), ('Marjorie', 'Gengler'), ('Ann', 'Lebedeff'), ('Ana Maria', 'Ycaza'), ('Connie', 'Capozzi'), ('Janice', 'Rapp'), ('Jackie', 'Fayter'), ('Laila', 'Pirila'), ('Maria Cristina', 'Borba Dias'), ('Penny', 'Moor'), ('Jane', 'Ohara'), ('Evonne', 'Cawley'), ('Cathy', 'Beene'), ('Lucia', 'Bruce'), ('Eva', 'Fridenzi'), ('Janet', 'Young'), ('Christine', 'Dorey'), ('Rita', 'Krombach'), ('Patricia', 'Bostrom'), ('Miroslava', 'Bendlova'), ('Fiorella', 'Bonicelli'), ('Nellemieke', 'Brouwer'), ('Susan', 'Hagey'), ('Mi Ok', 'Lee'), ('Gilda', 'Robleto'), ('Katalin', 'Borka'), ('Veronica', 'Burton'), ('Tam', 'Oshaughnessy'), ('Clare', 'Colman'), ('Sharon', 'Walsh Pete'), ('Wendy', 'Appleby'), ('Lotte', 'Solbeck'), ('Carmen', 'Perea Alcala'), ('Marilyn', 'Pryde'), ('Ann', 'Flint'), ('Janice', 'Metcalf'), ('Maria', 'Geyer'), ('Lesley', 'Charles'), ('Lucinda', 'Crosby'), ('Kristien', 'Shaw'), ('Elly', 'Appel'), ('Nancy', 'Ornstein'), ('Patricia', 'Montano'), ('Nathalie', 'Fuchs'), ('Helena', 'Laitinen'), ('Barbara', 'Brankovska'), ('Cecilia', 'Rosado'), ('Kate', 'Latham'), ('Linda', 'Thomas'), ('Cynthia Ann', 'Thomas'), ('Tina', 'Mochizuki'), ('Wendy', 'Turnbull'), ('Michele', 'Gurdal'), ('Eugenia', 'Birioukova'), ('Kathy', 'Kraft'), ('Angelina', 'Colquitt'), ('Eliza', 'Pande'), ('Rosalba', 'Vido'), ('Maya', 'Kerschbaum'), ('Margaret', 'Riley'), ('Beatrix', 'Klein'), ('Beverly', 'Buckley'), ('Maria Victoria', 'Baldovinos Cibeira'), ('Beatrice', 'Chrystman'), ('Lindsay', 'Blachford'), ('Marina', 'Kroschina'), ('Yvona', 'Brzakova'), ('Yoko', 'Kobayashi'), ('Patricia', 'Coleman'), ('Karin', 'Boshoff'), ('Janet', 'Haas'), ('Rowena', 'Sanders'), ('Duk Hee', 'Lee'), ('Sabine', 'Lavrerotte'), ('Alcira', 'Acevedo'), ('Janet', 'Wright'), ('Anna', 'Nemeth'), ('Silvia', 'Blume Bruns'), ('Jane', 'Stratton'), ('Nancy', 'Weigel'), ('Marcie', 'Harper'), ('Sirikanya', 'Hoonsiri'), ('Soon Oh', 'Lee'), ('Patricia', 'Brailsford'), ('Sally', 'Hudson Beck'), ('Suthasini', 'Sirikaya'), ('Susan', 'Vinton'), ('Judy', 'Chaloner'), ('Pam', 'Whytcross'), ('Jane', 'Preyer'), ('Marion', 'De Witte'), ('Jan', 'Blackstad'), ('Elzbieta', 'Slesicka'), ('Brenda', 'Garcia'), ('Walena', 'White'), ('Glynis', 'Coles'), ('Barbara', 'Downs'), ('Annette', 'Coe'), ('Patricia', 'Bianchi'), ('Iris', 'Riedel Kuhn'), ('Lucy', 'Fendig'), ('Rosa Maria', 'Togores Colom'), ('Mihoka', 'Matshushima'), ('Mimi', 'Wikstedt'), ('Betsy', 'Blaney'), ('Glaucia', 'Langela'), ('Daryl', 'Gralka'), ('Jill', 'Schwikert'), ('Joy', 'Schwikert'), ('Frederique', 'Thibault'), ('Sue', 'Stap'), ('Linda', 'Geeves'), ('Amy', 'Goldfarb'), ('Maria', 'Mendonca'), ('Valerie', 'Franta'), ('Deborah', 'Fiuza'), ('Sabine', 'Bernegger'), ('Mary', 'Hamm'), ('Jill', 'Hamilton'), ('Robin', 'Khan'), ('Joanne', 'Russell'), ('Donna', 'Ganz'), ('Elizabeth', 'Vlotman'), ('Debra', 'Darrell'), ('Kiyoko', 'Nomura'), ('Susan', 'Minford'), ('Florence', 'Guedy'), ('Renata', 'Tomanova'), ('Chris', 'Evert'), ('Yolanda', 'Vallejo'), ('Naoko', 'Sato'), ('Lindsay', 'Morse'), ('Virginia', 'Ruzici'), ('Susana Maria', 'Villaverde'), ('Silvana', 'Urroz'), ('Michiko', 'Saji'), ('Candy', 'Reynolds'), ('Sally', 'Greer'), ('Jane', 'Plackett'), ('Kyeong Mi', 'Choi'), ('Bente', 'Kjolstad'), ('Silvana', 'Belardinelli'), ('Andrea', 'Whitmore'), ('Nancy', 'Yeargin'), ('Dominique', 'Beillan'), ('Jean', 'Nachand'), ('Magdalena', 'Gual Pascual'), ('Laurie', 'Rowley'), ('Diane', 'Desfor'), ('Aleida', 'Spex'), ('Donna', 'Stockton'), ('Beatriz', 'Araujo'), ('Kym', 'Ruddell'), ('Carol', 'Draper'), ('Erin', 'Dignam'), ('Ann', 'Kiyomura Hayashi'), ('Carrie', 'Meyer'), ('Penny', 'Johnson'), ('Florenta', 'Mihai'), ('Elsa', 'Rodriguez'), ('Elizabeth', 'Freeman Young'), ('Gina', 'Diaz Ponce'), ('Anabel', 'Luna De Infante'), ('Martha', 'Morrison'), ('Jutta', 'Diesslin'), ('Ann', 'Etheredge'), ('Pauline', 'Elliott'), ('Joni', 'Van Ryck De Groot'), ('Monica', 'Rho'), ('Gwynn', 'Sammel'), ('Maria Julia', 'Roverano'), ('Laurie', 'Tenney'), ('Jenny', 'Dimond'), ('Ruta', 'Gerulaitis'), ('Terry', 'Holladay'), ('Marcela Viviana', 'Cataldi'), ('Brigette', 'Cuypers'), ('Monica', 'Alvarez'), ('Genevieve', 'Etienne'), ('Vera', 'Tere'), ('Kiyomi', 'Nakagawa'), ('Ros', 'Lewis'), ('Sylvia', 'Koning'), ('Gretchen', 'Galt'), ('Carla', 'Guarino De Galeazzi'), ('Chris', 'Newton'), ('Irina', 'Shevchenko'), ('Marita', 'Redondo'), ('Brenda', 'Remilton'), ('Ilana', 'Kloss'), ('Birgitte', 'Hermansen'), ('Chris', 'Oneil'), ('Stephanie', 'Tolleson'), ('Jenny', 'Walker'), ('Robin', 'Harris'), ('Sue', 'Barker'), ('Mary Ann', 'Colville'), ('Sandy', 'Stap'), ('Belinda', 'Thompson'), ('Nerida', 'Gregory'), ('Beatrice', 'Guery'), ('Rayni', 'Fox'), ('Elena', 'Samoilo'), ('Kathy', 'May Teacher Paben'), ('Caroline', 'Lane'), ('Courtney', 'Lord'), ('Helle', 'Viragh'), ('Roberta', 'Stark'), ('Jody', 'Appelbaum'), ('Marillia', 'Matte'), ('Mima', 'Jausovec'), ('Annina', 'Von Planta'), ('Adriana', 'Villagran Reami'), ('Dianne', 'Balestrat'), ('Lea', 'Plchova'), ('Cathy', 'Griffiths'), ('Lele', 'Forood'), ('Bernadette', 'Davy'), ('Helena', 'Anliot'), ('Kim', 'Sands'), ('Martina', 'Navratilova'), ('Betsy', 'Nagelsen'), ('Chris', 'Penn'), ('Brigitte', 'Simon Glinel'), ('Diane', 'Evers'), ('Linky', 'Boshoff'), ('Kathy', 'Kuykendall'), ('Elina', 'Durchman'), ('Patricia', 'Medrado'), ('Katerleen', 'Szeman'), ('Mariana', 'Simionescu'), ('Iluminada', 'Concepcion'), ('Andrea', 'Galloway'), ('Simone', 'Wolter'), ('Sylvie', 'Rual Faulty'), ('Yvonne', 'Vermaak'), ('Susan', 'Zaro'), ('Paula', 'Smith'), ('Ponamporn', 'Samawanthana'), ('Antonella', 'Rosa'), ('Lotta', 'Stenberg'), ('Greer', 'Stevens'), ('Eva', 'Rozsavolgyi'), ('Dora', 'Alavantic'), ('Leslie', 'Allen'), ('Mary', 'Carillo'), ('Cathleen', 'Farrell'), ('Kaye', 'Hallam'), ('Vicki', 'Beggs'), ('Phyllis', 'Blackwell'), ('Ludmila', 'Makarova'), ('Barbara', 'Jordan'), ('Anna', 'Iuale'), ('Karen', 'Feldman'), ('Margaret', 'Lumia'), ('Jan', 'Wilton'), ('Barbara', 'Hallquist'), ('Marjorie', 'Blackwood'), ('Rene', 'Blount'), ('Linda', 'Mottram'), ('Christine', 'Gimmig'), ('Lorna', 'Whitfield'), ('Mary', 'Sawyer'), ('Beth', 'Norton'), ('Julie', 'Filkoff'), ('Maria', 'Mateo'), ('Linda', 'Siegleman'), ('Felicia', 'Hutnick'), ('Lorna', 'Simmons'), ('Huey Ying', 'Chen'), ('Yoon Ja', 'Han'), ('Malgorzata', 'Rejdych'), ('Bunny', 'Bruning'), ('Susie', 'Mehmedbasich'), ('Donna', 'Bradshaw'), ('Kay', 'Mcdaniel'), ('Kay', 'McDaniel'), ('Kim', 'Jones Shaefer'), ('Veronica', 'Martinez'), ('Brenda', 'Perry'), ('Jeanne', 'Evert'), ('Sue', 'Saliba'), ('Carrie', 'Fleming'), ('Maria', 'Bolster'), ('Li Qiao', 'Yu'), ('Antonella', 'Canapi'), ('Alina', 'Baraldi'), ('Emilse', 'Rapponi Longo'), ('Kim', 'Steinmetz'), ('Eiko', 'Katayama'), ('Katerina', 'Bohmova'), ('Yukie', 'Koizumi'), ('Elisabeth', 'Ekblom'), ('Mara', 'Eijkenboom'), ('Sheila', 'Mcinerney'), ('Naoko', 'Matsuki'), ('Yasuka', 'Shiba'), ('Cathy', 'Fink'), ('Lisette', 'Senn'), ('Jan', 'Bardot'), ('Jo', 'Sheridan'), ('Sue', 'Bartlett'), ('Gleici', 'Silva Do Espirito Santo'), ('Lynne', 'Epstein'), ('Anne Marie', 'Ruegg'), ('Leanne', 'Harrison Austin'), ('Perrine', 'Du Puy'), ('Nancy', 'Neviaser'), ('Viviana', 'Segal'), ('Nina', 'Bohm'), ('Joyce', 'Portman'), ('Robin', 'Tenney'), ('Lisa', 'Yap Sam'), ('Patricia', 'Shoolman'), ('Chalada', 'Wattana'), ('Natasha', 'Chmyreva'), ('Beatriz', 'Villaverde'), ('Cynthia', 'Ashling'), ('Michelle', 'Tyler'), ('Monica', 'Simmen'), ('Marise', 'Kruger'), ('Dianne', 'Morrison'), ('Christine', 'Ricour Catella'), ('Helena', 'Wimmer'), ('Nosheen', 'Ehtesham'), ('Mariette', 'Pakker'), ('Sandy', 'Collins'), ('Alejandra', 'Vallejo'), ('Jean', 'Hepner'), ('Pat', 'Henderson'), ('Nam Sook', 'Kim'), ('Pamela', 'Baily'), ('Lindsay', 'Standen'), ('Roberta', 'Mccallum'), ('Judita', 'Papista'), ('Eun Jeong', 'Cha'), ('Tanya', 'Harford'), ('Regina', 'Marsikova'), ('Helene', 'Pelletier'), ('Lea', 'Antonoplis'), ('Dewonder', 'Davis'), ('Anthea', 'Stewart'), ('Lisa', 'Moldrem'), ('Ellinore', 'Lightbody'), ('Elke', 'Renz'), ('Sally Ann', 'Lewis'), ('Lisa', 'Doherty'), ('Eleni', 'Pilava Papanikolaou'), ('Petra', 'Delhees Jauch'), ('Stacy', 'Margolin'), ('Susan', 'Rimes'), ('Zhen Zhen', 'Xiang'), ('Froydis', 'Forberg'), ('Nina', 'Bland'), ('Fumiko', 'Furuhashi'), ('Liliana', 'Giussani'), ('Lucia', 'Romanov'), ('Maria', 'Romanov'), ('Elena', 'Eliseenko'), ('Marcella', 'Mesker'), ('Clare', 'Harrison'), ('Helen', 'Park'), ('Sherry', 'Acker'), ('Keryn', 'Pratt'), ('Christa', 'Pickwick'), ('Sedigheh', 'Hassani'), ('Anne', 'Smith'), ('Annette', 'Smith'), ('Patricia', 'Armet Sanpere'), ('Uschi', 'Ulrich'), ('Anne', 'Hobbs'), ('Kristin', 'Kinney'), ('Elfia', 'Nizarwan'), ('Graciela', 'Peraza'), ('Brigitte', 'Lorang'), ('Catherine', 'Suire'), ('Caroline', 'Young'), ('Donna', 'Rubin'), ('Xin Fen', 'Pu'), ('Qing Qing', 'Gong'), ('Ann', 'Henricksson'), ('Soon Ho', 'Shin'), ('Masako', 'Yanagi'), ('Tamar', 'Levin'), ('Carol', 'Daniels'), ('Dana', 'Gilbert'), ('Trey', 'Lewis'), ('Sylvia', 'Hanika'), ('Ingrid', 'Willems'), ('Kathy', 'Jordan'), ('Graca', 'Cardoso'), ('Jeanne', 'Duvall'), ('Cindy', 'Davis'), ('Zenda', 'Liess'), ('Sharon', 'Green'), ('Kathy', 'Obrien'), ('Cissie', 'Donigan'), ('Lori', 'Robertson'), ('Hagit', 'Zubary'), ('Fiona', 'Moffitt'), ('Michelle', 'Berrigan'), ('Silvia', 'Campius Pinas'), ('Claudia', 'Casabianca'), ('Cathy', 'Drury'), ('Kate', 'Glancy'), ('Jennifer', 'Balent'), ('Wendy', 'Burkhart'), ('Debbie', 'Stewart'), ('Gabriela', 'Dinu'), ('Sabina', 'Simmonds'), ('Tiffany', 'Silveria'), ('Maria', 'Rothschild'), ('Betsy', 'Heidenberger'), ('Wendy', 'Barlow'), ('Deborah', 'Jevans'), ('Suzanne', 'Bakewell'), ('Amanda', 'Tobin Dingwall'), ('Debbie', 'Chesterton'), ('Jill', 'Davis'), ('Helen', 'Davis'), ('Martine', 'Bureau'), ('Maria Manuel', 'Cabral Lencastre'), ('Hamidan', 'Bibi'), ('Lynn', 'Jacobs'), ('Judy', 'Rich'), ('Danielle', 'Meunier'), ('Jo', 'Durie'), ('Iva', 'Budarova'), ('Teng Lian', 'Kwong'), ('Lisa', 'Wilcox'), ('Lani', 'Wilcox'), ('Mareen', 'Louie Harper'), ('Betona', 'Pellon Fernandez'), ('Beatriz', 'Pellon'), ('Saida', 'Berthe'), ('Wendy', 'Prausa'), ('Elizabeth', 'Little'), ('Heidi', 'Allsmiller'), ('Denise', 'Parnell'), ('Manuela', 'Zoni'), ('Margaret', 'Redfearn'), ('Lorrie', 'Zacharias'), ('Marcelle', 'Voyame'), ('Rita', 'Agassi'), ('Themis', 'Zambrzycki'), ('Anna Maria', 'Fernandez'), ('Lucia', 'Fernandez'), ('Amreeta', 'Ahluwalia'), ('Rosalyn', 'Nideffer'), ('Caroline', 'Stoll'), ('Min Kyung', 'Seol'), ('Micki', 'Schillig'), ('Angela', 'Walker'), ('Marianne', 'De Crop'), ('Hana', 'Strachonova'), ('Michelle', 'Weiss'), ('Tracie', 'Blumentritt'), ('Caroline', 'Franch'), ('Ivanna', 'Madruga Osses'), ('Helena', 'Manset'), ('Nina', 'Voydat'), ('Neissa', 'Doumbia'), ('Eva', 'Pfaff'), ('Maria Paula', 'Abreu'), ('Marcela', 'Skuherska'), ('Alycia', 'Moulton'), ('Iwona', 'Kuczynska'), ('Jeong Soon', 'Lee'), ('Karin', 'Moos'), ('Cornelia', 'Dries'), ('Caryn', 'Copeland Wilson'), ('Nicole', 'Mabille'), ('Mariela', 'Clavijo'), ('Sylvia', 'Clayton'), ('Petra', 'Van Oyen'), ('Cricket', 'Manuel'), ('Claudia', 'Monteiro'), ('Christi', 'Turdo'), ('Barbara', 'Rossi'), ('Kylie', 'Copeland'), ('Simonetta', 'Bozzano'), ('Julie', 'Walther'), ('Joy', 'Tacon'), ('Linda', 'Siegel'), ('Lena', 'Sandin'), ('Myke', 'Loomis'), ('Heather', 'Ludloff'), ('Beverly', 'Corbie'), ('Hillery', 'Royer'), ('Carol', 'Watson'), ('Chris', 'Payne'), ('Heather', 'Crowe'), ('Eun Sook', 'Han'), ('Helga', 'Lutten'), ('Lone', 'Vandborg'), ('Mary Lou', 'Daniels'), ('Hyacinth', 'Yorke'), ('Pirjo', 'Ojala'), ('Soo Ok', 'Kim'), ('Marianne', 'Van Der Torre'), ('Susan', 'Rollinson'), ('Angel', 'Cobbs'), ('Louise', 'Tuff'), ('Kathleen', 'Cummings'), ('Nicole', 'Lorenzetti'), ('Christiane', 'Jolissaint'), ('Jacquie', 'Dobson'), ('Anne', 'White'), ('Jaime', 'Kaplan'), ('Nancy', 'Loeffler Caro'), ('Patricia', 'Hermeda'), ('Patricia', 'Alvarenga'), ('Karen', 'Smith'), ('Sri', 'Utaminingsih'), ('Tracy', 'Houk'), ('Barbara', 'Potter'), ('Andrea', 'Pesak'), ('Ingrid', 'Sommerauer'), ('Diane', 'Farrell'), ('Lisa', 'Dunner'), ('Blanca', 'Borbolla'), ('Claudia', 'Van Der Weck'), ('Caren', 'Schindler'), ('Susan', 'Pendo'), ('Felicia', 'Raschiatore'), ('Brenda', 'Catton'), ('Louise', 'Allen'), ('Christine', 'Lukalo'), ('Lisa', 'Seemann'), ('Malgorzata', 'Sieradzka'), ('Marina', 'Kondova'), ('Sriningdiah', 'Sutarniati'), ('Jennifer', 'Mundel'), ('Jillian', 'Muller'), ('Jamie', 'Golder'), ('Jane', 'Forman'), ('Mary', 'Dailey'), ('Emmanuelle', 'Folcher'), ('Jeom Re', 'Park'), ('Pia', 'Tamayo'), ('Julie', 'Harrington'), ('Dorota', 'Dziekonska'), ('Hana', 'Mandlikova'), ('Xiao Yu', 'Zhu'), ('Elise', 'Burgin'), ('Olga', 'Zaitseva'), ('Beverly', 'Mould'), ('Florence', 'Gauvain'), ('Patrizia', 'Murgo'), ('Susie', 'Jaeger'), ('Jacqueline', 'Geller'), ('Gloria', 'Escobar'), ('Nanette', 'Schutte'), ('Natalia', 'Leipus'), ('Kelly', 'Henry'), ('Eun Ok', 'Cho'), ('Linda', 'Cassell'), ('Jennifer', 'Goodling'), ('Linley', 'Tanner'), ('Mesenbete', 'Shenkutee'), ('Judy', 'Newman'), ('Isabel', 'Moure'), ('Ni', 'Zhong'), ('Chongrak', 'Sri Ud'), ('Debbie', 'Freeman'), ('Carol', 'Neeld Lang'), ('Liliana', 'Fernandez'), ('Dee Ann', 'Hansel'), ('Xin Yi', 'Li'), ('Li Lan', 'Duan'), ('Pam', 'Shriver'), ('Ilse', 'De Ruysscher'), ('Lisa', 'Spain Short'), ('Caitriona', 'Ruane'), ('Debbie', 'Robb'), ('Carin', 'Bakkum'), ('Nora', 'Bajchikova'), ('Lindsay', 'Bartlett'), ('Kate', 'Brasher'), ('Maluca', 'Llamas'), ('Susan', 'Leo'), ('Maria Elena', 'Ruiz'), ('Chiu Mei', 'Ho'), ('Mari Carmen', 'Espinosa'), ('Karen', 'Dewis'), ('Sylvia', 'Vay'), ('Vicki', 'Nelson Dunbar'), ('Joy', 'Cummings'), ('Svetlana', 'Cherneva'), ('Carol', 'Christian'), ('Christina', 'Rozwadowski'), ('Eve', 'Zimmerman'), ('Luciana', 'Alfaro'), ('Anne', 'Happonen'), ('Jo', 'Griffiths'), ('Laura', 'Murgo'), ('Sally Anne', 'Mcdonald'), ('Isabelle', 'Villiger'), ('Irma', 'Novakova Spurny'), ('Kathrin', 'Keil'), ('Germaine', 'Ohaco'), ('Tracy', 'Austin'), ('Stina', 'Almgren'), ('Ginette', 'Kaempf'), ('Ginette', 'Huberty'), ('Karla', 'Umana'), ('Raquel', 'Contreras'), ('Kate', 'Gompert'), ('Linda', 'Stewart'), ('Alita', 'Rumsey'), ('Michaela', 'Pazderova'), ('Jane', 'Jarosz'), ('Helen', 'Asciak'), ('Li Chuan', 'Hsieh'), ('Molly', 'Mcgrath'), ('Asa', 'Flodin'), ('Catrin', 'Jexell'), ('Marlene', 'De Wouters'), ('Lisa', 'Sassano'), ('Lisa', 'Pennington'), ('King See', 'Lee'), ('Maria', 'Lindstrom'), ('Karla', 'Lehnoff'), ('Sylma', 'Phillip'), ('Lily', 'Aguirre'), ('Laura', 'Bernstein'), ('Sadia', 'Berthe Hoffman'), ('Anne', 'Minter'), ('Liz', 'Smylie'), ('Ruth', 'Seeman'), ('Hu', 'Na'), ('Anne', 'Moller'), ('Nadine', 'Schmit'), ('Karin', 'Hinterwirth'), ('Pilar', 'Vasquez'), ('Barbara', 'Pollet'), ('Berit', 'Bjork'), ('Anneli', 'Bjork'), ('Sylvie', 'Tetreault'), ('Claudia', 'Pasquale'), ('Virginia', 'Oteiza'), ('Jamie', 'Pisarcik'), ('Sylvie', 'Gardette'), ('Adriana', 'Velcheva'), ('Lisa', 'Lusteg'), ('Natasha', 'Piskakova'), ('Ionita', 'Nesti'), ('Jan', 'Martin'), ('Clare', 'Thompson'), ('Bettina', 'Bunge'), ('Catarina', 'Lindqvist Ryan'), ('Shelley', 'Solomon'), ('June', 'Ferestein'), ('Cecilia', 'Fernandez Parker'), ('Pamela', 'Jung'), ('Cheryl', 'Lewis'), ('Karen', 'Buchholz'), ('Julia', 'Kashevarova'), ('Elizabeth', 'Burger'), ('Ann', 'Gabriel'), ('Genevieve', 'Greiwe'), ('Hatsuhi', 'Isowa'), ('Kazuko', 'Ito'), ('Hsiu Tsuan', 'Wen'), ('Ana', 'Almansa'), ('Lise', 'Gregory'), ('Karin', 'Stampfli'), ('Bonnie', 'Gadusek'), ('Carina', 'Karlsson'), ('Corinne', 'Vanier'), ('Jacinta', 'Ayers'), ('Kathy', 'Holton'), ('Allyson', 'Ingram'), ('Erika', 'Smith'), ('Begonia', 'Erana'), ('Linda', 'Howell'), ('Sophie', 'Amiach'), ('Elizabeth', 'Cameron'), ('Liza', 'Riefkohl'), ('Lynn', 'Lewis'), ('Zina', 'Garrison'), ('Ivana', 'Jankovska'), ('Shelley', 'Aguero'), ('Suzanna', 'Anggarkusuma'), ('Yan', 'Sun'), ('Miranda', 'Yates'), ('Robin', 'White'), ('Claudia', 'Kohde Kilsch'), ('Hiromi', 'Yoshihara'), ('Lori', 'Mcneil'), ('Rebecca', 'Bryant'), ('Pam', 'Casale Telford'), ('Karina', 'Heck'), ('Robyn', 'Lamb'), ('Jackie', 'Joseph'), ('Leigh Anne', 'Thompson'), ('Adriana', 'Florido'), ('Laura', 'Gildemeister'), ('Marie Christine', 'Calleja'), ('Andrea', 'Leand'), ('Jackie', 'Castillejo'), ('Sylvia', 'Schenck'), ('Qin Di', 'Weng'), ('Sherri', 'Norris'), ('Sharon', 'Norgren'), ('Cristina', 'Wallis'), ('Tita', 'Zea'), ('Gretchen', 'Magers'), ('Hana', 'Fukarkova'), ('Britta', 'Schneider'), ('Gigi', 'Fernandez'), ('Annette', 'Gulley'), ('Astrid', 'Sunde'), ('Anita', 'Aggarwal'), ('Kelly', 'Holland'), ('Sharon', 'Hodgkin'), ('Karen', 'Huebner'), ('Cynthia', 'Macgregor'), ('Collette', 'Oreilly'), ('Elizabeth', 'Jones'), ('Marisa', 'Sanchez Vicario'), ('Eun Sook', 'Huang'), ('Manon', 'Bollegraf'), ('Penny', 'Barg Mager'), ('Molly', 'Ulvin'), ('Wendy', 'Wood'), ('Liz', 'Wachter'), ('Sue', 'Hatch'), ('Mayumi', 'Yamada'), ('Cheryl', 'Jones'), ('Heidi', 'Rosenbaum'), ('Sara', 'Gomer'), ('Isabel', 'Casso'), ('Diane', 'Craig'), ('Kjersti', 'Jensen'), ('Catherine', 'Berry'), ('Beth', 'Herr'), ('Socorro', 'Trumpeta'), ('Renata', 'Sasak'), ('Denise', 'Panagopoulou'), ('Therese', 'Arildsen'), ('Susan', 'Mascarin'), ('Carol', 'Bertrand'), ('Barbara', 'Gerken'), ('Sally', 'Reeves'), ('Isabelle', 'Vernhes'), ('Heliane', 'Steden'), ('Maya', 'Hajjar'), ('Fiona', 'Martin'), ('Rene', 'Uys'), ('Becky', 'Brown'), ('Lisa', 'Bobby'), ('Nancy', 'Arendt'), ('Julia', 'Apostoli'), ('Marlene', 'Zuleta'), ('Frederique', 'Mauger'), ('Jill', 'Smoller'), ('Klaartje', 'Van Baarle'), ('Barbi', 'Bramblett'), ('Rafeket', 'Binyamini'), ('Orly', 'Bialistozky'), ('Millie', 'Didio'), ('Etsuko', 'Inoue'), ('Nicola', 'Lusty'), ('Jill', 'Hetherington'), ('Jackie', 'Van Wijk'), ('Shari', 'Bucklin'), ('Kathy', 'Foxworth'), ('Maeve', 'Quinlan'), ('Monica', 'Weber'), ('Vicki', 'Marler'), ('Kim', 'Cartwright'), ('Andrea', 'Tiezzi'), ('Simone', 'Vasconcellos Calves'), ('Daniela', 'Moise'), ('Immaculada', 'Varas Caro'), ('Katherine', 'Camilleri'), ('Angela', 'Farley Wilson'), ('Leigh Anne', 'Eldredge'), ('Emiko', 'Okagawa'), ('Emiko', 'Sakaguchi'), ('Helena', 'Olsson'), ('Stephanie', 'Sipe'), ('Barbara', 'Romano'), ('Jeanette', 'Gomez'), ('Svetlana', 'Sinitsyna'), ('Silvana', 'Casaretto'), ('Stephanie', 'Savides'), ('Rina', 'Caniza'), ('Kumiko', 'Okamoto'), ('Melissa', 'Nodvin'), ('Jeong Ok', 'Choi'), ('Marilda', 'Julia'), ('Helena', 'Sukova'), ('Lorena', 'Sandoval'), ('Renata', 'Baranski'), ('Renata', 'Marcinkowska'), ('Sandra', 'Cecchini'), ('Catherine', 'Bonnet'), ('Akemi', 'Nishiya'), ('Masako', 'Nishina'), ('Molly', 'Van Nostrand'), ('Fiona', 'Keasberry'), ('Rhona', 'Howett'), ('Maria Jose', 'Paniagua'), ('Helene', 'Cedet'), ('Petra', 'Keppeler'), ('Judith', 'Warringa'), ('Susanne', 'Schmid'), ('Rina', 'Einy'), ('Lori', 'Kosten'), ('Patty', 'Fendick'), ('Annelie', 'Bjork'), ('Terri', 'Gaskill'), ('Amy', 'Holton'), ('Haruko', 'Shigekawa'), ('Jenny', 'Klitch'), ('Shelley', 'Bartlett'), ('Carmela', 'Vitali'), ('Sagit', 'Doron'), ('Amanda', 'Brown'), ('Monty', 'Morrison'), ('Kim', 'Simmons'), ('Miki', 'Mizokuchi'), ('Belkis', 'Rodriguez'), ('Lilian', 'Kelaidis'), ('Anne', 'Chevalier'), ('Maija', 'Suonpaa'), ('Martina', 'Reinhardt'), ('Catherine', 'Tanvier'), ('Jane', 'Young'), ('Sabrina', 'Goles'), ('Andrea', 'Jaeger'), ('Marianne', 'Groat'), ('Jane', 'Porfirio'), ('Gretchen', 'Doninger'), ('Diane', 'Donnelly'), ('Jennifer', 'Thornton'), ('Julie', 'Salmon'), ('Mal Sim', 'Park'), ('Lucila', 'Becerra'), ('Urmi', 'Negi'), ('Reeka', 'Szikszay'), ('Wei', 'Hua'), ('Ruth', 'Sverdloff'), ('Natasha', 'Reva'), ('Andrea', 'Muller'), ('Natalia', 'Riva'), ('Patricia', 'Hy Boulais'), ('Elizabeth', 'Minter'), ('Kathy', 'Horvath'), ('Naoko', 'Kinoshita'), ('Yvette', 'Flu'), ('Beverly', 'Bowes Hackney'), ('Monica', 'Kowalewski'), ('Dyan', 'Castillejo'), ('Shelly', 'Walpole'), ('Belinda', 'Cordwell'), ('Elizabeth', 'Daly'), ('Karin', 'Dallwitz'), ('Liz', 'Finlayson'), ('Bernadette', 'Randall'), ('Dena', 'Levy'), ('Emiko', 'Takahashi'), ('Marta', 'Varanda'), ('Margarita', 'Vaquero'), ('Tammy', 'Whittington'), ('Lisa', 'Bonder Kreiss'), ('Yvonne', 'Der Kinderen'), ('Ann', 'Hulbert'), ('Sobhini', 'De Silva'), ('Lesley', 'OHalloran'), ('Andrea', 'Ritecz'), ('Jean Marie', 'Sterling'), ('Jana', 'Koran'), ('Mary', 'Stevens'), ('Susan', 'Russo'), ('Joni', 'Urban'), ('Raffaella', 'Reggi Concato'), ('Caroline', 'Hagey'), ('Debbie', 'Ladig'), ('Lorrie', 'Major'), ('Angelika', 'Kanellopoulou'), ('Maricela', 'Morales'), ('Heidi', 'Narborough'), ('Tamaka', 'Takagi'), ('Ilana', 'Berger'), ('Ku Maizan', 'Shak'), ('Hemel', 'Meghani'), ('Rosa', 'Bielsa Hierro'), ('Ann', 'Ehrmann'), ('Masako', 'Morikawa'), ('Linda', 'Ferrando'), ('Sarah', 'Sullivan'), ('Rene', 'Collins'), ('Eva', 'Krapl'), ('Anna', 'Ivan'), ('Angela', 'Longo'), ('Claudia', 'Hernandez Salas'), ('Luciana', 'Corsato Owsianka'), ('Ivonne', 'Lorher'), ('Sook Ja', 'Im'), ('Elizma', 'Nortje'), ('Teresa', 'Dobson'), ('Lisa', 'Lillemoe'), ('Anne', 'Grousbeck'), ('Claudia', 'Borgiani'), ('Marianna', 'Ansio'), ('Petra', 'Huber'), ('Dai Hwa', 'Wang'), ('Kilmeny', 'Waterman'), ('Michaela', 'Washington'), ('Judith', 'Wiesner'), ('Tine', 'Scheuer Larsen'), ('Ralene', 'Fourie'), ('Alice', 'Danila'), ('Carin', 'Anderholm'), ('Kim', 'Staunton'), ('Jane', 'Thomas'), ('Nathalie', 'Herreman'), ('Csilla', 'Cserepy'), ('Susanna', 'Lee'), ('Elizabeth', 'Alexander'), ('Renata', 'Skrzypczynska'), ('Sarit', 'Shalev'), ('Maria Antonietta', 'Trupia'), ('Pascale', 'Paradis Mangon'), ('Andrea', 'Temesvari'), ('Myriam', 'Schropp'), ('Catherine', 'Odea'), ('Mary', 'Norwood'), ('Ronni', 'Reis'), ('Silvana', 'Campos'), ('Rita', 'Winebarger'), ('Shu Shin', 'Kam'), ('Lourdes', 'Manulat'), ('Rene', 'Mentz'), ('Karolina', 'Karlsson'), ('Camille', 'Benjamin'), ('Pascale', 'Etchemendy'), ('Michele', 'Wreem'), ('Siobhan', 'Nicholson'), ('Veronica', 'Platz'), ('Jennifer', 'Prah'), ('Silvia', 'Ludorf'), ('Shonette', 'Wilson'), ('Elena', 'Guerra'), ('Mercedes', 'Paz'), ('Robyn', 'Field'), ('Kathleen', 'Schuurmans'), ('Andrea', 'Betzner'), ('Olga', 'Votavova'), ('Colette', 'Sely'), ('Gabriela', 'Castro'), ('Annabel', 'Croft'), ('Stefania', 'Dalla Valle'), ('Tory', 'Plunkett'), ('Anne Marie', 'Walson'), ('Larisa', 'Savchenko'), ('Merike', 'Stamberg'), ('Mei Chu', 'Hsu'), ('Allison', 'Cooper'), ('Claire', 'Pollard'), ('Michelle', 'Garth'), ('Miriam', 'Ponce De Leon'), ('Lynn', 'Henderson'), ('Vincenza', 'Procacci'), ('Caroline', 'Kuhlman'), ('Vanya', 'Kelleher'), ('Leslie', 'Hakala'), ('Valerie', 'Ledroff'), ('Natalia', 'Egorova'), ('Maria Marta', 'Gallinal'), ('Isabelle', 'Demongeot'), ('Sharon', 'Mcnamara'), ('Lucia', 'Peria'), ('Monica', 'Reinach'), ('Sabine', 'Krein Auer'), ('Annika', 'Karlsson'), ('Maria Josefina', 'Rojo'), ('Stephanie', 'Givens'), ('Lynn', 'Nabors'), ('Michelle', 'Parun'), ('Cackie', 'Germic'), ('Belinda', 'Borneo'), ('Cornelia', 'Lechner'), ('Ginny', 'Purdy'), ('Eileen', 'Tell'), ('Neige', 'Dias'), ('Monica', 'Munoz'), ('Maria Christine', 'Damas'), ('Terry', 'Phelps'), ('Maria Ines', 'Leal'), ('Jane', 'Holden'), ('Nora', 'Kovarcikova'), ('Jennifer', 'Larking Dawson'), ('Beate', 'Knauber'), ('Agnes', 'Lempereur'), ('Edna', 'Olivarez'), ('Colleen', 'Carney'), ('Su Lin', 'Lai'), ('Masami', 'Nakai'), ('Nicole', 'Simon'), ('Silvia', 'Batista'), ('Manuela', 'Maleeva Fragniere'), ('Annette', 'Singer'), ('Jenny', 'Byrne'), ('Louise', 'Field'), ('Philippa', 'Palmer'), ('Amanda', 'Grunfeld'), ('Magdalena', 'Wiese'), ('Celine', 'Cohen'), ('Carrie Lynn', 'Cohen'), ('Araceli', 'Montero'), ('Kathy', 'Rinaldi Stunkel'), ('Tessa', 'Price'), ('Julie', 'Richardson'), ('Nathalie', 'Phan Thanh'), ('Janet', 'Craig'), ('Yasuyo', 'Kajita'), ('Simone', 'Schilder'), ('Irina', 'Zvereva'), ('Monica', 'Lundqvist'), ('Fukiko', 'Osawa'), ('Monika', 'Lundqvist'), ('Viktoria', 'Milvidskaia'), ('Lydie', 'Van Hille'), ('Sonia', 'Tiberi'), ('Joanne', 'Louis'), ('Anke', 'Marchl'), ('Lupita', 'Novelo'), ('Nathalie', 'Ballet'), ('Pauline', 'Chan'), ('Virginie', 'Paquet'), ('Aida', 'Khalatian'), ('Monika', 'Waniek'), ('Anna Karin', 'Olsson'), ('Fatima', 'Santiago'), ('Laura', 'Glitz'), ('Beate', 'Reinstadler'), ('Laura', 'Falconieri'), ('Karen', 'Schimper'), ('Lisa', 'Gould'), ('Shannon', 'Gordon'), ('Kellie', 'Dorman Tyrone'), ('Josephine', 'Paguyo'), ('Amy', 'Jonsson Raaholt'), ('Reka', 'Monoki'), ('Lukky', 'Tedjamukti'), ('Alice', 'Nohacova'), ('Juliet', 'Drew'), ('Louise', 'Pleming'), ('Jackie', 'Holden'), ('Michelle', 'Torres'), ('Caterina', 'Nozzoli'), ('Kaja', 'Kond'), ('Jennifer', 'Fuchs'), ('Loretta', 'Sheales'), ('Hester', 'Witvoet'), ('Ledna', 'Martin'), ('Caroline', 'Billingham'), ('Anne', 'Aallonen'), ('Monique', 'Javer'), ('Nicole', 'Krijger Jagerman'), ('Ana Luiza', 'Alencar'), ('Debbie', 'Spence Nasim'), ('Digna', 'Ketelaar'), ('Christine', 'Iandolo'), ('Chris Anne', 'Aston'), ('Ann', 'Stephenson'), ('Sonya', 'Hahn'), ('Florentina', 'Curpene'), ('Linda', 'Harley'), ('Dora', 'Rangelova'), ('Kathy', 'Hofer'), ('Jeong Myung', 'Lee'), ('Ei', 'Iida'), ('Kim', 'Labuschagne'), ('Janine', 'Tremelling'), ('Lilia Carla', 'Azevedo'), ('Ingelise', 'Driehuis'), ('Cynthia', 'Mitchell'), ('Michelle', 'Turk'), ('Ewa', 'Zerdecka'), ('Ana', 'Larrakoetxea'), ('Claire', 'Wegink'), ('Alejandra', 'Perez Jimenez'), ('Annette', 'Gerber'), ('Mariana', 'Perez Roldan'), ('Clare', 'Evert'), ('Carling', 'Bassett Seguso'), ('Simona', 'Isidori'), ('Jill', 'Waldman'), ('Nathalie', 'Tauziat'), ('Marianne', 'Werdel Witmeyer'), ('Amanda', 'Tate'), ('Kirsty', 'Wenzel'), ('Yvonne', 'Klompenhouver'), ('Myriam', 'Berthe'), ('Jean Marie', 'Lozano'), ('Eleni', 'Rossides'), ('Nahia', 'Abou Khalil'), ('Silvia', 'La Fratta'), ('Laura', 'Garrone'), ('Federica', 'Bonsignori'), ('Janet', 'Souto Garcia'), ('Maite', 'Martinez Perez'), ('Karmen', 'Skulj'), ('Suzie', 'Mair'), ('Atsuko', 'Shima'), ('Laura', 'Golarsa'), ('Betsy', 'Somerville'), ('Katrina', 'Crawford'), ('Karen', 'Fodera'), ('Alissa', 'Finerman'), ('Milena', 'Leiva'), ('Tracey', 'Morton Rodgers'), ('Jane', 'Morro'), ('Shawn', 'Foltz'), ('Denisa', 'Kristofova'), ('Stine', 'Vogt Andersen'), ('Leila', 'Meskhi'), ('Sohini', 'Kumari'), ('Anna', 'Benzon'), ('Su Jen', 'Lai'), ('Andrea', 'Holikova'), ('Regina', 'Wieser'), ('Laurence', 'Garcia Clement'), ('Patty', 'Oreilly'), ('Christine', 'Oreilly'), ('Terri', 'Oreilly'), ('Kersten', 'Renneissen'), ('Kristina', 'Grunberg'), ('Claudia', 'Inchanstegui'), ('Regina', 'Rajchrtova'), ('Yu Yu', 'Zhu'), ('Alison', 'Scott'), ('Adriana', 'Sandoval'), ('Henrietta', 'Harris'), ('Fang Ling', 'Lin'), ('Lisa', 'Weerasekera'), ('Cristina', 'Casini'), ('Dianne', 'Van Rensburg'), ('Isabelle', 'Crudo'), ('Fiona', 'Long'), ('Mi Jeong', 'Lee'), ('Clare', 'Wood'), ('Elizabeth', 'Gibson'), ('Pascalle', 'Druyts'), ('Karin', 'Oberleitner'), ('Chanrisa', 'Rareang'), ('Stacey', 'Schefflin'), ('Jane', 'Wood'), ('Yoshiko', 'Wauke'), ('Jenny', 'Reeves'), ('Jillian', 'Alexander Brower'), ('Caroline', 'Bhaguandas'), ('Dina', 'Basil'), ('I Jin', 'Chew'), ('Diana', 'Valenti'), ('Mayuko', 'Ebina'), ('Melissa', 'Brown'), ('Justine', 'Brown'), ('Grace', 'Kim'), ('Adriana', 'Isaza'), ('Akiko', 'Kijimuta'), ('Yael', 'Shavit'), ('Madeline', 'Sanchez'), ('Helena', 'Dahlstrom'), ('Eugenia', 'Maniokova'), ('Shandra', 'Livingston'), ('Tanya', 'Soemarno'), ('Mi Ae', 'Sohn'), ('Lisa', 'Harding'), ('Dorothy Jane', 'Suarez'), ('Jackie', 'Masters'), ('Kerry', 'Kendrick'), ('Claudia', 'Piccini'), ('Happy', 'Ho'), ('Jodi', 'Saunders'), ('Luciene', 'Sapienza Muro'), ('Olga', 'Tsarbopoulou'), ('Hellas', 'Ter Riet'), ('Cecille', 'Calmette'), ('Karen', 'Shin'), ('Nathalie', 'Guerree Spitzer'), ('Annette', 'Patchen'), ('Silke', 'Meier'), ('Mimouschka', 'Kion'), ('Jeom Sang', 'Choi'), ('Wendy', 'Ouwendijk'), ('In Sook', 'Park'), ('Lisa', 'Green'), ('Grazia', 'Greco'), ('Cecilia', 'Dahlman'), ('Carol', 'Cassar Torreggiani'), ('Christina', 'Singer'), ('Nicolette', 'Rooimans'), ('Marielle', 'Rooimans'), ('Nathalie', 'Housset Gilbert'), ('Katrina', 'Adams'), ('Paola', 'Voli'), ('Patricia', 'Tarabini'), ('Lisa', 'Oneill'), ('Maria Jose', 'Olave'), ('Linda', 'Barnard'), ('Yan Ling', 'Li'), ('Laura', 'Liong'), ('Agustina', 'Wibisono'), ('Augustina', 'Wibisono'), ('Voralak', 'Vichienchai'), ('Tania', 'Zaitouni'), ('Sabrina', 'Lucchi'), ('Gisele', 'Faria'), ('Julie', 'De Armond'), ('Katie', 'Rickett'), ('Elizabeth', 'Galphin'), ('Karen', 'Hunter'), ('Jolene', 'Watanabe Giltz'), ('Adrienne', 'Green'), ('Edith', 'Tatana'), ('Sarah', 'Mitten'), ('Karin', 'Kschwendt'), ('Ginger', 'Helgeson Nielsen'), ('Paulina', 'Sepulveda'), ('Allison', 'Tolson'), ('Xochitl', 'Escobedo'), ('Lettica', 'Venter'), ('Suzanne', 'White'), ('Norzahara', 'Zainal'), ('Dagmar', 'Schafer'), ('Teodora', 'Tache'), ('Kerri', 'Reiter'), ('Titia', 'Wilmink'), ('Wendy', 'Nelson'), ('Eun Young', 'Kim'), ('Jana', 'Novotna'), ('Kaye', 'Marfini Hand'), ('Amy', 'De Lone'), ('Marlene', 'Chumbez'), ('Cammy', 'Macgregor'), ('Valda', 'Lake'), ('Petra', 'Holubova'), ('Denisa', 'Krajcovicova'), ('Nozelina', 'Lukeman'), ('Bettina', 'Fulco Villella'), ('Lorenza', 'Jachia'), ('Tossaporn', 'Summa'), ('Karen', 'Deed'), ('Gisele', 'Miro'), ('Heike', 'Thoms'), ('Katrina', 'Greenman'), ('Yuko', 'Hosoki'), ('Tami', 'Whitlinger Jones'), ('Claudia', 'Porwik'), ('Xanthe', 'Adams'), ('Kana', 'Hatakeyama'), ('Denisa', 'Szabova'), ('Sylvie', 'Baccarani'), ('Elna', 'Reinach'), ('Isabel', 'Cueto'), ('Ninoska', 'Souto'), ('Henriette', 'Gemer'), ('Laura', 'Hudson'), ('Christiane', 'Hofmann'), ('Shaun', 'Stafford'), ('Amy', 'Alcini'), ('Anabella', 'Radics'), ('Carla', 'Bazzon'), ('Tara', 'Collins'), ('Heidi', 'Sprung'), ('Sylvie', 'Metlef'), ('Katarzyna', 'Nowak'), ('Jennifer', 'Saberon'), ('Ayako', 'Hirose'), ('Katrin', 'Scheer'), ('Il Soon', 'Kim'), ('Genevieve', 'Dwyer'), ('Paulette', 'Roux'), ('Frederique', 'Martin'), ('Flora', 'Perfetti'), ('Simona', 'Dandrea'), ('Sally', 'Godman'), ('Kay', 'Louthian'), ('Julie', 'Scott'), ('Trisha', 'Laux'), ('Donna', 'Millington'), ('Ana Maria', 'Segura Perez'), ('Tracey', 'Moyle'), ('Andrea', 'Martinelli'), ('Isabela', 'Listowska'), ('Rachel', 'Gale'), ('Susannah', 'Dart'), ('Teresa', 'Edgar'), ('Cecile', 'Bourdais'), ('Anya', 'Kochoff'), ('Marie', 'Croin'), ('Jennifer', 'Santrock'), ('Malin', 'Nilsson'), ('Cristina', 'Cavina'), ('Tanya', 'Stasiuk'), ('Danielle', 'Jones'), ('Stella', 'Sampras'), ('Agnes', 'Romand'), ('Cornelia', 'Marty'), ('Hijiri', 'Nakazaka'), ('Paulette', 'Moreno'), ('Tessa', 'Shapovalova'), ('Emilie', 'Viqueira'), ('Kirsten', 'Dreyer'), ('Renata', 'Smekalova'), ('Esmir', 'Hoogendoorn'), ('Anne', 'Meredith'), ('Astrid', 'Ruhr'), ('Sally', 'McCann'), ('Elvira', 'Yussupova'), ('Miyako', 'Ataka'), ('Maria Elena', 'Gittens'), ('Alison', 'Fleming'), ('Niurka', 'Sodupe'), ('Elena', 'Ordinaga'), ('Alexia', 'Gera'), ('Julie', 'Coles'), ('Sally', 'Mccann'), ('Danila', 'Imbriani'), ('Claudia', 'Faillace'), ('Linda', 'Allred'), ('Vera Carina', 'Elter'), ('Susan', 'Gadroen'), ('Michelle', 'Jaggard Lai'), ('Fumiko', 'Yamazaki'), ('Katerina', 'Maleeva'), ('Shannon', 'Peters'), ('Alexia Llysel', 'Marquez'), ('Stephanie', 'Faulkner'), ('Andrea', 'Vopat'), ('Maya', 'Kidowaki'), ('Roberta', 'Caldas'), ('Amy', 'Van Buuren'), ('Wendy', 'Frazer'), ('Marina', 'Bottazzi'), ('Wiltrud', 'Probst'), ('Andrea', 'Kohrt'), ('Florea De Maria', 'Urrea'), ('Hana', 'Adamkova Guy'), ('Mahela', 'Gartner Ockernahl'), ('Steffi', 'Graf'), ('Melissa', 'Gurney'), ('Natalie', 'Rodriguez'), ('Pauline', 'Rodriguez'), ('Amy', 'Dillingham'), ('Sheri', 'Yandle'), ('Birgit', 'Dopfer'), ('Li Hua', 'Yang'), ('Louise', 'Wekesa'), ('Rona', 'Daniels'), ('Eva Lena', 'Olsson'), ('Sabine', 'Hack'), ('Lorna May', 'Lewis'), ('Jennifer', 'Young'), ('Lisa', 'Keller'), ('Erica', 'Adams'), ('Jonna', 'Jonerup'), ('Aila', 'Winkler'), ('Sally', 'Timms'), ('Chris Lynne', 'Kuhlke'), ('Zelda', 'Kuhn'), ('Halle', 'Cioffi'), ('Petra', 'Thoren'), ('Holly', 'Danforth'), ('Gabriela', 'Mosca'), ('Susan', 'King'), ('Giovanna', 'Carotenuto'), ('Maria', 'Strandlund Tomsvik'), ('Gail', 'Boon'), ('Stephanie', 'London'), ('Heike', 'Roloff'), ('Virginie', 'Buisson'), ('Tonya', 'Evans'), ('Elly', 'Hakami'), ('Carolina', 'Espinoza'), ('Nicole', 'Arendt'), ('Antonia', 'Homolya'), ('Amy', 'Schwartz'), ('Sandra', 'Birch'), ('Federica', 'Lentini'), ('Kristi', 'Bastian'), ('Liliana', 'Rodriguez'), ('Nicole', 'Bradtke'), ('Yeon Sook', 'Kim'), ('Silvia', 'Freye Steur'), ('Evelyn', 'Larwig'), ('Renate', 'Wachtler'), ('Mandy', 'Wilson'), ('Caroline', 'Delisle'), ('Daniela', 'Ivana'), ('Jin', 'Choi'), ('Valerie', 'Batut'), ('Sybille', 'Niox Chateau'), ('Karine', 'Quentrec'), ('Donna', 'Littleton'), ('Jamie', 'Henikoff'), ('Irawati', 'Moerid'), ('Irawati', 'Iskandar'), ('Karim', 'Strohmeier Merino'), ('Cecilia', 'Bargagni'), ('Stephanie', 'Rehe'), ('Dalia', 'Koriat'), ('Cornelia', 'Grunes'), ('Tonya', 'Fuller'), ('Helen', 'Kelesi'), ('Paula', 'Parentich'), ('Pilar', 'Santibanez Gomez Ull'), ('Gaby', 'Coorengel'), ('Monica', 'Wiese'), ('Ivonne', 'Sonderegger'), ('Ya Hui', 'Lin'), ('Martina', 'Pawlik'), ('Eva Maria', 'Schurhoff'), ('Rita', 'Kowacsics'), ('Michelle', 'Beadman'), ('Martha', 'Garzon Elkins'), ('Mayuko', 'Koshiba'), ('Jennifer', 'Obrien'), ('Caroline', 'Bodart'), ('Gisela', 'Quental'), ('Marianne', 'Colon'), ('Linda', 'Gates'), ('Luciana', 'Tella'), ('Sandra', 'Bernal'), ('Henriette', 'Kjaer Nielsen'), ('Andrea', 'Noszaly'), ('Laurence', 'Bois'), ('Denia', 'Salu'), ('Sarah', 'Rafael'), ('Helen', 'Odea'), ('Andrea', 'Berger'), ('Lorena', 'Rodriguez Di Laura'), ('Cora', 'Linneman'), ('Maria', 'Ekstrand'), ('Amanda', 'Gesualdi'), ('Alice', 'Lamport'), ('Bettina', 'Diesner'), ('Ying', 'Bi'), ('Susie', 'Scott'), ('Paula', 'Iversen'), ('Eva', 'Melicharova'), ('Corinne', 'Bousmans'), ('Ann', 'Devries'), ('Claudine', 'Toleafoa'), ('Maria', 'Capistrano Bjorklund'), ('Ning', 'Lin'), ('Corinne Marie', 'Demey Bousm'), ('Kristine', 'Kunce'), ('Maria Jose', 'Llorca'), ('Maria Elena', 'Llamas'), ('Caroline', 'Vis'), ('Sylvia', 'Stefkova'), ('Sandra', 'Wasserman'), ('Helen', 'Jonsson'), ('Amanda', 'Gregory'), ('Monika', 'De Lenart'), ('Kate', 'Mcdonald'), ('Metamin', 'Sharijah'), ('Danielle', 'Scott'), ('Lisa', 'Kwok'), ('Jana', 'Pospisilova'), ('Ryoko', 'Yamaguchi'), ('Lisa', 'Albano'), ('Ingrid', 'Peltzer'), ('Kelly', 'Story'), ('Marie Jose', 'Llorca'), ('Barbara', 'Oddone'), ('Lindsay', 'Matthews'), ('Cathrin', 'Caspary'), ('Leona', 'Laskova'), ('Alison', 'Smith'), ('Hind', 'Tajeddine'), ('Rosa Maria', 'Llaneras'), ('Pascale', 'Welter'), ('Emanuela', 'Zardo'), ('Michelle', 'Strebel'), ('Stephanie', 'Reece'), ('Sylvia', 'Czopek'), ('Silvana Lorena', 'Celorio'), ('Emmanuelle', 'Derly'), ('Stela', 'Penciu'), ('Alexia', 'Dechaume Balleret'), ('Elba', 'Pinero'), ('Jorgelina', 'Moreno'), ('Ruth Ann', 'Escobedo'), ('Kim Trang', 'Nguyen'), ('Kylie', 'Johnson'), ('Jean', 'Ceniza'), ('Sabina', 'Pellas'), ('Nicole', 'Welte'), ('Cristina', 'Salvi'), ('Su Ying', 'Lai'), ('Gabriela', 'Sabatini'), ('Anissa', 'Groves'), ('Silvia Carina', 'Mazzeo Da Silva'), ('Maider', 'Laval'), ('Shannan', 'Mccarthy'), ('Nicole', 'Wagstaff'), ('Rita', 'Pichardo'), ('Sandra', 'Dopfer'), ('Orawan', 'Thampensri'), ('Sophie', 'Didelot'), ('Ayoola', 'Shelle'), ('Ayoola', 'Odiah'), ('Claire', 'Sessions Bailey'), ('Silke', 'Frankl'), ('Katalin', 'Darvas'), ('Ouarda', 'Bouchabou'), ('Yvette', 'Castillejo'), ('Catherine', 'Mothes Jobkel'), ('Rosa Maria', 'Peso Aldaz'), ('Nina', 'Erickson'), ('Zarina', 'Galvan'), ('Susan', 'Katzen'), ('Pascal', 'Engel'), ('Piret', 'Ilves'), ('Joanna', 'Rossi'), ('Vita', 'Kaminskiate'), ('Bong Soon', 'Choi'), ('Petra', 'Pichalova Langrova'), ('Anat', 'Varon'), ('Laura', 'Mannisto'), ('Nadja', 'Beik'), ('Michelle', 'Bowrey'), ('Su Chen', 'Lin'), ('Anja', 'Elsen'), ('Shiho', 'Okada'), ('Hye Jeong', 'Pyo'), ('Maria', 'Salsgard'), ('Gudrun', 'Levers'), ('Louise', 'Fitzgerald'), ('Maria Eugenia', 'Vento'), ('Louise', 'Venter'), ('Els', 'Callens'), ('Magdalena', 'Feistel'), ('Alexandra', 'Niepel'), ('Debbie', 'Graham'), ('Gail', 'Biggs'), ('Alessia', 'Vesuvio'), ('Ivana', 'Ratkovic'), ('Claudia', 'Brause'), ('Kateryna', 'Filyus'), ('Talina', 'Beiko'), ('Barbara', 'Paulus'), ('Marzia', 'Grossi'), ('Rosario', 'Barea De Lara'), ('Tania', 'Everoll'), ('Corina', 'Martinez Pastur'), ('Nanne', 'Dahlman'), ('Julie', 'Halard Decugis'), ('Laura', 'Lapi'), ('Karen', 'Losch'), ('Karen', 'Theck'), ('Jessica', 'Emmons'), ('Jane', 'Yates'), ('Michaela', 'Frimmelova'), ('Yumi', 'Kitano'), ('Agnes', 'Anwar'), ('Natasha', 'Marcucci'), ('Joanna', 'Meagher'), ('Kimiko', 'Date Krumm'), ('Rita', 'Degliesposti'), ('Hagit', 'Ohayon'), ('Renata', 'Della'), ('Gigi', 'Gonzalez'), ('Tanti', 'Trayono'), ('Mary', 'Innes'), ('Patricia', 'Valadas'), ('Ann', 'Wunderlich'), ('Anna', 'Mirza'), ('Alison', 'Hill'), ('Kathryn', 'Katibi'), ('Lori', 'Feingold'), ('Tunecia', 'Sheffield'), ('Ying', 'Wu'), ('Karen', 'Gallego'), ('Theresa', 'Anderson'), ('Leisa', 'Dunn'), ('Stacey', 'Martin'), ('Julia', 'Muir'), ('Paola', 'De Cunto'), ('Stefanie', 'Rehmke'), ('Deborah', 'Edelman'), ('Yayuk', 'Basuki'), ('Susan', 'Sloane Lundy'), ('Merete', 'Stockmann Balling'), ('Jeri', 'Ingram'), ('Dyphany', 'Wilkinson'), ('Tanja', 'Weigl'), ('Naoko', 'Kurimata'), ('Noelle', 'Porter'), ('Holly Ann', 'Lloyd'), ('Dorien', 'Wamelink'), ('Cammy', 'Foley'), ('Radomira', 'Zrubakova'), ('Caroline', 'Stassen'), ('Elaine', 'Gibrayl'), ('Brenda', 'Schultz Mccarthy'), ('Steffi', 'Menning'), ('Fiona', 'Reid'), ('Michaela', 'Kriebel'), ('Silvia', 'Correa'), ('Bilynda', 'Potter'), ('Jo Anne', 'Faull'), ('Zuzana', 'Witzova'), ('Diane', 'Mckeon'), ('Min', 'Tang'), ('Pretty', 'Marot'), ('Tracey', 'Hiete'), ('Kim', 'Brandford'), ('Simone', 'Hermann'), ('Alysia', 'May'), ('Rachel', 'King'), ('Varmila', 'Trneckova'), ('Andrea', 'Vieira'), ('Waya', 'Walalangi'), ('Mana', 'Endo'), ('Eun Ju', 'Han'), ('Susan', 'Sommerville'), ('Susan', 'Klingenberg'), ('Francesca', 'Romano'), ('Karla', 'Golfin'), ('Katja', 'Oeljeklaus'), ('Linda', 'Wild'), ('Lesley', 'Barbour'), ('Chrystalla', 'Tritti'), ('Naira', 'Santrosian'), ('Luciana', 'Della Casa'), ('Annalia', 'Dellorso'), ('Jenny', 'Whalen'), ('Roseann', 'Alva'), ('Celine', 'Menain'), ('Yukiko', 'Fukuzawa'), ('Stephanie', 'Mayorkis'), ('Samantha', 'Ewart'), ('Kerstin', 'Taube'), ('Li Ling', 'Chen'), ('Claudia', 'Chabalgoity'), ('Anne', 'Degioanni'), ('Anne', 'Larsen'), ('Magdalena', 'Simkova'), ('Mariaan', 'De Swardt'), ('Susheel', 'Gulati'), ('Cristina', 'Beber'), ('Maureen', 'Drake'), ('Angie', 'Ealy'), ('Tomoko', 'Ishida'), ('Jing', 'Sung'), ('Rennae', 'Stubbs'), ('Monica', 'Aguero'), ('Reiko', 'Noguchi'), ('Dewi', 'Fortuna'), ('Laurence', 'Neuville'), ('Kirsten', 'Moeller'), ('Yuko', 'Miyajima'), ('Andrea', 'Paredes'), ('Agnese', 'Gustmane'), ('Katja', 'Kokko'), ('Nana', 'Smith'), ('Tanja', 'Cerne'), ('Cinda', 'Gurney'), ('Susan', 'Gilchrist'), ('Vanessa', 'Erlan'), ('Ingrid', 'Gonzalez'), ('Sandrine', 'Jaquet'), ('Mirijam', 'Schweda'), ('Natalia', 'Zvereva'), ('Yumiko', 'Kitamura'), ('Vlasta', 'Dammova'), ('Margarita', 'Andonegui'), ('Anjy', 'Fahmy'), ('Meredith', 'Mcgrath'), ('Kim', 'Grant'), ('Margherita', 'Naso'), ('Tomoko', 'Tazawa'), ('Robyn', 'Mawdsley'), ('Raminta', 'Mackeviciute'), ('Machika', 'Tsuji'), ('Karin', 'Lusnic'), ('Yasmin', 'Kaya'), ('Elizabeth', 'Nieto'), ('Ana', 'Carotini'), ('Julie', 'Fidler'), ('Patricia', 'Quisoboni'), ('Nathalie', 'Van Dierendonck'), ('Pamela', 'Wallenfels'), ('Henrike', 'Kadzidroga'), ('Evica', 'Koljanin'), ('Teresa', 'Stromberg'), ('Mari Liis', 'Parmas'), ('Gabrielle', 'Villiger'), ('Elena', 'Brioukhovets'), ('Julie', 'McKeon'), ('Julie', 'Mckeon'), ('Florencia', 'Labat'), ('Nora', 'Koves'), ('Sarah', 'Loosemore'), ('Iwalani', 'Mccalla'), ('Trisha', 'Holloway'), ('Jitka', 'Dubcova'), ('Sandra', 'Reichel'), ('Laura', 'Ritchey'), ('Sandra', 'De Rafael Esteban'), ('Yoannis', 'Montesino'), ('Debora', 'Garat'), ('Quynh', 'Le'), ('Janine', 'Humphreys'), ('Caroline', 'Wuillot'), ('Solihati', 'Moerid'), ('Donna', 'Faber'), ('Eva', 'Sviglerova'), ('Tracey', 'King'), ('Hiromi', 'Nagano'), ('Fumiko', 'Masuda'), ('Ralitza', 'Milorieva'), ('Marianne', 'Vallin'), ('Neus', 'Avila Bonastre'), ('Donna', 'Fields Gibbs'), ('Macarena', 'Miranda'), ('Tzvetelina', 'Havren'), ('Marie Pierre', 'Villani'), ('Pamela', 'Buehler'), ('Nanette', 'Flichtbeil'), ('Natalia', 'Bogacova'), ('Anu', 'Varpula'), ('Kawana', 'Ishijima'), ('Mary Joe', 'Fernandez'), ('Gillian', 'Smith'), ('Tracy', 'Smith'), ('Vickie', 'Paynter'), ('Sabrina', 'Giusto'), ('Samantha', 'Knight'), ('Rikki', 'Gaddie'), ('Marta', 'Alastruez Ruiz'), ('Karen', 'Van Der Merwe'), ('Misumi', 'Miyauchi'), ('Erda', 'Crous'), ('Monica', 'Rey'), ('Rita', 'Cruz Lima'), ('Jackie', 'Moe'), ('Allison', 'Kinsey'), ('Sanna', 'Miestamo'), ('Andrea', 'Farley'), ('Ismet Duygu', 'Aksit Oal'), ('Caryn', 'Moss'), ('Shira', 'Gafni'), ('Annika', 'Narbe'), ('Diedre', 'Herman'), ('Heather', 'Willens'), ('Eugenia', 'Escarate'), ('Carolina', 'Boscardin'), ('Natalie', 'Tschan'), ('Simone', 'Eberlein'), ('Lisa', 'Low'), ('Shi Min', 'Lin'), ('Hui', 'Zhang'), ('Kimberly', 'Po Messerli'), ('Amanda', 'Coetzer'), ('Nelly', 'Pardo'), ('Ana Belen', 'Quintana'), ('Petra', 'Schmitt'), ('Andrea', 'Peterman'), ('Maria Teresa', 'Ruiz'), ('Emma', 'Taikie'), ('Juliana', 'Gorka'), ('Mareke', 'Plocher'), ('Elizabeth', 'Osborne'), ('Orathai', 'Thampensri'), ('Amalia', 'Mitropoulou'), ('Seiko', 'Ichioka'), ('Nao', 'Akahori'), ('Natalia', 'Medvedeva'), ('Sabine', 'Gerke'), ('Audra', 'Keller'), ('Aida', 'Khalatyan'), ('Helen', 'Crook'), ('Yone', 'Kamio'), ('Jody', 'Yin'), ('Samantha', 'Smith'), ('Rachel', 'Mcquillan'), ('Kat', 'Bailey'), ('Rika', 'Hiraki'), ('Cinzia', 'Coppini'), ('Sarah', 'Castillejo'), ('Dina', 'Mcbride'), ('Claudia', 'Mucino'), ('Sofia', 'Kelbert'), ('Arantxa', 'Sanchez Vicario'), ('Karin', 'Ptaszek'), ('Michelle', 'Mair'), ('Birgit', 'Arming'), ('Regina', 'Chladkova'), ('Nadine', 'Batliner'), ('Adriana', 'Gonzalez'), ('Karen', 'Fisher'), ('Li', 'Liu'), ('Maria Pilar', 'Valls'), ('Virginia', 'Humphreys Davies'), ('Alessandra', 'Kaul'), ('Louise', 'Stacey'), ('Stacey', 'Anderson'), ('Gabriella', 'Boschiero'), ('Evangeline', 'Olivarez'), ('Giulia', 'Toschi'), ('Allegra', 'Milholland'), ('Roongnapha', 'Surachet'), ('Angela', 'Kerek'), ('Atsuko', 'Shintani'), ('Michelle', 'Anderson'), ('Julie', 'Sinkins'), ('Kirsi', 'Lampinen'), ('Kelly', 'Press'), ('Caroline', 'Van Renterghem'), ('Patricia', 'Miller'), ('Sara', 'Valverde'), ('Esther', 'Markenstein'), ('Kristin', 'Osmond'), ('Isabela', 'Martin'), ('Kristin', 'Reed'), ('Anja', 'Kostecki'), ('Amanda', 'Trail'), ('Leslie', 'Cavanaugh   Rose'), ('Hiroko', 'Hara'), ('Catarina', 'Bernstein'), ('Rachel', 'Viollet'), ('Darija', 'Deskovic'), ('Akiko', 'Gooden'), ('Laura', 'Randmaa'), ('Sylvie', 'Sabas'), ('Lihini', 'Weerasuriya'), ('Helen', 'Van Den Berg'), ('Giuliana', 'Atzori'), ('Sandra', 'Begijn'), ('Janice', 'Tilbrook'), ('Susanna', 'Modric'), ('Tonia', 'Cook'), ('Justine', 'Hodder'), ('Angela', 'Bernal'), ('Petra', 'Winzenholler'), ('Yoriko', 'Yamagishi'), ('Tatiana', 'Buss'), ('Cami', 'Stewart'), ('Rosario', 'Gracia Abad'), ('Helena', 'Vildova'), ('Gaobolae', 'Seleka'), ('Gabriela', 'Vesela'), ('Mindy', 'Weiner'), ('Gesualda', 'Marra'), ('Evelia', 'Alvarez'), ('Naoko', 'Kijimuta'), ('Yvonne', 'Grubben'), ('Natasha', 'Sciolti'), ('Kirsten', 'Joern'), ('Michelle', 'Oldham'), ('Sandrine', 'Testud'), ('Veronika', 'Martinek'), ('Brenda', 'Thomas'), ('Ainhoa', 'Torrens'), ('Angela', 'Lettiere'), ('Anja', 'Franken'), ('Lucie', 'Schmidhauser'), ('Aki', 'Fujii'), ('Ashley', 'Miller'), ('Lela', 'Zainal'), ('Katia', 'Labourey'), ('Sara', 'Migliori'), ('Conchita', 'Martinez'), ('Jennifer', 'Callen'), ('Simone', 'Hoormaert'), ('Lorrae', 'Guse'), ('Lily', 'Nejasmic'), ('Mary', 'Nejasmic'), ('Claudia', 'Rodriguez'), ('Maria', 'Hardling'), ('Cara', 'Abe'), ('Sabine', 'Appelmans'), ('Elke', 'Escreet'), ('Laura', 'Richards'), ('Hortensia', 'Hernandez'), ('Silvia', 'Farina Elia'), ('Nicole', 'Gadanyi'), ('Carrie', 'Cunningham'), ('Yiching', 'Wu'), ('Petra', 'Johansson'), ('Marja Liisa', 'Kuurne'), ('Elitza', 'Paunova'), ('Alison', 'Reid'), ('Hye Jin', 'Park'), ('Barbara', 'Garassino'), ('Julie', 'Exum'), ('Kelli Ann', 'Johnston'), ('Tatiana', 'Matohniuk'), ('Agnes', 'Zugasti'), ('Erika', 'Kuttler'), ('Elena', 'Pampoulova'), ('Elena', 'Wagner'), ('Olivia', 'De Camaret'), ('Olivia', 'Ponchet'), ('Barbara', 'Griffiths'), ('Pavlina', 'Rajzlova'), ('Petra', 'Schwarz'), ('Jana', 'Strnadova'), ('Lizette', 'Roncagliolo'), ('Andrea', 'Strnadova'), ('Carla', 'Rodriguez'), ('Medi', 'Dadoch'), ('Meredith', 'Geiger'), ('Audra', 'Brannon'), ('Heather', 'Lockhart'), ('Valerie', 'Tan'), ('Nuria', 'Niemes'), ('Karen', 'Bacon'), ('Nathalie', 'Leschi'), ('Melissa', 'Mazzotta'), ('Kristine', 'Kurth'), ('Loredana', 'Bujor'), ('Kerstin', 'Kretschmann'), ('Megali', 'Gence'), ('Hye Jeong', 'Kim'), ('Tanja', 'Stegkamper'), ('Sandra', 'Van Der Aa'), ('Tania', 'Couto'), ('Noelle', 'Van Lottum'), ('Natalia', 'Baudone Furlan'), ('Ana', 'Salas Lozano'), ('Heidi', 'Djanogly'), ('Christine', 'Neuman'), ('Olivia', 'Cappelletti'), ('Anouschka', 'Popp'), ('Stefania', 'Casi'), ('Cristina', 'Tessi'), ('Yael', 'Segal'), ('Eva', 'Haslinghuis'), ('Caroline', 'Schuck'), ('Lorenza', 'Romano'), ('Gabriella', 'Molnaar'), ('Natasha', 'Villarroel'), ('Mika', 'Todo'), ('Shahira', 'Tawfik'), ('Victoria', 'Davies'), ('Kiyoko', 'Yazawa'), ('Nadia', 'Choqri'), ('Leena', 'Singarajah'), ('Silvia', 'Ramon Cortes'), ('Gemma', 'Magin'), ('Jane', 'Harper'), ('Paula', 'Cabezas'), ('Natalia', 'Chasovaya'), ('Ellen', 'Nelissen'), ('Paloma', 'Collantes'), ('Issem', 'Essaies'), ('Katrina', 'Saarinen'), ('Melisa', 'Castro'), ('Denise', 'Sukup'), ('Katarina', 'Studenikova'), ('Brenda', 'Rojas'), ('Manuela', 'Bargis'), ('Yamile', 'Cordova'), ('Sabrina', 'Favini'), ('Caroline', 'Marchetti'), ('Aranka', 'Huyberts'), ('Miriam', 'Oremans'), ('Cora', 'Hofmann'), ('Marilia', 'Andrade'), ('Amy', 'Frazier'), ('Sofie', 'Albinus'), ('Gina', 'Niland'), ('Rosalba', 'Caporuscio'), ('Cathy', 'Caverzasio'), ('Julie', 'Shiflet'), ('Aurelia', 'Gheorghe'), ('Diana', 'Gardner'), ('Agata', 'Werblinska'), ('Maria Claudia', 'Negri'), ('Maria', 'Purcell'), ('Mmaphala', 'Letsatle'), ('Erika', 'De Lone'), ('Junko', 'Watanabe'), ('Helma', 'Leeuwen'), ('Merete', 'Lindahl'), ('Julia', 'Boden'), ('Alix', 'Creek'), ('Ruxandra', 'Dragomir Ilie'), ('Brenda', 'Santos'), ('Edna', 'Espinosa'), ('Natalia', 'Biletskaia'), ('Jane', 'Taylor'), ('Nimota', 'Kadiri'), ('Svenja', 'Truelsen'), ('Toni', 'Gaddie'), ('Laxmi', 'Poruri'), ('Virag', 'Csurgo'), ('Galia', 'Angelova'), ('Elena', 'Savoldi'), ('Desiree', 'Leupold'), ('Plamena', 'Gogovska'), ('Amy', 'Mascotti'), ('Karin', 'Balekova'), ('Rachel Ann', 'Jensen'), ('Rebecca', 'Jensen'), ('Su Peng', 'Ng'), ('Melissa', 'McFarlane'), ('Carole', 'Lucarelli'), ('Margarita', 'Amelina'), ('Jindra', 'Gabrisova'), ('Katarzyna', 'Teodorowicz Lisowska'), ('Erica', 'Oneill'), ('Kerry Anne', 'Guse'), ('Federica', 'Haumuller'), ('Noelia', 'Perez Penate'), ('Catherine', 'Turinsky'), ('Susie', 'Starrett'), ('Lidia', 'Soulti'), ('Marion', 'Maruska'), ('Stacey', 'Sheppard'), ('Monika', 'Starosta'), ('Wendy', 'Brown'), ('Luanne', 'Spadea'), ('Tanja', 'Hauschildt'), ('Catalina', 'Ramirez'), ('Courtney', 'Roberts'), ('Fang', 'Li'), ('Natalia', 'Noreiko'), ('Patricia', 'Rogulski'), ('Kara', 'Schertzer'), ('Il Sook', 'Kim'), ('Katja', 'Meichelbock'), ('Julie', 'Foillard'), ('Alexandra', 'Scheider'), ('Ulrike', 'Priller'), ('Mika', 'Kanaya'), ('Vajira', 'Premaratne'), ('Olga', 'Cosic'), ('Robyn', 'Farrington'), ('Daniella', 'Blanke'), ('Helga', 'Grille'), ('Eva', 'Bes Ostariz'), ('Katia', 'Piccolini'), ('Jennifer', 'Baker'), ('Sherri', 'Vitale'), ('Eleonora', 'Agnolozzi'), ('Janaina', 'Mercadante'), ('Cristina', 'Casale'), ('Camille', 'Walter'), ('Natalia', 'Anisimova'), ('Janaki', 'Krishnamoorthy'), ('Elena', 'Makarova'), ('Petra', 'Crimmel'), ('Pernilla', 'Sorensen'), ('Nadin', 'Ercegovic'), ('Angie', 'Woolcock'), ('Krisna', 'Summa'), ('Kristin', 'Godridge'), ('Greta', 'Schmitt'), ('Rachel', 'Clark'), ('Paula', 'Boccia'), ('Gabriela', 'Calderon'), ('Camille', 'Baldrich'), ('Radka', 'Bobkova'), ('Ivona', 'Horvat'), ('Maria', 'Marfina'), ('Elana', 'Clark'), ('Marina', 'Stets'), ('Christine', 'Njeuma'), ('Christina', 'Papadaki'), ('Nicoletta', 'Iaccarino'), ('Kirrily', 'Sharpe'), ('Natalia', 'Narenko'), ('Petra', 'Raclavska'), ('Nicole', 'Pratt'), ('Susanna', 'Attili'), ('Sarah', 'Bentley'), ('Jenny', 'Klemm'), ('Sabine', 'Lohmann'), ('Joelle', 'Schad'), ('Elke', 'Juul'), ('Helene', 'Kappler'), ('Francesca', 'Morini'), ('Nicole', 'Kenneally'), ('Suzanne', 'Italiano'), ('Francine', 'Harvey'), ('Naoko', 'Sawamatsu'), ('Maribel', 'Amadeo'), ('Maja', 'Palaversic Cooper Smith'), ('Elena', 'Pogorelova'), ('Farah', 'Mahmood'), ('Jette', 'Wilhelmsen'), ('Irina', 'Stoilova'), ('Marie Christine', 'Goy'), ('Kimberly', 'Kessaris'), ('Susi', 'Fortun Lohrmann'), ('Ines', 'Drumond'), ('Mariana', 'Randrup'), ('Diana', 'Mills'), ('Ilona', 'Poljakova'), ('Klara', 'Blahova'), ('Ginevra', 'Mugniani'), ('Klara', 'Tomsu'), ('Keiko', 'Ishida'), ('Claudia', 'Timm'), ('Alexandra', 'Henningsson'), ('Katharina', 'Duell'), ('Barbara', 'Navarro'), ('Francesca', 'Guardigli'), ('Ulrike', 'Przysucha'), ('Lisa', 'Poole'), ('Renata', 'Kochta'), ('Katherine', 'Gladding'), ('Esther', 'Rekasch'), ('Claire', 'Adamini'), ('Eva', 'Borras'), ('Tzipi', 'Obziler'), ('Emanuela', 'Brusati'), ('Cristina', 'Lopez De Subijana'), ('Masami', 'Nakamura'), ('Danielle', 'Thomas'), ('Cara', 'Robinette'), ('Barbara', 'Rittner'), ('Olivia', 'Fery'), ('Rieneke', 'Kusters'), ('Claudia', 'Hoffmann Timm'), ('Liat', 'Cohen'), ('Anna Laura', 'Baraldi'), ('Marlies', 'Reinders'), ('Rima', 'Taki'), ('Theresa', 'Swart'), ('Anne Marie', 'Mikkers'), ('Laurence', 'Andretto'), ('Roberta', 'Burzagli'), ('Lamsriati', 'Moerid'), ('Daniela', 'Cigna'), ('Maria Jose', 'Gaidano'), ('Alicia', 'Meraz'), ('Dominique', 'Monami'), ('Helene', 'Holter'), ('Caroline', 'Schneider'), ('Ingrid', 'Kurta'), ('Christelle', 'Fauche'), ('Isabela', 'Petrov'), ('Catherine', 'Barclay'), ('Ines', 'Gorrochategui'), ('Caroline', 'Dhenin'), ('Patrizia', 'Mirtillo'), ('Alison', 'Moverley'), ('Vera', 'Turkhaneli'), ('Vanina', 'Casanova'), ('Galina', 'Misiuriova'), ('Nancy', 'Van Erp'), ('Kaoru', 'Shibata'), ('Wendy', 'Shipp'), ('Carolina', 'Torres'), ('Irene', 'Gonzalez Gonzalez'), ('Hikari', 'Abe'), ('Siri', 'Mittet'), ('Colette', 'Caple'), ('Alison', 'Vaughan'), ('Monica', 'Mraz'), ('Katrien', 'De Craemer'), ('Limor', 'Zaltz'), ('Sussy', 'Boyanovich'), ('Cristina', 'Sanz Aguirre'), ('Rona', 'Mayer'), ('Ma Carmen', 'Garcia'), ('Fiona', 'Stoner'), ('Oksana', 'Bushevitsa'), ('Eleonora', 'Vegliante'), ('Barrie', 'Bernstein'), ('Dana', 'Evans'), ('Anna', 'Anastasiou'), ('Helena', 'Franko'), ('Gillian', 'Carter'), ('Dilshani', 'Manawadu'), ('Karina', 'Habsudova'), ('Anneli', 'Ornstedt'), ('Lisa', 'Raymond'), ('Cristina', 'Rodriguez'), ('Natsuko', 'Kurita'), ('Mareze', 'Joubert'), ('Elexia', 'Stivala'), ('Ivana', 'Havrlikova'), ('Heidi', 'Hogh'), ('Elissa', 'Burton'), ('Rebecca', 'Edwards'), ('Caroline', 'Hunt'), ('Astrid', 'Parlachy'), ('Joannette', 'Kruger'), ('Sophie', 'Woorons'), ('Kelly S', 'Wilson'), ('Caroline', 'Herbert'), ('Mary', 'Quasney'), ('Alexandra', 'Kelly'), ('Anique', 'Snijders'), ('Keirsten', 'Alley'), ('Reyna', 'Alvarado'), ('Virginia', 'Ruano Pascual'), ('Pilar', 'Perez'), ('Natalja', 'Vojinovic'), ('Soon Mi', 'Kim'), ('Maja', 'Zivec Skulj'), ('Sasano', 'Yoshiko'), ('Stefania', 'Indemini'), ('Patricia', 'Sandagorda'), ('Patty', 'Murren'), ('Aranzazu', 'Gallardo'), ('Tanja', 'Tsiganii'), ('Stephanie', 'Martin'), ('Alexandra', 'Schmitt'), ('Su Haiza', 'Wan'), ('Angelica', 'Gavaldon'), ('Andreea', 'Ehritt Vanc'), ('Ana', 'Perez'), ('Tracee', 'Lee'), ('Natasha', 'Giles Mellon'), ('Shieh Yen', 'Leong'), ('Holyn', 'Lord'), ('Michelle', 'Likibi'), ('Emily', 'Bond'), ('Christina', 'Fischler'), ('Anzela', 'Zguna'), ('Yoshiko', 'Sasano'), ('Shi Ting', 'Wang'), ('Nuria', 'Tabernero Garin'), ('Marianne', 'Ward'), ('Gorana', 'Matic'), ('Marcia', 'Paganini'), ('Kori', 'Davidson'), ('Paula', 'Astrini'), ('Amy', 'Chiminello'), ('Claire', 'Gatt'), ('Martie', 'De Villiers'), ('Kerry Ann', 'Lim'), ('Michelle', 'Morris Berg'), ('Maria De Los Angeles', 'Ycaza'), ('Ana', 'Rojas'), ('Ninel', 'Barkan'), ('Carolina', 'Conte'), ('Ingrid', 'Lucak'), ('Alexandra', 'Fusai'), ('Cathrine', 'Instebo'), ('Valerie', 'De La Noye'), ('Monica', 'Seles'), ('Nike', 'Dobrovits'), ('Annette', 'Falkenberg'), ('Nabila', 'Bouchabou'), ('Kyung Sook', 'Yoo'), ('Miyako', 'Nakanishi'), ('Miki', 'Miyauchi'), ('Svetlana', 'Komleva'), ('Kristie', 'Boogert'), ('Anori', 'Fukuda'), ('Yuki', 'Fujii'), ('Gala', 'Leon Garcia'), ('Amanda', 'Parson Siegel'), ('Gianfranca', 'Devercelli'), ('Jill', 'Brenner'), ('Michelle', 'Jackson Nobrega'), ('Jennifer', 'Poulos'), ('Valerie', 'Poulos'), ('Svetlana', 'Krivencheva'), ('Lisa', 'Annebro'), ('Sofia', 'Hiort'), ('Valentina', 'Balzotti'), ('Altie', 'Barnard'), ('Olga', 'Lugina'), ('Camilla', 'Persson'), ('Mia', 'Leino'), ('Mirielle', 'Dittmann'), ('Geraldine', 'Ibrac'), ('Marilyn', 'Baker'), ('Patricia', 'Zerdan'), ('Candida', 'Beaumont'), ('Stephanie', 'Rottier'), ('Li Yao', 'Tang'), ('Catriona', 'Mccarthy'), ('Min Hui', 'Chan'), ('Liako', 'Selokoma'), ('Maria Florencia', 'Cianfagna'), ('Maryla', 'Madura'), ('Katerina', 'Vlckova'), ('Estefania', 'Bottini'), ('Aicha', 'Ferjani'), ('Lucy', 'Needham'), ('Alessia', 'Sciarpelletti'), ('Joana', 'Pedroso'), ('La Shawnn', 'Jones'), ('Bridget', 'Mikysa'), ('Viviana', 'Valdovinos'), ('Irina', 'Sukhova'), ('Lea', 'Ghirardi'), ('Barbara', 'Collet'), ('Kaisaran', 'Siewrattan'), ('Stephanie', 'Gomperts'), ('Karen', 'Cross'), ('Beatriz', 'Luna'), ('Johanna', 'Pana'), ('Katerina', 'Kroupova'), ('Lisa', 'Pugliese'), ('Kyoko', 'Nagatsuka'), ('Niki', 'Ninaus'), ('Kati', 'Kocsis'), ('Shu Ping', 'Lin'), ('Maja', 'Muric'), ('Monika', 'Kratochvilova'), ('Jing Qian', 'Yi'), ('Nadia', 'Streltsova'), ('Dyane', 'Aixendri'), ('Cecile', 'Dorey'), ('Karina', 'Kuregian'), ('Jeanette', 'Bhaguandas'), ('Maria Alejandra', 'Quezada'), ('Simona', 'Petru'), ('Yee Hong', 'Tan'), ('Shareen', 'Bottrell'), ('Laurence', 'Giroud'), ('Limor', 'Gabai'), ('Petra', 'Kamstra'), ('Tina', 'Krizan'), ('Raphaella', 'Liziero'), ('Sumara', 'Passos'), ('Maria Virginia', 'Francesca'), ('Irina', 'Spirlea'), ('Joanne', 'Limmer'), ('Ngozi', 'Okwudike'), ('Line', 'Ullring'), ('Germana', 'Di Natale'), ('Melissa', 'Zimpfer'), ('Silvia', 'Plasin Peral'), ('Gulberk', 'Gultekin'), ('Kaoru', 'Yagi'), ('Vera', 'Vitels'), ('Lee Ann', 'Van Den Berg'), ('Amy', 'Berthe'), ('Marketa', 'Stuskova'), ('Suvimol', 'Duangchan'), ('Danica', 'Kovacova'), ('Samantha', 'Etienne'), ('Svetlana', 'Zakharchenko'), ('Valeria', 'Madaro'), ('Hanneke', 'Ketelaars'), ('Caterina', 'Cerquaglia'), ('Eugenia', 'Maia'), ('Terry Ann', 'Zawacki'), ('Beatriz', 'Andonegui'), ('Helena', 'Nordwall'), ('Keri', 'Phebus'), ('Vanessa', 'Matthys'), ('Melissa', 'Golfin'), ('Vicky', 'Maes'), ('Anna Karin', 'Svensson'), ('Esther', 'Ruiz De Ona Plaza'), ('Kathleen', 'Odaly'), ('Jane', 'Legge'), ('Nipada', 'Kaewborisut'), ('Tamsin', 'Wainwright'), ('Anna', 'Moll'), ('Gabriela', 'Villanueva'), ('Riei', 'Kawamata'), ('Seda', 'Noorlander'), ('Axelle', 'Thomas'), ('Chinatsu', 'Ito'), ('Maria', 'Zsoldos'), ('Carolina', 'Somalo'), ('Maria', 'Vento Kabchi'), ('Emily', 'Leonardi'), ('Ana Karina', 'Saldivar'), ('Barbara', 'Mulej'), ('Rosabel', 'Moyen'), ('Marisa', 'Georgitsi'), ('Jan', 'Barrett'), ('Lashawnn', 'Jones'), ('Janette', 'Husarova'), ('Alejandra', 'Gomez'), ('Joice Riana', 'Sutedja'), ('Jean', 'Okada'), ('Jana', 'Nejedly'), ('Tatiana', 'Ignatieva'), ('Alexia', 'Ferrand'), ('Shizuka', 'Tokiwa'), ('Stephanie', 'Devisme'), ('Ching Li', 'Chen'), ('Barbara', 'Bathory'), ('Sofia', 'Prazeres'), ('Katharina', 'Buche'), ('Shirli Ann', 'Siddall'), ('Jane', 'Chi'), ('Florence', 'Mbugua'), ('Page', 'Bartelt'), ('Martine', 'Vosseberg'), ('Mariko', 'Kaneko'), ('Ljudmila', 'Pavlov'), ('Ninfa', 'Marra'), ('Jill', 'Craybas'), ('Jacqueline', 'Dickinson'), ('Pavlina', 'Nola'), ('Paige', 'Yaroshuk'), ('Maja', 'Wittke'), ('Daniela', 'Or Shahar'), ('Michaela', 'Soukupova Peterova'), ('Daphne', 'Van De Zande'), ('Renata', 'Diez'), ('Anna Maria', 'Hollo'), ('Hui Na', 'Liu'), ('Lucie', 'Ahl'), ('Arthi', 'Venkataraman'), ('Tina', 'Samara'), ('Lamia', 'Hameurlaine'), ('Marie', 'Linusson'), ('Nicole', 'Hummel'), ('Dominika', 'Gorecka'), ('Satoko', 'Nakano'), ('Kazue', 'Takuma'), ('Monique', 'Kiene'), ('Franke', 'Joosten'), ('Natsumi', 'Yuki'), ('Sabine', 'Pawelec'), ('Yu Hsien', 'Liu'), ('Simona', 'Nedorostova'), ('Yuka', 'Tanaka'), ('Anna', 'Foldenyi Dicker'), ('Marie', 'Arkbrant'), ('Bixia', 'Li'), ('Elizabeth', 'Alina'), ('Lebogang', 'Seitshiro'), ('Tracy', 'Schroeder'), ('Christina', 'Zachariadou'), ('Agnes', 'Gee'), ('Lauren', 'Gavaris'), ('Cecilia', 'Ampuero'), ('Monica', 'Guglielmi'), ('Yuki', 'Kitamura'), ('Sandra', 'Cacic'), ('Linda', 'Jansson'), ('Paula', 'Umana'), ('Cristina', 'Torrens Valero'), ('Maria Carmen', 'Leon'), ('Melanie', 'Bernard'), ('Luciana', 'Barbosa'), ('Delene', 'Ackron'), ('Sally', 'Boulding'), ('Evonne', 'Allerkamp'), ('Yoke', 'Virliana'), ('Akiko', 'Kazama'), ('Federica', 'Fortuni'), ('Nicole', 'Elliott'), ('Chie', 'Kudo'), ('Alaa', 'A A Ali'), ('Anousjka', 'Van Exel'), ('Jayne', 'Demichele'), ('Sarah', 'Brown'), ('Anouska', 'Van Exel'), ('Celine', 'Regnier'), ('Cindy', 'Summers'), ('Tatjana', 'Vuckovic'), ('Sofia', 'Kalavria'), ('Lisa', 'Mcshea'), ('Kathy', 'ODaly'), ('Aurora', 'Gima'), ('Laura', 'Medei'), ('Mimma', 'Chernovita'), ('Stephanie', 'Content Tardieu'), ('Marie Pierre', 'Attali'), ('Eleni', 'Kangalou'), ('Martine', 'Bunschoten'), ('Elisabeth', 'Habeler'), ('Hitomi', 'Isomura'), ('Meike', 'Babel'), ('Keiko', 'Nagatomi'), ('Divya', 'Merchant'), ('Alison', 'Cohen'), ('Susan', 'Bowman'), ('Jenny', 'Sotomayor'), ('Valentina', 'Bonacorsi'), ('Marcela', 'Demilio'), ('Anke', 'Huber'), ('Shiri', 'Burstein'), ('Maria', 'Popescu'), ('Yvonne', 'Doyle'), ('Julia', 'Mertins'), ('Anne', 'Mall'), ('Linda', 'Niemantsverdriet'), ('Jennifer', 'Saret'), ('Farley', 'Taylor'), ('Sheung', 'Pang'), ('Tanja', 'Lang'), ('Simone', 'Bock'), ('Paiao Asinata', 'Short'), ('Lee', 'Whitwell'), ('Akemi', 'Hasegawa'), ('Kylie', 'Gottsche'), ('Evelyn', 'Otula'), ('Margaret', 'Olagundoye'), ('Kristy', 'Bayer'), ('Daria', 'Chernova'), ('Kimberley', 'Risson'), ('Stacey', 'Jellen'), ('Carina', 'Lopez'), ('Simona', 'Galik'), ('Caroline', 'Gideskog'), ('Julia', 'Lutrova'), ('Ayako', 'Noda'), ('Asami', 'Tsuda'), ('Benjamas', 'Sangaram'), ('Mary', 'Pierce'), ('Susanna', 'Locher'), ('Sandra', 'De Silva'), ('Marjorie', 'Ferrand'), ('Zdenka', 'Malkova'), ('Antonela', 'Voina Timmerbeil'), ('Aiko', 'Suzuki'), ('Martina', 'Hautova'), ('Alexandra', 'Rentzoula'), ('Kelesitse', 'Makgale'), ('Lamia', 'Alami'), ('Gabriela', 'Beleni'), ('Melanie', 'Kay'), ('Wendy', 'Fix'), ('Mair', 'Hughes'), ('Virginie', 'Van Der Meersch'), ('Katrin', 'Kilsch'), ('Sara', 'Tse'), ('Paola', 'Cespedes'), ('Uju', 'Ben'), ('Stephanie', 'Barfeld'), ('Hong Lan', 'Liu'), ('Aafje', 'Evers'), ('Susanne', 'Depka'), ('Karolina', 'Bulat'), ('Kyoko', 'Hirano'), ('Sung Hee', 'Park'), ('Claire', 'Taylor'), ('Zsofia', 'Csapo'), ('Patricia', 'Aznar'), ('Aiko', 'Matsuda'), ('Bi Xia', 'Li'), ('Edith', 'Nunes Bersot'), ('Anne', 'Ollevier'), ('Laura', 'Olave'), ('Michele', 'Wagner'), ('Celine', 'Beigbeder'), ('Celine', 'Bannmeyer'), ('Stephanie', 'Tibbits'), ('Stephania', 'Gehrke'), ('Maria Fernanda', 'Sainz'), ('Hiromi', 'Sasano'), ('Hyun A', 'Shin'), ('Eva', 'Martincova'), ('Sandra', 'Waechtershauser'), ('Hwa Ju', 'Jeung'), ('Maite', 'Vila'), ('Alona', 'Nakamura'), ('Lubomira', 'Bacheva'), ('Eun Ha', 'Kim'), ('Mami', 'Donoshiro'), ('Andrea', 'Tunko'), ('Sophie', 'Cortina'), ('Caroline', 'Hora'), ('Yi', 'Liu'), ('Ande', 'Tulp'), ('Mariana', 'Eberle'), ('Hyun Hee', 'Sohn'), ('Stefania', 'Pifferi'), ('Saira', 'Sanchinelli'), ('Rita', 'Grande'), ('Patricia', 'Rodriguez'), ('Valeria', 'Valente'), ('Amanda', 'Weinhold'), ('Mette', 'Sigmundstad'), ('Julia', 'Jehs'), ('Magdalena', 'Maleeva'), ('Amanda', 'Browne'), ('Estelle', 'Gevers'), ('Beatriz', 'Miravete'), ('Maria Dolores', 'Campana'), ('Yumiko', 'Nakazima'), ('Sherry', 'Buller'), ('Kelly', 'Duns'), ('Maija', 'Avotins'), ('Olga', 'Hostakova'), ('Alexandra', 'Scholer'), ('Petra', 'Begerow'), ('Vlada', 'Kirilovska'), ('Larissa', 'Schaerer'), ('Eva', 'Diez'), ('Tomoe', 'Hotta'), ('Ai', 'Haigo'), ('Victoria', 'Voznesenskaya'), ('Rieko', 'Noda'), ('Sabine', 'Haas'), ('Lara', 'Bitter'), ('Yolanda', 'Clemot Lerendegui'), ('Paola', 'Tampieri'), ('Carine', 'Bornu'), ('Shanna', 'Strong'), ('Katie', 'Schlukebir'), ('Imogen', 'Wyatt'), ('Debbie', 'Carr'), ('Marjorie', 'Gantman'), ('Rita', 'Degli Esposti'), ('Christine', 'Joseph'), ('Jennie', 'McMahon'), ('Laurence', 'Duffaud'), ('Stefanie', 'Meyer'), ('Kate', 'Warne Holland'), ('Sandra', 'Olsen'), ('Branislava', 'Ivanovic'), ('Johanna', 'Sones'), ('Eva', 'Jimenez Sanz'), ('Maja', 'Ipsa'), ('Magdalena', 'Gargulakova'), ('Martina', 'Nejedly'), ('Linda', 'Engblom'), ('Nicole', 'Strnadova'), ('Kirstin', 'Freye'), ('Maggie', 'Harris'), ('Young Ja', 'Choi'), ('Esra', 'Bayburt'), ('Sang Hoon', 'Chung'), ('Catalina', 'Cristea'), ('Nicole', 'Roth'), ('Sylva', 'Nesvadbova'), ('Gabriela', 'Radu'), ('Nejla', 'Gunay Karoglu'), ('Farah', 'Dayoub'), ('Andrea', 'Bilic'), ('Tze May', 'Lee'), ('Ayami', 'Akiyama'), ('Natalia', 'Nemchinova'), ('Maria Jose', 'Capuano'), ('Daniela', 'Agostinone'), ('Angelique', 'Olivier'), ('Suzanne', 'Olson'), ('Noriko', 'Miyamoto'), ('Asa', 'Svensson'), ('Lesia', 'Bilak'), ('Julie Ann', 'Baird'), ('Petra', 'Hradecka'), ('Petra', 'Douderova'), ('Maaike', 'Koutstaal'), ('Dominique', 'Bovey'), ('Alison', 'Bell'), ('Joanne', 'Ward'), ('Bontshetse', 'Seleka'), ('Eliana', 'Della Vedova'), ('Marcia', 'Senn'), ('Pam', 'Nelson'), ('Marta', 'Cruells Lopez'), ('Ai', 'Sugiyama'), ('Johanna', 'Bihr'), ('Kveta', 'Peschke'), ('Christina', 'Habernigg'), ('Marketa', 'Kochta'), ('Olga', 'Arevalo'), ('Hiroko', 'Ishizaki'), ('Angie', 'Guillette'), ('Melody', 'Falco'), ('Tiffini', 'Huggins'), ('Maria Lovella', 'Catalan'), ('Nathaly', 'Tijssen'), ('Ryouko', 'Yamada'), ('Hiroko', 'Mochizuki'), ('Gloria', 'Pizzichini'), ('Katerina', 'Zajacova'), ('Hye Jin', 'Seo'), ('Marijana', 'Randjelovic'), ('Cynthia', 'Ojeda'), ('Maria Fernanda', 'Landa'), ('Melissa', 'Beadman'), ('Sandra', 'Costa Corral'), ('Khristen', 'Pietrucha'), ('Sandrella', 'Droubi'), ('Angeles', 'Montolio'), ('Lara', 'Howes'), ('Zara', 'Wolseley'), ('Jasmine', 'Angeli'), ('Joanna', 'Bauza'), ('Maria', 'Hernandez'), ('Mariela', 'Marinaro'), ('Michaela', 'Seibold'), ('Katarzyna', 'Malec'), ('Jing Jing', 'Chen'), ('Zorica', 'Glisic'), ('Jennifer', 'Fiers'), ('Valeria', 'Strappa'), ('Cristina', 'Caparis'), ('Kylie', 'Hunt'), ('Carla', 'Santini'), ('Claudia', 'Harrison'), ('Ma Eugenia', 'Abrate'), ('Patamika', 'Phongsuramas'), ('Tina', 'Vukasovic'), ('Elena', 'Likhovtseva'), ('Heather', 'Bates'), ('Barbara', 'Castro'), ('Kata', 'Gyorke'), ('Petra', 'Studnicka'), ('Rosana', 'De Los Rios'), ('Natalia', 'Bondarenko'), ('Dina', 'Dajani'), ('Maylani', 'Ah Hoy'), ('Marta', 'Cano'), ('Margarita', 'Mejia'), ('Karen', 'Anderson'), ('Dewi', 'Wijayanthi'), ('Manuela', 'Grosskopf'), ('Olesya', 'Artemeva'), ('Kym', 'Hazzard'), ('Tankiso', 'Letseka'), ('Natalie', 'Adsuar'), ('Karine', 'Preaud'), ('Monica', 'Chornet Velasco'), ('Julie', 'Thu'), ('Anne', 'Kremer'), ('Berengere', 'Karpenschif'), ('Monique', 'Fitters'), ('Christina', 'Weiss'), ('Soon Nam', 'Kim'), ('Pao Hua', 'Huang'), ('Sue', 'Kocsis'), ('Diana', 'Spadea'), ('Valerie', 'Feger'), ('Leanne', 'Melgaard'), ('Julie', 'Pullin'), ('Angie', 'Marik'), ('Kelly', 'Rudolph'), ('Alena', 'Nesticka'), ('Ines', 'Heise'), ('Cristina', 'Cortes'), ('Suzana', 'Rodrigues'), ('Gabriela Aura', 'Zarnoveanu'), ('Denisa', 'Legac'), ('Mihaela', 'Ghica'), ('Sarah', 'Pitkowski Malcor'), ('Aradhana', 'Reddy'), ('Anne', 'Puissant'), ('Ju Yeon', 'Choi'), ('Natalia', 'De Cola'), ('Yasmin', 'Attia Abdalla'), ('Yoriko', 'Kokubun'), ('Betsy', 'Miringoff'), ('Natalie', 'Nagyova'), ('Emanuela', 'Falleti'), ('Martina', 'Schiavo'), ('Ana', 'Laso'), ('Anna', 'Klim'), ('Lorena', 'Romano'), ('Magali', 'Benitez'), ('Isabell', 'Quast'), ('Jeong Hee', 'Paek'), ('Ana', 'Gasparyan'), ('Soumia', 'Islami'), ('Ana Maria', 'Hartweg'), ('Martina', 'Zichova'), ('Laura', 'Nurminen'), ('Ditta', 'Huber'), ('Akemi', 'Sato'), ('Sissy', 'Carvin'), ('Jutta', 'Ribitsch'), ('Lucinda', 'Gibbs'), ('Sophie', 'De Taxis'), ('Shaila', 'Ali'), ('Esme', 'De Villiers'), ('Yeon Hee', 'Cho'), ('Ana Valeria', 'Rolon'), ('Natalia', 'Soetrisno'), ('Sonal', 'Marker'), ('Martina', 'Crha'), ('Alenka', 'Ovin'), ('Floor', 'Vioen'), ('Claudia', 'Marsili'), ('Miia', 'Kohtala'), ('Dora', 'Djilianova'), ('Cristiana', 'Marradi'), ('Katherine', 'Costain'), ('Audrey', 'Ludwig'), ('Laurence', 'Courtois'), ('Conchita', 'Martinez Granados'), ('Marie Christine', 'Caron'), ('Ma Llanos', 'Soriano'), ('Vanessa', 'Webb'), ('Olga', 'Vymetalkova'), ('Ai', 'Ozawa'), ('Subhra', 'Shukla'), ('Lusy', 'Kumala'), ('Hanako', 'Kamiya'), ('Nicole', 'London'), ('Nancy', 'Feber'), ('Katarina', 'Misic'), ('Linda Beate', 'Andersen'), ('Silvia', 'Aneiros'), ('Evelyn', 'Platzer'), ('Nina', 'Murn'), ('Eiko', 'Toba'), ('Maria Luciana', 'Reynares'), ('Viktoria', 'Gimberg'), ('Amanda', 'Hopmans'), ('Thea', 'De Weerd'), ('Elpis', 'Alexandrou'), ('Dionne', 'Lim'), ('Tomoko', 'Sekiguchi'), ('Chanda', 'Rubin'), ('Giorgia', 'Capanni'), ('Charlotte', 'Ruitenberg'), ('Stefanie', 'Kolar'), ('Cindy', 'Xu'), ('Tasha', 'Jackson'), ('Audrey', 'Cocuaud'), ('Maria Noel', 'Losada'), ('Severine', 'Augros'), ('Valentina', 'Terio'), ('Carolina', 'Azcui'), ('Saranga', 'Sangakkara'), ('Mariam', 'Rahim'), ('Catrin', 'Mueller'), ('Mireille', 'Bink'), ('Adriana', 'Serra Zanetti'), ('Seon Young', 'Park'), ('Natascha', 'De Kramer'), ('Joanne', 'Moore'), ('Marielle', 'Bruens'), ('Cheah Sui', 'Kim'), ('Barbara', 'Schett'), ('Asli', 'Kocaoemer'), ('Mariana', 'Diaz Oliva'), ('Severine', 'Arpajou'), ('Caroline', 'Rossel'), ('Elena', 'Tsagalidou'), ('Csilla', 'Dobo'), ('Caroline', 'Germar'), ('Corinne', 'Ng Tung Hing'), ('Miho', 'Saeki'), ('Catrin', 'Muller'), ('Vera', 'Zhukovets'), ('Rurika', 'Maruse'), ('Amanda', 'Wainwright'), ('Meang', 'Liew'), ('Mariska', 'Steenkamp'), ('Andrea', 'Behalova'), ('Ellen', 'Muller'), ('Jennifer', 'Capriati'), ('Laura', 'Montalvo'), ('Elisa', 'Penalvo'), ('Mary Beth', 'Maggart'), ('Manuela', 'Kostner'), ('Yuka', 'Yoshida'), ('Sudsobhi', 'Chatsuthiphan'), ('Oksana', 'Yarikova'), ('Pia Lena', 'Ander'), ('Nadine', 'Plaizier'), ('Jennifer', 'Carter'), ('Lei', 'Chen'), ('Eugenia', 'Lopez Ascarte'), ('Edita', 'Liachoviciute'), ('Noa', 'Horovitz'), ('Ralitza', 'Doneva'), ('Gabriele', 'Masiliunaite'), ('Kim', 'De Weille'), ('Lorena', 'Brain'), ('Ines', 'Buermeyer'), ('Geraldine', 'Dondit'), ('Caroline', 'Toyre'), ('Henriette', 'Van Aalderen'), ('Manon', 'Savelkouls'), ('Eva', 'Erbova'), ('Barbara', 'De Wilde'), ('Roberta', 'Zandarin'), ('Virginie', 'Massart'), ('Laura', 'Sham'), ('Lenka', 'Nemeckova'), ('Sharon', 'Russell'), ('Alessaundra', 'De Perini'), ('Karen', 'Gebauer'), ('Sonya', 'Jeyaseelan'), ('Julie', 'Steven'), ('Alexandra', 'Schneider'), ('Sara', 'Ventura'), ('Maia', 'Stankova'), ('Alicia', 'Ortuno'), ('Varalee', 'Sureephong'), ('Svetlana', 'Soldatenkova'), ('Gisela', 'Riera Roura'), ('Francesca', 'LaO'), ('Patricia', 'Segala'), ('Ursula', 'Svetlik'), ('Cristina', 'Portas Soy'), ('Sally Ann', 'Cuttler'), ('Natalie', 'Frawley'), ('Simona', 'Porchia'), ('Vanessa', 'Rooks'), ('Annette', 'Zweck'), ('Carolina', 'Molins'), ('Yael', 'Beckman'), ('Niki', 'Tippins'), ('Sofia', 'Finer'), ('Maria Jose', 'Likibi'), ('Milena', 'Kornil'), ('Divina', 'Escala'), ('Julia', 'Abe'), ('Motoe', 'Uchida'), ('An Qi', 'Ge'), ('Alessia', 'Lombardi'), ('Natalia', 'Gonzalez Quintero'), ('Pingkan', 'Lumenta'), ('Dawn', 'Buth'), ('Katrin', 'Ittensohn'), ('Ekaterina', 'Nossik'), ('Giana', 'Gutierrez'), ('Mashona', 'Washington'), ('Sabina', 'Radevicova'), ('Chamsi', 'Filali'), ('Gabriela', 'Chmelinova'), ('Ryoko', 'Takemura'), ('Antonella', 'Pozzi'), ('Lindsay', 'Davenport'), ('Jodie', 'Lynn'), ('Shizu', 'Katsumi'), ('Sylwia', 'Rynarzewska'), ('Nina', 'Nittinger'), ('Karin', 'Asberg'), ('Magda', 'Leal'), ('Madoka', 'Kuki'), ('Katja', 'Pohlmann'), ('Irina', 'Komarova'), ('Andrea', 'Montoya'), ('Nadia', 'Bibarss'), ('Kendra', 'Howard'), ('Blanka', 'Kumbarova'), ('Christina', 'Ferreira'), ('Peggy', 'Rouquier'), ('Paola', 'Suarez'), ('Suvikukka', 'Forsius'), ('Adriana', 'Gersi'), ('Nicole', 'Funk'), ('Malgorzata', 'Jankowska'), ('Shinobu', 'Asagoe'), ('Valentina', 'Murgo'), ('Karen', 'Nugent'), ('Natalia', 'Garcia'), ('Karoline', 'Borgersen'), ('Anita', 'Buggins'), ('Heike', 'Rusch'), ('Helena', 'Fremuthova'), ('Margaret', 'Schnakenburg'), ('Emmanuelle', 'Gagliardi'), ('Audrey', 'Pierrich'), ('Sandra', 'Kellemberger'), ('Helen', 'Parsons'), ('Anna', 'Smashnova'), ('Andrea', 'Glass'), ('Romana', 'Tedjakusuma'), ('Stephanie', 'De Ville'), ('Anke', 'Roos'), ('Amanda', 'Dundas'), ('Lizzy', 'Jelfs'), ('Khady NDeye', 'Diop'), ('Renata', 'Kolbovic'), ('Arati', 'Ponnappa'), ('Yuan', 'Wen'), ('Valeria', 'Cecchetti'), ('Manuela', 'Schwerzmann'), ('Katalin', 'Miskolczi'), ('Carmina', 'Giraldo'), ('Pavlina', 'Bartunkova'), ('Jane', 'White'), ('Soon Hye', 'Lee'), ('Tatiana', 'Panova'), ('Virginia', 'Gollut'), ('Thea', 'Ivanisevic'), ('Emanuela', 'Sangiorgi'), ('Julie', 'Mansour'), ('Emmanuelle', 'Zowczak'), ('Maren', 'Muller'), ('Lorna', 'Woodroffe'), ('Diana', 'Foldenyi'), ('Jennifer', 'Duncan'), ('Liezel', 'Huber'), ('Monita', 'Horn'), ('Elena', 'Tatarkova'), ('Sabine', 'Resch'), ('Jarita', 'Selenius'), ('Alica', 'Herda'), ('Mariam', 'Ramon Climent'), ('Mihaela', 'Vulpe'), ('Helen', 'Laupa'), ('Sarka', 'Snorova'), ('Gabija', 'Talberga'), ('Nicole', 'Wist'), ('Martina', 'Schaller'), ('Nina', 'Miu'), ('Annie', 'Trepanier'), ('Sandra', 'Angerer'), ('Lucie', 'Steflova'), ('Saori', 'Honda'), ('Satoko', 'Kurioka'), ('Tonka', 'Doric'), ('Rieka', 'Ito'), ('Nozipho Gloria', 'Sithole'), ('Melitta', 'Miklosi'), ('Lauren', 'Nikolaus Zink'), ('Vanessa', 'Castellano'), ('Ana Carola', 'Guzman'), ('Zuzana', 'Nemsakova'), ('Julie', 'Hanger'), ('Ximena', 'Rodriguez'), ('Ingy', 'El Taweel'), ('Ella', 'Ionescu'), ('Manisha', 'Malhotra'), ('Nicoletta', 'Pericleous'), ('Maria Ines', 'Araiz'), ('Tina Helen', 'Soderstrom'), ('Jana', 'Kandarr'), ('Vicky', 'Barker'), ('Michaela', 'Hasanova'), ('Noriko', 'Miyazaki'), ('Patricia', 'Camina'), ('Yu Chun', 'Huang'), ('Michaila', 'Hasanova'), ('Liora', 'Levin'), ('Gaye', 'Mcmanus'), ('Mina', 'Abdul Rahman'), ('Li', 'Li'), ('Lonny', 'Young'), ('Magdalena', 'Kucerova'), ('Stephanie', 'Testard'), ('Sandrine', 'Chevy'), ('Maria Laura', 'Bertolo'), ('Bridget', 'Merrick'), ('Guadalupe', 'Bugallo'), ('Vanessa', 'Menga'), ('Manuela', 'Costa'), ('Patty', 'Van Acker'), ('Anna', 'Bleszynski'), ('Janet', 'Lee'), ('Deepa', 'Engade'), ('Masako', 'Naito'), ('Kerstin', 'Marent'), ('Eun Jeong', 'Lee'), ('Helina', 'Lill'), ('Jana', 'Dorodnova'), ('Rachel', 'Dive'), ('Maria Teresa', 'Guell'), ('Natalie', 'Dittmann'), ('Pamela', 'Zingman'), ('Mariela', 'Cornejo'), ('Andrea', 'Hoch'), ('Marwa', 'El Wany'), ('Rachael', 'Mcardle'), ('Carlotta', 'Stasi'), ('Eva', 'Krejcova'), ('Elena', 'Krutko'), ('Karolina', 'Petrikova'), ('Michaela', 'Lincoln'), ('Marissa', 'Lincoln'), ('Cecilia', 'Hincapie'), ('Evelyn', 'Fauth'), ('Cecile', 'De Winne'), ('Anouschka', 'Boralessa'), ('Stephanie', 'Chi'), ('Nirupama', 'Sanjeev'), ('Aminat', 'Balogun'), ('Ishraq', 'Salman'), ('Cintia', 'Tortorella'), ('Alex', 'Napier'), ('Daria', 'Turpak'), ('Madalina', 'Niculaita'), ('Tumeka', 'Harris'), ('Victoria', 'Hunt'), ('Elise', 'Crozier'), ('Carine', 'Maisonnave'), ('Marina', 'Novelli'), ('Yumi', 'Yokoi'), ('Seung Yeon', 'Kang'), ('Vanessa', 'Brilleman'), ('Wei', 'Qie'), ('Sybil', 'Parker'), ('Lotty', 'Seelen'), ('Julia', 'Carballal Fernandez'), ('Sara', 'Pritchard'), ('Miriam', 'Schnitzer'), ('Susana', 'De Andres Therond'), ('Lisa', 'Camenzuli'), ('Caroline', 'Hall'), ('Alina', 'Jidkova'), ('Ana Paula', 'Zannoni'), ('Margarita', 'Medina'), ('Anne', 'Miller'), ('Jennifer', 'Hall'), ('Delphine', 'Costantini Benoit'), ('Daniela', 'Cocos'), ('Anna', 'Linkova'), ('Monika', 'Mastalirova'), ('Lenka', 'Cenkova'), ('Maria Francesca', 'Bentivoglio'), ('Ruta', 'Deduraite'), ('Kum Ok', 'Im'), ('Mai', 'Tanii'), ('Cindy', 'Dock'), ('Nadine', 'Van De Walle'), ('Lee', 'Chan'), ('Marina', 'Escobar Martinez'), ('Aarthi', 'Venkatesan'), ('Nino', 'Louarsabishvili'), ('Olga', 'Ivanova'), ('Amira', 'Segaoula'), ('Ana Elizabeth', 'Jimenez Garcia'), ('Candida', 'Reid'), ('Frances', 'Hearn'), ('Ditte', 'Hougaard'), ('Sophie', 'Georges'), ('Charlotta', 'Aronsson'), ('Anthonia', 'Onwochie'), ('Cristina', 'Moros'), ('Norma', 'Aules'), ('Petra', 'Gaspar'), ('Sai Jayalakshmy', 'Jayaram'), ('Monica', 'Bonilla'), ('Barbara', 'Urbanska'), ('Amaranta', 'Spinelli'), ('Diana', 'Sutedja'), ('Kandiss', 'Creighton'), ('Melanie', 'Schnell'), ('Dally', 'Randriantefy'), ('Silvia', 'Schiavetti'), ('Clelia', 'Anfuso'), ('Raffaella', 'Valentino'), ('Debby', 'Haak'), ('Misae', 'Sakai'), ('Courtenay', 'Chapman'), ('Courtenay', 'Middleton'), ('Zoe', 'Mellis'), ('Ana Paula', 'Mores'), ('Arthi', 'Venkatesan'), ('Jennifer', 'Aubernon'), ('Ludmila', 'Richterova'), ('Audrey', 'Sidot'), ('Siobhan', 'Munro'), ('Mehry', 'Shawki'), ('Mirela', 'Vladulescu'), ('Camila', 'Andolfato'), ('Tamara', 'Rollenberg'), ('Maria', 'Geznenge'), ('Tanja', 'Karsten'), ('Maria', 'Gusheva'), ('Anat', 'Ashtamkar'), ('Ludivine', 'Laville'), ('Karla', 'Porter'), ('Jennifer', 'Ligator'), ('Oksana', 'Enik'), ('Kyoko', 'Kojima'), ('Ivana', 'Beli'), ('Celeste', 'Frey'), ('Monika', 'Kasianiuk'), ('Timea', 'Ferenczy'), ('Kirsten', 'Schenk'), ('Susanna', 'Bostanjyan'), ('Yolanda', 'Civit Canals'), ('Kristina', 'Brandi'), ('Karine', 'Gallet'), ('Ivana', 'Belancic'), ('Radka', 'Pelikanova'), ('Adriana', 'Mingireanu'), ('Juliana', 'Piumatti'), ('Jenny', 'Rolf'), ('Laura', 'Austin'), ('Rosa Maria', 'Perez'), ('Hsueh Li', 'Hsu'), ('Stephanie', 'Nickitas'), ('Linda', 'Smaira'), ('Noelia', 'Serra'), ('Sasha', 'Mattu'), ('Yan', 'Chen'), ('Bonnie', 'Bleecker'), ('Sasha', 'Hanna'), ('Ciska', 'Kramer'), ('Keiko', 'Tameishi'), ('Teodora', 'Nedeva'), ('Georgia', 'Fernandes'), ('Yi Ching', 'Wu'), ('Zuzana', 'Hejdova'), ('Alina', 'Wyganowska'), ('Jiang', 'Yu'), ('Chin Bee', 'Khoo'), ('Freekje', 'Maas'), ('Kelly', 'Callahan'), ('Kelly', 'Brown'), ('Katia', 'Altilia'), ('Rosanna', 'Valerio'), ('Laura', 'Garcia Pacual'), ('Milena', 'Nekvapilova'), ('Cristina', 'Portas'), ('Chie', 'Nagano'), ('Yamile', 'Fors Guerra'), ('Monica', 'Rebolledo'), ('Shalini', 'Perera'), ('Sara', 'Haider'), ('Patrycja', 'Gajdzik'), ('Manisha', 'Patel'), ('Anca', 'Barna'), ('Karolina', 'Bakalarova'), ('Carmen', 'Madden'), ('Tomomi', 'Sumi'), ('Kristen', 'Sanderson'), ('Jumoke', 'Ajulo'), ('Carlijn', 'Buis'), ('Janina', 'Tajkovsky'), ('Katrin', 'Meiss'), ('Lenka', 'Humenikova'), ('Surabhi', 'Singh'), ('Francois', 'Ramos'), ('Tamarine', 'Tanasugarn'), ('Polina', 'Galanina'), ('Melissa', 'Avants'), ('Anna', 'Mogilnicka'), ('Dominika', 'Gerwin'), ('Coral', 'Orpi'), ('Tara', 'Snyder'), ('Ruth', 'Diaz'), ('Katie', 'Mcglennen'), ('Rosa Maria', 'Andres Rodriguez'), ('Nathalie', 'Callen'), ('Metasebeya', 'Temesgen'), ('Anna Sabrina', 'Ferrari'), ('Kumi', 'Hagino'), ('Nezha', 'Saber'), ('Tanja', 'Buchheim'), ('Irene', 'Macia'), ('Maria Paola', 'Zavagli'), ('Cintia', 'Seaton'), ('Haruka', 'Inoue'), ('Victoria', 'Courmes Benedetti'), ('Yvette', 'Basting'), ('Angelika', 'Roesch'), ('Dorota', 'Glowacka'), ('Hadas', 'Ronen'), ('Nadine', 'Raidt'), ('Sachiyo', 'Hirayama'), ('Temesgen', 'Metasebeya'), ('Andressa', 'Bornschein'), ('Brandi', 'Freudenberg'), ('Katya', 'Zenklusen'), ('Alena', 'Havrlikova'), ('Michelle', 'Smith'), ('Ruth Tekle', 'Andemariam'), ('Tjasa', 'Jezernik'), ('Chern Yi', 'Chiew'), ('Mariana', 'Lopez Palacios'), ('Raluca', 'Gheorghe'), ('Maria Eliana', 'Castro'), ('Antoaneta', 'Pandjerova'), ('Inga', 'Bertschmann'), ('Virginia', 'Tournebise'), ('Amira', 'El Borolossy'), ('Claudia', 'Reimering'), ('Valentina', 'Solari'), ('Kym', 'Laver'), ('Lindsay', 'Lee Waters'), ('Graciela', 'Velez'), ('Tathiana', 'Garbin'), ('Athina', 'Briegel'), ('Lana', 'Scardigno'), ('Lobena', 'Cherif'), ('Federica', 'Maldini'), ('Andrea', 'Piski'), ('Adriana', 'Thaggard'), ('Petra', 'Spaar'), ('Selima', 'Sfar'), ('Cristina', 'Lopez Santos'), ('Fernanda', 'Tsucamoto'), ('Eleonora', 'Dickinger'), ('Callie', 'Creighton'), ('Francesca', 'Lubiani'), ('Laura Mirabela', 'Teodorescu'), ('Mirabela', 'Teodorescu'), ('Nicole', 'Kaiser'), ('Samira', 'Takourabet'), ('Georgina', 'Palombo'), ('Frida', 'Flores'), ('Sylvia', 'Plischke'), ('Paula', 'Racedo'), ('Nicola', 'Kaiwai'), ('Assmae', 'Jabri'), ('Barbara', 'Fuzesi'), ('Joana', 'Manta'), ('Megumi', 'Katakura'), ('Yvonne', 'Flynn'), ('Mariana', 'Moreno'), ('Barbara', 'Lado'), ('Olga', 'Ivlieva'), ('Zuzana', 'Lesenarova'), ('Dragana', 'Zaric'), ('Mira', 'Veghova'), ('Massoumeh', 'Emami'), ('Eva', 'Teruel Jover'), ('Maria Elena', 'Jimenez'), ('Iva', 'Majoli'), ('Jodi', 'Richardson'), ('Mariana', 'Faustinelli'), ('Li', 'Chen'), ('Gabriela', 'Lancman'), ('Giselle', 'Swart'), ('Jenny Ann', 'Fetch'), ('Elizabeth', 'Schmidt'), ('Veronika', 'Safarova'), ('Sasithorn', 'Tangthienkul'), ('Tari Ann', 'Toro'), ('Alice', 'Rangsithienchai'), ('Milena', 'Stanoycheva'), ('Nicole', 'Oomens'), ('Victoria', 'Bakhtadze'), ('Hila', 'Rosen'), ('Sanaa', 'Ziadi'), ('Sirilux', 'Mingmolee'), ('Noelia', 'Serra Djamdjean'), ('Trudi', 'Musgrave'), ('Sandrine', 'Bouilleau'), ('Hiroko', 'Komori'), ('Brigitte', 'Loogen'), ('Maria Soledad', 'Coppari'), ('Leyla', 'Ogan'), ('Ajda', 'Klevisar'), ('Vanessa', 'Kendall'), ('Megan', 'Miller'), ('Elizabeth', 'Fletcher'), ('Saida', 'Hared'), ('Emi', 'Sakurai'), ('Carolina', 'Melicoff'), ('Dominique', 'Glinzler'), ('Paola', 'Martinez'), ('Radka', 'Surova'), ('Lilly', 'Raffa'), ('Nicola', 'Payne'), ('Miranda', 'Ball'), ('Julie', 'Huang'), ('Hsiao Chuan', 'Fan'), ('Esther', 'Knox'), ('Rushmi', 'Chakravarthi'), ('Karina', 'Miguenz'), ('Jorgelina', 'Torti'), ('Rute', 'Almeida'), ('Ji Young', 'Yoo'), ('Yu Min', 'Fan Chiang'), ('Mariela', 'Brunello'), ('Paola', 'Almeida'), ('Martina', 'Nedelkova'), ('Martina', 'Somoano'), ('Andrea', 'Hardegger'), ('Shivani', 'Bhatt'), ('Nadia', 'Johnston'), ('Akiko', 'Kinebuchi'), ('Paula', 'Hermida Velo'), ('Cecilia', 'Simon'), ('Lenka', 'Zacharova'), ('Camilla', 'Kremer'), ('Kaori', 'Kuki'), ('Katerina', 'Hladka'), ('Linda', 'Sentis'), ('Lilian', 'Ighodaro'), ('Miroslava', 'Veghova'), ('Monica', 'Toledo'), ('Anastasia', 'Pozdnyakova'), ('Maria', 'Sanchez Lorenzo'), ('Lucie', 'Dvorakova'), ('Eva', 'Slaninkova'), ('Maria Veronica', 'Widyadharma'), ('Sadiya', 'Pathan'), ('Mirva', 'Maenpaa'), ('Gaelle', 'Adda'), ('Yu Mei', 'Chen'), ('Stefanie', 'Haidner'), ('Veronica', 'Stele'), ('Gabriela', 'Netikova'), ('Sandra', 'Deamelio'), ('Anne Sophie', 'Bittighoffer'), ('Birgit', 'Riederer'), ('Tara Deen', 'Moore'), ('Alison', 'Nash'), ('Pimpisamai', 'Kansuthi'), ('Gabriela', 'Kucerova'), ('Charlotte', 'Aagaard'), ('Kara', 'Warkentin'), ('Anna Maria', 'Doan'), ('Sidonia', 'Wolfinger'), ('Veronica', 'Goude'), ('Marta', 'Peman'), ('Patricia', 'Mongauzi'), ('Gabriella', 'Somers'), ('Aleksandra', 'Olsza'), ('Vanessa', 'Caddick'), ('Karin', 'Miller'), ('Nena', 'Vukasovic'), ('Ana', 'Friganovic'), ('Ivona', 'Mihailova'), ('Irena', 'Mihailova'), ('Fiona', 'Barrett'), ('Diana', 'Escalante'), ('Imen', 'Ben Larbi'), ('Murjana', 'Boskova'), ('Magali', 'Partyka'), ('Leloba', 'Seitshiro'), ('Jung Hua', 'Kuo'), ('Sandra', 'Mantler'), ('Pei Jung', 'Wu'), ('Gaelle', 'Widmer'), ('Adrienn', 'Hegedus'), ('Karin', 'Palme'), ('Maria Eugenia', 'Rojas'), ('Sarah', 'Stanley'), ('Tanja', 'Magoc'), ('Shareen Rena', 'Lai'), ('Kyra', 'Nagy'), ('Hrafuhildur', 'Hannesdotter'), ('Julia', 'Adlbrecht'), ('You Shu', 'Wu'), ('Oshri', 'Shashua'), ('Eugenia', 'Silantieva'), ('Josien', 'Boverhof'), ('Lilit', 'Teloumian'), ('Isabel', 'Horkmans'), ('Inga', 'Albers'), ('Vanessa', 'Basora'), ('Laura', 'Fodorean'), ('Daniela', 'Forti'), ('Susana', 'Carreras'), ('Lucia', 'Curielli'), ('Lucy', 'Altman'), ('Jana', 'Staskova'), ('Lui Li', 'Shen'), ('Lorena', 'Martinez'), ('Upeka', 'Wijeratne'), ('Lydia', 'Perkins'), ('Silvija', 'Talaja'), ('Marie Ange', 'Koami'), ('Mercedes', 'Del Valle Prieto'), ('Amanda', 'Keen'), ('Aurea', 'Castella'), ('Irina', 'Kornienko'), ('Angela', 'Geib'), ('Petra', 'Mandula'), ('Meilen', 'Tu'), ('Yin', 'Chen'), ('Louise', 'Latimer'), ('Michelle', 'Faucher'), ('Amanda', 'Augustus'), ('Alexandra', 'Guzman'), ('Zuzana', 'Rakicka'), ('Yenny', 'Kumalawati'), ('Biljana', 'Pawlowa Dimitrova'), ('Maria', 'Pavlidou'), ('Nadia', 'Chvanova'), ('Sylvia', 'Lokollo'), ('Lizeth', 'Asuaje'), ('Daria', 'Ovsyannikova'), ('Petra', 'Plackova'), ('Yumi', 'Kawakita'), ('Olga', 'Glouschenko'), ('Maria Rene', 'Espinosa'), ('Joanna', 'Gozdek'), ('Corina', 'Morariu'), ('Laura', 'Bernal'), ('Geraldine', 'Aizenberg'), ('Claudia', 'Oliveira'), ('Clara', 'Udofa'), ('Annabel', 'Ellwood'), ('Ingrid', 'Meeus'), ('Jolanda', 'Mens'), ('Andrea', 'Nathan'), ('Jenny', 'Falcon Manrique'), ('Mi Ra', 'Jeon'), ('Tu', 'Dong'), ('Anne', 'Stueckle'), ('Karina', 'Karner'), ('Maria Florica', 'Pandele'), ('Michaela', 'Lazerova'), ('Jana', 'Bourova'), ('Isabella', 'Kling'), ('Rita', 'Kuti Kis'), ('Valentine', 'Vernaz'), ('Hiromi', 'Okazaki'), ('Celeste', 'Contin'), ('Isil', 'Cayirli'), ('Cristina', 'Bengzon'), ('Futaba', 'Kubota'), ('Shalini', 'Thakar'), ('Agata', 'Odachowska'), ('Maiken', 'Pape'), ('Adeyinka Elisabeth', 'Thompson'), ('Magali', 'Lamarre'), ('Claudia', 'Perolini'), ('Natyanee', 'Tanawsri'), ('Kylie', 'Moulds'), ('Dorothee', 'Kurz'), ('Luisa', 'Fantola'), ('Nina', 'Wenger'), ('Joanna', 'Phang'), ('Stephanie', 'Koderisch'), ('Habiba', 'Ifrakh'), ('Iva', 'Berankova'), ('Tagifano', 'Soonalole'), ('Alexandra', 'Kleffel'), ('Akiko', 'Gunji'), ('Claire', 'Curran'), ('Antonina', 'Grib'), ('Izaskun', 'Bernal'), ('Seiko', 'Okamoto'), ('Natacha', 'Randriantefy'), ('Lauren', 'Rose'), ('Vivian', 'Acra'), ('Marissa', 'Gildemeister'), ('Anca', 'Vasiloaica'), ('Alexandra', 'Charles'), ('Adriana', 'Lopez'), ('Cindy', 'Watson'), ('Zuzana', 'Demeterova'), ('Zuzana', 'Lindner'), ('Katarina', 'Lindner'), ('Ludivine', 'Nicolas'), ('Caroline', 'Marret'), ('Segolene', 'Berger'), ('Amelie', 'Cocheteux'), ('Agustina', 'Saenz'), ('Tina', 'Plivelitsch'), ('Aoife', 'ONeill'), ('Kim', 'Kelly'), ('Cassia', 'Sigle'), ('Tsarina', 'Domacasse'), ('Fiana', 'Meineck'), ('Saskia', 'Meineck'), ('Miroslava', 'Vavrinec'), ('Aurelie', 'Freysz'), ('Giulia', 'De Muro'), ('Na', 'Fan'), ('Beatriz', 'Aguilar'), ('Melinda', 'Glenister'), ('Jasmine', 'Choudhury'), ('Natalia', 'Nikitina'), ('Lilia', 'Osterloh'), ('Siobhan', 'Drake Brockman'), ('Bojana', 'Borovnica'), ('Geraldine', 'Figueiredo'), ('Amelie', 'Castera'), ('Anne Laurence', 'Bilenne'), ('Gisele', 'Ferreira'), ('Spela', 'Kobetic'), ('Hana', 'Sromova'), ('Reiko', 'Ino'), ('Leonie', 'Odriscoll'), ('Galina', 'Dimitrova'), ('Katarina', 'Markovski'), ('Guadalupe', 'Hernandez'), ('Bianca', 'Cremer'), ('Camilla', 'Hsu'), ('Annica', 'Lindstedt'), ('Hye Young', 'Bae'), ('Yi Dan', 'Liu'), ('Brooke', 'Siebel'), ('Grace', 'Sorbello'), ('Petrona', 'Bantay'), ('Lindsay', 'Bruce'), ('Qi', 'Tuo'), ('Belen', 'Berbel Soriano'), ('Natalia', 'Pellegrini'), ('Giulia', 'Casoni'), ('Stephanie', 'Sheppard'), ('Monica', 'Scartoni'), ('Isabelle', 'Taesch'), ('Anja', 'Tragardh'), ('Luciana', 'Ullmann'), ('Eva', 'Sestakova'), ('Saori', 'Obata'), ('Kingkaew', 'Niroj'), ('Olga', 'Timofeeva'), ('Tamara', 'Aranda Nunez'), ('Milena', 'Gadjanova'), ('Megan', 'Dorney'), ('Irina', 'Zhdanova'), ('Nicole', 'Melch'), ('Alice', 'Canepa'), ('Eva', 'Belbl'), ('Michelle', 'Summerside'), ('Vladimira', 'Uhlirova'), ('Chantal', 'Reuter'), ('Hye Jeong', 'Chang'), ('Laura', 'Frias'), ('Sara', 'Bonomi'), ('Sandra', 'Kleinova'), ('Mirja', 'Wagner'), ('Orit', 'Strauss'), ('Laura', 'Rossi'), ('Anna', 'Kazakevitch'), ('Monica', 'Baez'), ('Jana', 'Ondrouchova'), ('Ewa', 'Grusiecka'), ('Sarah', 'Scaringe'), ('Yoko', 'Torii'), ('Ana Paola', 'Gonzalez Diaz'), ('Magdelena', 'Zdenovcova'), ('Kirsty', 'Blumberg'), ('Lynette', 'Tay'), ('Anne', 'Plessinger'), ('Adriana', 'Barna'), ('Magdalena', 'Rejniak'), ('Typhaine', 'Cottenier'), ('Michelle', 'Buess'), ('Anna', 'White'), ('Hanna Katri', 'Aalto'), ('Ambreen', 'Rana'), ('Jana', 'Benova'), ('Katia', 'Roubanova'), ('Raquel', 'Ortega Herran'), ('Tamara', 'Pavlov'), ('Kristina', 'Pojatina'), ('Eva', 'Januskova'), ('Andreea', 'Petrisor'), ('Nathalie', 'Jarlan'), ('Renee', 'Reid'), ('Izumi', 'Sugimoto'), ('Karolina', 'Glowacka'), ('Moriyo', 'Adachi'), ('Marina', 'Petrovic'), ('Karina', 'Rinaldi'), ('Anna', 'Persson'), ('Desislava', 'Topalova'), ('Sofia', 'Managadze'), ('Eveline', 'Wouters'), ('Sofia', 'Quaglia'), ('Marissa', 'Catlin'), ('Laura', 'Gotarredona'), ('Kyoko', 'Iida'), ('Romina', 'Ottoboni'), ('Melinda', 'Petkes'), ('Laura', 'Aguero'), ('Amanda', 'Basica'), ('Stefania', 'Stefansdottir'), ('Linda', 'Mattsson'), ('Maria Andrea', 'Quintero'), ('Hong Hui', 'Liu'), ('Biljana', 'Joketovic'), ('Anita', 'Kurimay'), ('Veneta', 'Karatchomakova'), ('Monika', 'Pimentel'), ('Surina', 'De Beer'), ('Tokiyo', 'Ikeda'), ('Ana Maria', 'Moura'), ('Yasuko', 'Nishimata'), ('Tzu Ting', 'Weng'), ('Tatjana', 'Jecmenica'), ('Selin', 'Nassi Tekikbas'), ('Meirav', 'Duek'), ('Lindsay', 'Alpert'), ('Melania', 'Mirambell'), ('Matilda', 'David'), ('Si Yiah', 'Ling'), ('Mary Carlisle', 'White'), ('Natasha', 'Papadopoulou'), ('Marijana', 'Kovacevic'), ('Dalia', 'El Sheikh'), ('Maria', 'Lindberg'), ('Lilian', 'Silva'), ('Melanie', 'Schneider'), ('Katherine', 'Tessier'), ('Kiriaki', 'Karaproimou'), ('Carolina', 'Kanacri'), ('Shelley', 'Bryce'), ('Marina', 'Lazarovska'), ('Ivona', 'Grujic'), ('Mamotebang', 'Molise'), ('Amy', 'Jensen'), ('Hisayo', 'Unno'), ('Emeka', 'Mayes'), ('Carolina', 'Mayorga'), ('Monica', 'Massarella'), ('Adriana', 'Rodriguez'), ('Edurne', 'Tabernero'), ('Sabine', 'Oristil'), ('Tatiana', 'Babina'), ('Agustine', 'Limanto'), ('Ekaterina', 'Kavoun'), ('Kaoutar', 'Yazghi'), ('Nadeja', 'Karpol'), ('Patricia', 'Wartusch'), ('Traci', 'Green'), ('Jessica', 'Steck'), ('Laurence', 'Combes'), ('Veronika', 'Jakimicova'), ('Jennifer', 'Russell'), ('Sun Young', 'Kim'), ('Nuria', 'Martinez'), ('Jana', 'Sokolenko'), ('Maria', 'Persson'), ('Keiko', 'Nagai'), ('Irina', 'Kakoulia'), ('Veronica', 'Castro'), ('Maria Shirley', 'Valler'), ('Martini', 'Pospisilova'), ('Miriam', 'Dagostini'), ('Darina', 'Mecova'), ('Zana', 'Zlebnik'), ('Ann', 'Simons'), ('Ding', 'Ding'), ('Silvina', 'Saulo'), ('Tamami', 'Kamiyama'), ('Jenny', 'Kuhlin'), ('Phorhathai', 'Suksamran'), ('Caroline', 'Leens'), ('Marina', 'Raic'), ('Maria', 'Rasmussen'), ('Laura', 'Smith'), ('Sonja', 'Foks'), ('Lechia', 'Trewick'), ('Susan', 'Huang'), ('Irina', 'Nossenko'), ('Nina', 'Schwarz'), ('Julieta', 'Calabrese'), ('So Yeon', 'Im'), ('Maria Julieta', 'Lillo'), ('Nami', 'Urabe'), ('Sara', 'Taweel'), ('Carla', 'Jimenez'), ('Annica', 'Cooper'), ('Virginia', 'Sadi'), ('Adriana', 'Garuolis'), ('Isabel', 'Santos'), ('Priyanka', 'Contractor'), ('Nikoleta', 'Pritargova'), ('Padma Preetham', 'Mahalingam'), ('Kyung Joo', 'Won'), ('Charlotte', 'Feasby'), ('Ya Chi', 'Yang'), ('Wei', 'Ni'), ('Shera', 'Wiegler'), ('Carolina', 'Gago Fuentes'), ('Delphine', 'Baudin'), ('Electra', 'Henry'), ('Denisa', 'Sobotkova'), ('Alina', 'Stroiu'), ('Sally', 'Bogaert Morel'), ('Barbora', 'Zahnova'), ('Ana Catarina', 'Nogueira'), ('Renata', 'Brito'), ('Maria Fernanda', 'Carrillo'), ('Gizella', 'Turbok'), ('Isabel', 'Dominguez Munaiz'), ('Kibibi', 'Moseley'), ('Claire', 'Lyte'), ('Dominika', 'Olszewska'), ('Marine', 'Nizri Spiegel'), ('Jody', 'Anglin'), ('Mi Ok', 'Kim'), ('Chia Yi', 'Wu'), ('Kristen', 'Radford'), ('Ana', 'Sans'), ('Romina', 'Labrador'), ('Kristina', 'Irwan'), ('Nuria', 'Montero'), ('Renata', 'Martins'), ('Evi', 'Murtiningsih'), ('Kadi', 'Hilpus'), ('Archana', 'Venkataraman'), ('Lesley', 'Kramer'), ('Yun Ning', 'Fu'), ('Nosa', 'Esorae'), ('Jana', 'Macurova'), ('Marieke', 'Gunawan'), ('Sylvie', 'Sallaberry'), ('Reina', 'Oda'), ('Phyllis', 'Wilunda'), ('Maja', 'Mise'), ('Sona', 'Saringulyan'), ('Jennifer', 'De Spain'), ('Ariadne', 'Katsouli'), ('Eve', 'Langley'), ('Zsofia', 'Golopencza'), ('Catherine', 'Valantin'), ('Carolina', 'Sanabria'), ('Anne Laure', 'Le Guennec'), ('Helene', 'Louvet'), ('Rafaela', 'Boero'), ('Sarah', 'Gillespie Jones'), ('Anneliese', 'Rose'), ('Fotini', 'Kapetanaki'), ('Stephanie', 'Lobner'), ('Marina', 'Andreoni'), ('Naoko', 'Ishikawa'), ('Paola', 'Gonzales'), ('Alida', 'Gallovits'), ('Yang Jin', 'Chung'), ('Juthika', 'Chokshi'), ('Zhi Rong', 'Liu'), ('Danielle', 'Lund'), ('Ingrid', 'Siegrist'), ('Monica', 'Saffie'), ('Alessandra', 'Dellaversana'), ('Carole', 'Soubis'), ('Deborah', 'Gaviria'), ('Marilia', 'Fritelli'), ('Kim', 'Niggemeyer'), ('Pamela', 'Gonzalez'), ('Hanna', 'Puustinen'), ('Brankica', 'Stankovic'), ('Syna', 'Schreiber'), ('Magdalena', 'Grzybowska'), ('Francesca', 'Maggi'), ('Patricia', 'Marci'), ('Denise', 'Doring'), ('Sachie', 'Umehara'), ('Ya Fang', 'Tsai'), ('Eszter', 'Molnar'), ('April', 'Gabler'), ('Paula', 'Cantarutti'), ('Reetu', 'Sethi'), ('Eun Kyung', 'Kim'), ('Natalie', 'Cahana'), ('Luciana', 'Masante'), ('Jahnavi', 'Parekh'), ('Ninani', 'Coyne'), ('Magdalena', 'Taltavull Fernandez'), ('Ilda', 'Saulic'), ('Andrea', 'Schwarz'), ('Chotika', 'Wannachinda'), ('Nanely', 'Vallejo'), ('Teryn', 'Ashley'), ('Kalina', 'Diankova'), ('Onalenna', 'Leepile'), ('Ayami', 'Takase'), ('Patty', 'Schnyder'), ('Henrieta', 'Nagyova'), ('Emmanuelle', 'Curutchet'), ('Eugenia', 'Kulikovskaya'), ('Audrey', 'Wilmart'), ('Briana', 'Harris'), ('Manuela', 'Borzi'), ('Chiho', 'Kobayashi'), ('Megan', 'Russell'), ('Asja', 'Tankic'), ('Szandra', 'Fuzesi'), ('Beauty', 'Macleod'), ('Jennifer', 'Sans'), ('Steffi', 'Keim'), ('Aneta', 'Soukup'), ('Maria Alejandra', 'Claure'), ('Brooke', 'Skeen'), ('Olga', 'Teplynska'), ('Berenice', 'Alvarez'), ('Irina', 'Anikina'), ('Julie', 'Ditty'), ('Monique', 'Le Sueur'), ('Monica', 'Poveda'), ('Alena', 'Paulenkova'), ('Rebecca', 'Spurr'), ('Fabiola', 'Zuluaga'), ('Jheni', 'Osman'), ('Tatiana', 'Poutchek'), ('Yessica', 'Garcia'), ('Tabitha', 'Blackburn'), ('Vinitha', 'Dikshit'), ('Monika', 'Vinterova'), ('Irene', 'Fernandez Cabe'), ('Joana', 'Cortez'), ('Sabina', 'Da Ponte'), ('Oksana', 'Melnichenko'), ('Etsuko', 'Yamada'), ('Stephanie', 'Sajbert'), ('Morya', 'Peres'), ('Cindy', 'Schuurmans'), ('Christa', 'Grey'), ('Caroline', 'Christian'), ('Adriana', 'Radic'), ('Monica', 'Amador Pons'), ('Barbara', 'Keller'), ('Samantha', 'Reeves'), ('Spela', 'Rajh'), ('Laurence', 'Pont'), ('Daria', 'Soukirno'), ('Elisabeth', 'Unge'), ('Lenka', 'Novotna'), ('Irma', 'Vizcaino'), ('Nannette', 'Duxin'), ('Alejandra', 'Hernandez Quiroz'), ('Kelly', 'Toa'), ('Karen', 'Black'), ('Virginia', 'Colmenero'), ('Axelle', 'Alquier'), ('Amy', 'Newman'), ('Amanda', 'Peros'), ('Barbara', 'Schwartz'), ('Laura', 'Andrei'), ('Ursula', 'Albizuri'), ('Stephanie', 'Hazlett'), ('Ana', 'Knezovic'), ('Celena', 'Mccoury'), ('Silvia', 'Sosnarova'), ('Lilia', 'Biktyakova'), ('Amelie', 'Philippe'), ('Noswazi', 'Tshabalala'), ('Kelly', 'Liggan'), ('Maiko', 'Inoue'), ('Katja', 'Kovac'), ('Denisa', 'Chladkova'), ('Holly', 'Parkinson'), ('Liliana', 'Avola'), ('Alexandra', 'Ramirez'), ('Olena', 'Kuzmyk'), ('Dee Dee', 'Herring'), ('Liza', 'Andriyani'), ('Natalie', 'Fracassi'), ('Colleen', 'Cheng'), ('Alena', 'Jecminkova'), ('Jie', 'Xu'), ('Asri Nursanti', 'Ebo'), ('Lucy', 'Mcdonald'), ('Cara', 'Black'), ('Eva', 'Doman'), ('Esther', 'Brunn'), ('Nicola', 'Woodhouse'), ('Lyndsay', 'Reilly'), ('Cristina', 'Correia'), ('Nathalie', 'Dechy'), ('Lisa', 'Sendelbach'), ('Maria Eugenia', 'Fernandez'), ('Francesca', 'Volonte'), ('Sheau Shan', 'Liew'), ('Ludmilla', 'Varmuza'), ('Kathryn', 'Sell'), ('Keiko', 'Taguchi'), ('Ana', 'Skafar'), ('Rosa Maria', 'Morazan'), ('Elena', 'Villatoro'), ('Kristin', 'Koenig'), ('Evgenia', 'Tarasova'), ('Chiaki', 'Nakajima'), ('Magui', 'Serna'), ('Evelyn', 'Moser'), ('Justyna', 'Richter'), ('Vanessa', 'Manya Arranz'), ('Silvia', 'Bayon'), ('Seden', 'Ozlu'), ('Saskia', 'Simon'), ('Julie', 'White'), ('Yu Jin', 'Wang'), ('Sophie', 'Turine'), ('Mandy', 'Carvalho'), ('Catherine', 'Campbell'), ('Carolina', 'Lillo Carrazon'), ('Johanna', 'Isokangas'), ('Paola', 'Palencia'), ('Pilar', 'Andres'), ('Silvana', 'Barna'), ('Kim', 'Gysbertse'), ('Julia', 'Kryoukova'), ('Maria', 'Wolfbrandt'), ('Raffaella', 'Bindi'), ('Laura', 'Tuzzi'), ('Paula', 'Garcia'), ('Olena', 'Antypina'), ('Maria De Los Angeles', 'Montoya'), ('Barbara', 'Privrel'), ('Christine', 'Vogt'), ('Stanka', 'Ilkova'), ('Irene', 'Stavridou'), ('Roberta', 'Lamagni'), ('Amy', 'Wachenheim'), ('Amanda', 'Grahame'), ('Janisse', 'Mota'), ('Ana Maria', 'Franco Lopez'), ('Virpi', 'John'), ('Paola', 'Arrangoiz'), ('Kim', 'Kilsdonk'), ('Simge', 'Resmor'), ('Viviana', 'Mracnova Burgess'), ('Fiona', 'Lishman'), ('Yoon Jeong', 'Cho'), ('Ikram', 'El Aarej'), ('Maria Carolina', 'Torres'), ('Julieta', 'Robin'), ('Eun Young', 'Ban'), ('Jyotsna', 'Vasisht'), ('Ana', 'Gaspar'), ('Romana', 'Cernoskova'), ('Julia', 'Freitas'), ('Sophie', 'Erre'), ('Nina', 'Wennerstrom'), ('Fabienne', 'Thill'), ('Francesca', 'Vaghetti'), ('Francesca', 'Guastella'), ('Naoko', 'Kanai'), ('Tina', 'Kotter'), ('Pauline', 'Trinchant'), ('Meghann', 'Shaughnessy'), ('Greta', 'Arn'), ('Marjorie', 'Muller'), ('Katarina', 'Balan'), ('Natalia', 'Rubio'), ('Anabella', 'Sansostri'), ('Solange', 'Rasoarivelo'), ('Janelle', 'Watson'), ('Mariola', 'Prado'), ('Nina', 'Janzekovic'), ('Fruzsina', 'Siklosi'), ('Cindy', 'Tow'), ('Laurence', 'Poujoulat'), ('Kristin', 'Gunnarsdottir'), ('Karem', 'Harboe'), ('Elisa', 'Scarpetta'), ('Katherine', 'Frame'), ('Ana', 'Katanic'), ('Marissa', 'Niroj'), ('Juliana', 'Jonsdottir'), ('Neza', 'Globocnik'), ('Chia Hui', 'Feng'), ('Meritxell', 'Mimo Bravo'), ('Magali', 'Denayer'), ('Petra', 'Russegger'), ('Silvana', 'Vargas'), ('Maria Elena', 'Torres'), ('Clarissa', 'Martinessi'), ('Elena', 'Arabadji'), ('Yvonne', 'Stratmann'), ('Veronika', 'Mayer'), ('Anna', 'Macia'), ('Lindsay', 'Rawling'), ('Min Fang', 'Chang'), ('Gloria', 'Guntinas'), ('Sonia', 'Perez'), ('Bettina', 'Horvath'), ('Fanny Fatima', 'Vasquez Soza'), ('Dita', 'Kochloffelova'), ('Marisue', 'Jacutin'), ('Monia', 'Belghith'), ('Rita', 'Horvath'), ('Elena', 'Salvador Reja'), ('Liana', 'Skordopoulou'), ('Maria', 'Chavez'), ('Angelika', 'Bachmann'), ('Evagelia', 'Roussi'), ('Alice', 'Pirsu'), ('Alla', 'Goncharenko'), ('Kristy', 'Dascoli'), ('Renata', 'Hlavova'), ('Natalia', 'Ganna'), ('Suzanne', 'Tolu'), ('Lucie', 'Vecerova'), ('Elena', 'Pioppo'), ('Marianne', 'Bakken'), ('Angelina', 'Zdorovitskaia'), ('Maria', 'Boboedova'), ('Sommer', 'Bisagas'), ('Carolina', 'Maurer'), ('Mei Hua', 'Hsu'), ('Janet', 'Walker'), ('Stephanie', 'Zenklusen'), ('Iva', 'Puflerova'), ('Lucie', 'Soumarova'), ('Kwon Hee', 'Kim'), ('Young Eun', 'Shin'), ('Min Hee', 'Lee'), ('Karolina', 'Jagieniak'), ('Ekaterina', 'Tikhankina'), ('Yi Chieh', 'Chen'), ('Maria', 'Goloviznina'), ('Shiho', 'Mochida'), ('Nikola', 'Hubnerova'), ('Yulia', 'Rudavska'), ('Ana', 'Alcazar'), ('Ipek', 'Senoglu'), ('Erika', 'Ohlsson'), ('Ayano', 'Oishi'), ('Emilie', 'Loit'), ('Francoise', 'Gillis'), ('Odeta', 'Naujokaite'), ('Carolina', 'Rojas Jimenez'), ('Irene', 'Adsuar'), ('Martina', 'Ondrejkova'), ('Katja', 'Karrento'), ('Berangere', 'Quillot'), ('Darian', 'Chappel'), ('Maria', 'Tasheva'), ('Sarah', 'Pestieau'), ('Tereza', 'Stenclava'), ('Andrea', 'Ho'), ('Carmen', 'Gajo Torrell'), ('Ianes', 'Moreira'), ('Sandra', 'Kloesel'), ('Dragana', 'Ilic'), ('Tamara', 'Davis'), ('Sofie', 'Werckx'), ('Ashleigh', 'Dolman'), ('Andrea', 'Van Den Hurk'), ('Ratricia', 'Diaz'), ('Annette', 'Oosters'), ('Isabella', 'Mitterlehner'), ('Amelie', 'Detriviere'), ('Erika', 'Pineider'), ('Krisztina', 'Kovacs'), ('Malika', 'Oberoi'), ('Mabel', 'Roviti'), ('Galina', 'Selyunina'), ('Shiho', 'Hisamatsu'), ('Diana', 'Ospina'), ('Amelie', 'Mauresmo'), ('Yan', 'Tang'), ('Ana Maria', 'Zarta'), ('Majdouline', 'Idrissi'), ('Kornelia', 'Varro'), ('Monika', 'Brzuskiewicz'), ('Catalina', 'Castano'), ('Candela', 'Novoa'), ('Meike', 'Frohlich'), ('Marina', 'Capin'), ('Juliana', 'Marques'), ('Libuse', 'Prusova'), ('Sorana', 'Mastan'), ('Zuzana', 'Prusova'), ('Renata', 'Kucerova'), ('Mami', 'Inoue'), ('Tarminder', 'Grover'), ('Jasleen', 'Randhawa'), ('Abigail', 'Tordoff'), ('Chia Hsuan', 'Fu'), ('Reka', 'Vidats'), ('Jessica', 'Fernandez'), ('Gaelle', 'Taton'), ('Linda', 'Faltynkova'), ('Anna', 'Bielen Zarska'), ('Maricris', 'Gentz'), ('Maija', 'Lamu'), ('Anne Gaelle', 'Sidot'), ('Tatiana', 'Kovaltchouk'), ('Verenisse', 'Munguia'), ('Kylene', 'Wong Simunyola'), ('Kimberly', 'Gates'), ('Zuzana', 'Filipova'), ('Lucie', 'Zaruba'), ('Zuzanna', 'Liskovcova'), ('Shubha', 'Srinivasan'), ('Geraldine', 'Bimes'), ('Jessica', 'Tribula'), ('Alena', 'Mitackova'), ('Liudmila', 'Nikoyan'), ('Christiane', 'Hoppmann'), ('Luisa Fernanda', 'Velez'), ('Sonia', 'Colomina'), ('Lianasari', 'Batubara'), ('Ainhoa', 'Goni Blanco'), ('Yaiza', 'Goni Blanco'), ('Kun', 'Zhang'), ('Vanessa', 'De Los Heros'), ('Anna', 'Zaporozhanova'), ('Seon Ja', 'Yoo'), ('Laura', 'Gatti'), ('Kristina', 'Kraszewski'), ('Johanna', 'Pesola'), ('Severine', 'Beltrame'), ('Susanne', 'Filipp'), ('Sabine', 'Neteler'), ('Frida', 'Engblom'), ('Pamela', 'Floro'), ('Sarah', 'Borwell'), ('Carmen', 'Gajo'), ('Marie Claude', 'Ostiguy'), ('Bahia', 'Mouhtassine'), ('Zuzana', 'Valekova'), ('Jin Young', 'Choi'), ('Rebeccah', 'Rosenfield'), ('Alejandra', 'Medrano'), ('Kendra', 'Segura'), ('Romina', 'Fonda'), ('Ana', 'Radeljevic'), ('Lisa', 'Mackey'), ('Rebecca', 'Leftherioti'), ('Mojca', 'Pavlinic'), ('Sabina', 'Kochan'), ('Diana', 'Vasquez'), ('Nana', 'Wada'), ('Mateja', 'Ogrizek'), ('Subhashini', 'Kalyanasundaram'), ('Elena', 'Juricich'), ('Susanne', 'Trik'), ('Karina', 'Maliska'), ('Cinta', 'Princep'), ('Fabienne', 'Gmeiner'), ('Martha', 'Montano'), ('Tamara', 'Mol'), ('Megumi', 'Todoroki'), ('Judit', 'Trunkos'), ('Alessia', 'Baracchini'), ('Natalia', 'Pishchaeva'), ('Delphine', 'De Winne'), ('Aleksandra', 'Radosavljevic'), ('Marina', 'Gojkovic'), ('Kara', 'Molony Hussey'), ('Milena', 'Stojanovic'), ('Marianne', 'Sibille'), ('Maria Cristina', 'Campana'), ('Tamara', 'Encina'), ('Danila', 'Prevuznakova'), ('Charlotta', 'Larsson'), ('Alexandra', 'Greabu'), ('Violette', 'Ahn'), ('Silvia', 'Navarro Orgilles'), ('Diana', 'Ramirez'), ('Andreia', 'Pires'), ('Louise', 'Lilleso'), ('Magdalena', 'Wojcik'), ('Lamia', 'Essaadi'), ('Sandra', 'Martinovic'), ('Anna', 'Barinova'), ('Florence', 'Boucard'), ('Helen', 'Richardson'), ('Tracy', 'Almeda Singian'), ('Marcela', 'Duarte'), ('Johanna', 'Engstrom'), ('Rebekah', 'Rhodes'), ('Juleya', 'Semenets'), ('Li', 'Tong'), ('Ludmila', 'Cervanova'), ('Francesca', 'Frappi'), ('Napaporn', 'Tongsalee'), ('Sally', 'Turner'), ('Eun Young', 'Ha'), ('Stephanie', 'Halsell'), ('Alina', 'Tecsor'), ('Rachel', 'Dean'), ('Rebecca', 'Turner'), ('Lenka', 'Vlachynska'), ('Tali', 'Fink'), ('Katarina', 'Valkyova'), ('Reina', 'Alexander'), ('Sujitra', 'Duangchan'), ('Tzveta', 'Panajotova'), ('Esther', 'Boyle'), ('Laura', 'Pena'), ('Min Jie', 'Shi'), ('Olga', 'Barabanschikova'), ('Angela', 'Buergis'), ('Diana', 'Gherghi'), ('Anouk', 'Sterk'), ('Assa', 'Berthe'), ('Maren', 'Haus'), ('Irina', 'Selyutina'), ('Simone', 'Jardim'), ('Vinca', 'Rampen'), ('Youliya', 'Dimitrova'), ('Stephanie', 'Schaer'), ('Mari', 'Toro'), ('Katalin', 'Marosi'), ('Naomi', 'Callow'), ('Meiling', 'Parks'), ('Josefina', 'Vega'), ('Lauren', 'Martin'), ('Daphne', 'Nicolatou'), ('Aurandrea', 'Narvaez'), ('Jana', 'Lubasova'), ('Ewa', 'Radzikowska'), ('Bianca', 'Catay'), ('Soledad', 'Lucero'), ('Maria Virginia', 'Moreno Heredia'), ('Katarzyna', 'Straczy'), ('Magalie', 'Portel'), ('Jovana', 'Krsikapa'), ('Minna', 'Rautajoki'), ('Alison', 'Ojeda'), ('Debora', 'Carvalho'), ('Claire', 'Jalade'), ('Jonni', 'Seymour'), ('Lara', 'Van Rooyen'), ('Anne', 'Jamers'), ('Marisol', 'Berengeno'), ('Sihem', 'Ben Youcef'), ('Ines', 'Zouabi'), ('Daniela', 'Bolanos'), ('Kristina', 'Curic'), ('Anna', 'Nordell'), ('Bryanne', 'Stewart'), ('Judith', 'Czigany'), ('Sabine', 'Lutter'), ('Krissy', 'Hamilton Heinberg'), ('Karolina', 'Zmyslowska'), ('Michelle', 'Dasso'), ('Leslie', 'Thile'), ('Valerie', 'Pavlickova'), ('Martina', 'Nedorostova'), ('Analia', 'Baca'), ('Lynn', 'Novack'), ('Vesna', 'Sevsek'), ('Daniela', 'Groseanu'), ('Tatiana', 'Semenova'), ('Michelle', 'Gough'), ('Christina', 'Popescu'), ('Adria', 'Engel'), ('Adria', 'Raines'), ('Jasmin', 'Halbauer'), ('Laila', 'Karim'), ('Ingrid', 'Peltier'), ('Jana', 'Sedivec'), ('Sian Arie', 'Staria'), ('Karina Ildor', 'Jacobsgaard'), ('Candace Olivia', 'Pedro'), ('Mette', 'Iversen'), ('Mehvish', 'Chishtie'), ('Nicole', 'Seitenbecher'), ('Claudia', 'Castro'), ('Maria Carmen', 'Escuder'), ('Eva', 'Escribano Poveda'), ('Ting', 'Li'), ('Sabrina', 'Valenti'), ('Phornsarin', 'Tovisitchai'), ('Chantel', 'Skulskyj'), ('Nicola', 'Seltenbecher'), ('Andrea', 'Masarykova'), ('Julia', 'Podgorochna'), ('Anna Patricia', 'Santos'), ('Diane', 'Asensio'), ('Gioconda', 'Pinzon'), ('Cristina', 'Fontelles'), ('Akiko', 'Morigami'), ('Faratiana', 'Rasoarilalao'), ('Bettina', 'Auer'), ('Martina', 'Miklosava'), ('Eny', 'Sulistyowati'), ('Melisa', 'Arevalo'), ('Wei Yen', 'Lai'), ('Romy', 'Hutchins'), ('Monthika', 'Anuchan'), ('Anna', 'Font Estrada'), ('Erin', 'Boisclair'), ('Kadija', 'Richards'), ('Gabriela Alejandra', 'Tamasi'), ('Magalie', 'Gaillot'), ('Daria', 'Neretina'), ('Petra', 'Rampre'), ('Brie', 'Rippner'), ('Catalina', 'Acosta'), ('Ana Lucia', 'Pereyra'), ('Diana', 'Monsivaiz'), ('Cristina', 'Coletto'), ('Anna', 'Savitskaya'), ('Roberta', 'Radin'), ('Katrina', 'Mihaere'), ('Miki', 'Kuramochi'), ('Nicole', 'Remis'), ('Diana', 'Majkic'), ('Sophie', 'Regnier'), ('Marcelle', 'Hirt'), ('Alexa', 'De Bont'), ('Marlene', 'Weingartner'), ('Naheeda', 'Noormohamed'), ('Yulia', 'Ikonnikova'), ('Lindsey', 'Stead'), ('Isabel', 'Fonts'), ('Verena', 'Cerny'), ('Raluca', 'Sandu'), ('Azra', 'Resic'), ('Tara', 'Kanbargimath'), ('Monica', 'Rincon'), ('Naoko', 'Horikawa'), ('Pallavi', 'Ravikumar'), ('Candice', 'De La Torre'), ('Katerina', 'Chuda'), ('Cintia', 'Perez'), ('Susanne', 'Losel'), ('Michou', 'Tulfer'), ('Laetitia', 'Renault'), ('Jung Chi', 'Tsai'), ('Silvia', 'Tozzi'), ('Elodie', 'Le Bescond'), ('Mariela', 'Salinas'), ('Brandis', 'Braverman'), ('Raluca', 'Ciulei'), ('Andrea', 'Rose'), ('Daniela', 'Muscolino'), ('Varsha', 'Reddy'), ('Pilar', 'Piana'), ('Marja', 'Znidar'), ('Simona', 'Krausova'), ('Eva', 'Dyrberg'), ('Antoaneta', 'Neykova'), ('Adisa', 'Salibasic'), ('Erica', 'Biro'), ('Mariel', 'Verban'), ('Kasturi', 'Bhat'), ('Maria Gabriela', 'Giacomin'), ('Inga', 'Mueller'), ('Paola', 'Stephen'), ('Elsa', 'Morel'), ('Sanja', 'Bajin'), ('Ana Carolina', 'Martinez'), ('Simone', 'Wichman'), ('Elodie', 'Rouzier'), ('Jeannine', 'Kuratli'), ('Marylene', 'Losey'), ('Minette', 'Weirich'), ('Lilivette', 'Rivera'), ('Kelly', 'Blanch'), ('Mindy', 'Salas'), ('Manisha', 'Abeywardene'), ('Stephanie', 'Kovacic'), ('Keiko', 'Fujiwara'), ('Szilvia', 'Kelemen'), ('Natalia', 'Jung'), ('Claudia', 'Herbas'), ('Kristina', 'Triska'), ('Petia', 'Marinova'), ('Lynn Yin', 'Tan'), ('Sarah', 'Kadi'), ('Marion', 'Walter'), ('Tamara', 'Kaftalovich'), ('Julie', 'Zanin'), ('Kika', 'Hogendoorn'), ('Marie Claire', 'Mathot'), ('Joanne', 'Keene'), ('Tiffany', 'Dabek'), ('Susan', 'Okocha'), ('Jessica', 'Lehnhoff'), ('Qin', 'Yang'), ('Lan', 'Yao'), ('Katrin', 'Gaber'), ('Karin', 'Cislikowski'), ('Alienor', 'Tricerri'), ('Ellen', 'Delie'), ('Cecilia', 'Ortiz'), ('Lioudmila', 'Skavronskaia'), ('Esther', 'Jimoh'), ('Carmen', 'Arredondo'), ('Alicia', 'Pillay'), ('Jil Lin', 'Leong'), ('Amanda', 'Reyes'), ('Abimbola', 'Showole'), ('Claudia', 'Cortes De Maldonado'), ('Michaela', 'Pastikova'), ('Sabrina', 'Corazza'), ('Ana', 'Serrot Geminelli'), ('Valentina', 'Ronchi'), ('Georgina', 'Dinham'), ('Natasha', 'Galouza'), ('Natalia', 'Galouza'), ('Mariana', 'Mesa'), ('Renata', 'Suarez'), ('Angela', 'Ruchin'), ('Emma', 'Kidd'), ('Haleema', 'Rahim'), ('Zuzanna', 'Liskocova'), ('Evy', 'Last'), ('Alberta', 'Brianti'), ('Francisca', 'Sintes Martin'), ('Talula', 'Guralnek'), ('Anda', 'Perianu'), ('Ewelina', 'Augustyniak'), ('Patrycja', 'Bandurowska'), ('Raquel', 'Rodrigues'), ('Indre', 'Kastanauskaite'), ('Karen', 'Butler'), ('Carmen', 'Linder'), ('Kaysie', 'Smashey'), ('Roberta', 'Borrelli'), ('Sandra', 'Gloria'), ('Anna', 'Mitina'), ('Sabrina', 'Lindemann'), ('Silvina', 'Ronsisvalli'), ('Jessica', 'Balbuena'), ('Patricia', 'Perez De Vinaspre'), ('Anne Laure', 'Brochard'), ('Catalina', 'Paz'), ('Patricia', 'Garcia'), ('Ana', 'Jagerfeld Juric'), ('Michaela', 'Tennant'), ('Capucine', 'Rousseau'), ('Alessia', 'Biffi'), ('Naoko', 'Teramachi'), ('Neus', 'Barbera Flores'), ('Irina', 'Yarikova'), ('Agata', 'Kurowska'), ('Yuko', 'Kurata'), ('Renate', 'Stoop'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Aleksandra', 'Durska'), ('Keiko', 'Tokuda'), ('Maria Cristina', 'Bentivoglio'), ('Angelika', 'Schadler'), ('Rochelle', 'Raiss'), ('Yu An', 'Chen'), ('Bree', 'Calderwood'), ('Mariana', 'Macia'), ('Zuzana', 'Ondraskova'), ('Rie', 'Saiki'), ('Jennifer', 'Radman'), ('Esther', 'Stasi'), ('Vida', 'Mulec'), ('Whitney', 'Laiho'), ('Dong Ling', 'Zou'), ('Jasmina', 'Davidovic'), ('Fleur', 'Broughton'), ('Alix', 'La Celarie'), ('Busrin', 'Boontemleaw'), ('Angela', 'Cardoso'), ('Tina', 'Parits'), ('Marketa', 'Langerova'), ('Sara', 'Grechi'), ('Mervana', 'Jugic Salkic'), ('Isabelle', 'Godfroy'), ('Virginie', 'Favory'), ('Susi', 'Bensch'), ('Paulina', 'Janus'), ('Cecile', 'Leclere'), ('Nuria', 'Llagostera Vives'), ('Marta', 'Jedrzejak'), ('Amie', 'Garcia'), ('Birgit', 'Pirker'), ('Lindsay', 'Blau'), ('Sophie', 'Cockell'), ('Manami', 'Tsuji'), ('Claire', 'Maiolini'), ('Lynsey', 'Davison'), ('Oana Elena', 'Golimbioschi'), ('Junko', 'Nishida'), ('Katerina', 'Zlebkova'), ('Michaela', 'Havelkova'), ('Magdalena', 'Cibils'), ('Marina', 'Caiazzo'), ('Ioana', 'Dragan'), ('Carmen', 'Maas'), ('Arina', 'Uratani'), ('Doriane', 'Caporusso'), ('Silvia', 'Urickova'), ('Vanessa', 'Lima'), ('Sara', 'Lydon'), ('Marketa', 'Blazkova'), ('Marcela', 'Monroy'), ('Christi', 'Wagenaar'), ('Evie', 'Dominikovic'), ('Emilia', 'Desiderio'), ('Katrina', 'Nimmers'), ('Maria Lorena', 'Alcetegaray'), ('Violetta', 'Rankic'), ('Maria', 'Galoustova'), ('Tamar', 'Keren'), ('Alessia', 'Risuleo'), ('Barbora', 'Machovska'), ('Araceli', 'Borbolla'), ('Gabriela', 'Lastra'), ('Melisa', 'Lemus'), ('Marcela', 'Gonzalez'), ('Argyro', 'Zika'), ('Jenny', 'Trettin'), ('Remi', 'Tezuka'), ('Elisa', 'Villa'), ('Lenka', 'Hladikova'), ('Maria Victoria', 'Beortegui'), ('Jeannine', 'Niedhardt'), ('Maja', 'Matevzic'), ('Kati', 'Wolner'), ('Sahan', 'Shetty'), ('Sonia', 'Delgado Tardif'), ('Venus', 'Williams'), ('Ilona', 'Kordonskaya'), ('Hilke', 'Wilt'), ('Karine', 'Etienne'), ('Nina', 'Aigner'), ('Tara', 'Reid'), ('Puja', 'Deshmukh'), ('Marissa', 'Gould'), ('Francesca', 'Schiavone'), ('Nina', 'Duebbers'), ('Marta', 'Kostrhounova'), ('Angie', 'Wilkinson'), ('Beau', 'Jones'), ('Jeanine', 'Baillie'), ('Ana Carolina', 'Santoro'), ('Carla', 'Bruno'), ('Rochelle', 'Goldthreate'), ('Elizabeth', 'Wright'), ('Janet', 'Bergman'), ('Monika', 'Horvath'), ('Joyce', 'Bergman'), ('Brenda', 'Martinez'), ('Kildine', 'Chevalier'), ('Vicky', 'Lee'), ('Rachmawati', 'Siregar'), ('Laura', 'White'), ('Cynthia', 'Perez Gil'), ('Orie', 'Sasaki'), ('Teodora', 'Doncheva'), ('Charlotte', 'Smith'), ('Leoni', 'Weirich'), ('Archana', 'Reddy'), ('Ana Maria', 'Viera Teixtera'), ('Magdalena', 'Kurzacz'), ('Elya', 'Constanta'), ('Desiree', 'Galvan Suarez'), ('Helga', 'Vieira'), ('Kago', 'Phatshwane'), ('Sarah', 'Wetz'), ('Valentina', 'Sassi'), ('Dorothy', 'Zerbst'), ('Paula', 'Iturbide'), ('Maria Belen', 'Rojas'), ('Elena', 'Fontelles'), ('Akila', 'Bouchabou'), ('Ying Shi', 'Huang'), ('Janine', 'Lanser'), ('Eldina', 'Fazlic'), ('Oindrila', 'Majumder'), ('Eun Sook', 'Kim'), ('Alessia', 'Ignatieva'), ('Sabrina', 'Moser'), ('Justyna', 'Wojas'), ('Eva', 'Sanz'), ('Weyli', 'Chang'), ('Raffaella', 'Gambadoro'), ('Sandra', 'Mihajlovic'), ('Antonella', 'Serra Zanetti'), ('Elena', 'Voropaeva'), ('Magdalena', 'Marszalek'), ('Maria Laura', 'Fernandez'), ('Lydia', 'Steinbach'), ('Louise', 'Herbert'), ('Karin', 'Schlapbach'), ('Agnes', 'Wiski'), ('Barbara', 'Brauchle'), ('Thamara', 'Jonkman'), ('Catherine', 'Henuzet'), ('Lauren', 'Rookledge'), ('Linda', 'Akkerman'), ('Jing Hua', 'He'), ('Coral', 'Silverstone'), ('Frances', 'Giron'), ('Sabine', 'Klaschka'), ('Lorena', 'Porras'), ('Jitka', 'Schonfeldova'), ('Maria Claudia', 'Alves'), ('Carolina', 'Uriarte'), ('Aurore', 'Esteve'), ('Mira', 'Radu'), ('Bretchtje', 'Bruls'), ('Tatiana', 'Lopez'), ('Sandra', 'Nacuk'), ('Karen', 'Faus'), ('Alanna', 'Broderick'), ('Meryem', 'El Haddad'), ('Edna', 'Vasquez'), ('Elena', 'Bouloux'), ('Jasmin', 'Woehr'), ('Shiri', 'Zlotikamin'), ('Nicola', 'Corn'), ('Fernanda', 'Sala'), ('Jessyca', 'Arthur'), ('Masika', 'Williams'), ('Alejandra', 'Lopez'), ('Rikke', 'Faurfelt'), ('Valeria', 'Dag'), ('Rocio', 'Mora'), ('Lauren', 'Kalvaria'), ('Florencia', 'Basile'), ('Simona', 'Petrutiu'), ('Chira', 'Niemela'), ('Diana', 'Bobkova'), ('Radoslava', 'Topalova'), ('Rosalie', 'Tranchot'), ('Kate', 'Elliott'), ('Pei Jyue', 'Lo'), ('Andrea', 'Sebova'), ('Shadi', 'Tabatabai'), ('Therina', 'Steenkamp'), ('Dearbhia', 'Kelly'), ('Jennifer', 'Thorpe'), ('Polina', 'Ordanskaya'), ('Jennifer', 'Adrien'), ('Renata', 'Dias'), ('Fatima', 'Olaso De La Rica'), ('Katie', 'Granson'), ('Julie Anne', 'Chidley'), ('Rewa', 'Harriman'), ('Daniela', 'Ilieva'), ('Viktoria', 'Bucalic'), ('May', 'Emara'), ('Mariana', 'Gonzalez Moreno'), ('Natalia', 'Testa'), ('Uzma', 'Khan'), ('Svetla', 'Bozicnik'), ('Barbora', 'Stejskalova'), ('Edit', 'Pakay'), ('Svenja', 'Weidemann'), ('Lia', 'Jackson'), ('Blotza', 'Gutierrez'), ('Katerina', 'Traykova'), ('Simona', 'Farenza'), ('Stutti', 'Smit'), ('Ninisita', 'Srihadi'), ('Vanessa', 'Devesa'), ('Iris', 'Staub'), ('Natasha', 'Kelly'), ('Hao', 'Zhang'), ('Said Basiuny', 'Hend'), ('Cassandra', 'Godfrey'), ('Martina', 'Hingis'), ('Milagros', 'Sequera'), ('Hiroko', 'Nishikawa'), ('Victoria', 'Hall'), ('Rani', 'Cestari Setia'), ('Danice', 'Shackelford'), ('Kyung Yee', 'Chae'), ('Michelle', 'Colaninni'), ('Caroline', 'Woerle'), ('Ikumi', 'Akasaka'), ('Petra', 'Puheloinen'), ('Carla', 'Arguelles'), ('Ashlee', 'Callahan'), ('Jun', 'Zhang'), ('Ivana', 'Visic'), ('Katie', 'Miles'), ('Anouk', 'Sinnige'), ('Satomi', 'Kinjo'), ('Bruna', 'Colosio'), ('Olga', 'Gorzelak'), ('Evelina', 'Scalise'), ('Julieta', 'Guimaraes'), ('Liina', 'Suurvarik'), ('Ana', 'Santelises'), ('Chutima', 'Toma'), ('Natalia', 'Romashina'), ('Eva Maria', 'Petschnig'), ('Nisha', 'Naraynsingh'), ('Ilona', 'Vichnevskaya'), ('Juliana', 'Garcia'), ('Ana', 'Viglione'), ('Anat', 'Katz'), ('Sara', 'Walker'), ('Claudia', 'Filippini'), ('Sabrina', 'Damario'), ('Silvana', 'Reis'), ('Catalina', 'Martinez'), ('Claire', 'Bourgault'), ('Nadejda', 'Ostrovskaya'), ('Delphine', 'Troch'), ('Marcia', 'Gaspar'), ('Kealy', 'Carter'), ('Natalie', 'Ayton'), ('Maria Rian', 'Pila'), ('Nhu Quynh', 'Phan'), ('Elena', 'Petrenko'), ('Emilie', 'Scribot'), ('Uta', 'Grabinger'), ('Kyla', 'Hunte'), ('Nathalie', 'Du Vigneaud'), ('Salima Esmat', 'Salman'), ('Gitte', 'Moeller'), ('Jamie', 'Macias'), ('Maribel', 'Ramirez'), ('Jessica', 'Johnson Guyaux'), ('Genevieve', 'Houle'), ('Penka', 'Fileva'), ('Radka', 'Hovorkova'), ('Joo Young', 'Woo'), ('Allison', 'Bradshaw'), ('Clementina', 'Rovere'), ('Laura', 'Cartwright'), ('Natasha', 'Watts'), ('Jacquelyn', 'Rosen'), ('Eman', 'Shahab'), ('Lisa', 'Broadie'), ('Martina', 'Sucha'), ('Wukirasih', 'Sawondari'), ('Sarah', 'Witten'), ('Rocio', 'Fantilli'), ('Chiara', 'Dal Bon'), ('Claudia', 'Candado'), ('Layla', 'Tohme'), ('Jacqueline', 'Trail'), ('Christina', 'Fusano'), ('Paula', 'Wakefield'), ('Bea', 'Bielik'), ('Lesedi', 'Ramocha'), ('Ngozi', 'Dirisu'), ('Britta', 'Mohlmann'), ('Claudia', 'Nieto'), ('Anna', 'Aggelopoulou'), ('Mutsuko', 'Hirose'), ('Tomoko', 'Sugano'), ('Leticia', 'Sobral'), ('Tina', 'Aryani'), ('Manana', 'Dueli'), ('Marie Eva', 'Vrba'), ('Valentina', 'Mortello'), ('Daniela', 'Olivera'), ('Susan', 'Cowan'), ('Sophie', 'Cremers'), ('Catherine', 'Alain'), ('Bao Wen', 'Pu'), ('Marta', 'Plumitallo'), ('Alexandra', 'Stevenson'), ('Yvona', 'Cindric'), ('Victoria', 'Hooper'), ('Veronica', 'Rizhik Urteaga'), ('Rebeca', 'Llorente'), ('Ioana', 'Plesu'), ('Virginia', 'Prato'), ('Nicola', 'Koopman'), ('Medina', 'Bajrambasic'), ('Olga', 'Nin'), ('Johanna', 'De Leon'), ('Senait', 'Gebreail'), ('Isabelle', 'Soucy'), ('Jovana', 'Stanisljevic'), ('Lizeth', 'Fourie'), ('Sabath', 'Ibrahim'), ('Mihaela', 'Stefan'), ('Tsedey', 'Kifle'), ('Trishna', 'Williams'), ('Flavia', 'Rezende'), ('Virginia', 'Zaffaroni'), ('Camille', 'Sesanker'), ('Marketa', 'Cizova'), ('Gemma', 'Selga'), ('Eudoxia', 'Karaproimou'), ('Cristina', 'Meilicke'), ('Jasmine', 'Wolcott'), ('Helena', 'Ejeson'), ('Nicole', 'Sewell'), ('Diana', 'Tchkouasselli'), ('Nicole', 'Havlicek'), ('Leanne', 'Baker'), ('Cynthia', 'Dewi'), ('Shweta', 'Ravji'), ('Paulina', 'Castillejos'), ('Shivani', 'Oberoi'), ('Vanessa', 'Henke'), ('Prim', 'Siripipat'), ('Kirsty', 'Thomas'), ('Anna', 'Komarova'), ('Anna', 'Wilander'), ('Tina', 'Hojnik'), ('Annette', 'Tronning'), ('Maria Noel', 'Ruiz'), ('Tina', 'Steinmetz'), ('Sofie', 'Borgions'), ('Meray', 'Malouf'), ('Eva', 'Trujillo'), ('Esther', 'Mbugua'), ('Alena', 'Scharfschwert'), ('Kari', 'Olsen'), ('Emelie', 'Akerbrandt Bengtsson'), ('Sara', 'Abaza'), ('Petra', 'Bercik'), ('Tiffany', 'Brymer'), ('Eka', 'Zhvania'), ('Alissa', 'Velts'), ('Charisma', 'Billings'), ('Marcela', 'Ferrari'), ('Ziva', 'Grasic'), ('Laetitia', 'Sanchez'), ('Sawitre', 'Naree'), ('Samantha', 'Schoeffel'), ('Cecilia', 'Guillenea'), ('Beata', 'Wajdzik'), ('Viktoria', 'Stoklasova'), ('Monica', 'Gonzalez Gordo'), ('Carolina', 'Aristimuno'), ('Susan', 'Durst'), ('Kanako', 'Yano'), ('Alicia', 'Molik'), ('Nuria', 'Rivas'), ('Simona', 'Graniceru'), ('Lucy', 'Wood'), ('Iva', 'Kirac'), ('Ekaterina', 'Paniouchkina'), ('Wei Na', 'Liu'), ('Maria Adelaida', 'Agudelo'), ('Shaza', 'Tinawi'), ('Monika', 'Gieczys'), ('Sonia', 'Shelar'), ('Yi Chun', 'Lan'), ('Sara', 'Mueller'), ('Bo Ra', 'Choi'), ('Ilona', 'Vishnevskaya'), ('Elizabeth', 'Meyer'), ('Andrea', 'Nickel'), ('Tereza', 'Sykorova'), ('Aurelie', 'Vedy'), ('Veronica', 'Sartini'), ('Jennifer', 'Hopkins'), ('Heather', 'Shelby'), ('Petra', 'Navratilova'), ('Anya', 'Loncaric'), ('Harisa', 'Delic'), ('Martina', 'Janska'), ('Milauni', 'Vibhakar'), ('Marta', 'Ribalta'), ('Luisa Elfride', 'Lopez'), ('Zheng', 'Wang'), ('Yulia', 'Davidyuk'), ('Sonia', 'Vickers'), ('Leonne', 'Muller Van Moppe'), ('Maria Elena', 'Del Valle'), ('Tina', 'Pisnik'), ('Rochelle', 'Rosenfield'), ('Ratih', 'Zanida'), ('Sasha', 'Edelstein'), ('Radhika', 'Mandke'), ('Gabriella', 'Reiner'), ('Meng', 'Wang'), ('Donna', 'Calvert'), ('Sophie', 'Lefevre'), ('Simona', 'Morici'), ('Anne', 'Valle'), ('Dorra', 'Hammami'), ('Natalie', 'Grandin'), ('Ildiko', 'Stadler'), ('Kate', 'Pinchbeck'), ('Karishma', 'Patel'), ('Agnes', 'Palvolgyi'), ('Min', 'Fan'), ('Hsiung Ching', 'Lin'), ('Emilie', 'Vanhuysberghe'), ('Valentina', 'Imperio'), ('Lana', 'Miholcek'), ('Radka', 'Sottova'), ('Jenny', 'Timoney'), ('Jennifer', 'Tinnacher'), ('Natacha', 'Gosset'), ('Natalia', 'Rojas'), ('Monika', 'Malinska'), ('Anca', 'Dumitrescu'), ('Serena', 'Carsughi'), ('Frederika', 'Girsang'), ('Mariana', 'Petrasova'), ('Gabriela', 'Volekova'), ('Gianina', 'Enuta'), ('Tatjana', 'Scheel'), ('Olivia', 'Dubovikov'), ('Claudia', 'Di Trapani'), ('Katarina', 'Srebotnik'), ('Theodora', 'Patsourakou'), ('Yanelis', 'Jimenez Estevez'), ('Daniela', 'Puplinkhuisen'), ('Elizabeth', 'Kaufman'), ('Katia', 'Ceracchi'), ('Eva', 'Fislova'), ('Ka Po', 'Tong'), ('Francesca', 'Agazzi'), ('Lara', 'De Angelis'), ('Eva', 'Alves Comesana'), ('Rotem', 'Tepperberg'), ('Ariadna', 'Junyent'), ('Anna', 'Sholuh'), ('Vilmarie', 'Castellvi'), ('Daniela', 'Torres'), ('Ina Maria', 'Range'), ('Stefanie', 'Hershfield'), ('Mihaela', 'Moldovan'), ('Annabel', 'Kelynack'), ('Julia', 'Kondratovskaia'), ('Igna', 'De Villiers'), ('Neha', 'Bhardwaj'), ('Daniela', 'Canepa'), ('Anne', 'Carmans'), ('Romana', 'Valenta'), ('Elena', 'Jirnova'), ('Viviana', 'Ferencak'), ('Karolina', 'Roubickova'), ('Lourdes', 'Dominguez Lino'), ('Alena', 'Bencova'), ('Valeria', 'Khazova'), ('Petra', 'Sedlmajerova'), ('Monica', 'Peets'), ('Agnieszka', 'Abram'), ('Emilia', 'Kopczynska'), ('Madita', 'Suer'), ('Monica', 'Ribero'), ('Vanessa', 'Rebelo'), ('Valeria', 'Lapis'), ('Anita', 'Loyola'), ('Yi Wei', 'Chen'), ('Anne', 'Bannfy'), ('Rakel', 'Petursdottir'), ('Laetitia', 'Bonny'), ('Mi Ran', 'Shin'), ('Elena', 'Stoilova'), ('Marta', 'Insausti'), ('Adrianna', 'Gallo'), ('Zsofia', 'Gubacsi'), ('Nazli', 'Gencsoy'), ('Patricia', 'Aburto'), ('Hyun Sook', 'Park'), ('Rotem', 'Magnagni'), ('Danielle', 'Paynter'), ('Perrine', 'Pernin'), ('Silke', 'Martin'), ('Jennifer', 'Black'), ('Glenny', 'Cepeda'), ('Anna', 'De Bruyn'), ('Amy', 'Burson'), ('Remi', 'Uda'), ('Tania', 'Martin'), ('Suzanne', 'Wright'), ('Anne', 'Nguyen'), ('Inga', 'Burger'), ('Stefania', 'Pacella'), ('Christine', 'Silaghi'), ('Marine', 'Piriou'), ('Silvia', 'Torne Ortiz'), ('Carien', 'Venter'), ('Gillian', 'Assad'), ('Bettina', 'Hafner'), ('Mugette', 'Ahn'), ('Wei', 'Na'), ('Ana', 'Buraku'), ('Johanna', 'Ingnas'), ('Tara', 'Lambert'), ('Wynne', 'Prakusya'), ('Julie', 'De Roo'), ('Kristin', 'Gyaki'), ('Aina', 'Rafolomanantsiatosika'), ('Khushcher', 'Italia'), ('Vania', 'Apodaca'), ('Laetitia', 'Gassis'), ('Karine', 'Redon'), ('Yolanda', 'Rowe'), ('Laurence', 'Jayet'), ('Cecilia', 'Perez'), ('Monica', 'Londono'), ('Yi Ying', 'Lai'), ('Kristen', 'Stubbs'), ('Zdenka', 'Videnova'), ('Celia', 'Sutton'), ('Stephanie', 'Foretz Gacon'), ('Elena', 'De Mendoza'), ('Zeynep', 'Gurkaynak'), ('Vanessa', 'Elmendorp'), ('Evelien', 'Bostyn'), ('Daniella', 'Kastamoniti'), ('Daniela', 'Peyrot'), ('Kinga', 'Berecz'), ('Mirte', 'Ros'), ('Olga', 'Nefedova'), ('Laura', 'Granville'), ('Kelly', 'Simkin'), ('Claudia', 'Lepore'), ('Katerina', 'Zupancic'), ('Carla', 'Tiene'), ('Natalia', 'Nusshold'), ('Anna', 'Andersson'), ('Vishnu Preetham', 'Mahalingam'), ('Gabriela', 'Duarte'), ('Laura', 'Dellangelo'), ('Julia', 'Scaringe'), ('Megan', 'Yeats'), ('Vanessa', 'Krauth'), ('Erica', 'Krauth'), ('Leigh', 'Bradwell'), ('Evangelina Silvia', 'Migliavacca'), ('Marta', 'Rubina'), ('Jana', 'Hlavackova'), ('Jelena', 'Ganic'), ('Madoka', 'Suzuki'), ('Raffaella', 'Coffa'), ('Svatava', 'Prorokova'), ('Geminesse', 'Co'), ('Marina', 'Tasheva'), ('Tania', 'Tzartzeva'), ('Patricia', 'Almudever Folch'), ('Marlene', 'Dirnstorfer'), ('Nabila', 'Yasri'), ('Irem', 'Saram'), ('Denise', 'Hofer'), ('Lia', 'Fabiano'), ('Agathe', 'Belibi'), ('Ekaterina', 'Sysoeva'), ('Alessia', 'Nikolaeva'), ('Delphine', 'Froidevaux'), ('Nazh', 'Gencsoy'), ('Natasha', 'Van Der Merwe'), ('Nicola', 'Manley'), ('Sheethal', 'Goutham'), ('Anna', 'Kournikova'), ('Maria', 'Djordjio'), ('Anne Marie', 'Hogan'), ('Erika', 'Venere'), ('Arianna', 'Di Gennaro'), ('Nicole', 'Rencken'), ('Sarah', 'Abaza'), ('Jin Hee', 'Kim'), ('Ines', 'Moura'), ('Fernanda', 'Vlasak'), ('Yonca', 'Gonen'), ('Rossi', 'Thomas'), ('Fanny', 'Cardenas'), ('Murielle', 'Methon'), ('Nora', 'Veiga Gil'), ('Dora', 'Krstulovic'), ('Napanant', 'Montkhongtham'), ('Emily', 'Haylock'), ('Tomoko', 'Dokei'), ('Dominique', 'Reynolds'), ('Vaida', 'Martinkute'), ('Emmanuelle', 'Duval'), ('Aline', 'Pinheiro'), ('Martine', 'Poos'), ('Sarah', 'Riske'), ('Mara', 'Santangelo'), ('Bucke Enda', 'Yavuz'), ('Anne', 'Meritel'), ('Francesca', 'Calabrese'), ('Lisa', 'Gebert'), ('Danira', 'Penic'), ('Chantal', 'Coombs'), ('Yanet', 'Nunez Mojarena'), ('Anna', 'Oehme'), ('Kirsten', 'Harris'), ('Dorothee', 'Buschhuter'), ('Elena', 'Cordano'), ('Bianca', 'Kamper'), ('Delila', 'Causevic'), ('Victoria', 'Livanova'), ('Kristin', 'Lam'), ('Cassandra', 'Swanepoel'), ('Jelena', 'Kostanic Tosic'), ('Magda', 'Mihalache'), ('Carolina', 'Aravena'), ('Laura', 'Mangunsong'), ('Stella', 'Kristjansdottir'), ('Jetpisit', 'Lertsirisumpan'), ('Anastasia', 'Myskina'), ('Tjasa', 'Suvak'), ('Chisayo', 'Ito'), ('Shizuko', 'Matsuda'), ('Natsuko', 'Matsuda'), ('Aitana', 'Minambres'), ('Wan Ting', 'Lin'), ('Abigail', 'Spears'), ('Claire', 'Carter'), ('Sabrina', 'Diniz'), ('Anastasia', 'Ponomarenko'), ('Hye Jeong', 'Yoo'), ('Zeynep', 'Inanli'), ('Ana', 'Martin Ramirez'), ('Jahnavi', 'Sunderarajan'), ('Valentina', 'Castro'), ('Natalie', 'Marz'), ('Xer Li', 'Woo'), ('Riina', 'Veiram'), ('Jennifer', 'Tuchband'), ('Giorgia', 'Poggi'), ('Leslie', 'Harvey'), ('Karin', 'Urbin'), ('Nazan', 'Arsal'), ('Pirada', 'Witoonpanich'), ('Lazarina', 'Sazdova'), ('Tomoko', 'Taira'), ('Maria Paola', 'Arcos'), ('Sheila', 'Guerberg'), ('Sonia', 'Lagos'), ('Ana', 'Sanz Castro'), ('Millie', 'Begovic'), ('Kit', 'Carson'), ('Deanna', 'Roberts'), ('Alexandra', 'Chong'), ('Lori', 'Grey'), ('Marlene', 'Mejia'), ('Ivana', 'Bracun'), ('Eriko', 'Mizuno'), ('Maria Claudia', 'Romo'), ('Ljiljana', 'Nanusevic'), ('Kyung Won', 'Kim'), ('Laila', 'Shetty'), ('Rebecca', 'Hawkins'), ('Yumi', 'Ueda'), ('Maria', 'Ilieva'), ('Lies', 'Budiharto'), ('Virginia', 'Varga'), ('Marie', 'Yamabe'), ('Visnja', 'Visnjic'), ('Stephanie', 'Kamberi'), ('Julia', 'Romanova'), ('Donna', 'Mcintyre'), ('Ana', 'Stiglic'), ('Maria Victoria', 'Domina'), ('Ines', 'Khelefi'), ('Rossana', 'Hidalgo'), ('Sedef', 'Ozkan'), ('Katia', 'Bogomolova'), ('Julia', 'Klein'), ('Jacqueline', 'Nieto'), ('Erika', 'Clarke Magana'), ('Nuraeni', 'Batubara'), ('Melissa', 'Mendieta'), ('Maria', 'Guijarro'), ('Sara', 'Pasquinoni'), ('Jodi', 'Kenoyer'), ('Stephanie', 'Rizzi'), ('Katarzyna', 'Kolodynska'), ('Mariana', 'Duarte'), ('Elizabeth', 'Schranz'), ('Natalia', 'Gussoni'), ('Eun Joo', 'Kang'), ('Chiara', 'Lucacchioni'), ('Camille', 'Pin'), ('Orawan', 'Wongkamalasai'), ('Francesca', 'Mancini'), ('Simona', 'Jozova'), ('Ivana', 'Mark'), ('Kaori', 'Aoyama'), ('Ayako', 'Suzuki'), ('Verica', 'Spirovska'), ('Marjorie', 'Ceppo'), ('Lara', 'Arnaout'), ('Clarisa', 'Fernandez'), ('Maria Karina', 'Lomena'), ('Oana', 'Creanga'), ('Daniela', 'Santamato'), ('Aleksandra', 'Vucenovic'), ('Monica', 'Mastan'), ('Kim', 'Freebairn'), ('Nanci', 'Lemuz'), ('Ji Sun', 'Ha'), ('Annika', 'Bengtsson'), ('Marialice', 'Alonso'), ('Melanie Ann', 'Clayton'), ('Pia', 'De Robertis'), ('Marinet', 'Morgan'), ('Victoria', 'Broyak'), ('Michino', 'Meguro'), ('Olga', 'Ramirez'), ('Oyuki', 'Cruz'), ('Andrea', 'Munch Hermansen'), ('Jewel', 'Peterson'), ('Ivona', 'Sereja'), ('Evelyne', 'Gmeiner'), ('Mikaele', 'Zaykine'), ('Yeon', 'Kim'), ('Giulia', 'Schivo'), ('Karla', 'Alvarado'), ('Linda', 'Tajnai'), ('Mandy', 'Stegman'), ('Carina', 'Kaempfer'), ('Nela', 'Bogdanovich'), ('Magdalena', 'Mrozek'), ('Cristina', 'Maiz'), ('Saloni', 'Kantaria'), ('Kristen', 'Van Elden'), ('Ina', 'Sartz'), ('Vroni', 'Hinterseer'), ('Rika', 'Fujiwara'), ('Elena', 'Rutigliano'), ('Agata', 'Cioroch'), ('Tanja', 'Schugt'), ('Nato', 'Kachkachishvili'), ('Sareewan', 'Wattanadechachan'), ('Serena', 'Williams'), ('May', 'Kabani'), ('Loni', 'Worsley'), ('Aileen', 'Rogan'), ('Kristina', 'Barrois'), ('Yu', 'Sun'), ('Carla', 'Bastos'), ('Anita', 'Csendes'), ('Wibeke', 'Clifford'), ('Amina', 'Choqri'), ('Osaro', 'Amadin'), ('Orawan', 'Lamangthong'), ('Sarah', 'Stallard'), ('Tian Tian', 'Sun'), ('Kristina', 'Pesatova'), ('Nadia', 'Dzuganova'), ('Elena', 'Dementieva'), ('Hanna', 'Krampe'), ('Imke', 'Kusgen'), ('Vanesa Rut', 'Ansotegui'), ('Julie', 'Tremblay'), ('Tina', 'Hergold'), ('Kavitha', 'Krishnamurthy'), ('Diana', 'Laksono'), ('Virginia', 'Trifonova'), ('Kaori', 'Goto'), ('Urska', 'Juric'), ('Lejla', 'Husic'), ('Monica', 'Canevaro'), ('Ekaterina', 'Makarenko'), ('Jennifer', 'Klaschka'), ('Julia', 'Henninger'), ('Ilke', 'Gers'), ('Lara', 'Ercegovic'), ('Evghenia', 'Ablovatchi'), ('Dayana', 'Mora'), ('Ana Paula', 'Novaes'), ('Ariadna', 'Berdala Grive'), ('Niyati', 'Shetty'), ('Denitza', 'Alexandrova'), ('Deniz', 'Emre'), ('Elena', 'Caldes Marques'), ('Montserrat', 'Palacios'), ('Carly', 'Homewood'), ('Sarah', 'Taylor'), ('Clare', 'Warner'), ('Sara', 'Martinez Martos'), ('Manon', 'Van Den Beek'), ('Renska', 'Hiemstra'), ('Adriana', 'Burz'), ('Olga', 'Duran'), ('Simmi', 'Rani'), ('Nathalie', 'Aizenberg'), ('Lisa', 'Damelio'), ('Paco', 'Heredia'), ('Maria Florencia', 'Rivolta'), ('Natalia', 'Stoudyanaya'), ('Yukiko', 'Yabe'), ('Natalia', 'Kostova'), ('Mobina', 'Saimwala'), ('Dorota', 'Zaboklicka'), ('Emily', 'Jacobs'), ('Jeong A', 'Cho'), ('I Ting', 'Wang'), ('Alenka', 'Kacunko'), ('Jennifer', 'Mcgaffigan'), ('Diana', 'De Salvador'), ('Stephanie', 'Kimura'), ('Cecilia', 'Wilander'), ('Hannah', 'Parker'), ('Dagmara', 'Bednarczyk'), ('Sonia', 'Orellana'), ('Sabaea', 'Carrington'), ('Amanda', 'Johnson'), ('Christin', 'Potsch'), ('Branka', 'Bojovic'), ('Jennifer', 'Mitchell'), ('Beatriz', 'Fraga'), ('Veronica', 'Garcia'), ('Katia', 'Rodrigues'), ('Olga', 'Lazarchuk'), ('Ana Luisa', 'Torres'), ('Paula', 'Oliveira'), ('Jacqueline', 'Lorne'), ('Anuja', 'Rithi'), ('Anujapathy', 'Pasupathy'), ('Denise', 'Vock'), ('Elena', 'Yaryshka'), ('Diana', 'Brunel'), ('Cacilia', 'Charbonnier'), ('Milangela', 'Morales'), ('Gabriela', 'Salloum'), ('Ariana', 'Rojas'), ('Tricia Ann', 'Greaves'), ('Estefania', 'Martinez'), ('Marina', 'Soukholitko'), ('Julie', 'Rotondi'), ('Jessica', 'Ferguson'), ('Patricia', 'Zurita'), ('Carolina', 'Rodriguez'), ('Gertruda', 'Nagtzaam'), ('Akane', 'Yasui'), ('Sanny', 'Harsono'), ('Alessandra', 'Gandossi'), ('Ines', 'Mzoughi'), ('Ansley', 'Cargill'), ('Carlota', 'Plantier Santos'), ('Aysu', 'Cuhaci'), ('Natalia', 'Savchenko'), ('Ida', 'Sutedja'), ('Iroda', 'Tulyaganova'), ('Boyana', 'Perich'), ('Visnja', 'Vuletic'), ('Ana', 'Radak Trampetic'), ('Ellen', 'Svensson'), ('Stephanie', 'Balzert'), ('Emma', 'Gott'), ('Daniela', 'Dessolis'), ('Christina', 'Fitz'), ('Francesca', 'Lorenzoni'), ('Aimee', 'Smith'), ('Maria', 'Gil'), ('Vadali', 'Kameswari'), ('Emily', 'Dowdeswell Koti'), ('Sylvie', 'Bohmova'), ('Fleida Jan', 'Pila'), ('Courtney', 'Steinbock'), ('Kristen', 'Steinbock'), ('Sarah', 'Gregg'), ('Sonora', 'Fontaine'), ('Jenny', 'Lindstrom'), ('Sandra', 'Leborgne'), ('Maria', 'Kondratieva'), ('Lisa', 'Quiller'), ('Ikuko', 'Hirata'), ('Anais Marie', 'Moreno'), ('Danielle', 'Spacek'), ('Ya Ming', 'Lin'), ('Rani Smita', 'Jain'), ('Kaori', 'Oishi'), ('Barbara', 'Soares'), ('Jorgelina', 'Cravero'), ('Veronika', 'Raimrova'), ('Paulina', 'Slitrova'), ('Camila', 'Sagae'), ('Inge', 'Weirich'), ('Fabienne', 'Vieille Grosjean'), ('Marielle', 'Hoogland'), ('Andria', 'Hadjioannou'), ('Mariona', 'Gallifa Puig Desens'), ('Natalia', 'Volcova'), ('Jimena', 'Fernandez'), ('Sonja', 'Vidas'), ('Laura', 'Lechi'), ('Svetlana', 'Mossiakova'), ('Analia', 'Longoni'), ('Nona', 'Wagh'), ('Sabine', 'Herdegen'), ('Laura', 'Cebrian'), ('Natasha', 'Van Jaarsveld'), ('Maret', 'Ani'), ('Silvia', 'Cribellati'), ('Heidi', 'Farr'), ('En Yue', 'Ma'), ('Emilia', 'Anderson'), ('Maria', 'Ruiz Fabrega'), ('Lucie', 'Mazinova'), ('Karolina', 'Sadaj'), ('Rekha', 'Natrajan'), ('Radhika', 'Tulpule'), ('Jacqueline', 'Hagen'), ('Carolina', 'Sadaj'), ('Ayca', 'Gumuscu'), ('Valerie', 'Menob'), ('Yolandi', 'Rogers'), ('Nathalie', 'Sienkob'), ('Magali', 'Risoleo'), ('Lenka', 'Tvaroskova'), ('Chrisdula', 'Kagga'), ('Kateryna', 'Vasylyeva'), ('Marcela', 'Evangelista'), ('Bojana', 'Damnjanovic'), ('Ying', 'Yu'), ('Darija', 'Klaic'), ('Jessica', 'Ortiz Diaz Oliver'), ('Adriana', 'Basaric'), ('Susanne', 'Kirsch'), ('Hannah', 'Collin'), ('Danielle', 'Hock'), ('Furuza', 'Gafurova'), ('Celine', 'Cattaneo'), ('Helen', 'Staresinic'), ('Victoria', 'Beck'), ('Dora', 'Bechliwanis'), ('Marta', 'Bechliwanis'), ('Katerina', 'Sevcikova'), ('Sai Swapna', 'Ramakrishnan'), ('Petra', 'Novotnikova'), ('Kelly', 'Schmandt'), ('Klara', 'Koukalova'), ('Stefanie', 'Weis'), ('Flavia', 'Pennetta'), ('Kyung Mi', 'Chang'), ('Gyorgyi', 'Zsiros'), ('Julia', 'Beconi'), ('Na', 'Li'), ('Anna', 'Dolinska'), ('Amira', 'Samara'), ('Cornelia', 'Villemur'), ('Helene', 'Mygind'), ('Mhairi', 'Brown'), ('Gorana', 'Marsic'), ('Barbara', 'Hellwig'), ('Eri', 'Ohmi'), ('Chloe', 'Carlotti'), ('Barbara', 'Rosenberger'), ('Elena', 'Manevska'), ('Mariam', 'Galal Hafez'), ('Dacil', 'Alvarado'), ('Diana', 'Olave'), ('Gemma', 'Gallo Gomez'), ('Ilge', 'Alpay'), ('Gretchen', 'Haynor'), ('Stephanie', 'Sagaspe'), ('Doris', 'Kurtela'), ('Dagmar', 'Denkova'), ('Laura', 'Pretin'), ('Laura', 'Bao'), ('Andrea', 'Plackova'), ('Sandra', 'Kvelstein'), ('Linn', 'Ronnberg'), ('Elena', 'Branker'), ('Mirjana', 'Lucic'), ('Katherine', 'Boyanovich'), ('Alexandra', 'Smith'), ('Ming Hui', 'Wu'), ('Lan Lan', 'Tai'), ('Diana', 'Muller'), ('Olga', 'Mikhailova'), ('Ana', 'Maslesa'), ('Anne Laure', 'Heitz'), ('Idalina', 'Franca'), ('Stanislava', 'Hrozenska'), ('Sricharanya', 'Thiagarajan'), ('Sumitra', 'Rao'), ('Angela', 'Szymanowski'), ('Yolandi', 'Beukes'), ('Meritxell', 'Balbas'), ('Manar', 'Akkar'), ('Nino', 'Chichinadze'), ('Maria Elena', 'Camerin'), ('Claire', 'Seal'), ('Amandine', 'Dulon'), ('Henrike', 'Voigt'), ('Sarah', 'Stone'), ('Veronika', 'Koksova'), ('Monika', 'Dybicz'), ('Aurore', 'Desert'), ('Nicole', 'Weber'), ('Magdalena', 'Wojdylok'), ('Petra', 'Halastova'), ('Dimana', 'Krastevitch'), ('Filipa', 'Gabrovska'), ('Monika', 'Serrano'), ('Cristina', 'Arribas'), ('Vanessa', 'Flores'), ('Shruti', 'Dhawan'), ('Barbora', 'Blahutiakova'), ('Emily Ann', 'Marker'), ('Biljana', 'Trpeska'), ('Agnes', 'Buronyi'), ('Pei Yuin', 'Keng'), ('Sabina', 'Mediano Alvarez'), ('Candice', 'Fuchs'), ('Joo Hee', 'Lee'), ('Marina', 'Cardoso'), ('Jenny', 'Zachrisson'), ('Vera', 'Kostelnikova'), ('Sato', 'Fujigo'), ('Gamze', 'Basaran'), ('Natalia', 'Yatsenka'), ('Gabriela', 'Coello'), ('Safae', 'Kchich'), ('Funke', 'Adekola'), ('Nicole', 'Angat'), ('Viktoria', 'Tepluk'), ('Stephanie', 'Gehrlein'), ('Sarah', 'Suitor'), ('Luiza', 'Biktyakova'), ('Megan', 'Marton'), ('Irina', 'Voskanyan'), ('Natalia', 'Drabova'), ('Christina', 'Wheeler'), ('Kate', 'Lutgert'), ('Milica', 'Stamenic'), ('Claudia', 'Salgues'), ('Bernadette', 'Audra'), ('Mirja', 'Cuntz'), ('Belen', 'Guajardo'), ('Hillary', 'Adams'), ('Lucia', 'Tallova'), ('Anna', 'Eriksson'), ('Tiziana', 'Iezza'), ('Po Kuen', 'Lam'), ('Fabiana', 'Taverna'), ('Vanessa', 'Wellauer'), ('Andrea', 'Hofinger'), ('Megan', 'Ferreira'), ('Rui Jing', 'Wong'), ('Dita', 'Hauerlandova'), ('Sandy', 'Lukowski'), ('Tarrin', 'Dougery'), ('Eva', 'Arteche'), ('Melissa', 'Dowse'), ('Aleke', 'Tsoubanos'), ('Ivana', 'Kekez'), ('Caroline', 'Tidemand'), ('Ksenia', 'Orehova'), ('Hyun Sook', 'Bae'), ('Pragya', 'Yadav'), ('Sandhya', 'Kanury'), ('Olivia', 'Tudor'), ('Mira', 'Rainshtein'), ('Courtney', 'Bergman'), ('Wan Ching', 'Tuan'), ('Helen', 'Lawson'), ('Laura', 'Bolet'), ('Kun', 'Deng'), ('Begona', 'De Toro Sanz'), ('Haruka', 'Yamamoto'), ('Atsumi', 'Mitsumine'), ('Ramona', 'But'), ('Elisa', 'Innocenti'), ('Alina', 'Bileca'), ('Jihan', 'Patel'), ('Lyndsey', 'Molony'), ('Amelia', 'Lincaru'), ('Martina', 'Strussova'), ('Anastasia', 'Rodionova'), ('Marinela', 'Antonic'), ('Anna', 'Floris'), ('Djamila', 'Khaldi'), ('Jenny', 'Andrade'), ('Shelley', 'Panford Gyaaba'), ('Carolina', 'Rodriguez Magdalena'), ('Marie Eve', 'Pelletier'), ('Karen', 'Paterson'), ('Minou', 'Jancso'), ('Stephanie', 'Serruys'), ('Ines', 'Trickovic'), ('Katharina', 'Scholtisek'), ('Karina', 'Gamonal'), ('Dikla', 'Dadon'), ('Lauren', 'Barnikow'), ('Maria', 'Rivas'), ('Elina', 'Bairos'), ('Jamie', 'Buterbaugh'), ('Ofra', 'Friedman'), ('Yang', 'Liu'), ('Mia', 'Buric'), ('Deborah', 'Saxer'), ('Nathalia', 'Bellizia'), ('Dragica', 'Joksimovic'), ('Daysi', 'Espinal'), ('Victoria', 'Cservenyak'), ('Marina', 'Samolenko'), ('Leslie', 'Butkiewicz'), ('Silvia', 'Hegedis'), ('Belinda', 'Kelly'), ('Se Na', 'Lee'), ('Maureen', 'Diaz'), ('Suzanne', 'Van Hartingsveldt'), ('Sivan', 'Ozana'), ('Carolyn', 'Mcgann'), ('Emily', 'Stellato'), ('Veronika', 'Ctvrtnickova'), ('Anastasia', 'Dvornikova'), ('Justine', 'Henin'), ('Jessica', 'Roland Rosario'), ('Jenny', 'Belobrajdic'), ('Hana', 'Debevec'), ('Hadjira', 'Slimani'), ('Frederica', 'Piedade'), ('Melissa', 'Middleton'), ('Maja', 'Pauk'), ('Noelia', 'Furno'), ('Nadia', 'Petrova'), ('Helen', 'Reesby'), ('Tuyet Minh', 'Tran'), ('Cristina', 'Madrid'), ('Karla', 'Mancinas'), ('Sonal', 'Phadke'), ('Nives', 'Culum'), ('Nathalie', 'Banday'), ('Tunde', 'Nemeth'), ('Diana', 'Quevedo'), ('Hanae', 'Rhazi'), ('Vanessa', 'Pallucci'), ('Mirina', 'Rajaoarisoa'), ('Anabelle', 'Espinosa Rodriguez'), ('Olivia', 'Crouchent'), ('Claudia', 'Ivone'), ('Biljana', 'Dimovska'), ('Claire', 'Webb'), ('Aniela', 'Mojzis'), ('Sasiwan', 'Pimonrat'), ('Sabrina', 'Jolk'), ('Dewi Monica', 'Siregar'), ('Amandine', 'Singla'), ('Kristel', 'Van Der Perre'), ('Valeria', 'Bondarenko'), ('Valeri', 'Zatulko'), ('Nadia', 'Kilani'), ('Karmelina', 'Rivera'), ('Anna', 'Cowan'), ('Nadine', 'Sanfilippo'), ('Maiko', 'Cook'), ('Zuzana', 'Kucova'), ('Valentina', 'Rossi'), ('Marisa', 'Tseng'), ('Tekeme', 'Ekios'), ('Lucy', 'Francis'), ('Sivan', 'Paz'), ('Dina', 'Khalil'), ('Tomoko', 'Yonemura'), ('Eun Mi', 'Oh'), ('Caylan', 'Leslie'), ('Magdalena', 'Bilova'), ('Michaela', 'Larsson'), ('Christine', 'Pape Nielsen'), ('Varita', 'Sureephong'), ('Ashley', 'Nations Raju'), ('Junri', 'Namigata'), ('Leonita', 'Girsang'), ('Aradhana', 'Sarohia'), ('Sanela', 'Kunovac'), ('Lucia', 'Halty Barrutieta'), ('Isha', 'Chopra'), ('Arithzi', 'Vanzzini'), ('Katherine', 'Laidler'), ('Ioana', 'Paun'), ('Katerina', 'Stamatopoulou'), ('Aparna', 'Singh'), ('Elizabeth', 'Brito'), ('Mariana', 'Quintanilla'), ('Daria', 'Panova'), ('Dominika', 'Luzarova'), ('Camille', 'Gely'), ('Bettina', 'Roberts'), ('Nelyuri', 'Calvo'), ('Marie', 'Combemorel'), ('Lucy', 'Ikic'), ('Harmonie', 'Fiacchi'), ('Nikhila', 'Palat'), ('Li', 'Huang'), ('Rosangela', 'Martinez'), ('Karla', 'Jana'), ('Alejandra', 'Franco'), ('Karla', 'Mraz'), ('Francesca', 'Tancredi'), ('Emily', 'Foster'), ('Anabel', 'Medina Garrigues'), ('Emily', 'Hewson'), ('Giulia', 'Meruzzi'), ('Elena', 'Kovalchuk'), ('Salma', 'Ben Mahmoud'), ('Sarah Jane', 'Connelly'), ('Natalie', 'Neri'), ('Jemima', 'King'), ('Audrey', 'Hernandez'), ('Carla', 'Prieto'), ('Barbara', 'Orlai'), ('Dominique', 'Rosenberg'), ('Nicola', 'Trinder'), ('Rosa', 'Gajic'), ('Lindsay', 'Ferrell'), ('Maria Jose', 'Martinez Sanchez'), ('Maria', 'Nieto'), ('Utako', 'Suzuki'), ('Celine', 'Francois'), ('Marine', 'Petit'), ('Anna', 'Pogosova'), ('Joanna', 'Furdyna'), ('Kasumi', 'Aiko'), ('Julia', 'Schruff'), ('Elodie', 'Naegellen'), ('Zerene', 'Reyes'), ('Mylie', 'Gillet'), ('Harsimran Kaur', 'Bedi'), ('Rocio', 'Cupeiro'), ('Eka', 'Vepkhvadze'), ('Katerina', 'Romanenko'), ('Charlotte', 'Wallace'), ('Cattaleeya', 'Wisesrat'), ('Bianka', 'Lamade'), ('Veronika', 'Subertova'), ('Tereza', 'Simonian'), ('In Young', 'Chang'), ('Jinal', 'Patel'), ('Lama', 'Daouk'), ('Yulia', 'Mirna'), ('Nadine', 'Schlotterer'), ('Sarah', 'Dinkelmann'), ('Despina', 'Toulgaridou'), ('Beatriz', 'Cabrera Rosendo'), ('Edit', 'Bagoly'), ('Thu Tuyen', 'Pham Nhu'), ('Lucie', 'Ruskova'), ('Anna', 'Markovich'), ('Emma', 'Tullett'), ('Tiffany', 'Eklov'), ('Claudia', 'Oliva'), ('Sanja', 'Jukic'), ('Urska', 'Vesenjak'), ('Masa', 'Vesenjak'), ('Catherine', 'Hortala'), ('Elisa', 'Belleri'), ('Lauren', 'Fisher'), ('An Na', 'Lee'), ('Jennifer', 'Longin'), ('Maike', 'Kampschulte'), ('Rachel', 'Shweky'), ('Kathleen', 'Blaszak'), ('Sabrina', 'Vogt'), ('Samantha', 'Lucas'), ('Ilona', 'Jarkova'), ('Eleni', 'Daniilidou'), ('Elsa', 'Oriain'), ('Niki', 'Williams'), ('Neus', 'Sole'), ('Stephanie', 'Price'), ('Xia', 'Sheng'), ('Tracey', 'Oconnor'), ('Marina', 'Fileva'), ('Bridget', 'Chidi'), ('Davina', 'Mendiburu'), ('Mounia', 'Hassib'), ('Courtney', 'Nagle'), ('Eunice', 'Paravicini'), ('Tereza', 'Szafnerova'), ('Jasmin', 'Notdurfter'), ('Alexandra', 'Zotta'), ('Chattida', 'Thimjapo'), ('Francesca', 'Cicciu'), ('Maja', 'Mlakar'), ('Lucia', 'Halty'), ('Dominika', 'Nemcovicova'), ('Lucia', 'Struharova'), ('Annat', 'El Azari'), ('Blessing', 'Anuna'), ('Wendy', 'Galan Dominguez'), ('Dolunay', 'Soykan'), ('Mayumi', 'Yamamoto'), ('Carolina', 'Guilliano'), ('Martina', 'Muller'), ('Razalia', 'Phethu'), ('Katarina', 'Basternakova'), ('Goulnara', 'Fattakhetdinova'), ('Vlatka', 'Jovanovic'), ('Valeria', 'Macloughlin'), ('Etsuko', 'Kitazaki'), ('Albertina', 'Gandara'), ('Mudarwati', 'Mudarwati'), ('Rakha', 'Mohan'), ('Nathalie', 'Vierin'), ('Stephanie', 'Bernadel'), ('Bernadette', 'Bayani'), ('Isabel', 'Collischonn'), ('Raadhae', 'Svarupa'), ('Cassandra', 'Barr'), ('Pamela', 'Van Boekel'), ('Pascale', 'Veraverbeke'), ('Yasmin', 'El Kashef'), ('Amanda', 'Mang'), ('Diana', 'Martin'), ('Melinda', 'Czink'), ('Kumiko', 'Iijima'), ('Gabriela', 'Zingman'), ('Johanna', 'Zingman'), ('Safa', 'Safar'), ('Diana', 'Vuchinger'), ('Simone', 'Stohr'), ('Anna', 'Bentzer'), ('Tatyana', 'Bezukladnikova'), ('Anna', 'Nefedova'), ('Mia', 'Paavilainen'), ('Violeta', 'Fabe Martin'), ('Mitsuko', 'Ise'), ('Kerry', 'Rudman'), ('Rocio', 'Gonzalez'), ('Bettina', 'Niedhart'), ('Veronika', 'Levchenko'), ('Kim', 'Kambic'), ('Nida', 'Waseem'), ('Goda', 'Kuliesyte'), ('Rita', 'Tarjan'), ('Barbora', 'Sukova'), ('Tajana', 'Mlakar'), ('Lourdes', 'Gaona Gonzalez'), ('Ana', 'Mise'), ('Erika', 'Villalobos Morsink'), ('Ekaterina', 'Kuznetsova'), ('Arantxa', 'Parra Santonja'), ('Caroline', 'Maes'), ('Katiuscia', 'Del Vecchio'), ('Kate', 'Hole'), ('Christie', 'Agugbom'), ('Zorana', 'Stefanovic'), ('Christy', 'Mbadiwe'), ('Sandra', 'Klemenschits'), ('Daniela', 'Klemenschits'), ('Enrica', 'Ditta'), ('Annalisa', 'Bona'), ('Deborah', 'Hill'), ('Thuy Linh', 'Tran'), ('Olivia', 'Sanchez'), ('Carla', 'Andrade'), ('Aleksandra', 'Srndovic'), ('Lindsay', 'Martin'), ('Alyssa', 'Cohen'), ('Irena', 'Noc'), ('Anisoara', 'Popescu'), ('Rose', 'Onoja'), ('Agnese', 'Zucchini'), ('Dan Dan', 'Jiang'), ('Angela', 'Arean'), ('Melinda', 'Malouli'), ('Lauren', 'Colalillo'), ('Viviana', 'Rojas Millan'), ('Fabienne', 'Vielle Grosjean'), ('Estefania', 'Rolon'), ('Erina', 'Akizu'), ('Tamara', 'Kikaleishvili'), ('Isabelle', 'Declercq'), ('Ekaterina', 'Kouznetchenkova'), ('Bethany', 'Griffin'), ('Alexandra', 'Mayrat'), ('Mariko', 'Fritz Krockow'), ('Kristina', 'Georgieva'), ('Tinatin', 'Turmanidze'), ('Lorena', 'Barbero'), ('Esther', 'Muscat'), ('Julie', 'Coin'), ('Femi', 'Odeyemi Musa'), ('Anna', 'Koumantou'), ('Luana', 'Magnani'), ('Maria Letizia', 'Zavagli'), ('Anushka', 'Rajiyah'), ('Lindsay', 'Dawaf'), ('Raquel', 'Kops Jones'), ('Margalita', 'Chakhnashvili'), ('Adriana', 'Ruiz'), ('Susanne', 'Wild'), ('Eman', 'Metwaly'), ('Tatiana', 'Perebiynis'), ('Ivana', 'Zupa'), ('Livia', 'Azzi'), ('Olga', 'Kalyuzhnaya'), ('Aleksandra', 'Kujawska'), ('Meriem', 'Addou'), ('Silvia', 'Gabba'), ('Anna', 'Yenyk'), ('Maki', 'Arai'), ('Jennifer', 'Schmidt'), ('Candice', 'Meyer'), ('Rachael', 'Irelewuyi'), ('Maria Alejandra', 'Garcia'), ('Ashley', 'Robards'), ('Ana', 'Timotic'), ('Trina', 'Singian'), ('Suchanun', 'Viratprasert'), ('Ceylan', 'Konuk'), ('Antonia', 'Steinmetz'), ('Asha', 'Burns'), ('Fernanda', 'Bini'), ('Jasna', 'Brnjakovic'), ('Gabriela', 'Moreira'), ('Annika', 'Weisse'), ('Marija', 'Serdarusic'), ('Isoke', 'Perry'), ('Lorenza', 'Vaschetto'), ('Gulay', 'Torgay'), ('Cristina', 'Santos'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Julia Octavia', 'Groblewski'), ('Anna', 'Alexeeva'), ('Andreea', 'Fusea'), ('Dina', 'Milosevic'), ('Ana', 'Cetnik'), ('Tania', 'Rivera'), ('Marie Perrine', 'Baudouin'), ('Jenny', 'Kuhn'), ('Suzi', 'Becvinovska'), ('Richele', 'Le Saldo'), ('Antonie', 'Steinmetz'), ('Sara', 'Sabry'), ('Marta', 'Marrero'), ('Lindsay', 'Cox'), ('Tamar', 'Zedginidze'), ('Thais', 'Schenck'), ('Mari', 'Mizuno'), ('Nina', 'Joksovic'), ('Ana Maria', 'Simanca'), ('Dea', 'Sumantri'), ('Monique', 'Adamczak'), ('Chris', 'Martinez Hernandez'), ('Viviana', 'Rivero'), ('Dan', 'Xiong'), ('Emmanuelle', 'Poncetta'), ('Marion', 'Lecas'), ('Dragana', 'Ognenovska'), ('Beatrice', 'Banila'), ('Lorena Ivette', 'Arias Rodriguez'), ('Stephanie', 'Chu'), ('Kathleen', 'Mcgaffigan'), ('Cristina', 'Tonelli'), ('Virginie', 'Pichet'), ('Vivien', 'Weber'), ('Ji Fei', 'Yu'), ('Irene', 'Gutierrez'), ('Cristelle', 'Grier'), ('Katarzyna', 'Walukiewicz'), ('Jenneta', 'Halliyeva'), ('Milena', 'Schulz Gartner'), ('Sae', 'Kato'), ('Iveta', 'Benesova'), ('Yolandi', 'Terblanche Ward'), ('Shirley', 'Bernal'), ('Kristina', 'Jarkenstedt'), ('Wioletta', 'Kaczmarek'), ('Hana', 'Kraftova'), ('Kristina', 'Dundov'), ('Anna', 'Shchupak'), ('Alet', 'Boonzaaier'), ('Sandra', 'Jillyova'), ('Gulvona', 'Khodjaeva'), ('Monica', 'Acosta'), ('Diana', 'Costa'), ('Simona', 'Arghire'), ('Zuzana', 'Cerna'), ('Maria', 'Kravcenko'), ('Lourdes', 'Lopez'), ('Roberta', 'Frizzo'), ('Asami', 'Nishio'), ('Violetta', 'Bagrova'), ('Anuli', 'Okafor'), ('Anete', 'Rozkalne'), ('Silvia', 'Gutierrez Quiroga'), ('Beatrice', 'Spiganti'), ('Andre', 'Polasek'), ('Raluca', 'Ciochina'), ('Roberta', 'Vinci'), ('Cindra', 'Maharaj'), ('Cecilia', 'Helland'), ('Eugenia', 'Chialvo'), ('Harriet', 'Piercy'), ('Irena', 'Khomyk'), ('Jennie', 'Loow'), ('Trine', 'Bassett'), ('Jaslyn', 'Hewitt'), ('Melanie', 'Cohen'), ('Maryam', 'Mazaheri'), ('Macey', 'Breece'), ('Sari', 'Stegmann'), ('Maria Isabella', 'Ariza Sanz'), ('Katherine', 'Vymetal'), ('Davina', 'Duronio'), ('Lucie', 'Podskubova'), ('Wei Juan', 'Liu'), ('Nicole', 'Bouffler'), ('Lorena', 'Aparicio Vargas'), ('Daniela', 'Bertolo'), ('Inge', 'De Geest'), ('Linda', 'Fallon'), ('Priscila', 'Ortega'), ('Martina', 'Reiser'), ('Milica', 'Koprivica'), ('Irina', 'Bobrysheva'), ('Dong Bo', 'Lei'), ('Branka', 'Savic'), ('Maritza', 'Villalba Castro'), ('Jackeline', 'Jacome'), ('Nicole', 'Clerico'), ('Beauty', 'Oghenekevwe'), ('Daja', 'Bedanova'), ('Elena', 'Bovina'), ('Ana', 'Sismondini'), ('Anna', 'Rynarzewska'), ('Ariela', 'Primo'), ('Nato', 'Dolitze'), ('Deena Rose', 'Cruz'), ('Paloma', 'Castillo'), ('Magalie', 'Girard'), ('Rebecca', 'Pike'), ('Alejandra', 'Rivero'), ('Christelle', 'Antille'), ('Lyle', 'Cupido'), ('Mao', 'Yamanaka'), ('Daniela', 'Hebertova'), ('Jelena', 'Pandzic'), ('Lejla', 'Popobic'), ('Karin', 'Kues'), ('Stephanie', 'Cohen Aloro'), ('Kelly', 'Mccain'), ('Valerie', 'Verrier Diaconescu'), ('Barbara', 'Galletto'), ('Amanda', 'Sanches'), ('Maria', 'Husain'), ('Michela', 'Comune'), ('Vrushali', 'Gawankar'), ('Laurette', 'Van Den Knaap'), ('Ignacia', 'Marin'), ('Eugenia', 'Lepchenko'), ('Vanessa', 'Alonso Rodriguez'), ('Virginia', 'Romero Barrio'), ('Debbie', 'Larocque'), ('Ester', 'Lasheras Varade'), ('Suci', 'Bungaran'), ('Malgorzata', 'Kanabus'), ('Megan', 'Bradley'), ('Irini', 'Alevizopoulou'), ('Sheri', 'Esrock'), ('Anne', 'Lucas'), ('Virginie', 'Rabeau'), ('Segun', 'Lesi'), ('Cameron', 'Benjamin'), ('Jane', 'Odonoghue'), ('Ayano', 'Takeuchi'), ('Lenka', 'Potocarova'), ('Julie', 'Salla'), ('Marie Lisa', 'Loriga'), ('Teresa', 'Veneruso'), ('Alexis', 'King'), ('Audra', 'Falk'), ('Karla', 'Hall Gonzalez'), ('Chanelle', 'Kruger'), ('Liliana', 'Hung'), ('Nina', 'Zlender'), ('Natalie', 'Mikolich'), ('Kristel', 'Van Den Tillaart'), ('Sarah', 'Mcintyre'), ('Claudia', 'Argumedo'), ('Valentina', 'Caronti'), ('Shikha', 'Uberoi'), ('Stefania', 'Chieppa'), ('Mirem', 'Rico Nogales'), ('Eugenia', 'Subbotina'), ('Noemie', 'Ruffin'), ('Kellie', 'Browne'), ('Helena', 'Norfeldt'), ('Teodora', 'Mircheva'), ('Laura', 'Levan'), ('Ashley', 'Sims'), ('Bettina', 'Resch'), ('Vida Lina', 'Alpuerto'), ('Jelena', 'Dokic'), ('Georgia', 'Akrivopoulou'), ('Chun Yan', 'He'), ('Mia', 'Zecevic'), ('Mariem Nissaf', 'Bouchlaka'), ('Ioanna', 'Petratou'), ('Maria Fernanda', 'Alves'), ('Ioana', 'Gaspar'), ('Martina', 'Babakova'), ('Olga', 'Dzuba'), ('Daniela', 'Salomon'), ('Erin', 'Burdette'), ('Margarita', 'Akbacheva'), ('Jordanna', 'Seymour'), ('Kristin', 'Martinez'), ('Anja', 'Margetic'), ('Marina', 'Parashkevova'), ('Daniela', 'Hantuchova'), ('Florencia', 'Salvadores'), ('Petra', 'Vojtaskova'), ('Lauren', 'Stephens'), ('Lana', 'Popadic'), ('Cecilia', 'Cardenas'), ('Simin', 'Liu'), ('Tassia', 'Sono'), ('Nele', 'Landrieux'), ('Ekaterina', 'Kozhokhina'), ('Aline', 'Quintal'), ('Laetitia', 'Zembski'), ('Katrien', 'Scott'), ('Renata', 'Del Barco Matto'), ('Yoshiko', 'Kobayashi'), ('Tomoko', 'Nagahisa'), ('Evy', 'De Mesmaecker'), ('Anna', 'Chachua'), ('Mariana', 'Lopez Terribile'), ('Avril', 'Martinez'), ('Rocio', 'Lopez Pimentel'), ('Bettina', 'Pirker'), ('Giorgia', 'Brunetti'), ('Story', 'Tweedie Yates'), ('Suheil', 'Lizana'), ('Rachel', 'Cruickshank'), ('Andrea', 'Cooper'), ('Katie', 'Ruckert'), ('Neuza', 'Silva'), ('Kristel', 'Izquierdo'), ('Sofia', 'Brun'), ('Daniela', 'Covello'), ('Anne Valerie', 'Evain'), ('Vivian', 'Torrez'), ('Ashley', 'Kroh'), ('Giorgia', 'Nespoli'), ('Eudoxia', 'Delisavva'), ('Emily', 'Quin'), ('Lena', 'Sherbakov'), ('Laura', 'Puch'), ('Nishtha', 'Yadav'), ('Dianne', 'Hollands'), ('Tanja', 'Hirschauer'), ('Carmen', 'Torres'), ('Virginie', 'Razzano'), ('Irina', 'Delitz'), ('Maria Emilia', 'Salerni'), ('Constanze', 'Glockner'), ('Beti', 'Sekulovski'), ('Denise', 'Ferreira'), ('Judith', 'Diaz'), ('Yan Hua', 'Dong'), ('Natasha', 'Lucki'), ('Giulia', 'Baldoni'), ('Patricia', 'Starzyk'), ('Liga', 'Dekmeijere'), ('Elena', 'Tudor'), ('Barbara', 'Hoflinger'), ('Magdolna', 'Rekasi'), ('Yamini', 'Thukkaiandi'), ('Summer', 'Bhullar'), ('Norma', 'Flautero'), ('Kate', 'Boomershine'), ('Lauren', 'Breadmore'), ('Marta', 'Mir Portell'), ('Dinka', 'Hadzic'), ('Michela', 'Sala'), ('Desanka', 'Jovanovic'), ('Samanthi', 'Wijesekera'), ('Petia', 'Vousheva'), ('Zvezdelina', 'Mladenova'), ('Evgenia', 'Subbotina'), ('Borka', 'Majstorovic'), ('Petia', 'Voucheva'), ('Ceyda', 'Keyman'), ('Jane', 'Ioaba'), ('Paola', 'Guerrero'), ('Kanako', 'Kozawa'), ('Kim', 'Clijsters'), ('Yuliana', 'Fedak'), ('Carolina', 'Ojeda'), ('Jacqueline', 'Bohannon'), ('Rachel', 'Magory'), ('Eun Hye', 'Cho'), ('Melanie', 'Gerbasi'), ('Davilyn', 'Godinet'), ('Bethzabe', 'Magadan'), ('Arpi', 'Kojian'), ('Ivana', 'Sokac'), ('Regina', 'Temez'), ('Sophie', 'Douchet'), ('Ana Maria', 'Zuleta'), ('Hande', 'Gorur'), ('Krisel', 'Sverko'), ('Monique', 'Groen'), ('Carmen', 'Marquez'), ('Nan Nan', 'Liu'), ('Natalia', 'Lifshitz'), ('Anna', 'Ioannou'), ('Robin', 'Stephenson'), ('Fernanda', 'Oliveira Da Silva'), ('Estefania', 'Daubiol'), ('Ilona', 'Somers'), ('Lore', 'De Lille'), ('Teresina', 'Paz Soldan'), ('Sayaka', 'Yoshino'), ('Yulia', 'Klimchenko'), ('Florencia', 'Romani'), ('Yuri', 'Kasuya'), ('Ketino', 'Akhvlediani'), ('Jessica', 'Mckeown'), ('Ami', 'Fujiwara'), ('Urszula', 'Owsiak'), ('Yomna', 'Farid'), ('Genevieve', 'Charron'), ('Leanne', 'Rutherford'), ('Amandine', 'Clio'), ('Melissa', 'Berry'), ('Jae Eun', 'Kim'), ('Sohvi', 'Sundqvist'), ('Annabel', 'Blow'), ('Joanna', 'Zyndzo'), ('Jennifer', 'Langer'), ('Natalia', 'Tsitouras'), ('Jacqueline', 'Frohlich'), ('Cecilia', 'Varela'), ('Flor', 'Bayon'), ('Jie', 'Zheng'), ('Tihana', 'Pochobradsky'), ('Chiara', 'Gonnelli'), ('Daria', 'Potapova'), ('Klara', 'Hladka'), ('Tessy', 'Van De Ven'), ('Melody', 'Paschal'), ('Rachel', 'Crismond'), ('Francesca', 'Lancini'), ('Danielle', 'Plant'), ('Leire', 'Etayo'), ('Julia', 'Vakulenko'), ('Silvia', 'Disderi'), ('Martina', 'Dettore'), ('Yukari', 'Ochiai'), ('Julia', 'Nogueira'), ('Oksana', 'Karyshkova'), ('Belen', 'Pandre'), ('Patricia', 'Van Worcum'), ('Mariela', 'Castro'), ('Boglarka', 'Berecz'), ('Maria Paz', 'Orellana'), ('Raluca Daniela', 'Gheorghe'), ('Celine', 'Parun'), ('Tijana', 'Stojkovic'), ('Erika', 'Valdes'), ('Emma', 'Murphy'), ('Marie', 'Vallety'), ('Caroline Ann', 'Basu'), ('Mamiko', 'Kawaguchi'), ('Lucia', 'Lazo'), ('Marie', 'Matrka'), ('Raluca', 'Moldovan'), ('Masayo', 'Hosokawa'), ('Irina', 'Mourachkintseva'), ('Saras', 'Arasu'), ('Alena', 'Dvornikova'), ('Julia', 'Smith'), ('Tadeja', 'Sibila'), ('Kimberly', 'Buick'), ('Romina', 'Sceats'), ('Marcella', 'Campana'), ('Marisa', 'Howell'), ('Victoria', 'Chavleishvili'), ('Debora', 'Carmassi'), ('Lucia', 'Obysovska'), ('Milica', 'Jeremic'), ('Jennifer', 'Miccoli'), ('Nikita', 'Bhardwaj'), ('Siham Soumeya', 'Ben Nacer'), ('Karin', 'Ionesco'), ('Agathe', 'Macarez'), ('Thi Kim Loi', 'Tran'), ('Lisette', 'Pereira Aguilar'), ('Elisa', 'Balsamo'), ('Paule Andree', 'Levasseur'), ('Monika', 'Schneider'), ('Suzana', 'Maksovic'), ('Donna', 'Mc Intyre'), ('Nandini', 'Perumal'), ('Lavinia', 'Toader'), ('Tatjana', 'Nossik'), ('Elena', 'Baltacha'), ('Edina', 'Gobol'), ('Line', 'Elvstrom Ekner'), ('Yuka', 'Hatano'), ('Alima', 'Mohamed'), ('Christine', 'Alford'), ('Laura', 'Figuerola Foix'), ('Catherine', 'Gunn'), ('Claudine', 'Schaul'), ('Hong Thanh', 'Tang'), ('Maria Paz', 'Orero'), ('Ayaka', 'Maekawa'), ('Lucila', 'Di Carlo'), ('Anya', 'Moyston'), ('Anabella', 'Duque'), ('Adriana', 'Jerabek'), ('Maja', 'Kovacek'), ('Komugi', 'Matsui'), ('Michelle', 'Grobby'), ('Leeza', 'Rooks'), ('Aditi', 'Karanjkar'), ('Serra', 'Olgac'), ('Daniela', 'Murselovic'), ('Aika', 'Nonaka'), ('Klara', 'Jarova'), ('Ruxandra', 'Marin'), ('Chiari', 'Aragaki'), ('Jing Jing', 'Liu'), ('Ivana', 'Abramovic'), ('Elodie', 'Rogge Dietrich'), ('Ziarla', 'Battad'), ('Esther', 'Hijosa Basarte'), ('Ena', 'Brankovic'), ('Margit', 'Ruutel'), ('Julia', 'Biffar'), ('Blair', 'Di Sesa'), ('Miroslava', 'Velevska'), ('Yimara', 'Figueroa'), ('Nadine', 'Hassinger'), ('Marta', 'Simic'), ('Mitsumi', 'Kawasaki'), ('Maria Paola', 'Aranguren'), ('Olga', 'Borisova'), ('Cheli', 'Bargil'), ('Ryoko', 'Watanabe'), ('Annette', 'Kolb'), ('Zihaida', 'Shantalova'), ('Hsin Chieh', 'Chang'), ('Anne', 'Keothavong'), ('Zita', 'Horanyi'), ('Radhika', 'Ravji'), ('Ksenia', 'Gorbunova'), ('Maria Teresa', 'Scott'), ('Sukriti', 'Patnaik'), ('Iva', 'Saric'), ('Angelica Maria', 'Torres'), ('Katri', 'Miller'), ('Nichala', 'Reddy Boda'), ('Orobosa', 'Amadin'), ('Jessica', 'Weyreuter'), ('Alexia', 'Malbran'), ('Eri', 'Nozawa'), ('Alexandra', 'Nieto'), ('Karin', 'Coetzee'), ('Alexandra', 'Popa'), ('Cristina', 'Sampaio'), ('Alina Iuliana', 'Virsa'), ('Sangaram', 'Shangamitra'), ('Cecilia', 'Poveda'), ('Marina', 'Stanimirov'), ('Yvonne', 'Meusburger'), ('Prapaiphan', 'Kansuthi'), ('Kim Anh', 'Nguyen'), ('Elena', 'Poliakova'), ('Liza', 'Viplav'), ('Selma', 'Andrade'), ('Renata', 'Voracova'), ('Kamila', 'Dadakhodjaeva'), ('Jitske', 'Frankenhuis'), ('Diana', 'Espinal'), ('Catalina', 'Isaza'), ('Irene', 'Mani'), ('Lubomira', 'Kurhajcova'), ('April', 'Pfannestiel'), ('Vishika', 'Chhetri'), ('Myriam', 'Cueva'), ('Megan', 'Racette'), ('Leigh', 'Shelton'), ('Yevgeniya', 'Barysheva'), ('Veronica', 'Spiegel'), ('Pavia', 'Schnattingerova'), ('Yen Hua', 'Lu'), ('Yuliya', 'Beygelzimer'), ('Ghita', 'Mhaoud'), ('Lidia', 'Lopez Companys'), ('Eveline', 'Rusdianto'), ('Juan Juan', 'Cheng'), ('Asimina', 'Kaplani'), ('Ana Maria', 'Mora'), ('Feriel', 'Esseghir'), ('Alexandra', 'Kravets'), ('Maria', 'Pes'), ('Petra', 'Kostelnikova'), ('Neyssa', 'Etienne'), ('Brenda', 'Coassolo'), ('Nina', 'Egger'), ('Ekaterina', 'Chatzisavidou'), ('Susanna', 'Lingman'), ('Neda', 'Mihneva'), ('Maria', 'Vlachou'), ('Andreea Mihaela', 'Matei'), ('Rattiya', 'Hiranrat'), ('Nicolette', 'Mechem'), ('Giulia', 'Cesari'), ('Natalia', 'Dziamidzenka'), ('Irene', 'George'), ('Natalia', 'Zabala'), ('Aniko', 'Kapros'), ('Leonie', 'Mekel'), ('Kate', 'Jolson'), ('Maria', 'Ivanov'), ('Naoe', 'Nabetani'), ('Sladana', 'Stankovic'), ('Alessandra', 'Esposito'), ('Karina', 'Torres Ferrer'), ('Dalia', 'Coutry'), ('Nermien', 'Abaza'), ('Elena', 'Kokkinaki'), ('Klara', 'Petersson'), ('Kendra', 'Strohm'), ('Christina', 'Horiatopoulos'), ('Maria Eugenia', 'Brito'), ('Barbara', 'Murga'), ('Ana Cecilia', 'Trevino'), ('Ekaterina', 'Ostapenko'), ('Cecilia', 'Quarracino'), ('Doria', 'Khetib'), ('Kathryn', 'Bentley'), ('Gianna', 'Doz'), ('Julia', 'Acs'), ('Anna', 'Anikanova'), ('Sabrina', 'Peppl'), ('Nargisa', 'Akramova'), ('Adriana', 'Herran Giraldo'), ('Julia', 'Oussanova'), ('Imane', 'Bachi'), ('Berveine', 'Mohammed'), ('Rati', 'Kumar'), ('Bharathy', 'Parthasarathy'), ('Patricia', 'Alonso'), ('Zsuzsanna', 'Fodor'), ('Timberly', 'Greenly'), ('Deborah', 'Montero'), ('Joanna', 'Carlson'), ('Nicole', 'Kriz'), ('Maria Rosa', 'Sitja Gibert'), ('Sabrina', 'Eisenberg'), ('Barbara', 'Polidoro'), ('Lenka', 'Snajdrova'), ('Susanne', 'Aigner'), ('Hadas', 'Zabusky'), ('Ana Lucia', 'Migliarini De Leon'), ('Christine', 'Stastny'), ('Monica', 'Purice'), ('Elizabeth', 'Bondi'), ('Sana', 'Ben Salah'), ('Renata', 'Caceres'), ('Luisa', 'Cowper'), ('Hitomi', 'Konno'), ('Mia', 'Marovic'), ('Jimena', 'Alvarez'), ('Kalpita', 'Raje'), ('Monika', 'Hohenecker'), ('Franziska', 'Etzel'), ('Danielle', 'Moita'), ('Beatriz', 'Becker'), ('Ingeborg', 'Kerkhoven'), ('Karina', 'Koche'), ('Maria Vanina', 'Garcia Sokol'), ('Michelle', 'Giang'), ('Aiko', 'Nakamura'), ('Geeta', 'Manohar'), ('Daniela', 'Alvarez'), ('Tiffany', 'Smith'), ('Ridhina', 'Parekh'), ('Asha', 'Jaja'), ('Carmen Raluca', 'Tibuleac'), ('Iulia', 'Rozgon'), ('Klara', 'Zrustova'), ('Ancuta', 'Gadalean'), ('Prariyawan', 'Ratanakrong'), ('Rachel', 'Halligan'), ('Maria Jose', 'Dronda Prados'), ('Radha', 'Devendrappa'), ('Sevia', 'Gonca'), ('Emmanuelle', 'Edon'), ('Mareen', 'Beermann'), ('Giorgia', 'Buchanan'), ('Anupama', 'Rajur'), ('Gloria', 'Perfetti'), ('Carlotta', 'Campus'), ('Tatevik', 'Babayan'), ('Nandita', 'Chandrasekar'), ('Ji Youn', 'Lee'), ('Bruna', 'Discordia'), ('Mika', 'Tanaka'), ('Yan Ze', 'Xie'), ('Jackie', 'Carleton'), ('Anne Priska', 'Schaefer'), ('Marie France', 'Lord Andrade'), ('Melissa', 'Schaub'), ('Yan Sr', 'Zhang'), ('Tina', 'Schiechtl'), ('Cynthia', 'Goulet'), ('Marianna', 'Laasanen'), ('Yukiyo', 'Hara'), ('Li', 'Yan'), ('Galina', 'Fokina'), ('Sylwia', 'Domanska'), ('Ayumi', 'Ichikawa'), ('Francesca', 'Savinelli'), ('Petroena', 'Fong'), ('Elise', 'Tamaela'), ('Alice', 'Barnes'), ('Alice', 'Joy'), ('Akiko', 'Yonemura'), ('Zuzana', 'Melicherova'), ('Ingunn', 'Eiriksdottir'), ('Wen Hao', 'Wu'), ('Jessie', 'De Vries'), ('Sara', 'Badran'), ('Rankin', 'Williams'), ('Dan', 'Yu'), ('Clara', 'Rios'), ('Petra', 'Baksa'), ('Daniela', 'Munoz Gallegos'), ('Vanessa', 'Nieto'), ('Andrea', 'Liniger'), ('Justine', 'Walsh'), ('Marie Pier', 'Pouliot'), ('Natalia', 'Garbellotto'), ('Mouna', 'Sabri'), ('Melissa', 'Torres Sandoval'), ('Marta', 'Sanchez Soto'), ('Caroline', 'Neves'), ('Rocio', 'Villar Gonzalez'), ('Mia', 'Van Rooyen'), ('Bit Na', 'Lee'), ('Nancy', 'Cazares'), ('Nadezda', 'Samoylo'), ('Dvora', 'Marsha'), ('Julia', 'Roca Valverde'), ('Rebecca', 'Rankin'), ('Yao', 'Zhang'), ('Emily', 'Arnott'), ('Hea Mi', 'Kim'), ('Catarina', 'Ferreira'), ('Merve', 'Koksal'), ('Maarit', 'Nieminen'), ('Ludivine', 'Cassagne'), ('Silvia', 'Tiscareno'), ('Masha', 'Bayser'), ('Rocio', 'Govantes'), ('Erika', 'Miyamoto'), ('Chantelle', 'Simpson'), ('Paula', 'Marama'), ('Natalia', 'Coronel'), ('Diana', 'Julianto'), ('Assia', 'Halo'), ('Clodagh', 'Mcmorrow'), ('Elena', 'Vianello'), ('Helen', 'Broome'), ('Sofia', 'Arvidsson'), ('Rossella', 'Sartore'), ('Mio', 'Kinjo'), ('Cheng Jie', 'Lu'), ('Severine', 'Dhondt'), ('Jennifer', 'Magley'), ('Sayaka', 'Takahara'), ('Kathrin', 'Woerle'), ('Yulia', 'Ustyuzhanina'), ('Daniela', 'Martinez'), ('Gergana', 'Ganeva'), ('Holly', 'Mckee'), ('Crystel', 'Mulder'), ('Yevheniia', 'Savranska'), ('Sofia', 'Holden'), ('Hsiao Han', 'Chao'), ('Matulanda', 'Lumanauw'), ('Rediet', 'Kefyalew'), ('Laura', 'Morales Hernandez'), ('Virginie', 'Oulevay'), ('Camille', 'Dubois'), ('Sonia', 'Iacovacci'), ('Elena', 'Toulgaridou'), ('Majen', 'Immink'), ('Kei', 'Sekine'), ('Tanya', 'Volkova'), ('Vana', 'Mrazovic'), ('Mansi', 'Majeji'), ('Bronwyn', 'Williams'), ('Noelia', 'Leon'), ('Jenny', 'Zambrano'), ('Jessica', 'Simosa'), ('Gloriann', 'Lopez'), ('Megan', 'Emmett'), ('Raissa', 'Gourevitch'), ('Jana', 'Cabak'), ('Nathalie', 'Roels'), ('Shu Jin', 'Xie'), ('Aminat', 'Taiwo'), ('Rachel', 'Janssen'), ('Marie Gaiane', 'Mikaelian'), ('Kira', 'Bezverkova'), ('Tereza', 'Sandova'), ('Tsitsi', 'Masviba'), ('Nikolina', 'Hrankova'), ('Patricia', 'Munoz Santana'), ('Ninja', 'Pfuetzenreuter'), ('Hanna', 'Nooni'), ('Melanie', 'Marois'), ('Haruka', 'Nakamura'), ('Hollie', 'Bees'), ('Merve', 'Asimgil'), ('Marzia', 'Carchesio'), ('Jaclyn', 'Lucas'), ('Karin', 'Lems'), ('Audrey', 'Wahl'), ('Chanelle', 'Scheepers'), ('Mi Hee', 'Jung'), ('Yik Hui', 'Leow'), ('Lindsey', 'Puchyr'), ('Ana Milena', 'Ramirez'), ('Michaela', 'Bjornstrom'), ('Erika', 'Reggiane'), ('Charise', 'Godoy'), ('Caroline', 'Raba'), ('Elena', 'Mitrofanova'), ('Eveline', 'Vanhyfte'), ('Monika', 'Peciulionyte'), ('Nelly', 'Maillard'), ('Caroline', 'Skrzypczyk'), ('Giorgia', 'Mortello'), ('Mariana', 'Junqueira'), ('Nikkita', 'Fountain'), ('Veronica', 'Grigis'), ('Bintou', 'Barry'), ('Maretha', 'Van Niekerk'), ('Mayu', 'Araki'), ('Laura', 'Vignoni'), ('Mariana Pires', 'Junqueira'), ('Christina', 'Obermoser'), ('Magdalena', 'Von Geyr'), ('Marianna', 'Keranen'), ('Angela', 'Piedrahita'), ('Samantha', 'Stosur'), ('Kim', 'Rudman'), ('Marion', 'Leuillier'), ('Jean', 'Willmann'), ('Yuka', 'Matsumoto'), ('Melanie', 'Roy'), ('Rowena', 'Baierl'), ('Ema', 'Janaskova'), ('Dorian', 'Driessen'), ('Bo', 'Verhulsdonk'), ('Pascale', 'Leroy'), ('Yael', 'Glitzenstein'), ('Alexandra', 'Zerkalova'), ('Nisrine', 'Hajbane'), ('Diana Nur', 'Fatimah'), ('Darija', 'Jurak'), ('Vanessa', 'Valdivia'), ('Caroline', 'Hartmann'), ('Michaela', 'Beck'), ('Aleksandra', 'Kostikova'), ('Tatiana', 'Tamburini'), ('Hazar', 'Sidki'), ('Miki', 'Mori'), ('Haruka', 'Fujishiro'), ('Jorgelina', 'Barrera'), ('Samrita', 'Sekar'), ('Elena', 'Silina'), ('Cristina', 'Cabello Gonzalez'), ('Seble', 'Woldegebriel'), ('Mamatha', 'Nandakumar'), ('Monika', 'Krauze'), ('Lauren', 'Cheung'), ('Kyung Mi', 'Noh'), ('Ashlesha', 'Lokhande'), ('Shilpa', 'Joshi'), ('Emelie', 'Reutersward'), ('Dominika', 'Nociarova'), ('Alexandra', 'Zadoryn'), ('Sue', 'Rossano'), ('Sheenagh', 'Cosgrove'), ('Volha', 'Dubovik'), ('Ragini', 'Vimal'), ('Zarah', 'De Silva'), ('Yoo Mi', 'Jung'), ('Wilawan', 'Choptang'), ('Sunna Kristina', 'Barthel'), ('Maria', 'Perez Garcia'), ('Nuria', 'Roig Tost'), ('Emilie', 'Bacquet'), ('Celina', 'Grondin'), ('Miho', 'Tanaka'), ('Katy', 'Sauboi'), ('Frederique', 'Desire'), ('Katherine', 'Rammo'), ('Andrea', 'Riedlmajerova'), ('Zuzana', 'Palovic'), ('Nino', 'Esebua'), ('Mojca', 'Mileta'), ('Inga', 'Prodinger'), ('Daniela', 'Lopez'), ('Julie', 'Merle'), ('Lina', 'Krasnoroutskaya'), ('Virginia', 'Tomatis'), ('Giorgia', 'Mondani'), ('Christelle', 'Gerin'), ('Nelly', 'Iglesias Vazquez'), ('Joanna', 'Sakowicz Kostecka'), ('Casey', 'Cross'), ('Mireia', 'Gol Alamo'), ('Davinia', 'Lobbinger'), ('Marketa', 'Pastikova'), ('Aspasia', 'Sotiriadou'), ('Martina', 'Matouskova'), ('Ryo', 'Takahashi'), ('Nasheli', 'Martinez'), ('Sanja', 'Todorovic'), ('Pornrampha', 'Pramualsuk'), ('Bianca', 'Acquistapace'), ('Desire', 'Roset Torres'), ('Mariana', 'Melo'), ('Miriam', 'Sommer'), ('Daniela', 'Casanova'), ('Natasa', 'Sijakovic'), ('Sofia', 'Haggstrom'), ('Dominique', 'Van Boekel'), ('Bojana', 'Minic'), ('Paula', 'Fondevila Castro'), ('Estefania', 'Aldana Estremera'), ('Gaia', 'Tanganelli'), ('Sayuri', 'Takeshima'), ('Judit', 'Llorens'), ('Irina', 'Bulykina'), ('Nicoleta', 'Ratiu'), ('Julie', 'Smekodub'), ('Douglas', 'Wink'), ('Kana', 'Okawa'), ('Luisa', 'Obando'), ('Sabrina', 'Echavarria'), ('Kelly', 'Taylor'), ('Katharina', 'Alberti'), ('Natalia', 'Bogdanova'), ('Rebecca', 'Dandeniya'), ('Meryem', 'Lahlou'), ('Mia', 'Kurek'), ('Eleftheria', 'Makromaridou'), ('Bruna', 'Gelbecke'), ('Raquel', 'Martins'), ('Joneca', 'Meurling'), ('Barbora', 'Strnadova'), ('Karishma', 'Mulay'), ('Chen', 'Li'), ('Priyanka', 'Mehta'), ('Caroline', 'Korsawe'), ('Rebecca', 'Fong'), ('Bettina', 'Cremasco'), ('Carine', 'Vermeulen'), ('Shereen', 'Youssef'), ('Aibika', 'Kalsarieva'), ('Amani', 'Khalifa'), ('Katharina', 'Jacob'), ('Lucia', 'Henkle Gomez'), ('Melissa', 'Applebaum'), ('Claudia', 'Corral'), ('Iveta', 'Gerlova'), ('Anca', 'Anastasiu'), ('Carmela', 'Carro'), ('Eva', 'Hrdinova'), ('Tereza', 'Veverkova'), ('Sarah', 'Tami Masi'), ('Katherina', 'Trumpf'), ('Laura', 'Ganzer'), ('Sae Mi', 'Lim'), ('Elizaveta', 'Avdeeva'), ('Ani', 'Nazari'), ('Sarah', 'Wright'), ('Kirsty', 'Mcrae'), ('Maria Pilar', 'Sanchez Alayeto'), ('Maria Jose', 'Sanchez Alayeto'), ('Jessica', 'Stein'), ('Fernanda', 'Luiz'), ('Abiodun', 'Bamigbade'), ('Constanze', 'Steiner'), ('Akgul', 'Amanmuradova'), ('Mariapia', 'Quagliozzi'), ('Iulia', 'Dogarescu'), ('Maria', 'Penkova'), ('Thelara', 'Louw'), ('Angelina', 'Minova'), ('Aurelie', 'Bejar'), ('Kristen', 'Schlukebir'), ('Sharon', 'Marin'), ('Natsumi', 'Hamamura'), ('Elena', 'Baranova'), ('Petra', 'Dizdar'), ('Vanessa', 'Ridolfo'), ('Elisabeth', 'Bahn'), ('Nelly', 'Dvornicka'), ('Julie Ann', 'Cadiente'), ('Daniela', 'Kocetkova'), ('Carolina', 'Pimenta'), ('Yulia', 'Fitri'), ('Elena', 'Uzunova'), ('Sayaka', 'Yoshimoto'), ('Lizanne', 'Marais'), ('Amber', 'Liu'), ('Shenay', 'Perry'), ('Eva', 'Wang'), ('Claudia', 'Calderon'), ('Anna', 'Hawkins'), ('Daniela', 'Bercek'), ('Jeong Eun', 'Park'), ('Uschi', 'Van Doren'), ('Lucy', 'Brooks'), ('Michelle', 'Gerards'), ('Piia', 'Suomalainen'), ('Georgette', 'Wright'), ('Milana', 'Borisev'), ('Marjorie', 'Sindal'), ('Marina', 'Tishkova'), ('Hayley', 'Rudman'), ('Elin', 'Stahl Johansson'), ('Mai', 'Fujii'), ('Lenka', 'Dlhopolcova'), ('Emily', 'Webley Smith'), ('Julia', 'Babilon'), ('Dominika', 'Dieskova'), ('Sophie Anne', 'Cerbon'), ('Khushleen', 'Bains'), ('Alexandra', 'Mikhailova'), ('Maria Jose', 'Argeri'), ('Tomoyo', 'Takagishi'), ('Gabrielle', 'Baker'), ('Danielle', 'Wiggins'), ('Patrizia', 'Cacciaguerra'), ('Noriko', 'Saruta'), ('Irina', 'Smirnova'), ('Azusa', 'Konishi'), ('Diana', 'Srebrovic'), ('Ajda', 'Brumen'), ('Nadzeya', 'Lysak'), ('Sylwia', 'Ziolkowska'), ('Nina', 'Suvak'), ('Saray', 'Pino Vega'), ('Karolina', 'Nowak'), ('Gabriela', 'Amezaga'), ('Reina', 'Ishihara'), ('Essi', 'Laine'), ('Viola', 'Wacker'), ('Aleksandra', 'Cekic'), ('Ana', 'Vrljic'), ('Servane', 'Delobelle'), ('Asli', 'Turksoy'), ('Jana', 'Deylova'), ('Tanner', 'Cochran'), ('Rocio', 'Amadio'), ('Miranda', 'Foley'), ('Sandra', 'Spadzinski'), ('Verena', 'Beller'), ('Danielle', 'Steinberg'), ('Eva Maria', 'Hoch'), ('Nathalie', 'Garcia Jaminet'), ('Samantha', 'Hammond'), ('Azzurra', 'Fonsmorti'), ('Tamara', 'Day'), ('Hitomi', 'Fujii'), ('Tania', 'Aguirre'), ('Alona', 'Bondarenko'), ('Eva', 'Birnerova'), ('Nicola', 'Slater'), ('Shayma Seif', 'El Sisi'), ('Pamela', 'Fogel'), ('Dorottya', 'Magas'), ('Kelly', 'Mcnabney'), ('Lara', 'Del Saz'), ('Valentina', 'Sulpizio'), ('Lara', 'Del Saz De Soto'), ('Omolola', 'Oredugba'), ('Zsofia', 'Szabo'), ('Danielle', 'Downey'), ('Mihaela', 'Sicoe'), ('Katja', 'Blocker'), ('Ling', 'Yan'), ('Montserrat', 'Ferrer'), ('Cristina', 'Mecho Ruiz'), ('Anna', 'Lubinsky'), ('Lilly', 'Cal Fong'), ('Petra', 'Bajerovska'), ('Pavlina', 'Ticha'), ('Dina', 'Naffa'), ('Svetlana', 'Kouzmenko'), ('Elena', 'Besedova'), ('Meghha', 'Vakaria'), ('Helena', 'Besovic'), ('Patricia', 'Holzman'), ('Chullaluck', 'Phocharoen'), ('Farida', 'Agustina'), ('Purnima', 'Shakaalya'), ('Tetiana', 'Luzhanska'), ('Zuzana', 'Zemenova'), ('Vera', 'Zvonareva'), ('Ji Young', 'Lee'), ('Mariana', 'Conde'), ('Natasa', 'Krklec Jerinkic'), ('Iza', 'Ferreira'), ('Stephanie', 'Greau'), ('Angela', 'Ahtemenciuc'), ('Laura', 'Harkness'), ('Muattar', 'Abdukhalikova'), ('Georgia', 'Gonzalez Massot'), ('Yuko', 'Uchida'), ('Hilda', 'Zuleta Cabrera'), ('Christian', 'Thompson'), ('Catrina', 'Thompson'), ('Mariona', 'Nadal Ribelles'), ('Rebecca', 'Cooper'), ('Arianne', 'Gajasan'), ('Nathalie', 'Wallin'), ('Annabel', 'Youthed'), ('Sakiko', 'Shimizu'), ('Iyabo', 'Ogunwole'), ('Anna', 'Korotkova'), ('Megan', 'Schmulbach'), ('Saori', 'Kaneko'), ('Minori', 'Takemoto'), ('Anne Sophie', 'Vidal'), ('Dan Feng', 'Liu'), ('Kazusa', 'Ito'), ('Klaudia', 'Jans Ignacik'), ('Noha', 'Mohsen'), ('Mai Huynh', 'Huynh'), ('Alexa', 'Geldenhuys'), ('Anna Lee', 'Bryant'), ('Irina', 'Lykina'), ('Ornela', 'Basaric'), ('Caroline', 'Hammond'), ('Angela', 'Haynes'), ('Alexis', 'Prousis'), ('Sabita', 'Maharaj'), ('Analia', 'Hermida'), ('Monika', 'Goel'), ('Al', 'Sasaki'), ('Laura', 'Pous Tio'), ('Maria', 'Jedlickova'), ('Clemence', 'Castel'), ('Marion', 'Bartoli'), ('Marina', 'Bernshtein'), ('Jelena', 'Bukulin'), ('Iryna', 'Bremond'), ('Shu Jing', 'Yang'), ('Lucia', 'Sainz Pelegri'), ('Monique', 'Viele'), ('Milene', 'Souza'), ('Alyssa', 'Rodriguez'), ('Christa', 'Magister'), ('Mija', 'Kresic'), ('Maria Jose', 'Lopez Herrera'), ('Denisa', 'Pavlikova'), ('Katrina', 'Bandere'), ('Pamela', 'Fernandez'), ('Daisy', 'Ames'), ('Pilar', 'Escandell Planells'), ('Dragica', 'Lozina'), ('Tiana', 'Lum Tucker'), ('Jie', 'Hao'), ('Preeti', 'Rao'), ('Jana', 'Simurkova'), ('Medhini', 'Sharma'), ('Stephanie', 'Krappl'), ('Noopur', 'Desai'), ('Yee', 'Wong'), ('Elizabeth', 'Thomas'), ('Patricia', 'Chang'), ('Michala', 'Bzdusekova'), ('Kristina', 'Bezakova'), ('Paola', 'Dominguez'), ('Kokoro', 'Takehara'), ('Meriem', 'Zitouni'), ('Kumi', 'Fukui'), ('Kristin', 'Messmer'), ('Anna', 'Berlin'), ('Karolina', 'Sprem'), ('Maika', 'Ozaki'), ('Lisa', 'Tognetti'), ('Nicola', 'Mooney'), ('Sandra', 'Denis'), ('Mimi', 'Renaudin'), ('Maral Khachik', 'Awanes'), ('Agustina', 'Arechavaleta'), ('Liliana', 'Aguilera'), ('Dominique', 'Toliravo'), ('Amanda', 'Pratzel'), ('Laura Ramona', 'Husaru'), ('Miriam', 'Palacios'), ('Ntswaki', 'Mawela'), ('Mariana', 'Correa'), ('Gurianna', 'Korinihona'), ('Leila', 'Salek'), ('Jessica', 'Iniguez'), ('Rijana', 'Puljic'), ('Valisoa', 'Rafolomanantsiatosika'), ('Andrea', 'Di Leo'), ('Katie', 'Robinette'), ('Andrea', 'Martinez'), ('Gabriela', 'Marcu'), ('Daniela', 'Kix'), ('Manami', 'Fukada'), ('Megumi', 'Sugimura'), ('Zi', 'Yan'), ('Estefania', 'Vela'), ('Margaretha', 'Novianti'), ('Helena', 'Sinitshin'), ('Blakeley', 'Griffith'), ('Paola', 'Gamarra'), ('Jennifer', 'Chay'), ('Claudia', 'Kuleszka'), ('Marina', 'Tavares'), ('Aleksandra', 'Rosolska'), ('Laura', 'Gordon'), ('Ilona', 'Giberte'), ('Scarlett', 'Werner'), ('Jenny', 'Zika'), ('Sanem', 'Irem'), ('Valentina', 'Salani'), ('Renee', 'Lampret'), ('Luisa', 'Barcaui'), ('Kim', 'Coventry'), ('Steffi', 'Bachofer'), ('Margot', 'Carter'), ('Ly Huong', 'Dinh'), ('Novianti', 'Warsono'), ('Kristin', 'Cargill'), ('Maria', 'Serra'), ('Ilaria', 'Pibiri'), ('Elena', 'Luri'), ('Daniela', 'Caljkusic'), ('Klaudia', 'Wlodarczyk'), ('Vanja', 'Mikovic'), ('Maria Paz', 'Jimenez Barquero'), ('Karina', 'Jarlkaganova'), ('Lucy', 'Johnson'), ('Edina', 'Gallovits Hall'), ('Norie', 'Kojima'), ('Tenille', 'Elias'), ('Johann', 'Fernandes'), ('Angelique', 'Widjaja'), ('Lakschmi', 'Van Der Wart'), ('Marcela', 'Arroyo Vergara'), ('Kanistha', 'Sritawan'), ('Karamontree', 'Siriluethaiwattana'), ('Helene', 'Stephens'), ('Stefani', 'Falconi'), ('Naoko', 'Eto'), ('Kesy', 'Moison'), ('Galina', 'Voskoboeva'), ('Aleta', 'Sungkono'), ('Debbrich', 'Feys'), ('Azza', 'Abbou'), ('Lucia', 'Krzelj'), ('Mari', 'Inoue'), ('Amy', 'Toth'), ('Ana', 'Jovanovic'), ('Alexandra', 'Mcgoodwin'), ('Maria Angela', 'Ferreira'), ('Ivana', 'Platenikova'), ('Antonia', 'Matic'), ('Anne Linn', 'Perez'), ('Nuria', 'Hernandez'), ('Shahlio', 'Ibadullaeva'), ('Liana Gabriela', 'Ungur'), ('Hermione', 'Roukassian'), ('Adriana', 'Bedoya'), ('Amanda', 'Saiontz'), ('Romy', 'Farah'), ('Pavlina', 'Akritas'), ('Nicole', 'Fintell'), ('Adriana', 'Szili'), ('Samia', 'Medjahdi'), ('Astrid', 'Waernes Garcia'), ('Ji Sook', 'Kim'), ('Julianna', 'Gates'), ('Antoinette', 'Mmoh'), ('Phemelo', 'Mogapi'), ('Chin Wei', 'Chan'), ('Marcela Ivon', 'Rodezno Hernandez'), ('Marina', 'Chaves Moledo'), ('Gulshah', 'Esen'), ('Paola', 'Ravano'), ('Magdalena', 'Costa'), ('Andreea', 'Horobeanu'), ('Eleni', 'Karakeke'), ('Malika', 'Bouakel'), ('Chia Jung', 'Chuang'), ('Eugenia', 'Kranioti'), ('Margarita', 'Karnaukhova'), ('Robyn', 'Baker'), ('Mateja', 'Spes'), ('Alessia', 'Zinga'), ('Erin', 'Heeder'), ('Agnes', 'Paischer'), ('Hsiu Ting', 'Huang'), ('Nadja', 'Kusterer'), ('Jacinta', 'Agim'), ('Nivin', 'Kezbari'), ('Karly', 'Olson'), ('Natalie', 'Ko'), ('Ristine', 'Olson'), ('Samantha', 'Galinier'), ('Tsukasa', 'Yamaguchi'), ('Sarah', 'Andrews'), ('Elke', 'Clijsters'), ('Nora', 'Quintal'), ('Alison', 'Silverio'), ('Feila', 'Mahiddiene'), ('Laetitia', 'Allegrini'), ('Ilaria', 'Ziche'), ('Stella', 'Sondang'), ('Cory Ann', 'Avants'), ('Andreea', 'Seserman'), ('Magdalena', 'Tokarska'), ('Jessica', 'Hubbard'), ('Moe', 'Tsubuku'), ('Jessica', 'Orselli'), ('Marise', 'Botha'), ('Roxana', 'Abdurakhmonova'), ('Angel', 'Saleh'), ('Swetha', 'Devaraj'), ('Lianne', 'Supperstone'), ('Paula', 'Zabala'), ('Victoria', 'Zabala'), ('Catalina', 'Angeleri'), ('Marcia', 'Secondo'), ('Andrea', 'Pazmino'), ('Stefanie', 'Halder'), ('Gisela', 'Dulko'), ('Fatima Zohra', 'Benboubker'), ('Ciara', 'Finucane'), ('Audrey', 'Bergot'), ('Kamini', 'Murugaboopathy'), ('Emily', 'Mowery'), ('Dianne Kenneth', 'Matias'), ('Sladjana', 'Kos'), ('Nino', 'Szownadze'), ('Nadejda', 'Vassileva'), ('Marta', 'Fraga Perez'), ('Dan', 'Li'), ('Jessie', 'Rochefort'), ('Petra', 'Cetkovska'), ('Soledad', 'Esperon'), ('Veronica', 'Del Piano'), ('Nikhila', 'Narra'), ('Nadia', 'Pope'), ('Natalie', 'Luft'), ('Tea', 'Popaja'), ('Christyn', 'Lucas'), ('Laura', 'Fernandez'), ('Casey', 'Dellacqua'), ('Leda', 'Pesatova'), ('Lizette', 'Carrillo Morales'), ('Sevvy', 'Gallios'), ('Sabrina', 'Piccolo'), ('Kathrin', 'Hegel'), ('Chen Chen', 'Gao'), ('Cristina', 'Celani'), ('Karin', 'Zibar'), ('Carla', 'Barciela Rodriguez'), ('Isabel', 'Barciela Rodriguez'), ('Julia', 'Efremova'), ('Suzanne', 'Jones'), ('Vicky', 'Navia'), ('Joanne', 'Akl'), ('Nathalia', 'Papadopolou'), ('Kristina', 'Geraniou'), ('Milica', 'Veselinovic'), ('Karina', 'Grigorian'), ('Jessica', 'Obi'), ('Yuri', 'Kurashima'), ('Beatrix', 'Csordas'), ('Sanne', 'Van Den Biggelaar'), ('Bieke', 'Serruys'), ('Gabriela', 'Duch'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Audrey', 'Moronval'), ('Alice', 'Covatta'), ('Linda', 'Mair'), ('Caroline', 'Forstner'), ('Ganna', 'Butkevych'), ('Larikah', 'Russell'), ('Jelena', 'Jankovic'), ('Verena', 'Amesbauer'), ('Natalia', 'Cretu'), ('Vanessa', 'Guerrero'), ('Shaniek', 'Pinder'), ('Su Jin', 'Kim'), ('Christine', 'Simpson'), ('Natalie', 'Castro'), ('Juanas', 'Miras Navarro'), ('Matea', 'Mezak'), ('Olga', 'Pasichnichenko'), ('Elena', 'Volobueva'), ('Giovanna', 'Di Lauro'), ('Ariana', 'Marshall'), ('Sarah', 'Pang'), ('Lucie', 'Kriegsmannova'), ('Janja', 'Gersic'), ('Aine', 'Leonard'), ('Sabrina', 'Lopes'), ('Larissa', 'Carvalho'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Megan', 'Moulton Levy'), ('Zeynep Melis', 'Altinay'), ('Isioma', 'Usoegbu'), ('Hannah', 'Kuervers'), ('Miria', 'Bartels'), ('Sun Jung', 'Kim'), ('Klara', 'Jagosova'), ('Hitomi', 'Sugata'), ('Federica', 'Quercia'), ('Anna', 'Vitosinskaya'), ('Cristina', 'Condon'), ('Joana', 'Laranjinha'), ('Sadvika', 'Saboo'), ('Laura', 'Heckler'), ('Carla', 'Genovese'), ('Monika', 'Kolbovic'), ('Eri', 'Mikami'), ('Amanda', 'Fish'), ('Klaudia', 'Halasz'), ('Simone', 'Wienbeck'), ('Martine', 'Belle'), ('Erica', 'Tironi'), ('Ahsha', 'Rolle'), ('Claire', 'Ricketts'), ('Maia', 'Ram'), ('Sanda', 'Mamic'), ('Natalie', 'Frazier'), ('Bethanie', 'Mattek Sands'), ('Sandra', 'Gwiggner'), ('Lata', 'Assudani'), ('Andreea', 'Novaceanu'), ('Chloe', 'Gambey'), ('Martine', 'Castonguay'), ('Ivana', 'Jovanovic'), ('Micaela', 'Moran'), ('Eva', 'Valkova'), ('Ene', 'Ogbu'), ('Udanthi', 'Narahenpitage'), ('Marielle', 'Wallin'), ('Claudia', 'Kardys'), ('Elisabetta', 'Gianella'), ('Cinthia', 'Saucedo'), ('Tsippy', 'Waterman'), ('Olivia', 'Salgi'), ('Maria', 'Castanera Rodriguez'), ('Rachael', 'Porsz'), ('Thuy Dan', 'Nguyen'), ('Gabriela', 'Velasco Andreu'), ('Henrietta', 'Ogude'), ('Eun Jeong', 'Hwang'), ('Juana', 'Miras Navarro'), ('Lisa', 'Fung Kee Fung'), ('Kai Feng', 'Yi'), ('Covadonga', 'Garcia Calvo'), ('Olga', 'Carrasco'), ('Ana', 'Abad'), ('Valentina', 'Tizzano'), ('Carolina', 'Olmo'), ('Hermine', 'Sukiasyan'), ('Helen', 'Fritche'), ('Temitope', 'Bamidele'), ('Tiffany', 'Welford'), ('Breda', 'Kovac'), ('Vivien', 'Sepuka'), ('Eva', 'De Block'), ('Anais', 'Laurendon'), ('Sandra', 'Sasidharan'), ('Ekaterina', 'Burduli'), ('Anabela', 'Plasencia'), ('Mariana', 'Cutuk'), ('Tamara', 'Tanner'), ('Jelena', 'Djordjevic'), ('Kelly', 'Anderson'), ('Brittany', 'Brown'), ('Sigurlaug', 'Sigurdardottir'), ('Kveta', 'Hajkova'), ('Tereza', 'Kotasova'), ('Brooke', 'Rogers'), ('Kristina', 'Kormuthova'), ('Chiara', 'Gatto'), ('Chen', 'Shen'), ('Iva', 'Plachkova'), ('Andrea', 'Koch Benvenuto'), ('Katerina', 'Teplizki'), ('Nivedita', 'Venkatesh'), ('Mathilde', 'Johansson'), ('Isha', 'Lakhani'), ('Joanne', 'Mayne'), ('Yenisleydis', 'Calana Rodriguez'), ('Montinee', 'Tangphong'), ('Veronika', 'Litvinskaya'), ('Villa', 'Daniella'), ('Audrey', 'Banada'), ('Gabriela', 'Ziliotto'), ('Ashley', 'Harkleroad'), ('Zineb', 'Ibnmajdoub'), ('Nina', 'Spaeth'), ('Gemma', 'Olle Poma'), ('Sayaka', 'Umeda'), ('Bonnie', 'Baird'), ('Serena', 'Bergomi'), ('Maja', 'Sundac'), ('Mhari', 'Neish'), ('Xi', 'Jin'), ('Mai', 'Hatanaka'), ('Anna', 'Blagodarova'), ('Laura', 'Mcgaffigan'), ('Milena', 'Kachar'), ('Johanna', 'Dahlback'), ('Anastasia', 'Shevchenko'), ('Darya', 'Ivanov'), ('Annabella', 'Weigert'), ('Elsa', 'Trigueros Sanchez'), ('Khanita', 'Sritawan'), ('Madina', 'Rakhim'), ('Kristyna', 'Horakova'), ('Amanda', 'Hellberg'), ('Gabriella', 'Rowe'), ('Olivia', 'Beltrame'), ('Fleur', 'Van Haasteren'), ('Czarina Mae', 'Arevalo'), ('Smaranda', 'Stan'), ('Maria Jose', 'Sastre Comas'), ('Maria', 'Zivcicova'), ('Karen', 'Rombouts'), ('Ummarahmat', 'Hummetova'), ('Anuradha', 'Gurung'), ('Antonia', 'Aposteanu'), ('Caitlin', 'Collins'), ('Weronika', 'Bloczynska'), ('Dominika', 'Wojtal'), ('Alicia', 'Serrano'), ('Krishna', 'Logeswari'), ('Anna', 'Tyshing'), ('Nika', 'Ozegovic'), ('Lucie', 'Hradecka'), ('Egle', 'Petrauskaite'), ('Jasmina', 'Hamzic'), ('Krushmi', 'Chheda'), ('Ashlee', 'Davis'), ('Maria Belen', 'Corbalan'), ('Anica', 'Wuensche'), ('Mariya', 'Koryttseva'), ('Nadege', 'Vergos'), ('Andra', 'Stanculescu'), ('Gal Li', 'Kaplan'), ('Sasha', 'Abraham'), ('Vittoria', 'Maglio'), ('Eleonora', 'Punzo'), ('Danielle', 'Brown'), ('Maria Clara', 'Fernandez Bruera'), ('Kristina', 'Michalakova'), ('Sandra', 'Beltran'), ('Natalia', 'Pervitskaya'), ('Hayley', 'St Leger'), ('Natalie', 'Dean'), ('Romy', 'Lion'), ('Agni', 'Patsourakou'), ('Andreea', 'Nitescu'), ('Katarina', 'Kachlikova'), ('Maria', 'Arkhipova'), ('Ljubica', 'Avramovic'), ('Elli', 'Kokoliou'), ('Maria Jesus', 'Sol Hernandez'), ('Yuka', 'Hosoya'), ('Isabel', 'Jarosz'), ('Anna Lena', 'Groenefeld'), ('Katerina', 'Kocibova'), ('Luz Maria', 'Lafranconi'), ('Ekaterina', 'Bychkova'), ('Tanja', 'Markovic'), ('Tina', 'Jacob'), ('Natasha', 'Kersten'), ('Damilola', 'Olufeko'), ('Anca', 'Vladean'), ('Sunthree', 'Arphanukul'), ('Marina', 'Pantovic'), ('Kaia', 'Kanepi'), ('Iris', 'Ichim'), ('Carolina', 'Franco'), ('Patricia', 'Huelin Alvarez'), ('Linsey', 'Jacks'), ('Tarryn', 'Rudman'), ('Patricia', 'Manzur'), ('Blanca', 'Martinez Perez'), ('Kartika', 'Halim'), ('Tereza', 'Svicova'), ('Naia', 'Lartategui Uriarte'), ('Latavra', 'Andriashvili'), ('Nina', 'Knavs'), ('Tory', 'Zawacki'), ('Devina', 'Saedi'), ('Virag', 'Nemeth'), ('Anna', 'Spivakovski'), ('Cintha Karrie Shanaz', 'Putri'), ('Zuzanna', 'Grochocka'), ('Myriam', 'Casanova'), ('Linda', 'Agazzi'), ('Sara', 'Anundsen'), ('Graciela', 'Ailloud'), ('Martina', 'Sedivec'), ('Atsumi', 'Koga'), ('Monica', 'Hoz De Vila'), ('Zobaida', 'Mottola'), ('Tania', 'Martinez Jimenez'), ('Avel Romaly', 'Coronado'), ('Karen', 'Saravia'), ('Svetlana', 'Kuznetsova'), ('Nina', 'Bratchikova'), ('Bettina', 'Gabbe'), ('Preethi', 'Mukundan'), ('Elena', 'Gantcheva'), ('Sylvia', 'Montero'), ('Julia', 'Gandia Gomez'), ('Eleonora', 'Fornai'), ('Marutha', 'Devi'), ('Cayetana', 'Barbed Isusi'), ('Annita', 'Stylianidou'), ('Anna', 'Anoufrieva'), ('Nancy', 'Rustignoli'), ('Anna', 'Powaska'), ('Alexandra', 'Hirsch'), ('Bianca', 'Dulgheru'), ('Malin', 'Grimshorn'), ('Amal', 'Basha'), ('Meryem', 'Tazi'), ('Nai Yu', 'Wang'), ('Sveta', 'Kaladzko'), ('Simona Iulia', 'Matei'), ('Alicia', 'Espinoza'), ('Hanne', 'Camassa'), ('Xenia', 'Roman'), ('Guadalupe', 'Ubeda'), ('Oksana', 'Uzhylovska'), ('Claudia', 'Strauss'), ('Shadisha', 'Robinson'), ('Yasmin', 'Ulrich'), ('Federica', 'Balzani'), ('Jelena', 'Jovic'), ('Guadalupe', 'Padilla'), ('Hsiao Wen', 'Chao'), ('Caroline', 'Haider'), ('Kanaka', 'Tsujimura'), ('Valeria', 'Galouza'), ('Lubica', 'Nadasska'), ('Melissa', 'Dakkak'), ('Sarah', 'Gray'), ('Megan', 'Falcon'), ('Emma', 'Tomlinson'), ('Liz', 'Cruz'), ('Miriam', 'Cruz'), ('Alejandra', 'Ripoll'), ('Julia', 'Roach'), ('Anita', 'Jordan'), ('Patricia', 'Miro'), ('Tatsiana', 'Uvarova'), ('Nana', 'Tsuchiya'), ('Virginie', 'Cappoen'), ('Petra', 'Teller'), ('Patricia', 'Miro Bussman'), ('Yuri', 'Nagano'), ('Lucia', 'Gonzalez'), ('Dian', 'Anggraini'), ('Olga', 'Boulytcheva'), ('Alexis', 'Panton'), ('Ana', 'Kovacevic'), ('Martina', 'Alabiso'), ('Ilham', 'Nadir'), ('Maria Joao', 'Antunes'), ('Marcela', 'Montanha'), ('Yukiko', 'Nakanishi'), ('Fernanda', 'Caputi'), ('Cassy', 'Fabiani'), ('Shiho', 'Tanaka'), ('Julia Maria', 'Arguello'), ('Viktoria', 'Konstantinova'), ('Marieke', 'De Jong'), ('Houda', 'Yasri'), ('Nathalia', 'Rodrigues'), ('Carla', 'Zabaleta'), ('Linda', 'Smolenakova'), ('Hala', 'Sufi'), ('Steffi', 'Van Elten'), ('Julia', 'Matojan'), ('Whitney', 'Benik'), ('Carmel', 'Meachen'), ('Zuzana', 'Valicekova'), ('Fabienne', 'Clavel'), ('Silvia', 'Genisova'), ('Priyanka', 'Parekh'), ('Elizabeth', 'Walker'), ('Marina', 'Khomenko'), ('Emilie', 'Trouche'), ('Marija', 'Miladinovic'), ('Aleksandra', 'Jecmenica'), ('Emily', 'Kwok'), ('Emma', 'Zuleta'), ('Simona', 'Patti'), ('Mandy', 'Septoe'), ('Milena', 'Chisaca'), ('Philippa', 'Taul'), ('Asami', 'Satozaki'), ('Paola', 'Gamboa'), ('Anne', 'Yelsey'), ('Elodie', 'Navarro'), ('Sonali', 'Sanap'), ('Olena', 'Tsutskova'), ('Ting Wen', 'Wang'), ('Julia', 'Gandia'), ('Alexandra', 'Podkolzina'), ('Diana', 'Arutyunova'), ('Chirashanthi', 'Rajur'), ('Cassi', 'Fabiani'), ('Hedvig', 'Lofdahl'), ('Emi', 'Hirayama'), ('Matilde', 'Munoz Gonzalves'), ('Samia', 'Jalali'), ('Elena', 'Ryabtseva'), ('Jin Jie', 'Gong'), ('Veera', 'Nurmi'), ('Julie', 'Fratoni'), ('Marianna', 'Yuferova'), ('Ebere', 'Fortune'), ('Kumiko', 'Anzai'), ('Agata', 'Komorowska'), ('Marianne', 'Baker'), ('Alexandra Alina', 'Petcu'), ('Yuka', 'Kuroda'), ('Nikoleta', 'Kipritidou'), ('Julia', 'Wieckowski'), ('Larisa', 'Gorodetsky'), ('Natsumi', 'Tsubo'), ('Lucie', 'Telinova'), ('Oxana', 'Lyubtsova'), ('Nadja', 'Pavic'), ('Elena', 'Stoianova'), ('Jennifer', 'De Bodt'), ('Pallavi', 'Sharma'), ('Alice', 'Botto'), ('Ji Young', 'Kim'), ('Marnie', 'Mahler'), ('Anastasia', 'Michail'), ('Anastasia', 'Belova'), ('Pascale', 'Schnitzer'), ('Aneta', 'Turaj'), ('Siobhan', 'Oneill'), ('Chelsea', 'Orr'), ('Sirma Aysen', 'Bingeli'), ('Sheryl', 'Gershon'), ('Victoria', 'Sharpley'), ('Stacia', 'Fonseca'), ('Kelley', 'Hyndman'), ('Viviana', 'Yrureta'), ('Carina', 'Bjornstrom'), ('Kristin', 'Schuler'), ('Katharina', 'Rath'), ('Deepanwita', 'Chakrabarty'), ('Jae Hee', 'Lyoo'), ('Miriam', 'Rahali'), ('Christy', 'Greenly'), ('Ria', 'Sabay'), ('Tajna', 'Lukas'), ('Yoshimi', 'Tanaka'), ('Lourdes', 'Pascual Rodriguez'), ('Alessandra', 'Carta'), ('Kristina', 'Movsesyan'), ('Reem', 'Raouf'), ('Pichaya', 'Laosirichon'), ('Maryori', 'Franco'), ('Claudia', 'Hirt'), ('Florence', 'Haring'), ('Michal', 'Amir'), ('Vasiliki', 'Simouli'), ('Bojana', 'Cecez'), ('Diana', 'Cardenas Azcarate'), ('Rebecca', 'Llewellyn'), ('Haruka', 'Tachiki'), ('Miglana', 'Nenova'), ('Asami', 'Saeki'), ('Andrea', 'Ryan'), ('Laura', 'Moares'), ('Maria', 'Rakhmanina'), ('Bianca', 'Itner'), ('Sandra', 'Zahlavova'), ('Marina', 'Aniutin'), ('Courtney', 'Vernon'), ('Tanya', 'Sharma'), ('Natalia', 'Gordeeva'), ('Dayane', 'Silva'), ('Daiany', 'Luchi'), ('Katie', 'Muller'), ('Christina', 'Birtchnell'), ('Flavia', 'Mignola'), ('Kuburat', 'Akintunde'), ('Laura', 'Quintanilla Vidal'), ('Yasemin', 'Elgi'), ('Jovana', 'Jakouliev'), ('Irina', 'Smislova'), ('Ana', 'Higer'), ('Anna', 'Karavayeva'), ('Iciri', 'Rai'), ('Moe', 'Kawatoko'), ('Aiko', 'Yamada'), ('Sunitha', 'Rao'), ('Sandra', 'Volk'), ('Julia', 'Paetow'), ('Yuka', 'Izumi'), ('Zorayma', 'Arreola'), ('Rosanne', 'Dimech'), ('Anna', 'Jaen Seire'), ('Michaela', 'Michalkova'), ('Gisel', 'Brito'), ('Betty', 'Tesfu'), ('Jennifer', 'Seide'), ('Ekaterina', 'Koubinina'), ('Cecile', 'Baijot'), ('Alana', 'Van Der Vort'), ('Joyce', 'Ardies'), ('Ekaterina', 'Hirtopanu'), ('Maja', 'Mesanovic'), ('Liu Ling', 'Wang'), ('Natalie', 'Beck'), ('Caroline', 'Martin'), ('Saffet Seden', 'Soyalp'), ('Miki', 'Miyamura'), ('Frances', 'Hendry'), ('Asami', 'Suzuki'), ('Tinesta', 'Rowe'), ('Kristina', 'Solodovnikova'), ('Vonjiniana', 'Rasamuel'), ('Laura', 'Rocchi'), ('Cornelia', 'Lassonczyk'), ('Birgit', 'Ritschka'), ('Martina', 'Stigliano'), ('Ana Carolina', 'Pancia'), ('Danielle', 'Kypreos'), ('Tega', 'Richard'), ('Joanne', 'Schickerling'), ('Anna', 'Bastrikova'), ('Darina', 'Berkova'), ('Renee', 'Mullinger'), ('Kyung Mi', 'Park'), ('Rawya', 'Seif'), ('Lindsey', 'Nelson'), ('Maya', 'Wakui'), ('Lena', 'Keothavong'), ('Neda', 'Kozic'), ('Nosrat', 'Zeidan'), ('Karin', 'Hamanaka'), ('Mandy', 'Minella'), ('Pauline', 'Wong'), ('Nicole', 'Leimbach'), ('Zuzana', 'Zalabska'), ('Antonia', 'Nugent'), ('Vanessa', 'Esteves'), ('Jenna', 'Long'), ('Maria Sol', 'Rotondo'), ('Daron', 'Moore'), ('Cassandra', 'Chan'), ('Hristiana', 'Gocheva'), ('Krystel', 'Sauvageau'), ('Jelena', 'Zivanovic'), ('Alicja', 'Rosolska'), ('Beatriz', 'Belda Mullor'), ('Krizia', 'Borgarello'), ('Alesa', 'Bagola'), ('Miina', 'Luebbe'), ('Adriana', 'Solarova'), ('Nian Ze', 'Liu'), ('Svenja', 'Haymann'), ('Darina', 'Sedenkova'), ('Jessica', 'Lopez Lopez'), ('Si Nga', 'Lee'), ('Larissa', 'Deschamps'), ('Aya', 'Oasa'), ('Katy', 'Shaw'), ('Anja', 'Prislan'), ('Sarah', 'Wray'), ('Monica', 'Wiesener'), ('Rebecca', 'Spinello'), ('Lara', 'Garcia'), ('Lucia', 'Jimenez Almendros'), ('Brianna', 'Williams'), ('Renata', 'Ljukovcan'), ('Lucia', 'Garcia'), ('Gala', 'Gasset Pinon'), ('Jharna', 'Nansi'), ('Yuka', 'Inoue'), ('Iva', 'Roj'), ('Katie', 'Taylor'), ('Martina', 'Bartosova'), ('Renata', 'Veiga'), ('Kristi', 'Miller'), ('Ana', 'Corbett'), ('Doo Ri', 'Na'), ('Olakunbi', 'Abass'), ('Whitney', 'Robards'), ('Marion', 'Gaud'), ('Katarina', 'Panakova'), ('Magdalena', 'Maranda'), ('Brook', 'Connelly'), ('Marcela', 'Vanegas Bello'), ('Valerie', 'Chin'), ('Lindsey', 'Pereira'), ('Karen', 'Kozangian'), ('Chiara', 'Marraghini'), ('Elena', 'Marraghini'), ('Salome', 'Devidze'), ('Andrea', 'Vargas'), ('Ruya', 'Inalpulat'), ('Madelaine', 'Madelaire'), ('Carolina', 'Seixas'), ('Su Wei', 'Hsieh'), ('Anna Maria', 'Miller'), ('Ronak', 'Shah'), ('Barbara', 'Costa'), ('Dima', 'Al Saadi'), ('Sarah', 'Schulze'), ('Amanda Marie', 'Taylor'), ('Romina', 'Manas Rodriguez'), ('Shuai', 'Peng'), ('Martina', 'Bregola'), ('Kirsten', 'Flipkens'), ('Jovana', 'Stankovic'), ('Diana', 'Salas'), ('Virginia', 'Bigliardi'), ('Marina', 'Viliamovskaia'), ('Sonya', 'Kumar'), ('Darya', 'Kryvets'), ('Daniela', 'Bracaglia'), ('Sabrina', 'Capannolo'), ('Eleonora', 'Taddei'), ('Nina', 'Maglatyuk'), ('Carolina', 'Salge'), ('Renata', 'De Sanctis'), ('Jae Hee', 'Joung'), ('Daria', 'Chemarda'), ('Stefanie', 'Leushuis'), ('Maria', 'Bordons Ortiz'), ('Linda', 'Svarena'), ('Marta', 'Domachowska'), ('Irina', 'Kuzmina'), ('Ana Lilia', 'Salas'), ('Lisa', 'Nystrom Skold'), ('Almira', 'Hallyeva'), ('Sarah', 'Raab'), ('Rie', 'Imai'), ('Karla', 'Portillo'), ('Yue', 'Yu'), ('Astrid', 'Tixier'), ('Varinia', 'Soler Bravo'), ('Holly', 'Bagshaw'), ('Anzhelika', 'Balyuk'), ('Whitney', 'Deason'), ('Luci', 'Barlow'), ('Danielle', 'Harmsen'), ('Arantxa', 'Garcia Millan'), ('Olga', 'Brozda'), ('Fatimah', 'Abinu'), ('Mar', 'Gonzalez Perez'), ('Shu Hwei', 'Huang'), ('Kristel Ann', 'Samala'), ('Melissa', 'Gibb'), ('Nina', 'Jauch'), ('Dubravka', 'Cupac'), ('Elizabeth', 'Dolan'), ('Ana', 'Brandusan'), ('Claire', 'Carnez'), ('Yang Guang', 'Zhao'), ('Alejandra', 'Obregon'), ('Amanda', 'Jasso'), ('Marina', 'Garcia Vertiz'), ('Pauline', 'Parmentier'), ('Kaori', 'Onishi'), ('Soo Mi', 'Yoo'), ('Luciana', 'Sarmenti'), ('Angelita', 'Detudamo'), ('Yadira', 'Geara'), ('Ana', 'Abramovic'), ('Olexandra', 'Verkhniatska'), ('Da Jung', 'Hong'), ('Lara', 'Giltinan'), ('Nicole', 'Shabaz'), ('Ariela', 'Perez'), ('Ivanna', 'Israilova'), ('Macall', 'Harkins'), ('Neha', 'Uberoi'), ('Vasilisa', 'Davydova'), ('Leila', 'Hodzic'), ('Giada', 'Calabretta'), ('Estefania', 'Salvador Martinez'), ('Lina', 'Stanciute'), ('Celine', 'Beermann'), ('Paula', 'Arevalo'), ('Laura', 'Popescu'), ('Sabina', 'Korsunova'), ('Vera', 'Leontieva'), ('Chen Yee', 'Liaw'), ('Riza', 'Zalameda'), ('Bianca', 'Chidrawi'), ('Pernille', 'Orloff Sattari'), ('Eden', 'Marama'), ('Charlene', 'Tsangamwe'), ('Michaela', 'Carvanova'), ('Chun Mei', 'Ji'), ('Emilia', 'Yorio'), ('Joanie', 'Macken'), ('Alexandra', 'Orasanu'), ('Laura', 'Bredniak'), ('Hagar', 'Caro'), ('Veronica', 'Saucedo'), ('Anita', 'Ivancevic'), ('Georgina', 'Hingley'), ('Fernanda', 'Vargas'), ('Linda', 'Blank'), ('Ghadihela', 'Flores'), ('Caroline', 'Lagedamont'), ('Katarzyna', 'Siwosz'), ('Sarah', 'Benad'), ('Tamar', 'Akhobadze'), ('Kelly', 'De Beer'), ('Lizaan', 'Du Plessis'), ('Elsa', 'Serrano Eduards'), ('Alba', 'Esteve Blanch'), ('Maria Antonia', 'Vives Barquiel'), ('Sarah', 'Coles'), ('Claire', 'Feuerstein'), ('Melanie', 'Oosterhof'), ('Margaryta', 'Dolzhenko'), ('Dragana', 'Jakovljevic'), ('Julia', 'Dziedzic'), ('Ludivine', 'Choisel'), ('Bracha', 'Weisman'), ('Virginie', 'Ayassamy'), ('Dominika', 'Zuzulova'), ('Harpreet', 'Gill'), ('Marta', 'Brandani'), ('Katherine', 'Laporta'), ('Beatriz', 'Fernandez'), ('Zora', 'Mark'), ('Katrin', 'Glatz'), ('Natalia', 'Yakimovich'), ('Maria Ignacia', 'Gioria'), ('Lei', 'Huang'), ('Alexandria', 'Liles'), ('Helene', 'Lindstrand'), ('Roxana', 'Dragan'), ('Pynar', 'Nergiz'), ('Imke', 'Reimers'), ('Andreja', 'Klepac'), ('Ayumi', 'Oka'), ('Sabrina', 'Wist'), ('Katharine', 'Baker'), ('Michal', 'Bar'), ('Annette', 'Pohjalainen'), ('Yasmin', 'Del Arco'), ('Delia', 'Sescioreanu'), ('Nisha', 'Nair'), ('Kady', 'Pooler'), ('So Jung', 'Kim'), ('Megan', 'Sandwith'), ('Sophie', 'Ferguson'), ('Sylwia', 'Niedbalo'), ('Jolanta', 'Twarowska'), ('Tarryn', 'Terblanche'), ('Anna', 'Niemiec'), ('Anne Marie', 'Brodeur Fontaine'), ('Paola', 'Iovino'), ('Sarah', 'Gbadamosi'), ('Valerie', 'Meise'), ('Emma', 'Laine'), ('Tara', 'Wigan'), ('Laura', 'Bastos'), ('Melanie', 'Hafner'), ('Erica', 'Sauer'), ('Barbora', 'Zahlavova Strycova'), ('Chinenye Ndidi', 'Izuogu'), ('Romina', 'Oprandi'), ('Geraldine', 'Roma'), ('Adriana', 'Gonzalez Penas'), ('Quan', 'Gao'), ('Roxana Ianula', 'Dragan'), ('Sandy', 'Gumulya'), ('Galina', 'Kostova'), ('Chihiro', 'Tan'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Lolita', 'Frangulyan'), ('Clelia', 'Melena'), ('Diana', 'Vranceanu'), ('Barbara', 'Pocza'), ('Camelia', 'Todorova'), ('Eleni', 'Betsiou'), ('Alexandra', 'Korotkevich'), ('Polina', 'Zaretser'), ('Ana Cristina', 'Moreno'), ('Whitney', 'Mccray'), ('Allison', 'Baker'), ('Patricia', 'Ribeiro'), ('Ela', 'Kaludjer'), ('Maria Laura', 'Zarza'), ('Pavlina', 'Smatova'), ('Varsha', 'Meena'), ('Silvana', 'Bauer'), ('Elena', 'Grazioso'), ('Katrina', 'Elder Bush'), ('Varvara', 'Galanina'), ('Lucy', 'Fletcher'), ('Jennifer', 'Migan'), ('Cristina', 'Matera'), ('Varvara', 'Timofeeva'), ('I Hui', 'Chang'), ('Sanne', 'Holtkamp'), ('Audra', 'Cohen'), ('Tina', 'Obrez'), ('Anna Viktoria', 'Lind'), ('Beatriz', 'Pena Lueza'), ('Jennifer', 'Poskitt'), ('Yasuko', 'Saruta'), ('Marinne', 'Giraud'), ('Christina', 'Zgera'), ('Aurelija', 'Miseviciute'), ('Stephanie', 'De Laet'), ('Rosidah', 'Kusuma Dewi'), ('Ann Marie', 'Modric'), ('Dinara', 'Safina'), ('Timna', 'Ticic'), ('Ana Cecilia', 'Olivos'), ('Monika', 'Musilova'), ('Katarina', 'Tuohimaa'), ('Esther', 'Van Londen'), ('Hanne Skak', 'Jensen'), ('Sofia', 'Canarte'), ('Virginia', 'Donda'), ('Mariana', 'Aconcha'), ('Maria', 'Krasnova'), ('Ana Paula', 'Saviole'), ('Katie', 'Obrien'), ('Melanie', 'South'), ('Ekaterina', 'Dzehalevich'), ('Julia', 'Hodes'), ('Elina', 'Sichakova'), ('Malvina', 'De La Canal'), ('Eva', 'Fernandez Brugues'), ('Andrea', 'Davidova'), ('Cigdem', 'Duru'), ('Miray', 'Eshak'), ('Caroline', 'Oduor'), ('Pemra', 'Ozgen'), ('Lumay', 'Diaz Hernandez'), ('Marion', 'Fleury'), ('Meng', 'Yuan'), ('Mi', 'Yoo'), ('Andrea', 'Benitez'), ('Ana Luna', 'Gonzalez Munoz'), ('Ginte', 'Pociute'), ('Anastasia', 'Sourkova'), ('Sofia', 'Avakova'), ('Daniela', 'Krejsova'), ('Natasa', 'Vuckovic'), ('Jitka', 'Gavdunova'), ('Vanessa', 'Gutierrez'), ('Canna', 'Furuta'), ('Nandia', 'Tenni'), ('Elena', 'Petrucciano'), ('Catalina', 'Cruz Gomez'), ('Vanessa', 'Heute'), ('Tiffany', 'Tucker'), ('Varvara', 'Lepchenko'), ('Andrea', 'Morgado'), ('Dora', 'Kiss'), ('Elizabeth', 'Lumpkin'), ('Laura', 'Ferreira'), ('Celia', 'Durkin'), ('Margot', 'Torre'), ('Vendula', 'Plechata'), ('Maia', 'Semerdjieva'), ('Darya', 'Kustova'), ('Natalie', 'Solevski'), ('Austin', 'Smith'), ('Dora', 'Delgadillo'), ('Carolina', 'Ardila Cuervo'), ('Masa', 'Pozar'), ('Yana', 'Zavialova'), ('Andreea Laura', 'Niculescu'), ('Anett', 'Kaasik'), ('Dragica', 'Stanojlovic'), ('Rita', 'Esteves De Freitas'), ('Gabriela', 'Niculescu'), ('Viktoria', 'Lytovchenko'), ('Iginia', 'Tilocca'), ('Alessia', 'La Monaca'), ('Ping', 'Jia'), ('Klara', 'Kufova'), ('Liudmyla', 'Latysheva'), ('Tina', 'Schmassmann'), ('Yuliya', 'Kulbitskaya'), ('Thassha', 'Vitayaviroj'), ('Vanessa', 'Masalles'), ('Tiya', 'Rolle'), ('Janette', 'Bejlkova'), ('Karolina', 'Rejniak'), ('Elna', 'De Villiers'), ('Maiko', 'Ohmi'), ('Pauline', 'Bourdet Fontaine'), ('Mareike', 'Molchin'), ('Irina', 'Tkachenko'), ('Alaknanda', 'Jadhav'), ('Manuela', 'Santos'), ('Michelle', 'Aybar'), ('Tanya', 'Klenkoski'), ('Alexandra', 'Demidova'), ('Alisee', 'Hirt'), ('Clelia', 'Deltour'), ('Ludmila', 'Stavila'), ('Maria', 'Alvaro'), ('Karolina', 'Kosinska'), ('Kana', 'Watanabe'), ('Yuka', 'Mori'), ('Hee Sun', 'Lyoo Suh'), ('Mariana', 'Weschenfelder'), ('Nidhi', 'Shah'), ('Marta', 'Melis'), ('Nana', 'Urotadze'), ('Alyssa Ann', 'Labay'), ('Vilma', 'Macheda'), ('Gabriela', 'Cazares'), ('Julia', 'Pugach'), ('Carly', 'Petit'), ('Lenka', 'Jaloviecova'), ('Anna', 'Gil Mares'), ('Selen', 'Surel'), ('Jenny', 'Broughall'), ('Valentina', 'Franchini'), ('Henrietta', 'Habler'), ('Constanza', 'Politi'), ('Emi', 'Nozaki'), ('Valeria', 'Muratori'), ('Svetlana', 'Tsykhanskaya'), ('Miyoko', 'Takahashi'), ('Ji Sun', 'Kim'), ('Bianca', 'Nocella'), ('Alina', 'Sufiarova'), ('Ana Maria', 'Gonzalez Leon'), ('Morena', 'De Bernardi'), ('Tanya', 'Ridzevskaya'), ('Kewa', 'Nichols'), ('Antonia Xenia', 'Tout'), ('Anne', 'Dickhardt'), ('Antonia', 'Toth'), ('Ghazaleh', 'Torkaman'), ('Michelle', 'Snyman'), ('Maria Rossana', 'Vega Saguier'), ('Bertille', 'Van Marque'), ('Irina', 'Buryachok'), ('Mari', 'Andersson'), ('Angela', 'Garcia Mosquera'), ('Jaclyn', 'Schokman'), ('Sarah', 'Gronert'), ('Yana', 'Nemerovski'), ('Adriana', 'Fonseca Villarroel'), ('Juliana', 'Cordero'), ('Katherine', 'Wittgruber'), ('Paloma', 'Ruiz Blanco'), ('Caroline', 'Carpentier'), ('Vanja', 'Corovic'), ('Ana', 'Tomasevic'), ('Kaja', 'Smole'), ('Naina', 'Karsolia'), ('Mahesha', 'Seneviratne'), ('Fernanda', 'Martins'), ('Sara', 'Simbula'), ('Liliana', 'Pereira'), ('Edita', 'Milos'), ('Natalia', 'Sanchez'), ('Pasquale', 'Jansma'), ('Min Jung', 'Jeon'), ('Larissa', 'Wuehrl'), ('Beier', 'Ko'), ('Hye Min', 'Lee'), ('Celine', 'Vaure'), ('Lika', 'Chkuaseli'), ('Claire', 'De Gubernatis'), ('Ayako', 'Isogai'), ('Tatiana', 'Zhukovskaya'), ('Saranya', 'Pattabhi'), ('Andrea', 'Pera'), ('Tina', 'Trautmann'), ('Andrea', 'Brenes'), ('Saori', 'Hosogai'), ('Patience', 'Otali'), ('Seheno', 'Razafindramaso'), ('Shilpa', 'Goel'), ('Lucy', 'Scott'), ('Lisa', 'Sabino'), ('Claudia', 'Jorda Fernandez'), ('Charlene', 'Vanneste'), ('Fang', 'Liu'), ('Mabel', 'Rodriguez'), ('Sarina', 'Mueller'), ('Michaela', 'Babicova'), ('Karolina', 'Soor'), ('Wing Shan', 'Cheung'), ('Rita', 'Gerecz'), ('Elizabeth', 'Ferris'), ('Zhanna', 'Nemykina'), ('Roxana', 'Martinez'), ('Elena', 'Vesnina'), ('Yawna', 'Allen'), ('Melissa', 'Ryan'), ('Lara', 'Picone'), ('Asako', 'Sato'), ('Jana', 'Bielikova'), ('Irina', 'Malashok'), ('Amanpreet', 'Kaur'), ('Deniz', 'Atas'), ('Lorena', 'Villalobos Cruz'), ('Julia', 'Sack'), ('Melissa', 'Silva'), ('Kateryna', 'Bondarenko'), ('Catalina', 'Villegas Garcia'), ('Anca', 'Dumitru'), ('Veronique', 'Parke Bedard'), ('Andrea', 'Hlavackova'), ('Milena', 'Araujo'), ('Tarakaa', 'Bertrand'), ('Whitney', 'Jones'), ('Melanie', 'Wolkersberger'), ('Jessica', 'Leitch'), ('Savi', 'Sehrawat'), ('Maya', 'Rosa'), ('Patricia', 'Lopez Illan'), ('Melisa', 'Cabrera Handt'), ('Laura', 'Hernandez'), ('Katerina', 'Mazackova'), ('Shraddha', 'Lodha'), ('Kinga', 'Kozlowska'), ('Swathika', 'Kandhaswany'), ('Ya Wen', 'Lee'), ('Stephanie', 'Pace'), ('Alexandra', 'Glushenko'), ('Cristina', 'Visico'), ('Krista', 'Sanders'), ('Jessica', 'Mezo'), ('Ina', 'Sireteanu'), ('Gira', 'Schofield'), ('Natalie', 'Orourke'), ('Lilian', 'Asuaje'), ('Marina', 'Spakova'), ('Yukako', 'Kato'), ('Carmen', 'Pinto'), ('Andreia', 'Ribeiro'), ('Sylvia', 'Krywacz'), ('Jolien', 'Kroese'), ('Sonia', 'Fondevila Castro'), ('Jamea', 'Jackson'), ('Paola', 'Doldan Gonzalez'), ('Maria Aless', 'Termini'), ('Sharon Nosipho', 'Makhanya'), ('Ruchita', 'Shetty'), ('Paulina', 'Zuniga'), ('Pakrpa', 'Pramualsuk'), ('Michelle', 'Blattler'), ('Kim', 'Stierli'), ('Yulia', 'Stupak'), ('Alice', 'Balducci'), ('Maiara', 'Olivera'), ('Anna Maria', 'Zubori'), ('Alice', 'Mackenzie'), ('Yeon Ju', 'Kim'), ('Elena', 'Bavassano'), ('Fabiana', 'Ferraro Arce'), ('Julia', 'Chergova'), ('Sarah', 'Mclaren'), ('Kirsty', 'Woolley'), ('Hanane', 'Toumi'), ('Giorgia', 'Pontoglio'), ('Marcia', 'Almada'), ('Manjot', 'Marwah'), ('Amina', 'El Sahn'), ('Irina', 'Kotkina'), ('Roni', 'Gilboa'), ('Tamar', 'Kvaratskhelia'), ('Hendrike Lea', 'Heitmann'), ('Georgia', 'Rose'), ('Septi', 'Mende'), ('Jennifer', 'Elie'), ('Beatris', 'Simion'), ('Tamara', 'Bartkowiak'), ('Heidi', 'El Tabakh'), ('Katerina', 'Avdiyenko'), ('Osariemen', 'Airhunmwunde'), ('Tracy', 'Lin'), ('Karima', 'Ait Ali Yahia'), ('Sara', 'Abutovic'), ('Martina', 'Braun Schultz'), ('Kristina', 'Nedelcheva'), ('Patricia', 'Coimbra'), ('Shannon', 'Golds'), ('Parul', 'Goswami'), ('Marissa', 'Espinoza'), ('Maria Emma', 'Quiroz'), ('Vera', 'Dushevina'), ('Laila', 'Abdala'), ('Bianca', 'Salame'), ('Vindya', 'Dayananda'), ('Sonia', 'Eguizabal Saracho'), ('Federica', 'Van Adrichem'), ('Bethan', 'Lewis'), ('Annette', 'Aksdal'), ('Claudia', 'Puddu'), ('Lara', 'Alexander'), ('Evelyn', 'Enunwah'), ('Dunja', 'Antunovic'), ('Juri', 'Komatsu'), ('Katy', 'Scarisbrook'), ('Suzanna', 'Mansour'), ('Yuka', 'Higashi'), ('Iris', 'Elias'), ('Daniela', 'Ciganikova'), ('Tamara', 'Bunic'), ('Tong', 'Gao'), ('Daowadueng', 'Phonkan'), ('Nicole', 'Buitoni'), ('Anastasia', 'Cherkashin'), ('Micaela', 'Acosta'), ('Rebecca', 'Dare Mccann'), ('Anna', 'Lapushchenkova'), ('Chia Li', 'Chen'), ('Diana', 'Santillan Fernandez'), ('Sara', 'Tarraso Barber'), ('Ryoko', 'Fuda'), ('Marielle', 'Weihs'), ('Valentina', 'Bontempi'), ('Adriana', 'Jaskova'), ('Yoo Ri', 'Bae'), ('Ankita', 'Bhambri'), ('Biljana', 'Gajic'), ('Chiaki', 'Okadaue'), ('Nel', 'Ben Ami'), ('Francesca', 'Flavell'), ('Stephanie', 'Dubois'), ('Yumi', 'Miyazaki'), ('Anastasia', 'Yakimova'), ('Erica', 'Kosova'), ('Erin', 'Jobe'), ('Nicole', 'Pitts'), ('Alexia', 'Virgili'), ('Stamatia', 'Fafaliou'), ('Marta', 'Torres Torres'), ('Barbara', 'Krzesinska'), ('Rebeca', 'Molina'), ('Cora', 'Vasilescu'), ('Alba', 'Berdala Grive'), ('Danielle', 'Cosgrove'), ('Gabriela', 'Matekova'), ('Pichnita', 'Songsanu'), ('Patricia', 'Mayr Achleitner'), ('Ivana', 'King'), ('Mihaela Alina', 'Stanila'), ('Alina', 'Stanila'), ('Mai', 'Takeda'), ('Karina', 'Tomaszewska'), ('Nozomi', 'Aiba'), ('Monika', 'Lesniakova'), ('Luiza', 'Borges'), ('Susana', 'Hernandez'), ('Ana', 'Jerman'), ('Ana Catalina', 'Guerrero'), ('Yi', 'Chen'), ('Tania', 'Miro Garcia Pozuelo'), ('Patrycja', 'Komarska'), ('Ashley', 'Joelson'), ('Shu Yi', 'Zhang'), ('Velena', 'Mamutova'), ('Sania', 'Mirza'), ('Malin', 'Sjoqvist'), ('Ketevan', 'Okruashvili'), ('Monika', 'Dancevic'), ('Laura', 'Zelder'), ('Katerina', 'Bohmova'), ('Emily', 'Ottsen'), ('Michaela', 'Bartlova'), ('Andreea Patricia', 'Braica'), ('Nadezda', 'Gorbachkova'), ('Caroline', 'Bailly'), ('Eva', 'Pera'), ('Alice', 'Izomor'), ('Patrycja', 'Sanduska'), ('Link', 'Leskosky'), ('Teodora Lavinia', 'Cazan'), ('Michela', 'Trabalioni'), ('Carly', 'Gullickson'), ('Daria', 'Holodnik'), ('Ivana', 'Gelo'), ('Carina', 'Hirsch'), ('Tatiana', 'Grechukhina'), ('Rebekka', 'Haenle'), ('Ainsley', 'Fairhead'), ('Diane', 'Filip'), ('Tamara', 'Jugo'), ('Ashel', 'Dimi'), ('Evgenia', 'Linetskaya'), ('Veronika', 'Kapshay'), ('Amanda', 'Fink'), ('Mirella', 'Ramic'), ('Jung Eun', 'Kim'), ('Audrey', 'Robert Bordeleau'), ('Jenifer', 'Widjaja'), ('Maria Del Mar', 'Ceron'), ('Tania', 'Hernandez'), ('Ana', 'Milosavljevic'), ('Amy', 'Robinson'), ('Fabiana', 'Gomez'), ('Catherine', 'Grotz'), ('Melissa', 'Mang'), ('Anna', 'Egorova'), ('Tammy', 'Kevey'), ('Larisa', 'Bekmetova'), ('Andrea', 'Lipovska'), ('Meritxell', 'Gol Alamo'), ('Bianca', 'Gorbea'), ('Claire', 'Ilcinkas'), ('Ileana Camelia', 'Necea'), ('Roseta', 'Navarro Pons'), ('Filomena', 'Nisi'), ('Yurika', 'Sema'), ('Abiodun', 'Oyegoke'), ('Kelcy', 'Tefft'), ('Nadia', 'Solomon'), ('Tamara', 'Novoselac'), ('Airi', 'Hagimoto'), ('Frances', 'Miller'), ('Monika', 'Drabkova'), ('Mariel', 'Rosales Martinez'), ('Maria', 'Moya'), ('Irina', 'Steirer'), ('Sonja', 'Viskovich'), ('Yoshimi', 'Kakuta'), ('Mathilde', 'Cor'), ('Estefania', 'Craciun'), ('Anastasia', 'Antoniadou'), ('Carla', 'Bell'), ('Rui', 'Du'), ('Maria', 'Stepanova'), ('Norzafira', 'Taufik'), ('Jasmin', 'Jessenk'), ('Alexandra', 'Recio Linares'), ('Arancha', 'Recio Linares'), ('Olga', 'Panova'), ('Bruna', 'Paes'), ('Ghizela', 'Schutte'), ('Neda', 'Katalina'), ('Carmen', 'Klaschka'), ('Isabela', 'Kulaif'), ('Doris', 'Graus'), ('Christian', 'Tara'), ('Katarina', 'Zoricic'), ('Shannon', 'Robinson'), ('Makere', 'Bradnam'), ('Seika', 'Takahara'), ('Suzana', 'Kuffner'), ('Minami', 'Endo'), ('Mari', 'Tanaka'), ('Jia', 'Lin'), ('Daniella', 'Jeflea'), ('Alessandra', 'Jordan'), ('Pavlina', 'Glosova'), ('He Wen Fei', 'Li'), ('Michaela', 'Schumichrastova'), ('Ekaterina', 'Afinogenova'), ('Michaela', 'Bressan'), ('Paola', 'Cervantes'), ('Jessica', 'Homberg'), ('Alex', 'Graebe'), ('Anna', 'Klebleeva'), ('Elina', 'Arutyunova'), ('Soizette', 'Simmons'), ('Masa', 'Zec Peskiric'), ('Sheng Nan', 'Sun'), ('Zeynep Asli', 'Naibi'), ('Claudia', 'Smolders'), ('Katerina', 'Sidorovich'), ('Maria', 'Kirilenko'), ('Renata', 'Kucerkova'), ('Aleksandra', 'Zdeb'), ('Lerissa', 'Maurice'), ('Kanae', 'Hisami'), ('Maria Paula', 'Aguirre'), ('Flor', 'Reyes'), ('Karin', 'Vodickova'), ('Yuna', 'Kikawa'), ('Laura', 'Rodriguez Navas'), ('Eunice', 'David'), ('Elvira', 'Serrot Geminelli'), ('Alexandra Iulia', 'Iacob'), ('Stephanie', 'Bengson'), ('Elenora', 'Pedonese'), ('Anna Marie', 'Atelj'), ('Elena', 'Oslyakova'), ('Wiveca', 'Swarting'), ('Alla', 'Ivanova'), ('Sagarika', 'Phadke'), ('Tanja', 'Kovacevic'), ('Dominique', 'Damian'), ('Rohini', 'Das'), ('Lucie', 'Safarova'), ('Ann Kathrin', 'Gerk'), ('Isamarie', 'Perez'), ('Jia Bao', 'Yin'), ('Kartiki Vijay', 'Bhat'), ('Hind', 'Belkarmouss'), ('Sasha', 'Fisher'), ('Kara', 'Fisher'), ('Pamela', 'Russo'), ('Rachel', 'Wilhelm'), ('Lejla', 'Hodzic'), ('Maria', 'Babich'), ('Lina', 'Benkirane'), ('Olga', 'Alexeeva'), ('Nika', 'Kukharchuk'), ('Stefania', 'Pesce'), ('Angelina', 'Ledovskaya'), ('Alexandra', 'Valarezo'), ('Brittany', 'Baldy'), ('Tinatin', 'Kavlashvili'), ('Polona', 'Rebersak'), ('Claire', 'Peterzan'), ('Bruna', 'Cunha'), ('Varsha', 'Shivashankar'), ('Sariya', 'Khairova'), ('Randi', 'Schuler'), ('Nargiza', 'Ibragmova'), ('Alejandra', 'Guerra'), ('Kunigunda', 'Dorn'), ('Michaela', 'Matejickova'), ('Nan', 'Dong'), ('Elisa', 'Salis'), ('Katrine', 'Christensen'), ('Lisanne', 'Balk'), ('Misato', 'Tashiro'), ('Lina', 'Fettah'), ('Kanisha', 'Mehta'), ('Pamela', 'Duran Vinueza'), ('Vanesa', 'Furlanetto'), ('Estrella', 'Cabeza Candela'), ('Giulia', 'Gabba'), ('Alina', 'Sullivan'), ('Aleksa', 'Costa'), ('Jessi', 'Robinson'), ('Yuka', 'Ueda'), ('Maren', 'Kassens'), ('Marketa', 'Postranecka'), ('Catriona', 'Stewart'), ('Lei', 'Feng'), ('Natalia', 'Bubien'), ('Zuzana', 'Chmelarova'), ('Tijana', 'Koprivica'), ('Kelli', 'Zahnel'), ('Natia', 'Tsiklauri'), ('Nudnida', 'Luangnam'), ('Jennifer Lee', 'Heinser'), ('Eun Hee', 'Sung'), ('Marlena', 'Metzinger'), ('Valentina', 'Vasilieva'), ('Saskia', 'Adomat'), ('Megumi', 'Takahashi'), ('Alanna', 'Rodgers'), ('Anne', 'Schaefer'), ('Danica', 'Krstajic'), ('Jessica', 'Engels'), ('Jovana', 'Rasovic'), ('Olga', 'Tsoi'), ('Kristina', 'Barysheva'), ('Ji Hyun', 'Oh'), ('Alba', 'Ramos Segarra'), ('Laura', 'Haberkorn'), ('Jitka', 'Kleisnerova'), ('Michelle', 'Mitchell'), ('Jessica', 'Williams'), ('Jacquelyn', 'Visinski'), ('Anna', 'Chakvetadze'), ('Akiko', 'Yoshizawa'), ('Nanis', 'El Essaily'), ('Rebeca', 'Bou Nogueiro'), ('Julia', 'Doci'), ('Abby', 'Hedges'), ('Carolina', 'Escamilla'), ('Maria', 'Garcia Planas'), ('Jana', 'Mackova'), ('Keri', 'Robison'), ('Haruna', 'Shimizu'), ('Coral', 'Morales'), ('Melodia', 'Morales'), ('Asli', 'Semizoglu'), ('Preethi', 'Subramaniam'), ('Milana', 'Yusupov'), ('Laura', 'Viquez'), ('Aravane', 'Rezai'), ('Julia', 'Sloboda'), ('Ludmila', 'Arias Moreno'), ('Yana', 'Sadovskaya'), ('Ewa', 'Losinski'), ('Preethi', 'Shravan'), ('Ivana', 'Lisjak'), ('Amanda', 'Rales'), ('Fabiana', 'Mak'), ('Anna', 'Berezka'), ('Dalia Primaver', 'Garza'), ('Anna', 'Amato'), ('Thaddea', 'Lock'), ('Caroline', 'Larsson'), ('Ara', 'Micayabas'), ('Sonya', 'Haggstrom'), ('Marta', 'Salgueiro Freixenet'), ('Sarah', 'Schneider'), ('Anna', 'Sidorovitch'), ('Shan Shan', 'Song'), ('Sandra', 'Zmak'), ('Anne', 'Gylling'), ('Paulina', 'Bigos'), ('Dina', 'Senkina'), ('Monica', 'Mir Daud'), ('Chandra', 'Capozzi'), ('Jung Ha', 'Lee'), ('Anna', 'Novo'), ('Romina', 'Mrochen'), ('Yu Ting', 'Lin'), ('Nuria', 'Sanchez Garcia'), ('Amanda', 'Melgarejo'), ('Veronika', 'Chvojkova'), ('Vojislava', 'Lukic'), ('Akiko', 'Kato'), ('Anna Lena', 'Hansen'), ('Myrella', 'De Paula'), ('Yan Chong', 'Chen'), ('Sara', 'Savarise'), ('Maja', 'Vuzem'), ('Irina', 'Cybina'), ('Nicole', 'Ludwig'), ('Stefanie', 'Alfery'), ('Elena', 'Micheloni'), ('Liberty', 'Sveke'), ('Sara', 'Del Barrio Aragon'), ('Sofia', 'Dinis'), ('Carola', 'Gonzalez King Garibo'), ('Yanchong', 'Chen'), ('Jenna', 'Rayner'), ('Stephanie', 'Kusano'), ('Monia', 'Pederzoli'), ('Ana Gloria', 'Osorio Pena'), ('Anete', 'Bandere'), ('Vanessa', 'Pinto'), ('Maja', 'Petrovic'), ('Oormila', 'Ram'), ('Lara', 'Alsamman'), ('Pichittra', 'Thongdach'), ('Korina', 'Perkovic'), ('Hae Youm', 'Bae'), ('Perrine', 'Gauthier'), ('Meghana', 'Paritala'), ('Ira', 'Aleksova'), ('Eloah', 'Lopes'), ('Kristina', 'Andlovic'), ('Rebeca', 'Estupina Ibanez'), ('Sonia', 'Corominas Plaja'), ('Barbara', 'Maciocha'), ('Maria', 'Sharapova'), ('Ju Hee', 'You'), ('Li Li', 'Ding'), ('Jana', 'Votrubcova'), ('Romina', 'Raonic'), ('Naoko', 'Ushiyama'), ('Maria', 'Calbeto'), ('Laura', 'Vallverdu Zafra'), ('Natalia', 'Baez'), ('Jennifer', 'Carati Del Nogal'), ('Vicky', 'Michaud'), ('Anjuri', 'Nagalia'), ('Jarmila', 'Gajdosova'), ('Sofia', 'Ayala'), ('Martha Carolina', 'Bello Urbina'), ('Costanza', 'Pallme Konig'), ('Sara', 'Errani'), ('Wen', 'Zhao'), ('Dia', 'Evtimova'), ('Sheila', 'Solsona Carcasona'), ('Tatiana', 'Cutrona'), ('Tapiwa', 'Marobela'), ('Shahar', 'Peer'), ('Sandra', 'Canrom'), ('Oxana', 'Zhuchenko'), ('Laura', 'Gence'), ('Gajane', 'Vage'), ('Yuka', 'Higuchi'), ('Sara', 'Amo Flores'), ('Olena', 'Leonchuk'), ('Leigh', 'Walsh'), ('Beatriz', 'Rios'), ('Claire', 'Mesnil'), ('Ana', 'Lipartia'), ('Leen', 'Irani'), ('Anya', 'Villanueva'), ('Claire', 'Lablans'), ('Ivana', 'Gala'), ('Ioana', 'Ignat'), ('Hana', 'Vaculinova'), ('Vita', 'Moskaliova'), ('Natalia', 'Zamolotskikh'), ('Sofia', 'Melikishvili'), ('Loriane', 'Favoretto'), ('Natasha', 'Khan'), ('Jing', 'Zhou'), ('Mariangela', 'Avola'), ('Veronica', 'Queen'), ('Ivana', 'Karolyiova'), ('Elena', 'Chalova'), ('Olawaseun', 'Ogundare'), ('Evgeniya', 'Guba'), ('Anastasia', 'Balafouta'), ('Melissa', 'Percy'), ('Daniella', 'Cohen'), ('Aleksandra', 'Lukic'), ('Camilla', 'Lundberg'), ('Francesca', 'Piu'), ('Laura', 'Thorpe'), ('Leslie', 'Koffi'), ('Misa', 'Kinoshita'), ('Cynthia', 'Tornil Marclay'), ('Sonia', 'Bernal'), ('Fadzai', 'Masiyazi'), ('Stanca', 'Muresan'), ('Candelaria', 'Rizzuto'), ('Valerie', 'Saillant'), ('Josanne', 'Van Bennekom'), ('Luboslava', 'Hiresova'), ('Ekaterina', 'Shulaeva'), ('Inna', 'Kuzmenko'), ('Edith', 'Tosner'), ('Anna', 'Sydorska'), ('Maria Dolores', 'Pazo'), ('Jennifer', 'Woyke'), ('Sophia', 'Marks'), ('Natalia', 'Guitler'), ('Martina', 'Pavelec'), ('Juliana', 'Botelho'), ('Amber', 'Brightly'), ('Yu Lin', 'Dai'), ('Dasha', 'Cherkasova'), ('Lizeth', 'King'), ('Rocio', 'Juarez'), ('Katelyn', 'Ross'), ('Helen', 'Wisnienski'), ('Anna', 'Sharp'), ('Joanna', 'Zajac'), ('Pooja', 'Kommireddi'), ('Bianca', 'Schulz'), ('Gabriella', 'Polito'), ('Nina', 'Henkel'), ('Efrat', 'Zlotikamin'), ('Amanda', 'Mankovits'), ('Irina', 'Tsymbal'), ('Magali', 'De Lattre'), ('Ani', 'Mijacika'), ('Nicole', 'Briceno'), ('Julie', 'Wijnakker'), ('Alejandra', 'Saavedra'), ('Stephanie', 'Vock'), ('Marta', 'Oliva Lopez'), ('Atsumi', 'Dohi'), ('Melanie', 'Gloria'), ('Nikol', 'Dimitrova'), ('Alizee', 'Paradis'), ('Aimi', 'Koga'), ('Adina', 'Neustein'), ('Ola', 'Abou Zekry'), ('Chie', 'Hayasaka'), ('Eleonora', 'Luciani'), ('Andrea', 'Sieveke'), ('Ola', 'Abou Zekri'), ('Kamalpreet', 'Bhullar'), ('Marah', 'Calvo'), ('Maria', 'Irigoyen'), ('Simona', 'Dobra'), ('Punam', 'Reddy'), ('Lenore', 'Lazaroiu'), ('Maria', 'Seppi'), ('Karolina', 'Wlodarczak'), ('Rotem', 'Goldstein'), ('Julie', 'Vo'), ('Karin', 'Knapp'), ('Agnes', 'Szatmari'), ('Etti', 'Gans'), ('Helene', 'Tribolet'), ('Maria Jose', 'Vallasciani'), ('Kasumi', 'Hattori'), ('Estefania', 'Balda Alvarez'), ('Megan', 'Alexander'), ('Tania', 'Varela Alvarado'), ('Paulina', 'Ojeda'), ('Clara', 'Schuhmacher Terron'), ('Christine', 'Kainzmeier'), ('Ekaterina', 'Dranets'), ('Meta', 'Sevsek'), ('Marisa', 'Gianotti'), ('Maria', 'Milic'), ('Kaori', 'Sano'), ('Karolina', 'Filipiak'), ('Teresa', 'Oberti'), ('Nantenaina', 'Ramalalaharivololona'), ('Nicole', 'Agostini'), ('Christelle', 'Prato'), ('Ekaterina', 'Pogrebniak'), ('Andra Iulia', 'Savu'), ('Charity', 'Johns'), ('Katarina', 'Vranic'), ('Dana', 'Hartman'), ('Elisabetta', 'Monduzzi'), ('Ji Ae', 'Kim'), ('Qing', 'Yue'), ('Julianne', 'Welford'), ('Laone', 'Botshoma'), ('Daria', 'Bykodarova'), ('Kunkanda', 'Pukjumpa'), ('Esha', 'Sanghvi'), ('Dede Tari', 'Kusrini'), ('Alexandra', 'Hernandez Vallant'), ('Eva', 'Brozova'), ('Ute', 'Schnoy'), ('Alexandra M', 'Haney'), ('Chisako', 'Sugiyama'), ('Shuang', 'Liu'), ('Santa', 'Sushinska'), ('Sarah', 'Braun'), ('Hirono', 'Watanabe'), ('Emmy', 'Fritz Krockow'), ('Lenka', 'Broosova'), ('Olga', 'Khrapkova'), ('Rosanna', 'Hatch'), ('Ana', 'Gonzalez Herreros'), ('Maraike', 'Biglmaier'), ('Sandra', 'Hribar'), ('Selima', 'Frioui'), ('Cho Won', 'Lee'), ('Adriana', 'Fernandez'), ('Samantha', 'Cowan'), ('Tatjana', 'Priachin'), ('Katia', 'Sabate Orera'), ('Ingrid', 'Cseh'), ('Andrea', 'Bonilla'), ('Christin J', 'Thompson'), ('Rumi', 'Abe'), ('Juliana', 'Voigt'), ('Csilla', 'Borsanyi'), ('Yuliya', 'Hnateyko'), ('Nihal', 'Tarek Saleh'), ('Julija', 'Sabanov'), ('Marina', 'Shamayko'), ('Jovana', 'Miletic'), ('Lara', 'Wittmann'), ('Thuy Dung', 'Nguyen'), ('Despina', 'Matsaridou'), ('Lenka', 'Hojckova'), ('Silvia', 'Fassione'), ('Seema', 'Maybud'), ('Kamila', 'Mirzaalimova'), ('Aglaya', 'Kokurina'), ('Tatjana', 'Malek'), ('Tatjana', 'Maria'), ('Dijana', 'Srbinoska'), ('Prim', 'Buaklee'), ('Mega', 'Sukmawati'), ('Sophie', 'Jacobeit'), ('Meg', 'Fanjoy'), ('Lusine', 'Davtyan'), ('Stephanie', 'Dalmacio'), ('Keva', 'Palmer'), ('Amanda', 'Avedissian'), ('Alejandra', 'Del Rey Guardiola'), ('Hannah', 'Eke'), ('Chiaki', 'Matsumoto'), ('Victoria', 'Valls Comamala'), ('Alejandra', 'Meza Cuadra'), ('Esperanza', 'Vinals Rebassa'), ('Agustina', 'Llaver'), ('Maria', 'Abramovic'), ('Florencia', 'Camperchioli'), ('Malgorzata', 'Silka'), ('Karin', 'Conti'), ('Pei', 'Peng'), ('Claudia', 'Spincke'), ('Maria', 'Soo'), ('Madalina', 'Gojnea'), ('Sara', 'Di Paolo'), ('Stephanie', 'Lim'), ('Shana', 'Claes'), ('Katia', 'Alarcon'), ('Simona', 'Kralikova'), ('Kylie', 'Moore'), ('Fani', 'Chifchieva'), ('Lisa', 'Haegele'), ('Afreen', 'Jahan'), ('Olesia', 'Nazarova'), ('Mariana', 'Majic'), ('Yeniseik', 'Gomez'), ('Whitney', 'Chappell'), ('Amanda', 'Mcdowell'), ('Chrissie', 'Seredni'), ('Ia', 'Appelberg'), ('Francesca', 'Kinsella'), ('Vittoria', 'Perugini'), ('Monica', 'Tomas Lopes'), ('Julie', 'Jacobs'), ('Gabriela', 'Robledo Loza'), ('Annie', 'Wise'), ('Aleksandra', 'Wozniak'), ('Monica', 'Neveklovska'), ('Andrea', 'Petkovic'), ('Mika', 'Kawamura'), ('Elyse', 'Steiner'), ('Andrada Lacramioara', 'Dinu'), ('Seira', 'Etori'), ('Michelle', 'Sammons'), ('Yaroslava', 'Shvedova'), ('Jia', 'Zhao'), ('Lisa', 'Marshall'), ('Guillermina', 'Torre'), ('Carmen Maria', 'Ortiz Law'), ('Miho', 'Ishida'), ('Tsvetana', 'Pironkova'), ('Stephanie', 'Vieira'), ('Ye Ra', 'Lee'), ('Jelena', 'Rajic'), ('Jing', 'Ren'), ('Ayumi', 'Yamamoto'), ('Andrina', 'Laegerler'), ('Ashley', 'Spicer'), ('Aurelie', 'Caffa'), ('Mi Seon', 'Lee'), ('Florentina', 'Hanisch'), ('Olga', 'Savchuk'), ('Maria Teresa', 'Salame'), ('Agnes', 'Liepina'), ('Apurvika', 'Shukla'), ('Laura', 'Bel Franquesa'), ('Svetlana', 'Smirnova'), ('Hae Sung', 'Kim'), ('Connor', 'Vogel'), ('Aleksandra', 'Zakrzynska'), ('Ali', 'Van Horne'), ('Susanna', 'Mussi'), ('Razilya', 'Galayamova'), ('Stella', 'Kyradji'), ('Joana Alexandra', 'Comsa'), ('Maria', 'Gomez'), ('Monica', 'Niculescu'), ('Berengere', 'Teix'), ('Maria Irene', 'Squillaci Sandoval'), ('Maria', 'Temez Fernandez'), ('Aoi', 'Hatanaka'), ('Daria', 'Titkina'), ('Tanja', 'Ostertag'), ('Yana', 'Mathias'), ('Francesca', 'Recalcati'), ('Olga', 'Puchkova'), ('Lauren', 'Imre'), ('Graziana', 'Di Giuseppe'), ('Emilia', 'Arnaudovska'), ('Astri', 'Purnawati'), ('Yui', 'Nagasawa'), ('Bojana', 'Bobusic'), ('Holly', 'Richards'), ('Ortansa Nicoleta', 'Danciu'), ('Annelise', 'Fernandez'), ('Micaela', 'Moroni'), ('Kellie', 'Schmitt'), ('Alexandra', 'Karavaeva'), ('Chiara', 'Petrazzuolo'), ('Thalia', 'Diaz Barriga'), ('Hikari', 'Matsuo'), ('Talitha', 'De Groot'), ('Maria', 'Hoyos'), ('Daniela', 'Lovera'), ('Brintney', 'Larson'), ('Samantha', 'Murray'), ('Asha', 'Nanda Kumar'), ('Dariana', 'Kozmina'), ('Junko', 'Yamada'), ('Tatiana', 'Kotelnikova'), ('Yui', 'Takeshima'), ('Erika', 'Takao'), ('Mary', 'Tenu Michael Christon'), ('Laura', 'Barbu'), ('Carolina', 'Gutierrez'), ('Dina', 'Bajramovic'), ('Anna', 'Gerasimou'), ('Miljana', 'Adanko'), ('Gina', 'Fahaiyena'), ('Ozge', 'Atalay'), ('Marcela', 'Vojtiskova'), ('Sina', 'Ladage'), ('Anna', 'Vines Milian'), ('Rebekka', 'Petursdottir'), ('Mireia', 'Cano Guirao'), ('Maria Jose', 'Andres Gomez'), ('Gabbi', 'Tepic'), ('Alice Maria', 'Tunaru'), ('Anjani', 'Tandon'), ('Sarah', 'Aulombard'), ('Luci', 'Gonzalez Puch'), ('Federica', 'Suess'), ('Ana Maria', 'Henriquez'), ('Celina', 'Grissi'), ('Martina', 'Gerlova'), ('Wei Fang', 'Kung'), ('Chieh Ju', 'Wang'), ('Naoko', 'Ueshima'), ('Jie', 'Zeng'), ('Hirono', 'Yoshikawa'), ('Andrea', 'Portillo'), ('Alla', 'Kudryavtseva'), ('Lavinia', 'Tananta'), ('Bianca', 'Smith'), ('Ana', 'Ivanovic'), ('Ashley', 'Murdock'), ('Nazli', 'Kutuk'), ('Lyubov', 'Slovtsova'), ('Carla Lorena', 'Martinez'), ('Victoria', 'Quintero'), ('Claire', 'Soper'), ('Stine', 'Sebakk'), ('Alexandra', 'Aleksieva'), ('Jessica', 'Kirkland'), ('Siobhan', 'Finicane'), ('Varanya', 'Vijuksanaboon'), ('Catalina', 'Arancibia'), ('Eliza', 'Rustandar'), ('Seul Ki', 'Chin'), ('Andrea', 'Herrera'), ('Tania', 'Salas'), ('Miya', 'Solic'), ('Maria', 'Gatalskaya'), ('Maria Paulina', 'Gamboa'), ('Montserrat', 'Gonzalez'), ('Giulia', 'Gatto Monticone'), ('Yuri', 'Fujii'), ('Silvia', 'Soler Espinosa'), ('Natalia', 'Kolat'), ('Alexandra', 'Kichoutkin'), ('Irina', 'Strigalova'), ('Simone', 'Frank'), ('Cammie', 'Gray'), ('Laura', 'Fisher'), ('Yana', 'Levchenko'), ('Jessica', 'Nguyen'), ('Tori', 'Kinard'), ('Iuliia', 'Sandrakova'), ('Nina', 'Munch Soegaard'), ('Aislinn', 'Oneill'), ('Sandrine', 'Jabra'), ('Hannah', 'Grady'), ('Zineb', 'El Ouazzani'), ('Irena', 'Mykytyn'), ('Vasilisa', 'Bardina'), ('Ekaterina', 'Kirianova'), ('Mailyne', 'Andrieux'), ('Natalie', 'Tanevska'), ('Janina', 'Peters'), ('Sarah', 'Lancaster'), ('Fabiola', 'Alvarez Carbajo'), ('Eveline', 'Widiger'), ('Viktorya', 'Gorodetsky'), ('Lucy', 'Warburton'), ('Charlotte', 'Douwma'), ('Maria Sol', 'Mezio'), ('Jana', 'Juricova'), ('Viviane', 'Marani'), ('Kaoru', 'Maezawa'), ('Totinkoa', 'Djanguenane'), ('Rachael', 'Dillon'), ('Clothilde', 'Falconetti'), ('Sophie', 'Quist'), ('Diana', 'Buzean'), ('Christy', 'Striplin'), ('Tamara', 'Orwa'), ('Adrienn', 'Hidvegi'), ('Verdiana', 'Verardi'), ('Evgenia', 'Stupak'), ('Nina', 'Beljajevova'), ('Morgan', 'Lightbourne'), ('Ekaterina', 'Ivanova'), ('Ekaterina', 'Lopes'), ('Shuko', 'Aoyama'), ('Anna', 'Khvedelidze'), ('Rita', 'Vukov'), ('Yoshi', 'Nagano'), ('Denise', 'Giler'), ('Aishwarya', 'Jadhav'), ('Magy', 'Aziz'), ('Maria', 'Sorbello'), ('Christine', 'Wilson'), ('Geneva', 'Gnam'), ('Luiza', 'Barcaui'), ('Ilham', 'Zouaoui'), ('Nargiza', 'Rakhmanova'), ('Joana', 'Pangaio Pereira'), ('Andrea', 'Popovic'), ('Marta', 'Smiechowska'), ('Mihaela', 'Duna'), ('Yui', 'Saikai'), ('Paulina', 'Vargas'), ('Merve', 'Gultekinler'), ('Claudia', 'Sanua'), ('Seema', 'Kumari'), ('Veronika', 'Dostalova'), ('Lu Ling', 'Chen'), ('Natalia', 'Rakhmanina'), ('Brina', 'Spegel'), ('Valeria', 'Pertsukhova'), ('Alexandra', 'Kiesl'), ('Kim', 'Rus'), ('Jutta', 'Bornefeld'), ('Therese', 'Tisseverasinghe'), ('Laura', 'Burns'), ('Huan', 'Xia'), ('Jessica', 'Omeara'), ('Caterina', 'Marusic'), ('Whitney', 'Byrd'), ('Amparo', 'Iglesias'), ('Karen', 'Castiblanco'), ('Yumi', 'Nakano'), ('Arijana', 'Begovic'), ('Aliaa', 'Fakhry'), ('Soledad', 'Podlipnik'), ('Yun Qiao', 'Ren'), ('Tamar', 'Milevskaya'), ('Joyce', 'Martinez'), ('Zeynep Aysu', 'Yavuz'), ('Georgie', 'Gent'), ('Maria Fernanda', 'Riveroll'), ('Jana', 'Albers'), ('Kelly', 'Holtzhausen'), ('Keren', 'Shlomo'), ('Julie', 'Bensilum'), ('Emese', 'Kardhordo'), ('Viktoriya', 'Agryutenkova'), ('Denise', 'Harijanto'), ('Jessica', 'Zok'), ('Maribel', 'Vicente Joyera'), ('Suzanne', 'Matzenauer'), ('Angelique', 'Kerber'), ('Olga', 'Sarli'), ('Blanca', 'Guallart Lain'), ('Andrea', 'Giraldo'), ('Ieva', 'Irbe'), ('Sayyara', 'Mammadova'), ('Manami', 'Miura'), ('Katrin', 'Klein'), ('Julija', 'Gotovskyte'), ('Hye Mi', 'Byun'), ('Maria Isabel', 'Camberos'), ('Sophie', 'Wilkinson'), ('Valerie', 'Tetreault'), ('Ye Ji', 'Seo'), ('Jesica', 'Brys'), ('Kseniia', 'Tokarieva'), ('Caroline', 'Nothnagel'), ('Annalisa', 'Salvatelli'), ('Shi Tong', 'Shao'), ('Shuang', 'Wu'), ('Saskia', 'Monien'), ('Anushree', 'Thammanna'), ('Tatiana', 'Golovin'), ('Andrea', 'Espinosa'), ('Karin', 'Hechenberger'), ('Anna', 'Saltanova'), ('Nancy', 'Metriya'), ('Vandana', 'Murali'), ('Kateryna', 'Malakhova'), ('Josipa', 'Bek'), ('Beatriz', 'Salazar Ruiz'), ('Natalie', 'Toporowski'), ('Bermet', 'Duvanaeva'), ('Ronke', 'Akingbade'), ('Sofia', 'Mitrokhin'), ('Xia Ling', 'Li'), ('Ina', 'Hadziselimovic'), ('Sarah', 'Huah'), ('Sara', 'Mansoor'), ('Justine', 'Ozga'), ('Mateja', 'Horvat'), ('Vanessa', 'Kretsch'), ('Bo Ram', 'Kim'), ('Moira', 'Torrisi'), ('Marija', 'Olujic'), ('Ana Cristina', 'Reyes'), ('Eleonora', 'Iannozzi'), ('Febri', 'Joana'), ('Yekaterina', 'Morozova'), ('Lauren', 'Lui'), ('Anna', 'Bartenstein'), ('Ivy Kristel', 'De Castro'), ('Natasha', 'Karolyi'), ('Claudia', 'Pontoglio'), ('Desiree', 'Alesiani'), ('Stefanie', 'Kaindl'), ('Nikola', 'Frankova'), ('Maja', 'Kambic'), ('Oksana', 'Khomyk'), ('Corina Claudia', 'Corduneanu'), ('Christine', 'Sperling'), ('Sarah', 'Fansler'), ('Colleen', 'Rielley'), ('Eugenia', 'Grebenyuk'), ('Ha Yang', 'Choi'), ('Belfin', 'Sumbul'), ('Rana', 'Tharwat Hafez'), ('Kali A', 'Krisik'), ('Sabina', 'Gunnarsson'), ('Tuule', 'Tani'), ('Neena', 'Sharma'), ('Teele', 'Tani'), ('Karolina', 'Jovanovic'), ('Imane', 'Maloufi'), ('Fadzai', 'Mawisire'), ('Alexandra', 'Mueller'), ('Lara', 'Fakhoury'), ('Thuy Trang', 'Le Nguyen'), ('Raquel', 'Seijo Rodriguez'), ('Victoria', 'Abbassi'), ('Mariana', 'Muci Torres'), ('Nicole', 'Monteiro'), ('Idunn', 'Hertzberg'), ('Veronika', 'Adami'), ('Jelena', 'Stanivuk'), ('Dagmara', 'Siara'), ('Sabrina', 'Allaut'), ('Stella', 'Menna'), ('Martina', 'Ondrackova'), ('Desiree', 'Bastianon'), ('Pauline', 'Bisset'), ('Caitlin', 'Whoriskey'), ('Manar', 'Al Jazzaf'), ('Nicole', 'Grunwald'), ('Yana', 'Zvarich'), ('Ana Laura', 'Ochoa Magana'), ('Valeria', 'Faccinetti'), ('Angelica', 'Chavez'), ('Ana', 'Veselinovic'), ('Katharina', 'Siller'), ('Francisca', 'Salas'), ('Emma', 'Hiles'), ('Anna', 'Boixader Martinez'), ('Jessica', 'Schaer'), ('Emma', 'Hayman'), ('Irina', 'Tregub'), ('Gaelle', 'Desperrier'), ('Daniela', 'Leyria Moreno'), ('Lindsay', 'Burdette'), ('Grace', 'Hutson'), ('Camila', 'Deluchi'), ('Misato', 'Fujita'), ('Sonia', 'Sandano'), ('Veronica', 'Coslovich'), ('Yuan Yuan', 'Zhong'), ('Anastasia', 'Zvereva'), ('Julia', 'Parasyuk'), ('Nadia', 'Adnani'), ('Nicola', 'Geuer'), ('Mari', 'Yamauchi'), ('Sofie', 'Kofoed Thomsen'), ('Teodora', 'Mircic'), ('Katerina', 'Polunina'), ('Karen Natalia', 'Martinez Bernal'), ('Daniela', 'Gudelj'), ('Sampada', 'Kanede'), ('Laura', 'Siegemund'), ('Diana', 'Woodcock'), ('Marina', 'Erakovic'), ('Michaela', 'Johansson'), ('Suzelle', 'Davin'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Antia', 'Ghiorghiu'), ('Simona', 'Demont'), ('Elodie', 'Caillat'), ('Zeynep', 'Ozbarlas'), ('Erin', 'Liefeld'), ('Marisol', 'Aguilar'), ('Ana', 'Beltran Trigueros'), ('Anastasiya', 'Slyusarchyk'), ('Sara', 'Meghoufel'), ('Amanda', 'Granson'), ('Barbora', 'Bozkova'), ('Lili', 'Grebinuk'), ('Marta', 'Lesniak'), ('Elze', 'Potgieter'), ('Camila', 'Belassi'), ('Yuvanna', 'Montalvo'), ('Lucie', 'Kabacova'), ('Violette', 'Huck'), ('Louise', 'Doutrelant'), ('Aleksandra', 'Malovic'), ('Eun Jung', 'Kim'), ('Kalliopi', 'Katsoupi'), ('Diana', 'Eriksson'), ('Anahi', 'Navarro Ruano'), ('Megumi', 'Fukui'), ('Kristen', 'Mcvitty'), ('Inna', 'Tchepournaya'), ('Raluca', 'Nedelea'), ('Jung Yoon', 'Shin'), ('Cristina', 'Martinez'), ('Min Hwa', 'Yu'), ('Kristen A', 'Bleakley'), ('Ruxandra Floriana', 'Tudosoiu'), ('Tatia', 'Mikadze'), ('Cristiana', 'Marotta'), ('Andra', 'Gavril'), ('Marlene', 'Ryan'), ('Sophie', 'Kobuch'), ('Sanja', 'Racic'), ('Diana', 'Torres'), ('Bianca', 'Eichkorn'), ('Marta', 'Torbarina'), ('Julie', 'Chao'), ('Joohyoung', 'Kim'), ('Salome', 'Aladashvili'), ('Stephanie', 'Luk'), ('Porntip', 'Mulsap'), ('Ineke', 'Mergaert'), ('Belen', 'Perez De Juan Glez'), ('Anne', 'Le Gall'), ('Karin', 'Lundmark'), ('Thiyumi', 'Abeysinghe'), ('Bianca', 'Koch'), ('Roxana', 'Alexandru'), ('Melissa', 'Saiontz'), ('Ashley', 'Neumann'), ('Sara', 'Nael'), ('Yasmin', 'Enrich'), ('Kyung Hwa', 'Lee'), ('Yi Fan', 'Chen'), ('Lucia', 'Jara Lozano'), ('Doina Nicoleta', 'Lovin'), ('Sandra', 'Liebl'), ('Celia', 'Gil Mateo Sasieta'), ('Patricia', 'Soesilo'), ('Tereza', 'Hladikova'), ('Magdalena', 'Kiszczynska'), ('Soon Mi', 'Seo'), ('Shatel', 'Tavita'), ('Yukiko', 'Terai'), ('Maria', 'Perevoschikova'), ('Natalia Maria', 'Christenson'), ('Lorena', 'Rebolledo'), ('Jasmin', 'Heckel'), ('Jamie', 'Lieberman'), ('Yevgenia', 'Nudga'), ('Maria Lavinia', 'Piva'), ('Gluay', 'Kampookaew'), ('Anne Marie', 'Simonsen'), ('Yan', 'Zhang'), ('Iva', 'Velkovska'), ('Franziska', 'Klotz'), ('Valentina', 'Ponomartseva'), ('Ewa', 'Szatkowska'), ('Alise', 'Vaidere'), ('Milica', 'Tomic'), ('Tina', 'Akaegbusi'), ('Elly', 'Strother'), ('Marjorie', 'Ondeck'), ('Sarah', 'Harding'), ('Iris', 'Khanna'), ('Irene', 'Rehberger Bescos'), ('Laura', 'Borza'), ('Edilyn', 'Balanga Margate'), ('Nicoleta Mihaela', 'Negru'), ('Dora', 'Somossy'), ('Evgeniya', 'Kim'), ('Lenka', 'Wienerova'), ('Tania', 'Rice'), ('Roberta', 'Martellini'), ('Olivia', 'Marshall'), ('Catrin', 'Deck'), ('Julia', 'Trunk'), ('Rita', 'Gouveia'), ('Lenka', 'Danielova'), ('Christina', 'Amo'), ('Melisa', 'Miranda Otarola'), ('Stephanie', 'Wetmore'), ('Katariina', 'Tuohimaa'), ('Urska', 'Klemenc'), ('Benedicte', 'Vliegen'), ('Tomo', 'Akutsu'), ('Olivia', 'Vrettas'), ('Bernadetta', 'Birkas'), ('Priyanka', 'Tohan'), ('Ksenia', 'Lopina'), ('Magdalena', 'Ekert'), ('Catherine', 'Newman'), ('Courtney', 'Ulery'), ('Ana', 'Miguel Ivern'), ('Emilie', 'Van Boekel'), ('Mihaela', 'Buzarnescu'), ('Yasmin', 'Schnack'), ('Laia', 'Santamaria Colomer'), ('Juanita', 'Munoz'), ('Maria', 'Zharkova'), ('Diana', 'Nakic'), ('Dian', 'Mayasari'), ('Nina', 'Makarova'), ('Ellen', 'Yeung'), ('Wakana', 'Ichikawa'), ('Daniela', 'Suarez'), ('Krystina', 'Marcio'), ('Victoria', 'Tseitlin'), ('Michelle', 'Pang'), ('Miriam', 'Steinhilber'), ('Kamonthip', 'Saovana'), ('Bibiane', 'Schoofs'), ('Barbara', 'Kvelstein'), ('Diana', 'Toma'), ('Yurina', 'Koshino'), ('Rui', 'Bao'), ('Daniela', 'Scivetti'), ('Megumi', 'Matsuyama'), ('Carolina Magalhaes', 'Malheiros'), ('Maria Fernanda', 'Hernandez'), ('Zineb', 'Hilali'), ('Manuela', 'Esposito'), ('Ashley', 'Brooks'), ('Alexandra', 'Gwizdowski'), ('Veronika', 'Babayan'), ('Sandra Mirela', 'Rus'), ('Phoebe', 'Di Leo'), ('Trina', 'Slapeka'), ('Julie', 'Stas'), ('Alina', 'Orcholska'), ('Gozde', 'Unkaya'), ('Makiho', 'Kozawa'), ('Amanda', 'Craddock'), ('Anna', 'Jugeli'), ('Lindsay', 'Jones'), ('Miljana', 'Jocic'), ('Katja', 'Stemmer'), ('Natalia', 'Rudnouskaya'), ('Sahar', 'Amini Hajibashi'), ('Anne', 'Redfern'), ('Mikayla', 'Rogers'), ('Elizabeth', 'Plotkin'), ('Cecile', 'Bardoux'), ('Marcella', 'Koek'), ('Erin', 'Boast'), ('Eun Jung', 'Yang'), ('Stephanie', 'Jasper'), ('Nikolina', 'Renic'), ('Ying', 'Qian'), ('Gangothri', 'Sandri'), ('Luisa', 'Cantu'), ('Edit Katalin', 'Suhajda'), ('Juliana', 'Fernandes'), ('Hailee', 'Elmore'), ('Laura Ioana', 'Andrei'), ('Liset', 'Brito Herrera'), ('Sara', 'Pujals Perez'), ('Julia', 'Helbet'), ('Petra', 'Pajalic'), ('Saori', 'Karikomi'), ('Paola', 'Sprovieri'), ('Elizabeth', 'Kobak'), ('Ilina', 'Kroushovski'), ('Jana', 'Derkasova'), ('Nicole', 'Thyssen'), ('Romana', 'Janshen'), ('Sabrina', 'Mendez Dominguez'), ('Paulina', 'Jorquera'), ('Elisa', 'Mansell'), ('Amelia', 'Frendo'), ('Ekaterina', 'Makarova'), ('Zorica', 'Petrov'), ('Katarina', 'Krpan'), ('Erin', 'Clark'), ('Hadjer', 'Bouali'), ('Yamila', 'Halle'), ('Shao Yuan', 'Kao'), ('Claudina', 'Covarrubias'), ('Yvette', 'Hyndman'), ('Lauren', 'Dossor'), ('Jessica', 'Weeks'), ('Maha', 'Berty'), ('Sydni', 'Katz'), ('Wen Hsin', 'Hsu'), ('Natalie', 'Handler'), ('Paola', 'Alvarado'), ('Michaela', 'Vogel'), ('Juliana', 'Franco'), ('Kim', 'Roberts'), ('Stefania', 'Vizireanu'), ('Anna', 'Korzeniak'), ('Puleng', 'Tlhophane'), ('Jana', 'Kulova'), ('Sara', 'Catarain Ruiz'), ('Aniko', 'Kiss'), ('Nerea', 'Irisarri Duran'), ('Maria', 'Melihova'), ('Diane', 'Cheymol'), ('Natasha', 'Vieira'), ('Diana', 'Popescu'), ('Nicole', 'Kantor'), ('Eliana', 'Bazan'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Daiana', 'Negreanu'), ('Jazmin', 'Hernandez'), ('Cristina Diana', 'Ghinda'), ('Inga', 'Beermann'), ('Anastasia', 'Solomko'), ('Charlotte', 'Martin'), ('Ekaterina', 'Kosminskaya'), ('Barbara', 'Oliveira'), ('Michela', 'Pizzo'), ('Erica', 'Tedoldi'), ('Georgiana', 'Smyser'), ('Eleanor', 'Peters'), ('Yulia', 'Pilnik'), ('Ting Ting', 'Lu'), ('Cristina', 'Greco Naccarato'), ('Karen', 'Nijssen'), ('Brittany', 'Blalock'), ('Rebecca', 'Parks'), ('Anna', 'Kechko'), ('Maria Sole', 'Barbieri'), ('Marika', 'Petrosino'), ('Gabriela', 'Necea'), ('Maria', 'Miziouk'), ('Di', 'Hu'), ('Yulia', 'Fedossova'), ('Aleksandra', 'Marjanovic'), ('Yuan Yuan', 'Shi'), ('Katarina', 'Milinkovic'), ('Mai', 'Fujiwara'), ('Magdalena', 'Bresson'), ('Chelsea', 'Jones'), ('Beatriz', 'Vall Cava De Llan'), ('Handra Anabela', 'Mangulea'), ('Mariam', 'Mikuchadze'), ('Sara', 'Tegner'), ('Lavinia', 'Timme'), ('Maria', 'Gugel'), ('Fernanda', 'Zacouteguy'), ('Miki', 'Chinen'), ('Megan', 'Broderick'), ('Sophie', 'Cornerotte'), ('Roxanne', 'Sammel'), ('Elena Stela', 'Latea'), ('Da Hye', 'Jeong'), ('Julia', 'Bone'), ('Radana', 'Holusova'), ('Aldana', 'Caroleo'), ('Katrina', 'Tsang'), ('Ceylan', 'Engin'), ('Tara', 'Iyer'), ('Laurene', 'Fayol'), ('Joanna', 'Carswell'), ('Jenny', 'Frisell'), ('Erin', 'Paul'), ('Marina', 'Cossou'), ('Olivia', 'Scarfi'), ('Manon', 'Garcia'), ('Golda', 'Rubina'), ('Elana', 'Agranovich'), ('Cagla', 'Urcu'), ('Maja', 'Tadic'), ('Elrien', 'De Villiers'), ('Sadietou Biguedenam', 'Mayou'), ('Liege', 'Vieira'), ('Rana', 'El Derwy'), ('Linda', 'Zahlavova'), ('Anna', 'Movsisyan'), ('Dijana', 'Stojic'), ('Lema', 'Ateba'), ('Edita', 'Raca'), ('Zena', 'Williams'), ('Mireia', 'Gonzalez Bosch'), ('Sanja', 'Ancic'), ('Sofia', 'Kvatsabaia'), ('Martina', 'Lautenschlager'), ('Martina', 'Andornino'), ('Anastasia', 'Ivanina'), ('Teliana', 'Pereira'), ('Lutfiye', 'Esen'), ('Tatiany', 'Tangerino'), ('Laura', 'Peterzan'), ('Berta', 'Morata Flaquer'), ('Selma', 'Babic'), ('Michaela', 'Kissell'), ('Sofia', 'Thomaidou'), ('Nitisha', 'Deodhar'), ('Alexis', 'Dorr'), ('Ahinara', 'Ramos'), ('Joanna', 'Dobrowolska'), ('Mailen', 'Auroux'), ('Ana Paula', 'De La Pena'), ('Olga', 'Koutseridi'), ('Cristina Mirela', 'Prodanel'), ('Nadja', 'Roma'), ('Raquel', 'Castro'), ('Alice', 'Hall'), ('Wen Ling', 'Wang'), ('Irina', 'Matiychyk'), ('Yurika', 'Moriya'), ('Anja', 'Poglajen'), ('Angela', 'Werschel'), ('Chang', 'Xu'), ('Natalia', 'Niemiec'), ('Barbora', 'Bachmanova'), ('Jessica', 'Sweeting'), ('Akari', 'Inoue'), ('Anastasia', 'Poltoratskaya'), ('Laia', 'Gonzalez Garrido'), ('Teresa', 'Ferrer Lopez Cuervo'), ('Cecilia', 'Lainez'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Silvia Elena', 'Irimescu'), ('Stefania', 'Boffa'), ('Megan', 'Sporndli'), ('Jesica', 'Escobar'), ('Justine', 'Bourdon'), ('Alena', 'Bayarchyk'), ('Jessica', 'Mcclintock'), ('Katherine', 'White'), ('Karina', 'Porushkevich'), ('Caroline', 'Dedering'), ('Oksana', 'Djulai'), ('Maeva', 'Thiebaud'), ('Kirsten', 'Flower'), ('Nadia', 'Abdala'), ('Anna', 'Smith'), ('Avgusta', 'Tsybysheva'), ('Melissa', 'Laharrague'), ('Suhaila', 'Jad Gomez'), ('Eirini', 'Vasileiadou'), ('Justine', 'Sutherland'), ('Lauren', 'Sabacinski'), ('Johanna', 'Larsson'), ('Chayenne', 'Ewijk'), ('Anna', 'Radova'), ('Cynthia', 'Prieto Garcia'), ('Maja', 'Milas'), ('Viktoria', 'Kutuzova'), ('Shona', 'Lee'), ('Juri', 'Fukushima'), ('Olga', 'Elkin'), ('Pola', 'Olczak'), ('Lisa', 'Wilkinson'), ('Caroline', 'Courmont'), ('Anum', 'Saeed'), ('Ophelie', 'Vergnes'), ('Punchanok', 'Khunpitak'), ('Maren', 'Sundermeier'), ('Olga', 'Govortsova'), ('Misleydis', 'Diaz Gonzalez'), ('Ana', 'Curto'), ('Alexandra', 'Kudryavtseva'), ('Olusola', 'Gbadamosi'), ('Selma', 'Salkovic'), ('Lucie', 'Pazderova'), ('Maria', 'Spenceley'), ('Marit', 'Nordfors'), ('Sandhya', 'Nagaraj'), ('Audrey', 'Laib'), ('Lucie', 'Makrlikova'), ('Audrey', 'Dujardin'), ('Nastja', 'Recnik'), ('Daria', 'Galyanova'), ('Alexandra', 'Poorta'), ('Carla', 'Suarez Navarro'), ('Alisa', 'Kagukina'), ('Emilia', 'Bindi'), ('Nadia', 'Lee'), ('Desiree', 'Schelenz'), ('Lauren', 'Macfarlane'), ('Soetkin', 'Van Deun'), ('Letizia', 'Lo Re'), ('Petra', 'Viskovic'), ('Lorena', 'Valente'), ('Ketravee', 'Attachoo'), ('Sarah', 'Summerfield'), ('Laura', 'Cuddon Large'), ('Wendy', 'Kong'), ('Betina', 'Jozami'), ('Agustina', 'Lepore'), ('Hande', 'Yesil'), ('Kristina', 'Ufimtseva'), ('Ornella', 'Gentile'), ('Juliana', 'Umeki'), ('Yuki', 'Shinada'), ('Aurelia', 'Janeczek'), ('Liene', 'Linina'), ('Rachael', 'Hall'), ('Francesca', 'Bonomelli'), ('Camilla', 'Bortolon'), ('Gaia', 'Lazzaroni'), ('Madura', 'Ranganathan'), ('Alessia', 'Cecchini'), ('Olivia', 'Lukaszewicz'), ('Stephanie', 'Vongsouthi'), ('Anja Vanessa', 'Peter'), ('Jenny', 'Saarnilina'), ('Courtney M', 'Petero'), ('Yuka', 'Yamaguchi'), ('Natalie', 'Piquion'), ('Laila', 'Ben Abderrahman'), ('Denise', 'Mascherini'), ('Nina', 'Septrita'), ('Paulina', 'Pokorna'), ('Ivana', 'Tomaic'), ('Agnieszka', 'Zak'), ('Yuliya', 'Lyndina'), ('Irina', 'Adetu'), ('Natasha', 'Hillyer'), ('Bo Ra', 'Kwak'), ('Yasmine', 'Sahyoun'), ('Sofi Helene', 'Weckman'), ('Tifanie', 'Treece'), ('I Hsuan', 'Hwang'), ('Eleonora', 'Sidjemileva'), ('Jenna', 'Webster'), ('Kunykei', 'Koichumananova'), ('Marrit', 'Boonstra'), ('Jenna May', 'Osborne'), ('Jacklyn', 'Lambert'), ('Iva', 'Buljubasic'), ('Irena', 'Pavlovic'), ('Radoslava', 'Serakova'), ('Laura', 'Bsoul'), ('Veronika', 'Ovcacikova'), ('Magdalena', 'Rybarikova'), ('Chloe', 'West'), ('Aleksandra', 'Stankovic'), ('Andrea', 'Remynse'), ('Anine Cornelius', 'Lovdal'), ('Gabriela', 'Gonzalez'), ('Kristiina', 'Eskola'), ('Galyna', 'Kosyk'), ('Yue', 'Wan'), ('Marcela Guimaraes', 'Bueno'), ('Katarina', 'Anic'), ('Katsarina', 'Zheltova'), ('Simone', 'Templeton'), ('Ramona', 'Erb'), ('Benedetta', 'Davato'), ('Valeria', 'Casillo'), ('Rebecca', 'Bran'), ('Amanda', 'Bran'), ('Ana Maria', 'Gherman'), ('Magdalena', 'Plucinski'), ('Fernanda', 'Hermenegildo'), ('Freya', 'Younes'), ('Viky', 'Nunez Fuentes'), ('Rocio', 'Galan'), ('Joana', 'Roda'), ('Erina', 'Nomiya'), ('Florentine', 'Wengler'), ('Jasmin', 'Mertens'), ('Stephanie', 'Macfarlane'), ('Ashley', 'Anderson'), ('Filipa', 'Ribeiro'), ('Laurianne', 'Henry'), ('Anja', 'Nowak'), ('Shiran', 'Ben Nun'), ('Catalina', 'Vigener'), ('Maud', 'Vigne'), ('Kehinde', 'Amusan'), ('Raquel', 'Pina'), ('Mao', 'Suzuki'), ('Daria', 'Petrovic'), ('In Young', 'Hwang'), ('Wen Tzu', 'Lai'), ('Bianca Ioana', 'Bonifate'), ('Rocio', 'Frausto'), ('Maria Gabriela', 'Linares'), ('Slavina', 'Kaplanska'), ('Patricia', 'La Rovere'), ('Sargam', 'Gupta'), ('Insa', 'Villnow'), ('Martina', 'Sebastiani'), ('Widhi', 'Setyorini'), ('Ksenia', 'Sidorova'), ('Tamara', 'Madjeric'), ('Julia', 'Goerges'), ('Laura', 'Van De Stroet'), ('Hania', 'Bouakel'), ('Daria', 'Babushkina'), ('Jasmin', 'Steinherr'), ('Patricia', 'Vollmeier'), ('Tatsiana', 'Kapshay'), ('Joana', 'Santiago'), ('Mariana', 'Gonzalez'), ('Catherine', 'Fall'), ('Lena', 'Litvak'), ('Amanat', 'Thind'), ('Franci', 'Betancourt'), ('Sandra', 'Wikstrom'), ('Stephanie', 'Sullivan'), ('Hilary', 'Barte'), ('Beatriz', 'Garcia Vidagany'), ('Patricia', 'Cortes'), ('Injie', 'Fawzy'), ('Jane', 'Melichar'), ('Julie', 'Uwague'), ('Alessandra', 'Ferrazzi'), ('Daiana', 'Bazzano'), ('Milica', 'Zivanovic'), ('Guillermina', 'Zukerman'), ('Raquel', 'Guede Estevez'), ('Chantal', 'Beetham'), ('Taylor', 'Marable'), ('Ellah', 'Nze'), ('Rose', 'Ojonimi'), ('Danira', 'Fabijanovic'), ('Sandra', 'Mente Ladanai'), ('Carolina', 'Petrelli'), ('Jennifer', 'Stevens'), ('Erika', 'Sema'), ('Lu', 'Guo'), ('Daniela', 'Castillo'), ('Franziska', 'Goetz'), ('Veronika', 'Kolarova'), ('Larissa', 'Ferreira Melo'), ('Natia', 'Gegia'), ('Arthi', 'Duraisamy'), ('Verena', 'Piccolo'), ('Saba', 'Aziz'), ('Jessica', 'Brouwer'), ('Ena', 'Shimomura'), ('Florencia', 'Molinero'), ('Carla', 'Caetano'), ('Ayu Fani', 'Damayanti'), ('Claudia', 'Wasilewski'), ('Daniela', 'Vukadinovic'), ('Wiem', 'Ben Sedrine'), ('Lynn', 'Philippe'), ('Anna', 'Boada Plade Llorens'), ('Michelle', 'Russ'), ('Julia', 'Moriarty'), ('Ji Hyun', 'Kim'), ('Tatiana', 'Silbereisen'), ('Ofelya', 'Poghosyan'), ('Yuliya', 'Trubachova'), ('Tiffany', 'Welcher'), ('Noelle', 'Hickey'), ('Serena', 'Strano'), ('Sara', 'Jamil'), ('Angelina', 'Gabueva'), ('Amoolya', 'Raghunath'), ('Nicoleta Ana Maria', 'Bara'), ('Tejashwi', 'Narayana'), ('Anukriti', 'Prasad'), ('Andra Elena', 'Voinea'), ('Mathilda', 'Engstrom'), ('Joanna', 'Kacprzyk'), ('Elizabeth', 'Akutsiya'), ('Magdalena', 'Tokarczyk'), ('Christina', 'Liles'), ('Sylwia', 'Huminska'), ('Anamaria Alexandra', 'Sere'), ('Yun Ling', 'Ng'), ('Musangu', 'Muchunga'), ('Manon', 'Veldhorst'), ('Katie', 'Orletsky'), ('Cameron', 'Hubbs'), ('Mary', 'Gambale'), ('Jennifer', 'Holmberg'), ('Natalia', 'Garay'), ('Ana Rosa', 'Cabeza Candela'), ('Joanna', 'Craven'), ('Melanie', 'Gomila Bengtsson'), ('Rym', 'Cherni'), ('Cameron', 'Ellis'), ('Mahault', 'De Claviere'), ('Sheena', 'Jain'), ('Volha', 'Duko'), ('Katerina', 'Kramperova'), ('Karolina', 'Domanski'), ('Dominika', 'Kocwin'), ('Sarah', 'Andrew'), ('Phillipa', 'Reakes'), ('Agnes', 'Szavay'), ('Ylva', 'Kaiser'), ('Cristina', 'Bala Abella'), ('Kristyna', 'Sramkova'), ('Maggie', 'Mello'), ('Erin', 'Billett'), ('Elne', 'Barnard'), ('Aleksandra', 'Malyarchikova'), ('Hila', 'Elster'), ('Andrea', 'Ferrari'), ('Lais', 'Souza'), ('Mia', 'Gordon'), ('Maria', 'Zlydnikova'), ('Vivian', 'Segnini'), ('Tegan', 'Edwards'), ('Martina', 'Caciotti'), ('Beate', 'Giller'), ('Ayushi', 'Sinha'), ('Lea Katharina', 'Jacob'), ('Shan Shan', 'Li'), ('Ewa', 'Kopczynska'), ('Michaella', 'Krajicek'), ('Alexandra', 'Glebova'), ('Whitney', 'Wilson'), ('Jacquelynn', 'Tang'), ('Sofia', 'Shapatava'), ('Olga', 'Ippolitova'), ('Andra Mihaela', 'Coprean'), ('Tiffany', 'Cornelius'), ('Simona', 'Struzzolino'), ('Joanne', 'Karaitiana'), ('Marianne', 'Van Oppen'), ('Noemie', 'Scharle'), ('Nikola', 'Vajdova'), ('Monika', 'Lalewicz'), ('Michaela', 'Kopacin'), ('Stefanie', 'Rath'), ('Julia', 'Browne'), ('Kristina', 'Radan'), ('Anais', 'Van Cauter'), ('Ruth', 'Sabbe'), ('Deborah', 'Armstrong'), ('Bettina', 'Mittermeier'), ('Alice', 'Bellicha'), ('Antonia', 'Kontozoudaki'), ('Jessica', 'Palma'), ('Paula', 'Hors Comadira'), ('Magdalena', 'Wiecha'), ('Xi', 'Lu'), ('Margarita', 'Spicin'), ('Maibel', 'Quintana'), ('Shuai', 'Zhang'), ('Fernanda', 'Ferreira'), ('Federica', 'Grazioso'), ('Noriko', 'Uehara'), ('Katarina', 'Barclay'), ('Nadine', 'Sabbagh'), ('Carlotta', 'Lehner'), ('Amanda', 'Marrow'), ('Florence', 'De Vrye'), ('Ekaterina', 'Jeritsheva'), ('Sonia', 'Klamczynska'), ('Victoria', 'Zotter'), ('Seo Kyung', 'Kang'), ('Regina', 'Kulikova'), ('Carmen', 'Lopez Sanchez'), ('Stefanie', 'Nunic'), ('Elizaveta', 'Tochilovskaya'), ('Eylul', 'Benli'), ('Maite', 'Gabarrus Alonso'), ('Laura', 'Manfredonia'), ('Sara', 'Nilsson'), ('Federica', 'Limone'), ('Ana Luiza', 'Ferreira'), ('Evgeniya', 'Rodina'), ('Megan', 'Garcia'), ('Marina', 'Melnikova'), ('Cecilia', 'Gratian'), ('Erika', 'Zanchetta'), ('Tanya', 'Stoimenova'), ('Yi Jing', 'Zhao'), ('Yanet', 'Blanco Puentes'), ('Maddie', 'Brooks'), ('Laura', 'Noguera Aparicio'), ('Tatyana', 'Ignatchenko'), ('Alja', 'Zec Peskiric'), ('Lucia', 'Sariscanova'), ('Martina', 'Agarici'), ('Penporn', 'Chantawannop'), ('Yu Xin', 'Miao'), ('Petra', 'Sunic'), ('Neus', 'Rodriguez Menendez'), ('Haruka', 'Suga'), ('Ellen', 'Barry'), ('Amy', 'Anstey'), ('Heinar', 'Boltea'), ('Aleksandra', 'Markovic'), ('Fleur', 'Goedkoop'), ('Manami', 'Hirata'), ('Wan Ting', 'Liu'), ('Doron', 'Muravnik'), ('Monika', 'Kochanova'), ('Yuki', 'Kusunose'), ('Stefania', 'Carrizo'), ('Abbie', 'Probert'), ('Ayaka', 'Ito'), ('Kaja', 'Podobnik'), ('Kirsten Andrea', 'Weedon'), ('Sona', 'Novakova'), ('Nuria', 'Cascon Lapido'), ('Sara', 'Perez Gonzalez'), ('Eugeniya', 'Pashkova'), ('Gabriela', 'Mejia Tenorio'), ('Monika', 'Hadvigerova'), ('Dominique', 'Wimmer'), ('Natalia', 'Guevara'), ('Amina', 'Rakhim'), ('Ashlee', 'Brown'), ('Si Si', 'Qiu'), ('Ellen', 'Linsenbolz'), ('Rebecca', 'Alessi'), ('Meera', 'Kantaria'), ('Chen', 'Liang'), ('Amandine', 'Cazeaux'), ('Gabriela', 'Vergara'), ('Gracia', 'Fuentes'), ('Ekaterina', 'Prozorova'), ('Romina', 'Palmisano'), ('Elena', 'Giurgiu Dorina'), ('Martina', 'Sallusti'), ('Jara', 'Ghadri'), ('Thavindra', 'Ekanayake'), ('Maria Fernanda', 'Alvarez Teran'), ('Giannina', 'Minieri'), ('Nikola', 'Matovicova'), ('Petra', 'Putnik'), ('Alexandra', 'Panova'), ('Maritza', 'Hernandez'), ('Vania', 'King'), ('Raluca', 'Olaru'), ('Nevena', 'Selakovic'), ('Florella', 'Moggia'), ('Sanjana', 'Kapur'), ('Agnieszka', 'Radwanska'), ('Charlotte', 'Soubrie'), ('Jillian', 'Oneill'), ('Adriana', 'Alvarez Tostado'), ('Steffi', 'Weterings'), ('Yasmin', 'Hamza'), ('Jenny', 'Drummond'), ('Pauline', 'Ribot'), ('Jessica', 'Gardefjord'), ('Julia Maria', 'Navarro Navarro'), ('Karoline', 'Steiro'), ('Marne', 'Roos'), ('Micaela', 'Hein'), ('Lara', 'Conrad'), ('Estefania', 'Plaza'), ('Paloma', 'Escobedo'), ('Vlada', 'Ekshibarova'), ('Karla', 'Gallardo'), ('Hanna', 'Andreyeva'), ('Tina', 'Pieger'), ('Laura', 'Milner'), ('Melissa', 'Ravestein'), ('Sara', 'Neto'), ('Carina', 'Weisser'), ('Raphaela', 'Chaves Borges'), ('April', 'Albertini'), ('Selina', 'Guns'), ('Hedda', 'Wolmarans'), ('Giulia', 'Gardani'), ('Brittany', 'Teei'), ('Florina', 'Nosca'), ('Mariella', 'Greschik'), ('Alexandra', 'Sakalaridi'), ('Federica', 'Dambrosio'), ('Sofi', 'Papadopoulou'), ('Valentina', 'Piccolo'), ('Conchita Corazon', 'Zoleta'), ('Julia', 'Cohen'), ('Gabriela', 'Vieira'), ('Zorana', 'Anastasijevic'), ('Linfeifei', 'Fan'), ('Mikaela', 'Hockman'), ('Celine', 'Rolly'), ('Mariya', 'Tverdikova'), ('Cristina', 'Sanchez Quintanar'), ('Karina', 'Venditti'), ('Natalia', 'Orlova'), ('Aline', 'Berkenbrock'), ('Elisaveta', 'Pironkova'), ('Fatima', 'El Allami'), ('Lalatiana', 'Randriamanantena'), ('Neha', 'Rana'), ('Komang Sri', 'Maryati'), ('Simonetta', 'Miori'), ('Joanna', 'Matuszczyk'), ('Farida', 'Karaieva'), ('Anna', 'Wishink'), ('Florence', 'Fleury'), ('Gabriela', 'Roux'), ('Katarina', 'Mlcochova'), ('Mona', 'Mansour'), ('Beatriz', 'Juan Miranzo'), ('Myriam', 'Sopel'), ('Christina', 'Tan'), ('Maria Daniela', 'Yanez'), ('Leonie', 'Guijt'), ('Ekaterina', 'Tsiklauri'), ('Sherazad', 'Benamar'), ('Valerie', 'Verhamme'), ('Sherazad', 'Reix'), ('Geanina', 'Mircea'), ('Anastasia', 'Petukhova'), ('Claire', 'Birnie'), ('Xenia', 'Tsilimigra'), ('Ivana', 'Culkovic'), ('Estelle', 'Guisard'), ('Anna', 'Fitzpatrick'), ('Carlota', 'Schwartz Caballe'), ('Ornella', 'Caron'), ('Daria', 'Razarenova'), ('Engela', 'Olivier'), ('Karina', 'Ahuja'), ('Stacey', 'Grant'), ('Rie', 'Koganei'), ('Aodhnait', 'Lombard'), ('Joanna', 'Szymczyk'), ('Sarai', 'Torres'), ('Patience', 'Onebamhoin'), ('Kelcy', 'Mckenna'), ('Maksymiliana', 'Wandel'), ('Anna', 'Geissler'), ('Navodi', 'De Zoysa'), ('Delia', 'Damaschin'), ('Yuriko', 'Sakai'), ('Jelena', 'Durisic'), ('Kamilia', 'Daya'), ('Anamika', 'Bhargava'), ('Kimberley', 'Ruxton'), ('Maya', 'Pitenina'), ('Helene', 'Auensen'), ('Shayna', 'Mcdowell'), ('Karolina', 'Navratilova'), ('Paulina', 'Luquin'), ('Evelyn', 'Ploner'), ('Ashley', 'Silva'), ('Dilara', 'Naibi'), ('Grace', 'Hannah'), ('Hui', 'Chen'), ('Catarina', 'Muller'), ('Prudence', 'Teitzel'), ('Elizabeth', 'Adams'), ('Zora', 'Vlckova'), ('Marlot', 'Meddens'), ('Letizia', 'Lardani'), ('Jessica', 'Aguilera'), ('Nicole', 'Vaidisova'), ('Klaudia', 'Malenovska'), ('Paulina', 'Velarde Magana'), ('Naomi', 'Cavaday'), ('Taja', 'Mohorcic'), ('Dania', 'Navarro'), ('Vishakha', 'Sheoran'), ('Josefin', 'Hjertquist'), ('Marina', 'Kojanova'), ('Rika', 'Tatsuno'), ('Abigail', 'Royston'), ('Paola', 'Cigui'), ('Jenny', 'Swift'), ('Alison', 'Shemon'), ('Nathalia', 'Rossi'), ('Ayana', 'Tajima'), ('Marie Pier', 'Huet'), ('Oana', 'Archip'), ('Fabiana', 'Chiaparini'), ('Ebelechukwu', 'Chukwuweteli'), ('Sylwia', 'Zagorska'), ('Vassiliki', 'Doriza'), ('Ana', 'Ruiz Fernandez'), ('Estelle', 'La Porte'), ('Maria Eugenia', 'Roca Recarey'), ('Verusa', 'Dias'), ('Marta', 'De Pablo Bota'), ('Jing Jing', 'Lu'), ('Ariane', 'Masschelein'), ('Mariaryeni', 'Gutierrez'), ('Dominika', 'Cibulkova'), ('Amra', 'Sadikovic'), ('Alessia', 'Bertoia'), ('Elizaveta', 'Titova'), ('Barbara', 'Rush'), ('Michaela', 'Ince'), ('Madona', 'Najarian'), ('Paola', 'Capella'), ('Marina', 'Ferreira'), ('Aleksandra', 'Razumova'), ('Brie', 'Whitehead'), ('Paulina', 'Mielewczyk'), ('Alessandra', 'Pennesi'), ('Lucia', 'Gatti'), ('Kimberly', 'Couts'), ('Samantha', 'Powers'), ('Stephanie', 'Jeanes'), ('Megan', 'Price'), ('Maya', 'Gaverova'), ('Olivia', 'Mislov'), ('Ezgi', 'Albayrak'), ('Tatsiana', 'Teterina'), ('Emma Sofia', 'Helisten'), ('Camille', 'Maisonnave'), ('Evelyn', 'Mayr'), ('Lauren', 'Jones'), ('Mirna', 'Marinovic'), ('Lydia', 'Lopez Lopez'), ('Maria Elena', 'Badillo'), ('Maria', 'Sinigaglia'), ('Xi Jing', 'Hong'), ('Bianca', 'Aboubakare'), ('Zina', 'Bretzel'), ('Ekaterina', 'Krylova'), ('Denise', 'Dy'), ('Elisabeth', 'Pleyer'), ('Ines', 'Santos'), ('Kristina', 'Doerr'), ('Loredana', 'Serbu'), ('Mia', 'Kasih'), ('Dorotea', 'Kraljevic'), ('Rayssa', 'Haddad'), ('Aleksandra', 'Madzik'), ('Lauren', 'Shumate'), ('Goele', 'Lemmens'), ('Agni', 'Stefanou'), ('Adina Maria', 'Gabor'), ('Mihaela', 'Giban'), ('Ji Hee', 'Lee'), ('Marina', 'Skvortsova'), ('Natasha', 'Swanepoel'), ('Estefiana', 'Greco'), ('Molly', 'Scott'), ('Wanjika', 'Ngaruiya'), ('Jennifer', 'Meredith'), ('Aleksandra', 'Kulikova'), ('Olivia', 'Matuszak'), ('Juliana', 'Alzate'), ('Prerana', 'Prathap'), ('Prathana', 'Prathap'), ('Eva', 'Pigova'), ('Mia', 'Sacca'), ('Rita', 'Bengelloun Touimy'), ('Nadira', 'Burikhodjaeva'), ('Salome', 'Chachkhunashvili'), ('Akshitha', 'Basavaraju'), ('Vanja', 'Galijasevic'), ('Alexandra', 'Dulgheru'), ('Lesia', 'Tsurenko'), ('Wing Yau Venise', 'Chan'), ('Daksha', 'Mulay'), ('Leticia', 'Demichelli'), ('Matilde', 'Herrera Govantes'), ('Patrycja', 'Chackiewicz'), ('Patricia', 'Veresova'), ('Jennifer', 'Yen'), ('Anna Giulia', 'Remondina'), ('Zoe', 'Bambridge'), ('Ah Ren', 'Han'), ('Lais', 'Ogata'), ('Natasha', 'Lotuffo'), ('Doris', 'Kuselj'), ('Adla', 'Mahic'), ('Ying Ying', 'Duan'), ('Maya', 'Kato'), ('Shweta', 'Kakhandki Gadigeppa'), ('Chloe', 'Mielgo Herrera'), ('Kanako', 'Ishida'), ('Jelena', 'Savic'), ('Giorgia', 'Pozzan'), ('Macarena', 'Rodriguez Capilla'), ('Vanja', 'Radunovic'), ('Ina', 'Kauppila'), ('Ana Lilyan', 'Guzman'), ('Timea', 'Bacsinszky'), ('Katharina', 'Killi'), ('Anahita', 'Jagtiani'), ('Melissa Rose', 'Orteza'), ('Stefania', 'Imolesi'), ('Raja Rajeshwari', 'Pamidimukkala Venkata'), ('Martina', 'Fratini'), ('Anna', 'Gorunovich'), ('Carolina', 'Garcia'), ('Ana Clara', 'Duarte'), ('Pei Ling', 'Tong'), ('Nazari', 'Urbina'), ('Laura', 'Morrill'), ('Tamsyn', 'Briscoe'), ('Rana', 'Zafer'), ('Francesca', 'Dubras'), ('Elena', 'Kazakova'), ('Kate', 'Antosik'), ('Ximena', 'Aguilar'), ('Mirna', 'Cicak'), ('Yoshimi', 'Kawasaki'), ('Shanki', 'Dandeniya'), ('Ioana', 'Boronea'), ('Emiko', 'Ito'), ('Ashley', 'Weinhold'), ('Anastasia', 'Revzina'), ('Marta', 'Arnes Cacho'), ('Sung Hee', 'Shin'), ('Alexandra', 'Derungs'), ('Michelle', 'Jlilati'), ('Mariana', 'Fernandez Larrandaburu'), ('Sabina', 'Warta'), ('Maria Paula', 'Bagnati'), ('Carolina', 'Bokenhans'), ('Jessica', 'Jackson'), ('Fernanda', 'Perrotta'), ('Ines', 'Pereira'), ('Tea', 'Faber'), ('Hana', 'Birnerova'), ('Milena', 'Tona'), ('Stephanie', 'Brown'), ('Nicole', 'Rottmann'), ('Julia', 'Huschke'), ('Tatiana', 'Illova'), ('Mirte', 'De Bakker'), ('Cristina', 'Valladares Nunez'), ('Stanislava', 'Cozirscaia'), ('Tanya', 'Germanlieva'), ('Merritt', 'Emery'), ('Shani', 'Arnon'), ('Estefania', 'Donnet'), ('Anthea', 'Murfet'), ('Galina', 'Vishnikina'), ('Sirui', 'He'), ('Alona', 'Fomina'), ('Saori', 'Miyamoto'), ('Nina', 'Pantic'), ('Elizaveta', 'Zaytseva'), ('Trelsie', 'Sadler'), ('Reka', 'Zsilinszka'), ('Subbadharmi', 'Sundaram'), ('Appollonia', 'Melzani'), ('Hui Chi', 'Huang'), ('Christala', 'Andrews'), ('Natalia', 'Cheng'), ('Latifah', 'Al Sayed Omar'), ('Agatha', 'Zmijak'), ('Kinnie', 'Laisne'), ('Elena', 'Jetcheva'), ('Kamonwan', 'Thongsaner'), ('Nancy', 'El Molla'), ('Erina', 'Kikuchi'), ('Linda', 'Hricistova'), ('Hannah', 'Fick'), ('Alisa', 'Kleybanova'), ('Paula', 'Dinuta'), ('Florence', 'Na'), ('Ashmitha', 'Easwaramurthi'), ('Katia', 'Viera Erbach'), ('Diana', 'Narzikulova'), ('Andrea', 'Rebrova'), ('Paula Catalina', 'Robles Garcia'), ('Machiko', 'Shigefuji'), ('Kate', 'Zueva'), ('Holly', 'Cao'), ('Ondine', 'Trompette'), ('Anastasia', 'Meglinskaya'), ('Ghizlane', 'Hatim'), ('Vesna', 'Dolonc'), ('Elina', 'Gasanova'), ('Chu', 'Chu'), ('Dania', 'Musina'), ('Eva', 'Kadlecova'), ('Daniela', 'Amelunge'), ('Kristina', 'Bozinovska'), ('Taylor', 'Ormond'), ('Manumea', 'Durie'), ('Emily', 'Fraser'), ('Roxane', 'Vaisemberg'), ('Aude', 'Vermoezen'), ('Mary', 'Liu'), ('Andra Edith', 'Marinescu'), ('Ivana', 'Belejova'), ('Suncica', 'Strkic'), ('Carolin', 'Weikard'), ('Maria Anna', 'Koutaniti'), ('Kim', 'Van Der Horst'), ('Petra', 'Vogel'), ('Alexandra', 'Tufa'), ('Maria Luz', 'Perlini'), ('Corinna', 'Dentoni'), ('Majdouline', 'Akrate'), ('Chika', 'Terasawa'), ('Kateryna', 'Nezhura'), ('Tshidiso', 'Mosinyi'), ('Victoria', 'Azarenka'), ('Sousan', 'Massi'), ('Laura', 'Sadria'), ('Rebecka', 'Persson'), ('Denise', 'Muresan'), ('Mikaela', 'Martinez'), ('Carla', 'Lorenzo Jodar'), ('Vana', 'Sutalo'), ('Denise', 'Kirbijikian'), ('Hulya', 'Esen'), ('Maja', 'Sujica'), ('Laura', 'Morales'), ('Sesil', 'Karatantcheva'), ('Karolyn', 'Grymel'), ('Erika', 'Perez'), ('Ajla', 'Behram'), ('Dena', 'Laadan'), ('Melissa', 'Garcia'), ('Lauren', 'Hankle'), ('Mariana', 'Duque Marino'), ('Ia', 'Jikia'), ('Valentina', 'Ramirez'), ('Alessandra', 'Caprara'), ('Anna', 'Simkova'), ('Imane', 'Toubal'), ('Andrea', 'Kwong'), ('Martina', 'Gregoric'), ('Krystina', 'Titz'), ('Saori', 'Nakamura'), ('Irene', 'Santos Bravo'), ('Lynn', 'Blau'), ('Barbora', 'Vykydalova'), ('Sara', 'Secco'), ('Yung Jan', 'Chan'), ('Maria Laura', 'Scapigliati'), ('Megan', 'Toole'), ('Annie', 'Goransson'), ('Arianna', 'Magagnoli'), ('Yevgeniya', 'Rezepkina'), ('Natalia', 'Gonzalez Martinez'), ('Kristen', 'Rafael'), ('Anna', 'Mydlowska'), ('Vivien', 'Silfany Tony'), ('Silvia', 'Bastici'), ('Ai', 'Yamamoto'), ('Mariya', 'Kovaleva'), ('Roxanne', 'Ellison'), ('Alexandra', 'Kovacs'), ('Melanie', 'Delsart'), ('Lucia', 'Huber'), ('Maria', 'Christensen'), ('Astrid', 'Besser'), ('Kerstin', 'Peckl'), ('Jennifer', 'Furnari'), ('Nicole', 'Smith'), ('Kari', 'Wig'), ('Lisa', 'Sutton'), ('Zlatka', 'Petrova'), ('Paola', 'Orozco'), ('Alexandra', 'Odell Michels'), ('Myrte', 'Molenveld'), ('Sandra', 'Fornes Marques'), ('Varatchaya', 'Wongteanchai'), ('Ana Maria', 'Constantinescu'), ('Sofia', 'Barletta'), ('Anastasia', 'Zhovtiuk'), ('Bolan', 'Tarkoe'), ('Natsumi', 'Yokota'), ('Oana Alexandra', 'Stanica'), ('Maria', 'Barboutova'), ('Marietta', 'Bigus'), ('Ines', 'Kreilinger'), ('Alexa', 'Glatch'), ('Natalia', 'Semenenko'), ('Michelle', 'Brycki'), ('Lenka', 'Dzygovska'), ('Yulia', 'Kulikova'), ('Meli', 'Garcia Truchado'), ('Neha Sujit', 'Nair'), ('Annabel', 'Bann'), ('Bin Jie', 'Luo'), ('Manana', 'Shapakidze'), ('Jennifer', 'Rabot'), ('Guadalupe', 'Moreno'), ('Joanna', 'Zwirbulis'), ('Bhavani', 'Tirumurti'), ('Stephanie', 'Weinstein'), ('Jessica', 'Young'), ('Eliza Adriana', 'Matache'), ('Nicky', 'Van Dyck'), ('Nivea', 'Bezich Cavinta'), ('Lucie', 'Sipkova'), ('Katalin', 'Szekely'), ('Lacey Jo', 'Coleman'), ('Michaela', 'Silesova'), ('Sabine', 'Lisicki'), ('Alessandra', 'Di Batte'), ('Zuzana', 'Michalicova'), ('Alina', 'Gershman'), ('Lauren', 'Greco'), ('Galina', 'Semenova'), ('Romina', 'Puglia'), ('Xenia', 'Samoilova'), ('Anna', 'Larkina'), ('Ana Regina', 'Buenviaje'), ('Line', 'Al Ghannam'), ('Heatherm', 'Steinbauer'), ('Mia', 'Drobnjak'), ('Jane', 'Huh'), ('Ramona', 'Sarba'), ('Szu Yu', 'Lin'), ('Yi', 'Yang'), ('Maria', 'Guerreiro'), ('Antonia', 'Fohse'), ('Cagla', 'Buyukakcay'), ('Angelica', 'Torres'), ('Nadina', 'Secerbegovic'), ('Tracy', 'Castillo'), ('Maria Eugenia', 'Torres'), ('Ana', 'Bezjak'), ('Lauren', 'Albanese'), ('Gabriela', 'Rangel'), ('Yukari', 'Kishiro'), ('Mihaela Florina', 'Bunea'), ('Jilke', 'Nelord'), ('Insa', 'Wickmann'), ('Tinusha', 'Sivaganam'), ('Yoko', 'Naito'), ('Alexandra', 'Levianska'), ('Camila', 'Munoz Quintanilla'), ('Tatiana', 'Varela'), ('Madalina', 'Florea'), ('Miki', 'Ueno'), ('Ana', 'Savic'), ('Sara', 'Celma Boix'), ('Joanna', 'Mather'), ('Alexandra', 'Ulbrichtova'), ('Nadine', 'Fahoum'), ('Benedetta', 'Sabatini'), ('Hanna', 'Malakhovich'), ('Kun Hee', 'Kim'), ('Courtney', 'Spafford'), ('Yuri', 'Gonto'), ('Michaela', 'Pochabova'), ('Sharani', 'Gaini'), ('Priscila', 'Martinez'), ('Yuan', 'Jia'), ('Marina', 'Yudanov'), ('Andrea', 'Strasakova'), ('Sara', 'Julio'), ('Tuvana', 'Denizci'), ('Maria', 'Mosolova'), ('Sophia', 'Bergner'), ('Yanina', 'Wickmayer'), ('Shivika', 'Burman'), ('Yana', 'Shulaeva'), ('Niroshita', 'Madanala'), ('Abigail', 'Olivier'), ('Eve', 'Castaing'), ('Katie', 'Welch'), ('Ratchaya', 'Chaichanachaicharn'), ('Denisa', 'Chiriacu'), ('Anouk', 'Tigu'), ('Maria Alexandra', 'Maldonado'), ('Julia', 'Sagan'), ('Ling', 'Zhang'), ('Michaela', 'Kucharova'), ('Fumi', 'Kawatoko'), ('Kir', 'Kemp'), ('Amanda', 'Elliott'), ('Farwa', 'Husain'), ('Alicia', 'De La Capilla'), ('Bing Jie', 'Luo'), ('Natalie', 'Pluskota'), ('Sarah', 'Behbehani'), ('Parija', 'Maloo'), ('Ariane', 'Maack'), ('Madlen', 'Kadur'), ('Renee', 'Binnie'), ('Marina', 'Nicolas Chueca'), ('Kairangi', 'Vano'), ('Andrea', 'Hernandez'), ('Isabel', 'Mas Breto'), ('Veronika', 'Sepp'), ('Niamh', 'Coveney'), ('Veronica Ruo Qi', 'Li'), ('Clarisse', 'Baca'), ('Yuki', 'Hasegawa'), ('Emelyn', 'Starr'), ('Nungnadda', 'Wannasuk'), ('Debora', 'Castany Muniente'), ('Uthumporn', 'Pudtra'), ('Remeice', 'Ellis'), ('Rana', 'Ramez'), ('Inge', 'Spronk'), ('Karina', 'Kedzo'), ('Ayumi', 'Okuma'), ('Kotomi', 'Takahata'), ('Katherine', 'Hoepelman'), ('Jia Jing', 'Lu'), ('Lara', 'Albini'), ('Malgorzata', 'Glodkowska'), ('Natalia', 'Glodkowska'), ('Tereza', 'Belblova'), ('Wei Ping', 'Lee'), ('Ginebra', 'Mostajo Estrada'), ('Juliet', 'Bocklet'), ('Aya', 'Sato'), ('Shinobu', 'Kiribayashi'), ('Shalini', 'Sahoo'), ('Andrea', 'Oates'), ('Jodie', 'Mckinnon'), ('Dominika', 'Zaprazna'), ('Chi Fan', 'Liu'), ('Amel', 'Benhaj'), ('Katarina', 'Lerga'), ('Maria', 'Sanchez'), ('Tiffany', 'Kurniawan'), ('Natasa', 'Zoric'), ('Asmaa', 'Salah Hassan'), ('Claire', 'Bartlett'), ('Sara', 'Marcionni'), ('Alexandra', 'Dachos'), ('Stephanie', 'Theiler'), ('Monique', 'Lynch'), ('Linda', 'Aqvist'), ('Anna', 'Agamennone'), ('Miyu', 'Date'), ('Marta', 'Ruiz Fernandez De Castro'), ('Samantha', 'Noble'), ('Ester', 'Baschirotto'), ('Caroline', 'Beaulieu'), ('Elisa', 'Sarmiento Aranda'), ('Natalie', 'Fehse'), ('Maria', 'Prishlyak'), ('Shilpi', 'Jaiswal'), ('Margaryta', 'Pashket'), ('Judit', 'Nagy'), ('Vivian', 'Cassimer'), ('Natalie', 'Kolganova'), ('Valeria', 'Petrovich'), ('Anastasia', 'Ulikhina'), ('Amy', 'Sargeant'), ('Nives', 'Pavlovic'), ('Chelsea', 'Preeg'), ('Grace', 'Leake'), ('Cassandra', 'Herzberg'), ('Dominice', 'Ripoll'), ('Anastasia', 'Kharchenko'), ('Anastasia', 'Malhotra'), ('Ioana Alexandra', 'Oprea'), ('Latrell', 'Reed'), ('Ksenia', 'Palkina'), ('Pairin', 'Panjasilpa'), ('Mika', 'Urbancic'), ('Briggitt', 'Marcovich'), ('Amparo', 'Botella Boix'), ('Ludovica', 'Perri'), ('Elisa', 'Peth'), ('Ioana Alexandra', 'Bara'), ('Paloma', 'Navarro Montes De Oca'), ('Arina', 'Rodionova'), ('Kelly', 'Gebert'), ('Julia', 'Livotova'), ('Karla', 'Miranda'), ('Irina', 'Letseva'), ('Amira', 'Benaissa'), ('Tzu Chen', 'Hsu'), ('Cristina', 'Vasco'), ('Naoko', 'Suzuki'), ('Efrat', 'Mishor'), ('Caitlyn', 'Baines'), ('Margarita', 'Vasileva'), ('Kelsey', 'Anonsen'), ('Maria', 'Komissarova'), ('Yu Chu', 'Juan'), ('Nikki', 'Prosser'), ('Natasha', 'Marks'), ('Keri', 'Wong'), ('Ester', 'Masuri'), ('Ingrid Esperanza', 'Vargas Calvo'), ('Sanne', 'Bakker'), ('Ana', 'Perlain'), ('Katerina', 'Vankova'), ('Simone', 'Kalhorn'), ('Darya', 'Nakidaylo'), ('Melinda', 'Akerbrant Bengtsson'), ('Victoria', 'Ford'), ('Julia', 'Glushko'), ('Valeria', 'Pulido Velasco'), ('Caroline', 'Magnusson'), ('Ece', 'Firat'), ('Caroline', 'Stevens'), ('Victoria', 'Brook'), ('Tammi', 'Patterson'), ('Marcela', 'Fonseca Villarreal'), ('Carmen', 'Lopez Rueda'), ('Julia', 'Osmolets'), ('Tamara', 'Dobrovolna'), ('Ni', 'Zhou'), ('Lindsey', 'Hardenbergh'), ('Laura', 'Gilbert'), ('Ceara', 'Oneill'), ('Andrea', 'Yacaman'), ('Yoon Young', 'Jeong'), ('Yi Ju', 'Chen'), ('Dan Ni', 'Jiang'), ('Jennifer', 'Allan'), ('Irina Alexandra', 'Paraschiv'), ('Alina', 'Petras'), ('Maria', 'Bru Ballara'), ('Jamie', 'Hampton'), ('Kristy', 'Frilling'), ('Saori', 'Oda'), ('Sindy', 'Lochon'), ('Bianca', 'Spinassi'), ('Jovana', 'Petrov'), ('Stefana', 'Petrov'), ('Ghizlene', 'Douballah'), ('Thi Tam Hao', 'Tran'), ('Caroline', 'Lilley'), ('Yanisleidis', 'Fernandez'), ('Marina', 'Canals Bennassar'), ('Alexandria', 'Walters'), ('Haruka', 'Terashi'), ('Elitsa', 'Mileva'), ('Maria', 'Shalaeva'), ('Patricia', 'Salles Rousseau Guedes'), ('Stefi', 'Gjine'), ('Janine', 'Weinreich'), ('Roana', 'Schiopu'), ('Zhanna', 'Panfilkina'), ('Burce', 'Kurkan'), ('Teona', 'Tsertsvadze'), ('Marcela', 'Rivero'), ('Nina', 'Vulovich'), ('Jin', 'Huang'), ('Mariam', 'Kurdadze'), ('Kristina', 'Bogacheva'), ('Stacey', 'Lee'), ('Ramona', 'Czakon'), ('Juliana', 'Moscoso'), ('Alison', 'Bai'), ('Shiho', 'Akita'), ('Regina', 'Husak'), ('Emma', 'Smith'), ('Tatiana', 'Bua'), ('Shiori', 'Araki'), ('Antonia', 'Kolovou'), ('Carolina', 'Delgado'), ('Zhi Xian', 'Guo'), ('Dayna', 'Grazette'), ('Meutia', 'Sabrina'), ('Trudie', 'Du Toit'), ('Andjela', 'Kankaras'), ('Alejandra', 'Gamboa'), ('Paola', 'Villalon'), ('Alize', 'Cornet'), ('Chu Xian', 'Huang'), ('Laura Zsofia', 'Biro'), ('Stephanie', 'Parker'), ('Mariana', 'Diaz De Leon'), ('Risa', 'Hasegawa'), ('Zuzana', 'Zlochova'), ('Valentina', 'Novelo'), ('Nina', 'Zander'), ('Astrid', 'Thomsen'), ('Mireia', 'Recasens Horta'), ('Madeleine', 'Dax'), ('Julie', 'Verdy'), ('Kai Lin', 'Zhang'), ('Ya Ying', 'Wang'), ('Dilyara', 'Saidkhodjaeva'), ('Marina', 'Takimura'), ('Yana', 'Kireeva'), ('Esther', 'Scheirlynck'), ('Aya', 'Minokoshi'), ('Stephanie', 'Herz'), ('Bridget', 'Healy'), ('Anastasia', 'Kontratevidi'), ('May', 'El Wardany'), ('Daria', 'Tuaeva'), ('Denisa', 'Dumitrescu'), ('Eirini', 'Georgatou'), ('Chloe', 'Jones'), ('Daniela', 'Cociorba'), ('Olivia', 'Smith'), ('Martina', 'Granatelli'), ('Meng', 'Liu'), ('Chane', 'Hines'), ('Anna', 'Tatishvili'), ('Marta', 'Espigado Delgado'), ('Lavinia', 'Sereteanu'), ('Chiao Fang', 'Lo'), ('Yagmur Basak', 'Gone'), ('Laura', 'Moll Bagur'), ('Alena', 'Nogolova'), ('Lara', 'Rafful'), ('Alejandra', 'Garcia'), ('Christina', 'Seib'), ('Anastasia', 'Balyuk'), ('Rachel', 'Houpapa'), ('Mu Ying', 'Chen'), ('Zi Jun', 'Yang'), ('Rosalia', 'Alda'), ('Mia', 'Liimatainen'), ('Fabiana', 'Palcic'), ('Abigail', 'Greif'), ('Rachel', 'Manasse'), ('Andrea Fernanda', 'Flores'), ('Natascha', 'Kennis'), ('Daniela', 'Islamaj'), ('Deisy', 'Bolivar Espinosa'), ('Stephanie', 'Vogt'), ('Mara', 'Zovko'), ('Dwi', 'Ariyana'), ('Nina', 'Sertic'), ('Ekaterina', 'Zapadalova'), ('Natalie', 'Barbir'), ('Natalia', 'Lozano Anton'), ('Julia', 'Gavenko'), ('Ksenija', 'Grinshpun'), ('Teresa', 'Araujo'), ('Anastasia', 'Usova'), ('Paula', 'Jaime Agramon'), ('Yulia', 'Solonitskaya'), ('Xuan Yu', 'Guo'), ('Marija', 'Mirkovic'), ('Alice', 'Tisset'), ('Sasirin', 'Borwornchokchai'), ('Luiza', 'Coman'), ('Martha', 'Sanchez'), ('Daniela', 'Carp'), ('Shivani', 'Mysore Sreekantiah'), ('Chen', 'Astrogo'), ('Mariya', 'Ryzhova'), ('Maryna', 'Kariuk'), ('Kelly', 'Couturier'), ('Sara', 'Czubak'), ('Anastasia', 'Butcovscaia'), ('Naomi', 'Broady'), ('Paula', 'Alvarez Pino'), ('Mariana', 'Demichelli Vergara'), ('Justina', 'Derungs'), ('Melanie', 'Delannoy'), ('Maria Emilia', 'Ponton Caamano'), ('Antonia', 'Smallbone'), ('Ruo Nan', 'Zhang'), ('Esmira', 'Gheisary'), ('Artijeta', 'Goxhuli'), ('Ai', 'Taira'), ('Busra', 'Demirtas'), ('Michelle', 'Schroeder'), ('Yuuki', 'Tanaka'), ('Hye Jin', 'Byun'), ('Arletis', 'Fernandez'), ('Aliaa', 'Kamal'), ('Roberta', 'Gerovac'), ('Petra', 'Kvitova'), ('Kara', 'Knight'), ('Qian', 'Wang'), ('Stefanie', 'Voegele'), ('Cristina Madalina', 'Stancu'), ('Judith', 'Collado'), ('Claudine', 'Paulson'), ('Ayumi', 'Morita'), ('Juliette', 'Coupez'), ('Sophie', 'Proctor'), ('Yue Yue', 'Hu'), ('Ivana', 'Milutinovic'), ('Elena', 'Nartsissova'), ('Lisa', 'Weidenbruck'), ('Katharina', 'Brown'), ('Anita', 'Paliiska'), ('Dinali', 'De Silva'), ('Maureen', 'Rielley'), ('Mccall', 'Jones'), ('Eugenia', 'Vertesheva'), ('Marta', 'Rodriguez Carbajo'), ('Renee', 'Reinhard'), ('Parvathy', 'Vijayan'), ('Inga', 'Audrina'), ('Oriana', 'Escalante'), ('Olfa', 'Dhaoui'), ('So Hyun', 'Bae'), ('Julia', 'Chernyaeva'), ('Lara', 'Pujol Rotger'), ('Roberta', 'Greco'), ('Anastasia', 'Wagner'), ('Kamolnadda', 'Thumrongluck'), ('Ekin', 'Koca'), ('Leticia', 'Costas'), ('Farah', 'Abougeib Selo'), ('Martina', 'Erceg'), ('Kateryna', 'Byelcheva'), ('Sandra', 'Dynka'), ('Paola', 'Calderon'), ('Sofiko', 'Sharangia'), ('Kirsten', 'Magi'), ('Sofia', 'Vignau'), ('Emily', 'Zanussi'), ('Iveta', 'Guneva'), ('Laura', 'Babet'), ('Huan', 'Li'), ('Charlotte', 'Bossy'), ('Mariana', 'Levova'), ('Ji Hye', 'Shin'), ('Yuliya', 'Kalabina'), ('Janina', 'Toljan'), ('Courtney', 'Clayton'), ('Maria', 'Bayon'), ('Lisa', 'Brinkmann'), ('Stephanie', 'Kent'), ('Erin', 'Wilbert'), ('Hitomi', 'Saito'), ('Anabel', 'Pollan'), ('Tamara', 'Stojkovic'), ('Maria Paula', 'Hernandez'), ('Sandra', 'Podolak'), ('Sandra', 'Roma'), ('Paloma', 'Diaz Sada'), ('Malena', 'Gordo'), ('Lisa', 'Wagner'), ('Dredi Inia', 'Ghinda'), ('Bianca', 'Dumitrascu'), ('Amitha', 'Arudpragasam'), ('Pavla', 'Smidova'), ('Martina', 'Trierweiler'), ('Montserrat', 'Blasco Fernandez'), ('Madison', 'Brengle'), ('Louise', 'Grangette'), ('Carlota', 'Calve Munoz'), ('Na Ri', 'Kim'), ('Nikolina', 'Dominikovic'), ('Lillian', 'Aviles'), ('Petra', 'Mokra'), ('Harshini', 'Reddy'), ('Genevieve', 'Lorbergs'), ('Aleksandra', 'Zawadzka'), ('Alexandra', 'Martin Sanchez'), ('Juan Rosalia', 'Tejoprayitno'), ('Sorana', 'Cirstea'), ('Martina', 'Santoni'), ('Frederike', 'Putthoff'), ('Rosaura', 'Ramirez Vega'), ('Ekaterina', 'Pushkareva'), ('Kana', 'Aoki'), ('Elitsa', 'Kostova'), ('Julie', 'Herve'), ('Hayley', 'Ericksen'), ('Anja', 'Vreg'), ('Niltooli', 'Wilkins'), ('Nina', 'Mujezinovic'), ('Anastasija', 'Sevastova'), ('Michelle', 'Suarez'), ('Jessy', 'Rompies'), ('Deyanirr', 'Solorio'), ('Diana Madalina', 'Zainea'), ('Marina', 'Lazic'), ('Carolyn', 'Mcveigh'), ('Naa Shika', 'Adu'), ('Denisa', 'Dolejsova'), ('Ayse Ece', 'Yavuz'), ('Barbora', 'Matusova'), ('Bibiana', 'Almeida'), ('Katarina', 'Gajic'), ('Martyna', 'Majewska'), ('Ine', 'Nowe'), ('Madalina', 'Lupu'), ('Sladjana', 'Saveljic'), ('Manuela', 'Pietzuch'), ('Marlena', 'Pietzuch'), ('Carlista', 'Mohammed'), ('Jade', 'Windley'), ('Laura', 'Pola'), ('Krista', 'Damico'), ('Aleksandra', 'Djokic'), ('Alena', 'Luef'), ('Fabienne', 'Holz'), ('Luana Georgiana', 'Rednic'), ('Lauren', 'Mchale'), ('Andrea', 'Berkova'), ('Shauna', 'Morgan'), ('Kerstin', 'Kreis'), ('Stella', 'Papaspyrou'), ('Sushrutha', 'Reddy Chintala'), ('Alison', 'Ramos'), ('Simona', 'Synkova'), ('Dania Bianca', 'Payer'), ('Fatima Zorah', 'Bouabdallah'), ('Sybille', 'Khayat'), ('Kristi', 'Boxx'), ('Paula', 'Appezzato'), ('Nadia', 'Lalami'), ('Fiona', 'Gracia Tjipto'), ('Sonja', 'Molnar'), ('Lisa', 'Summerer'), ('Monika', 'Sirilova'), ('Marina', 'Sato'), ('Aimee', 'Jarratt'), ('Sarah', 'Makki'), ('Cristiana', 'Narchi'), ('Nicole', 'Stanziola'), ('Carolin', 'Kottutz'), ('Jade', 'Curtis'), ('Janna', 'Hildebrand'), ('Alexandra', 'Cadantu'), ('Sarah', 'Jones'), ('Irina', 'Falconi'), ('Klio', 'Manolopoulou'), ('Syna', 'Kayser'), ('Keilly', 'Ulery'), ('Stephanie', 'Scimone'), ('Julia', 'Wais'), ('Dragana', 'Pojuzina'), ('Andreea Daniela', 'Georgescu'), ('Jane', 'Sushkova'), ('Radhika', 'Jadhav'), ('Carissa', 'Aboubakare'), ('Carolina', 'De Los Santos'), ('Chinami', 'Ogi'), ('Zina', 'Monteiro'), ('Andrea', 'Rivera'), ('Salome', 'Ugrekhelidze'), ('Hiromi', 'Takeuchi'), ('Gabriela', 'Barreto'), ('Julia', 'Spiridonova'), ('Galina', 'Mihaylova'), ('Yingying', 'Xi'), ('Adriana', 'Pereira'), ('Federica', 'Di Sarra'), ('Amanda', 'Carreras'), ('Khristina', 'Kazimova'), ('Mika', 'Morimoto'), ('Aleksandra', 'Krupina'), ('Martina', 'Balogova'), ('Emily', 'Wolf'), ('Marie Claude', 'Ndzoudja'), ('Deepna', 'Vazirani'), ('Melanie', 'Klaffner'), ('Begona', 'Garcia Soto'), ('Kristina', 'Kucova'), ('Katharina', 'Negrin'), ('Dina', 'El Farouk'), ('Sandra', 'Soler Sola'), ('Rebeca', 'Delgado Gerardo'), ('Katarina', 'Poljakova'), ('Manon', 'Arnaud'), ('Claudia', 'Franze'), ('Alina', 'Tseplukhova'), ('Jocelyn', 'Ffriend'), ('Polina', 'Dzyuba'), ('Petra', 'Babakova'), ('Irina', 'Khatsko'), ('Marsela', 'Gunawan'), ('Vivien', 'Laszloffy'), ('Daniela Alexandra', 'Ilcu'), ('Bianca', 'Schlumberger'), ('Carla', 'Beltrami'), ('Karola', 'Diaconescu'), ('Xinyun', 'Han'), ('Erin', 'Troedson'), ('Ericka', 'Penaranda'), ('Alessa', 'Waibel'), ('Achiraya', 'Sriprome'), ('Ines', 'Ferrer Suarez'), ('Ekaterina', 'Komarova'), ('Shiho', 'Otake'), ('Rieke', 'Honiball'), ('Ekaterina', 'Lukomskaya'), ('Claudia', 'Hidalgo'), ('Elizabeth', 'Ullathorne'), ('Olivia', 'Howlett'), ('Yera', 'Campos Molina'), ('Magdalena', 'Smejova'), ('Franziska', 'Goettsching'), ('Sophia', 'Mulsap'), ('Andrea', 'Quintana'), ('Daniela', 'Noceto'), ('Laura', 'Claus'), ('Nadja', 'Gilchrist'), ('Fabiana', 'Mersan'), ('Hanna', 'Kapustka'), ('Plamena', 'Kurteva'), ('Fernanda', 'Dias'), ('Shinann', 'Featherston'), ('Christina', 'Scherndl'), ('Julia', 'Klackenberg'), ('Zeljka', 'Gavrilovic'), ('Stephany', 'Chang'), ('Anastasia', 'Bukhanko'), ('Carolina', 'Larco'), ('Edyta', 'Cieplucha'), ('Lisa', 'Jamais'), ('Silvia', 'Cevoli'), ('Nelly', 'Ciolkowski'), ('Zaruhi', 'Harutyunyan'), ('Priscilla', 'Heise'), ('Antonela', 'Marincic'), ('Veronika', 'Ciganikova'), ('Nicole', 'Riner'), ('Haruka', 'Naito'), ('Valentina', 'Fauviau'), ('Gia', 'Mcknight'), ('Lara', 'Meccico'), ('Yolanda', 'Nieto'), ('Marina', 'Gallo'), ('Anastasia', 'Pivovarova'), ('Katarina', 'Marackova'), ('Unnati', 'Purushotham'), ('Yoshiko', 'Koizumi'), ('Yi Run', 'Han'), ('Ksenia', 'Lykina'), ('Magda', 'Okruashvili'), ('Alla', 'Aleksandrova'), ('Joany', 'Pontjodikromo'), ('Alessia', 'Bianchi'), ('Orian', 'Ben Haim'), ('Yukari', 'Nakashima'), ('Veronika', 'Sigutova'), ('Abigail', 'Guthrie'), ('Nathalie', 'Elgales'), ('Kelly', 'Irving'), ('Caitlin', 'Steel'), ('Kateryna', 'Yergina'), ('Sitong', 'Yan'), ('Anna', 'Voronkova'), ('Marcela', 'Gomez'), ('Eva Maria', 'Altenburger'), ('Lucia Ioana', 'Crisan'), ('Andreea Roxana', 'Vaideanu'), ('Marcela', 'Cuderman'), ('Martha V', 'Blakely'), ('Maria De Los Angeles', 'Cardenas'), ('Giulia', 'Zambaiti'), ('Petra', 'Krejsova'), ('Daria', 'Novosad'), ('Yi Ching', 'Chen'), ('Mayumi', 'Seki'), ('Diana', 'Viteri'), ('Giorgia', 'Sampietro'), ('Erica', 'Krisan'), ('Alison', 'Riske'), ('Maria Luiza', 'Craciun'), ('Alisa', 'Buslayeva'), ('Omlata Rai', 'Kumari'), ('Julia', 'Thiem'), ('Larn', 'Mcshane'), ('Ayano', 'Nakamura'), ('Madeleine', 'Saari Bystrom'), ('Jeannine', 'Prentner'), ('Viet Ha', 'Ngo'), ('Carolina', 'Kubicska'), ('Tina', 'Zimmermann'), ('Dhara Bharat', 'Thakor'), ('Trudy Gine', 'Amoranto'), ('Carla', 'Lindlar'), ('Maria Jose', 'Arechavaleta'), ('Claudia Marcela', 'Silva Aragon'), ('Caroline', 'Wozniacki'), ('Mona', 'Barthel'), ('Lisa Maria', 'Reichmann'), ('Yaimaris', 'Paterson Crespo'), ('Anastasia', 'Grymalska'), ('Ivette', 'Lopez'), ('Inna', 'Sokolova'), ('Astrid', 'Quintero'), ('Aziza', 'Butoyi'), ('Camila', 'Bernal'), ('Alize', 'Lim'), ('Audrey', 'Van Wolde'), ('Veronica', 'Garcia Herrera'), ('Mallory', 'Cecil'), ('Claudia', 'Giovine'), ('Leyla Esther', 'Cabrera'), ('Angela', 'Roesler'), ('Maria Cristina', 'Selis'), ('Karen', 'Filippou'), ('Ana', 'Belzunce Crompin'), ('Miku', 'Bando'), ('Breanna', 'Tilly'), ('Nahoko', 'Tanaka'), ('Maria Fernanda', 'Macedo'), ('Ionela Andreea', 'Iova'), ('Jana', 'Jandova'), ('Ioana', 'Ivan'), ('Vivian', 'Janecki'), ('Marina', 'Lysenko'), ('Mai', 'Iwasaki'), ('Lorena', 'Piedras'), ('Martina', 'Vitulli'), ('Jenny', 'Claffey'), ('Viktoriya', 'Semyrodenko'), ('Poojashree', 'Venkatesha'), ('Wen Bo', 'Wang'), ('Iuliana', 'Oante'), ('Renuka', 'Keswani'), ('Shao Fang', 'Ong'), ('Barbara', 'Lormeau'), ('Courtney', 'Byron'), ('Vanessa', 'Boey'), ('Betty', 'Dautriat'), ('Kalinina', 'Sandoval'), ('Chang', 'Liu'), ('Chinatsu', 'Maeda'), ('Vitalia', 'Diatchenko'), ('Ima', 'Bohush'), ('Stephanie', 'Roy'), ('Sandra', 'Ion'), ('Romina', 'Gualtieri'), ('Camilla', 'Franco'), ('Yasmin', 'Clarke'), ('Klara', 'Vyskocilova'), ('Sianna', 'Simmons'), ('Karina', 'Bradnam'), ('Eugenia', 'Yordanova'), ('Sanda', 'Omerovic'), ('Nour', 'Abou Saleh'), ('Rosa Maria', 'Mendoza'), ('Maria Gracia', 'Ycaza'), ('Anne Christine', 'Voicu'), ('Daleidis', 'Borrego'), ('Laura', 'Bosneag'), ('Emma', 'Isberg'), ('Rasika', 'Sankpal'), ('Ksenia', 'Milevskaya'), ('Sayali', 'Bhilare'), ('Se Jin', 'Lee'), ('Sara', 'Guglielminotti'), ('Mazluma', 'Turdyeva'), ('Carolina', 'Castro'), ('Lenka', 'Jurikova'), ('Paula Cristina', 'Goncalves'), ('Franziska', 'Koenig'), ('Anastassiya', 'Zherdeva'), ('Nini', 'Lagvilava'), ('Marine', 'Tirel'), ('Ana Sofia', 'Camberos'), ('Vanja', 'Tomic'), ('Stephanie', 'Wiltshire'), ('Jessica', 'Moore'), ('Maxi', 'Ehmer'), ('Nour', 'Kaddour'), ('Sierra A', 'Ellison'), ('Marketa', 'Havelkova'), ('Anneliese', 'Tepper'), ('Lara', 'Kamnik'), ('Laura Alicia', 'Aguilar'), ('Taylor', 'Lindsey'), ('Petra', 'Padalikova'), ('Lora', 'Stancheva'), ('Maria', 'Babanova'), ('Florencia', 'Sanchez Gil'), ('Josefin', 'Andersson'), ('Nicole', 'Arosemena'), ('Narisa', 'Luanporn'), ('Mikaela', 'Kristofersson'), ('Hermon', 'Brhane'), ('Kristina', 'Schleich'), ('Alexa', 'Wimes'), ('Ganna', 'Akhinko'), ('Maria', 'Voscekova'), ('Irina Camelia', 'Begu'), ('Ivana', 'Crnogorac'), ('Yaroslava', 'Zhishchenko'), ('Chelsey', 'Gullickson'), ('Kate', 'Rodger'), ('Tadeja', 'Majeric'), ('Lutfiana Aris', 'Budiharto'), ('Alexandra', 'Vukota'), ('Jovana', 'Vasic'), ('Camilla', 'Margaroli'), ('Janelle', 'Cuthbertson'), ('Amelia', 'Harris'), ('Caitlin', 'Gordon'), ('Kristina', 'Antoniychuk'), ('Marina', 'Giral Lores'), ('Ruth', 'Markov'), ('Oksana', 'Kalashnikova'), ('Francesca', 'Segarelli'), ('You Jin', 'Kang'), ('Susan', 'Darnel'), ('Carla', 'Nava'), ('Alessondra', 'Parra'), ('Martina', 'Gaemperle'), ('Jade', 'Schoelink'), ('Anastasia', 'Nebojanko'), ('Whitney', 'Wolf'), ('Valentina', 'Kecman'), ('Zana', 'Gospodnetic'), ('Jelena', 'Trailovic'), ('Yael', 'Anays'), ('Ema', 'Polic'), ('Dahilmar', 'Saez'), ('Elison', 'Amadio'), ('Ami', 'Nakano'), ('Nataly', 'Yoo'), ('Federica', 'Denti'), ('Jacqueline', 'Wu'), ('Belma', 'Beslagic'), ('Jing Jue', 'Lu'), ('Anais', 'Dallara'), ('Bronwyn', 'Davidson'), ('Dipti', 'Srivastava'), ('Maja', 'Kazimieruk'), ('Laetitia', 'Prat'), ('Helen', 'Parish'), ('Odalis', 'Sardinas'), ('Lorena', 'Vincenzini'), ('Tyra', 'Calderwood'), ('Natasha', 'Pawlowski'), ('Li', 'Xi'), ('Veronika', 'Birioukova'), ('Aika', 'Osawa'), ('Sarah Marija', 'Merlic'), ('Puntila', 'Namwong'), ('Veronica', 'Popovici'), ('Yadira', 'Padilla'), ('Chloe', 'Smith'), ('Josefine', 'Strom'), ('Amanda', 'Cunningham'), ('Morgane', 'Zowczak'), ('Montserrat', 'De Castro'), ('Maria', 'Toncheva'), ('Mariya', 'Malkhasyan'), ('Natalie', 'Proese'), ('Aeriel', 'Ellis'), ('Anggrenny', 'Oky Suconong'), ('Asha Saravana', 'Mohan'), ('Alexandra', 'Zaniewski'), ('Claudia', 'Mercado'), ('Anastasia', 'Savkina'), ('Rita', 'Obasigie'), ('Vladlena', 'Petushkova'), ('Yvanna', 'Kurlak'), ('Beatrice', 'Parolai'), ('Shenelle', 'Mohammed'), ('Sina', 'Hartmann'), ('Daphne', 'Staelens'), ('Jawairiah', 'Noordin'), ('Ines', 'Janbakhsh'), ('Margarita', 'Lazareva'), ('Fernanda', 'Aranda'), ('Sindy', 'Cespedes'), ('Sahar', 'Al Disi'), ('Emma', 'Flood'), ('Regina', 'Shtyagina'), ('Claire', 'Valentin'), ('Amie', 'Shyu'), ('Rininta', 'Hidayat'), ('Shahin', 'Ansari'), ('Alexandra', 'Whitehead'), ('Rocio', 'De La Torre Sanchez'), ('Elena', 'Chernyakova'), ('Romina', 'Brante'), ('Arabela', 'Fernandez Rabener'), ('Pamela', 'Amon'), ('Katharina', 'Knoebl'), ('Sandra', 'Kristjansdottir'), ('Neira', 'Fatic'), ('Dagmar', 'Dudlakova'), ('Olga', 'Kirpicheva'), ('Barbara', 'Sobaszkiewicz'), ('Carla', 'Murguia'), ('Martina', 'Kostalova'), ('Nancy', 'Ferguson'), ('Rocio', 'Galarza'), ('Monica', 'Cantele'), ('Carlota', 'Cartes Andres'), ('Sinika', 'Jezkova'), ('Christina', 'Bonneau'), ('Carla', 'Lucero'), ('Stephanie', 'Hoffpauir'), ('Clemence', 'Terol'), ('Marina', 'Lebrao'), ('Nicolette', 'Van Uitert'), ('Sandra', 'Vukojicic'), ('Audrey', 'Leitz'), ('Shaozhuo', 'Liu'), ('Barbora', 'Krtickova'), ('Karla', 'Bonacic'), ('I Pei', 'Cheng'), ('Mi Rae', 'Ham'), ('Ana Maria', 'Chavez Franco'), ('Maria', 'Mokh'), ('Naoko', 'Masuda'), ('Monika', 'Galikova'), ('Kathrin', 'Weinwurm'), ('Kate', 'Turvy'), ('Margie', 'Milliken'), ('Anne', 'Blawatt'), ('Kesica', 'Jayapalan'), ('Grace', 'Cadona'), ('Sacha', 'Jones'), ('Elodie', 'Erakovic'), ('Constance', 'Sibille'), ('Stefana', 'Lakicevic'), ('Csilla', 'Argyelan'), ('Nada', 'Sghyar'), ('Natasha', 'Starling'), ('Imke', 'Jagau'), ('Charlotte', 'Laevens'), ('Sung Hee', 'Han'), ('Nelly', 'Radeva'), ('Lidia', 'Llanos De La Fuente'), ('Tereza', 'Mrdeza'), ('Riley', 'Blanks'), ('Yoshie', 'Yoshihara'), ('Maria Fernanda', 'Alvarez A'), ('Mariam', 'Kupreishvili'), ('Alexa', 'Guarachi'), ('Zuzana', 'Linhova'), ('Jordana', 'Lujan'), ('Ajda', 'Kolmancic'), ('Veronika', 'Maksimchyk'), ('Katie', 'Gouyette'), ('Monica', 'Pezzotti'), ('Virginia', 'Ugrcyc'), ('Emily Theresa', 'Weiland'), ('Monica', 'Chow'), ('Alenka', 'Hubacek'), ('Ielyzaveta', 'Rybakova'), ('Pamela', 'Salas'), ('Alina', 'Wessel'), ('Babs', 'Van Kampen'), ('Kristina', 'Steiert'), ('Ayram', 'Edery'), ('Erica', 'Robertson'), ('Carolina', 'Zeballos'), ('Fanny', 'Fracassi'), ('Petra', 'Niedermayerova'), ('Vivien', 'Svirkovska'), ('Anouk', 'Delefortrie'), ('Maria', 'Martinez Romero'), ('Alexandra Andreea', 'Oancea'), ('Maria', 'Kouvatsos'), ('Kjersti', 'Lund'), ('Marisela', 'Aviles'), ('Natalia', 'Piszczkiewicz'), ('Yasmine', 'Guimaraes'), ('Kristina', 'Benashvili'), ('Xenia', 'Suworowa'), ('Magda', 'Riutort Bou'), ('Laura', 'Heinrichs'), ('Sharon', 'Fichman'), ('Elzyata', 'Sovaeva'), ('Melisa', 'Morales'), ('Laura', 'Gambarini'), ('Tatiana', 'Carpio'), ('Deirdre', 'Cienki'), ('Tamira', 'Paszek'), ('Urszula', 'Radwanska'), ('Nathalie', 'Gunthard'), ('Nigora', 'Sirojiddinova'), ('Benita', 'Milenkiewicz'), ('Maria', 'Nivia'), ('Blessing', 'Samuel'), ('Caroline', 'Hitimana'), ('Carolina', 'Camargo De Luca'), ('Bianca', 'Bonotto'), ('Karen Johanna', 'Ramirez Rivera'), ('Ana Paula', 'Antelo'), ('Bryony', 'Hunter'), ('Arantxa', 'Rus'), ('Raphaela', 'Cordeiro'), ('Nimom', 'Segodo'), ('Tina', 'Potisk'), ('Rebecca', 'Marino'), ('Anais', 'Gomar Isart'), ('Ekaterina', 'Kamendova'), ('Hiroko', 'Kuwata'), ('Aleksandra', 'Tucakov'), ('Andra', 'Cornea'), ('Ginet', 'Pinero'), ('Reka', 'Rohonyi'), ('Myrtille', 'Georges'), ('Parichart', 'Charoensukployphol'), ('Klaudia', 'Boczova'), ('Micaela', 'Silva'), ('Tatevik', 'Yedigaryan'), ('Anna', 'Lukashevich'), ('Conny', 'Perrin'), ('Irina', 'Carrillo Marti'), ('Daniela', 'Gonzalez Martinez'), ('Diamond', 'Jackson'), ('Silvia', 'Carvajal'), ('Daria', 'Shilina'), ('Angelina', 'Gordienko'), ('Zaida', 'Abreu'), ('Rebeca', 'Neves'), ('Jaklin', 'Alawi'), ('Dilara', 'Ahmetagic'), ('Inna', 'Gavrilenko'), ('Marine', 'Verbeken'), ('Anna', 'Jeczmionka'), ('Erin', 'Vierra'), ('Julia', 'Zakharova'), ('Beatrice', 'Gumulya'), ('Pamela', 'Montez'), ('A Ram', 'Sim'), ('Wen', 'Sun'), ('Jennie', 'Brobeck'), ('Ji Hye', 'Kim'), ('Monika', 'Tumova'), ('Dajana', 'Csongradyova'), ('Kristina', 'Bekavac'), ('Gabriella', 'Boboc'), ('Ilaria', 'Alessi'), ('Bianca', 'Swanepoel'), ('Muriel', 'Wacker'), ('Yara', 'Abou El Ghar'), ('Menanteau', 'Moolman'), ('Yolande', 'Leacock'), ('Idil', 'Haciraifoglu'), ('Olivia', 'Bennett'), ('Lauren', 'Embree'), ('Linda', 'Fritschken'), ('Elien', 'Crombez'), ('Adeline', 'Goncalves'), ('Eleonor', 'Picot'), ('Elaine', 'Genovese'), ('Sankriti', 'Sinha'), ('Kai Chen', 'Chang'), ('Yun Hee', 'Kim'), ('Chutharat', 'Rungtein'), ('Yasmine', 'Alkema'), ('Kristina', 'Pejkovic'), ('Vivian', 'Hansen'), ('Silvia Priscila', 'Montoya'), ('Karen Elena', 'Montoya'), ('Maria', 'Klein'), ('Elizabeth', 'Johnson'), ('Mo', 'Cao'), ('Anna', 'Vidgof'), ('Petra', 'Martic'), ('Polona', 'Hercog'), ('Lorena', 'Aviles'), ('Laura', 'Beltran'), ('Dilara', 'Yurtkuran'), ('Inna', 'Agaeva'), ('Lucia', 'Kovarcikova'), ('Xiao', 'Zhou'), ('Ana', 'Quevedo'), ('Andrea', 'Popluharova'), ('Veronika', 'Studena'), ('Diana', 'Kyllmann'), ('Katrin', 'Schmidt'), ('Nicole', 'Herzog'), ('Jun Yi', 'Zheng'), ('Shereen', 'Peterson Paul'), ('Celine', 'Ghesquiere'), ('Melissa', 'Mcqueen'), ('Kristina N', 'Smith'), ('Maria Agustina', 'Reyes Molina'), ('Prerana Mythri', 'Appineni'), ('Martina', 'Pradova'), ('Anastasia', 'Shchilinskaya'), ('Angie', 'Solorzano'), ('Hae Jin', 'Jeong'), ('Michelle', 'Green'), ('Mallory', 'Burdette'), ('Valentina', 'Parrilla'), ('Taij Mishma', 'Kumar'), ('Patricia', 'Vilas Ibanez'), ('Niku', 'Amin'), ('Lisa', 'Piller'), ('Mona', 'Piller'), ('Charlotte', 'Rodier'), ('Gabriella', 'Bongiovanni'), ('Palma', 'Kiraly'), ('Katharina', 'Jobst'), ('Surama', 'Gotera'), ('Theresa', 'Jobst'), ('Nikola', 'Hofmanova'), ('Lena Marie', 'Hofmann'), ('Camelia Elena', 'Hristea'), ('Giuliana', 'Pino'), ('Hanna', 'Albowicz'), ('Narumi', 'Kakegawa'), ('Eugenia', 'Dubitshkaya'), ('Victoria', 'Rode Bager'), ('Eva', 'Wacanno'), ('Ganna', 'Lukianchykova'), ('Yi Miao', 'Zhou'), ('Eden', 'Doliveira'), ('Dildora', 'Rakhimova'), ('Verena', 'Santos'), ('Sarah', 'Mahboob Khan'), ('Sofia', 'Medina'), ('Kamila', 'Marchocka'), ('Martina', 'Di Giuseppe'), ('Chihiro', 'Takayama'), ('Ji Hyun', 'Lee'), ('Christine', 'Masite'), ('Raiza', 'Verdecia'), ('Serena', 'Frazzitta'), ('Tanisha', 'Rohira'), ('Ines', 'Carabetta'), ('Katerina', 'Ilyina'), ('Alexandra', 'Kelleher'), ('Sakiko', 'Namba'), ('Dina', 'Azwar'), ('Alexandra', 'Damaschin'), ('Ekaterina', 'Abaeva'), ('Lenah Hatsumi', 'Sakai'), ('Veronica', 'Seruca'), ('Adeline', 'Chiang'), ('Katharina', 'Braeutigam'), ('Ting Jr', 'Li'), ('Katarzyna', 'Piter'), ('Anna', 'Tajima'), ('Andressa', 'Garcia'), ('Maike', 'Zeppernick'), ('Alona', 'Shubina'), ('Elizabeth', 'Kilborn'), ('Slavica', 'Milanovic'), ('Irina', 'Dementyeva'), ('Olga', 'Fischer'), ('Solveig', 'Fosser'), ('Tereza', 'Vancurova'), ('Ritwika', 'Sen'), ('Juliette', 'Surlemont'), ('Valeria', 'Savinykh'), ('Jocelyn', 'Rae'), ('Valentina', 'Stephan'), ('Angelique', 'Van Der Meet'), ('Alexandra', 'Stuparu'), ('Alice', 'Moroni'), ('Linda', 'Berlinecke'), ('Evelin', 'Barboutova'), ('Jessica', 'Alexander'), ('Eveliina', 'Virtanen'), ('Maria Elena', 'Recalde'), ('Dominika', 'Kanakova'), ('Ivana', 'Klepic'), ('Josephine', 'Haraldsson'), ('Jasmina', 'Kajtazovic'), ('Josymar', 'Escalona'), ('Danijela', 'Tomic'), ('Courtney', 'Collins'), ('Simona', 'Weymar'), ('Jasmina', 'Tinjic'), ('Maria', 'Knott'), ('Rebecca', 'Cook'), ('Chun Wing', 'Sher'), ('Ulker', 'Yuregir'), ('Lynsey', 'Mccullough'), ('Lucia', 'Batta'), ('Lucia', 'Vrskova'), ('Alina', 'Saracin'), ('Alina', 'Shazhko'), ('Martina', 'Darczuk'), ('Almudena', 'Sanz Llaneza Fernandez'), ('Petra', 'Januskova'), ('Kirsten', 'Willems'), ('Montana', 'Grenfell'), ('Dunja', 'Sunkic'), ('Chihiro', 'Oasa'), ('Barbara', 'Montiel'), ('Marion', 'Cammilleri'), ('Darja', 'Pribitkow'), ('Taylor', 'Douglas'), ('Elisabeth', 'Fournier'), ('Nastasiya', 'Kipina'), ('Tetyana', 'Arefyeva'), ('Jodie', 'Williams'), ('Daniella', 'Rabkin'), ('Lauren', 'Townrow'), ('Martina', 'Gledacheva'), ('Giulia', 'Bruzzone'), ('Mia', 'Fiocca'), ('Alexandra', 'Ban'), ('Malou', 'Ejdesgaard'), ('Yevgeniya', 'Kryvoruchko'), ('Jill M', 'Saunders'), ('Camila', 'Quesada'), ('Miki', 'Kanehira'), ('Karina', 'Pimkina'), ('Sarah', 'Serrano'), ('Isabel M', 'Brito Cardoso'), ('Catarina', 'Morais'), ('Yun', 'Ku'), ('Tomoko', 'Iyori'), ('Gabi', 'Rojas'), ('Wanrong', 'Li'), ('Camilla', 'Boniek'), ('Sasarin', 'Borwornchokchai'), ('Geraldine', 'Salazar'), ('Adrianna', 'Daszkiewicz'), ('Liya', 'Tsanava'), ('Tajda', 'Bestijanic'), ('Marta', 'Sirotkina'), ('Sevil', 'Aliyeva'), ('Dana', 'Adelson'), ('Chizuru', 'Yamazaki'), ('Dalila', 'Jakupovic'), ('Jessica', 'Picas'), ('Emilie', 'Logiacco'), ('Nozomi', 'Matsuda'), ('Kumari Sweta', 'Solanki'), ('Catia', 'Rodrigues'), ('Raquel', 'Perez Ruescas'), ('Danielle', 'Mills'), ('Lisa Maria', 'Moser'), ('Michelle', 'De Groot'), ('Monica', 'Gorny'), ('Kim Alice', 'Grajdek'), ('Carmen', 'Lopez Blanco'), ('Charlotte', 'Pires'), ('Gracia', 'Radovanovic'), ('Catalina', 'Maya'), ('Catalina', 'Ucros'), ('Yana', 'Orlova'), ('Radka', 'Jarosova'), ('Alice', 'Watter'), ('Hymke', 'Maurick'), ('Dalia', 'Zafirova'), ('Paulina', 'Schippers'), ('Camille', 'Sapene'), ('Elyne', 'Boeykens'), ('Maria Florencia', 'Novillo'), ('Haley', 'Gay'), ('Van Ai Ngog', 'Nguyen'), ('Asia', 'Muhammed'), ('Natalia', 'Ryzhonkova'), ('Maria', 'Fagerstrom'), ('Jasmine Pernill', 'Shankar'), ('Perrine', 'Fouche'), ('Anik', 'Cepeda'), ('Ilse', 'Pacheco'), ('Luana', 'Flessak'), ('Tanya', 'Raykova'), ('Yuko', 'Adachi'), ('Kelsey', 'Sundaram'), ('Ksenia', 'Mikhaylova'), ('Maria Grazia', 'Tonani'), ('Daria', 'Maslennikova'), ('Ana', 'Gomez Aleman'), ('Maria', 'Meliuk'), ('Karin', 'Morgosova'), ('Jade', 'Pondicas'), ('Fiorella', 'Nocino'), ('Vivienne', 'Vierin'), ('Alexandra', 'Riley'), ('Rocio', 'Lopez Alberca'), ('Catalina', 'Diaz'), ('Lucy', 'Bird'), ('Andrea', 'Eskauriatza Ruiz'), ('Daniela', 'Trigo'), ('Stefania', 'Postorino'), ('Carolina', 'Barboza'), ('Giadagiovanna', 'Dortona'), ('Maria', 'Petrova'), ('Flavia', 'Borges'), ('Claudia', 'Razzeto'), ('Hannah', 'James'), ('Olga', 'Blank'), ('Lizeth', 'Ramirez'), ('Allie', 'Will'), ('Arianna', 'Colffer'), ('Sarah', 'Leonard'), ('Leire', 'Martinez Barredo'), ('Karolina', 'Vlachova'), ('Jessica', 'Courtnell'), ('Lucia', 'Cervera Vazquez'), ('Amira', 'Pirovani'), ('Nilupul', 'Goonasekera'), ('Nevena', 'Arsic'), ('Gabriela', 'Scaff Haddad'), ('Lynn', 'Schonhage'), ('Theresa Maria', 'Braun'), ('Miyu', 'Terada'), ('Yu Xuan', 'Liu'), ('Aleksandra', 'Kecman'), ('Lucie', 'Fleischmannov'), ('Marina', 'Galkina'), ('Clarissa', 'Chen'), ('Rachael', 'White'), ('Ximena', 'Hermoso'), ('Giulia', 'Bruschi'), ('Misaki', 'Doi'), ('Afroditi', 'Latinopoulou'), ('Margarita', 'Edinarova'), ('Francesca', 'Mazzali'), ('Kelly', 'Blake'), ('Adriana', 'Quezada'), ('Bouwiena', 'Boer'), ('Veronika', 'Domagala'), ('Puja', 'Patel'), ('Mandy', 'Brown'), ('Victoria', 'Larriere'), ('Satjaporn', 'Mahajaroenkul'), ('Ofir', 'Morag'), ('Aleksandra', 'Josifoska'), ('Sandra Mihaela', 'Sida'), ('Jelena', 'Tomasovic'), ('Jana', 'Bezbradica'), ('Marissa', 'Armienta'), ('Amaia', 'Ormazabal Oregui'), ('Valeria', 'Filiaeva'), ('Elena', 'Kulikova'), ('Elena', 'Andrei'), ('Natalia', 'Ziminova'), ('Romana Caroline', 'Tabak'), ('Mariana', 'Sonnervig'), ('Katie', 'Gater'), ('Luiza', 'Sonnervig'), ('Karina', 'Gootman'), ('Laura', 'Apaolaza Miradevilla'), ('Marcela', 'Henriques Brandao'), ('Ju Eun', 'Kim'), ('Michaela', 'Bezdickova'), ('Anne', 'Luijpen'), ('Lisa', 'Whybourn'), ('Sandra', 'Herrera'), ('Julia', 'Gragera Cano'), ('Denise', 'Atzinger'), ('Kanoko', 'Ohara'), ('Victoria', 'Vaara'), ('Gabriela', 'Coglitore'), ('Melanie', 'Junod'), ('Hilary', 'Toole'), ('Candice', 'Laurent'), ('Rafaela', 'Efstathiou'), ('Maria', 'Kiparenko'), ('Isabel', 'Rapisarda Calvo'), ('Lucia', 'Martinez Gomez'), ('Marina', 'Jozipovic'), ('Marcella', 'Jones'), ('Daphne', 'Charalambous'), ('Carlotta', 'Sartori'), ('Charlotte', 'Fabricius'), ('Johanna', 'Konta'), ('Cindy', 'Chala'), ('Martina', 'Borecka'), ('Khunpak', 'Issara'), ('Paloma', 'Cuervo'), ('Vivian Mayumi', 'Toma'), ('Fatma', 'Al Nabhani'), ('Laura', 'Collins'), ('Kristina', 'Huba'), ('Andree', 'Sime'), ('Deeon', 'Mladin'), ('Nana', 'Miyakawa'), ('Masa', 'Grgan'), ('Eda', 'Bora'), ('Caroline', 'Gherega'), ('Carmen', 'Sandor'), ('Lucia', 'Bosio'), ('Ida', 'Alfredsson'), ('Arantxa', 'Andrady'), ('Ksenia', 'Pervak'), ('Regina Marica', 'Matyak'), ('Danielle', 'Lao'), ('Laura', 'Revert Oroz'), ('Alexandra', 'Skripkina'), ('Magdalena', 'Sekrecka'), ('Yuka', 'Ito'), ('Carolin', 'Habich'), ('Maria Victoria', 'Puga'), ('Marina', 'Novak'), ('Paula', 'Espinoza Pena'), ('Maria Tania', 'Abraham'), ('Julie', 'Bigot'), ('Karolina', 'Dziubanii'), ('Cagla', 'Azgari'), ('Kelly K', 'Barry'), ('Geraldine', 'Leong'), ('Annaelle', 'Bejar'), ('Sally', 'Peers'), ('Alejandra', 'Granillo'), ('Giovanna', 'Portiolli'), ('Gabriela', 'Horackova'), ('Iuliia', 'Kiriienko'), ('Gail', 'Brodsky'), ('Selina', 'Scheffer'), ('Bianca', 'Botto'), ('Joelle', 'Kissell'), ('Malika', 'Arifjanova'), ('Simona', 'Horsikyan'), ('Olivia', 'Rogowska'), ('Jithmie', 'Jayawickrema'), ('Kristina', 'Shishkina'), ('Karolina', 'Zamiela'), ('Irina', 'Ramialison'), ('Elora', 'Dabija'), ('Daria', 'Abdrakhmanova'), ('Carlotta', 'Ripa'), ('Salma', 'El Semary'), ('Catherine R', 'Isip'), ('Madalina Daniela', 'Gugila'), ('Ioana Laura', 'Alecsiu'), ('Hana', 'Ritterova'), ('Ana', 'Grindeanu'), ('Tanya', 'Murtagh'), ('Shiori', 'Kikukawa'), ('Tugce', 'Dogan'), ('Natali', 'Balige'), ('Alice Andrada', 'Radu'), ('Casey', 'Robinson'), ('Tereza', 'Svecova'), ('Alexandra', 'Gracova'), ('Victoria', 'Lozano'), ('Alejandra', 'Lozano'), ('Raquel', 'Piltcher'), ('Marie', 'Zalameda'), ('Jasmin', 'Ladurner'), ('Emily J', 'Harman'), ('Ranim', 'Mkahal'), ('Velina', 'Ivanova'), ('Sofia', 'Espana'), ('Lisanne', 'Van Riet'), ('Kristyna', 'Kucianova'), ('Henrietta', 'Alton'), ('Menna', 'El Nagdy'), ('Maryna', 'Chumak'), ('Christie Ann', 'Hale'), ('Marion', 'Pereira'), ('Desislava', 'Lazarova'), ('Marianna', 'Natali'), ('Othilia', 'Lindqvist'), ('Mariya', 'Slupska'), ('Greta', 'Joksyte'), ('Sofia', 'Pacifico'), ('Mariana', 'Charalambous'), ('Tanvi', 'Shah'), ('Julia', 'Kushnereva'), ('Kaysara', 'Mandry'), ('Indire', 'Akiki'), ('Anna', 'Zaja'), ('Angelina', 'Jogasuria'), ('Angelika', 'Jogasuria'), ('Julia', 'Comas Espona'), ('Natalia', 'Alvarez Bilbao'), ('Rebecka', 'Tarnstrom'), ('Stefania Cristina', 'Nicolae'), ('Yue', 'Yuan'), ('Sandra', 'Milojevic'), ('Kara', 'Cecil'), ('Krishnali', 'Bhonsle'), ('Zuzana', 'Luknarova'), ('Magdalena', 'Osterle'), ('Leonie', 'Athanasiadis'), ('Anastasia', 'Pavlyuchenkova'), ('Ana', 'Jikia'), ('Tereza', 'Bekerova'), ('Lina', 'Bennani'), ('Carolina', 'Orsi'), ('Michaela', 'Boev'), ('Swetha', 'Nalikala'), ('Volha', 'Kalodzitsa'), ('Ofri', 'Lankri'), ('Dragana', 'Bozovic'), ('Camila', 'San Martin'), ('Victoria Corina', 'Mirea'), ('Samantha', 'Vickers'), ('Josella Francisca', 'Valderrama Ahumada'), ('Simona', 'Syleouni'), ('Gioia', 'Barbieri'), ('Violetta', 'Degtiareva'), ('Katerina', 'Petrenko'), ('Malika', 'Rose'), ('Gabriella', 'Barbosa Costa Silva'), ('Maxine', 'Thomas'), ('Milica', 'Milosavljevic'), ('Stina', 'Kailaheimo'), ('Ilinca Thea', 'Anghel'), ('Olivia', 'Janowicz'), ('Laura', 'Oates'), ('Shradha', 'Dali'), ('Bianca', 'Sousa'), ('Aranza', 'Salut'), ('Yvett', 'Imre'), ('Alina', 'Baronova'), ('Veronique', 'Luksich'), ('Jade', 'Hopper'), ('Tereza', 'Malikova'), ('Larraine', 'Saavedra'), ('Brittany', 'Sheed'), ('Carla', 'Venticinque Torres'), ('Nuria', 'Parrizas Diaz'), ('Jennifer', 'Smith'), ('Ljubica', 'Stojanovic'), ('Stacey', 'Lock'), ('Stacey', 'Tan'), ('Carolyn', 'Monson'), ('Francesca', 'Lewis'), ('Julie', 'Gervais'), ('Selma', 'Dahbi'), ('Viktoria', 'Yemialyanava'), ('Iris', 'Michailidou'), ('Veronika', 'Makovey'), ('Marie Louise', 'Schuetz'), ('Shabnam', 'Eslami'), ('Juliana', 'Pires'), ('Aleksandra', 'Vukadinovic'), ('Natasha', 'Bredl'), ('Alexandra', 'Perper'), ('Kristen', 'Lopez'), ('Reka Luca', 'Jani'), ('Ros Polly', 'Nguyen'), ('Natalie', 'Dillon'), ('Nilgen', 'Ahmetspahic'), ('Ana Gabriela', 'Llera'), ('Anette', 'Munozova'), ('Brynn', 'Boren'), ('Diana', 'Batista'), ('Nadja', 'Barz'), ('Jeanna', 'Schmidt'), ('Celina', 'Goetti'), ('Mary', 'Weatherholt'), ('Marie Christine', 'Chartier'), ('Preethi', 'Srinivasan'), ('Veronika', 'Blaskova'), ('Prissy', 'Annoual'), ('Stacey', 'Kyriakopoulos'), ('Dominika', 'Jasova'), ('Aleksandra', 'Ludvig'), ('Julia', 'Mayr'), ('Hannah', 'Berner'), ('Nicha', 'Lertpitaksinchai'), ('Angelika', 'Aliev'), ('Elanqua', 'Griffin'), ('Whitney', 'Ritchie'), ('Andjela', 'Nemcevic'), ('Justine', 'Lo Presti'), ('Isabella', 'Reibmayr'), ('Lam Anh', 'Tran'), ('Karis', 'Ryan'), ('Marine', 'Sorg'), ('Benyapa', 'Phumtip'), ('Anna', 'Morgina'), ('Aimee', 'Gibson'), ('Talissa', 'Kucera'), ('Romy', 'Koelzer'), ('Guntisa', 'Boonlaing'), ('Ines', 'Kertesz'), ('Marika', 'Kobayashi'), ('Anett', 'Schutting'), ('Olga', 'Makhova'), ('Janine', 'Tiszolczy'), ('Charline', 'Braidy'), ('Sarah Ellen', 'Hofmann'), ('Stephanie', 'Baldinucci'), ('Eva', 'Husakova'), ('Daniela', 'Kraberger'), ('Sabrina', 'Meier'), ('Isabell', 'Seidlitz'), ('Diana', 'Rivera'), ('Viktoria', 'Viduka'), ('Jacqueline', 'Cako'), ('Ho Ching', 'Wu'), ('Jennifer', 'Betancourt Hurtado'), ('Alexandra', 'Ion'), ('Arina', 'Alilueva'), ('Bruna', 'Macedo Soares'), ('Lucia', 'Gallego Jover'), ('Elixane', 'Lechemia'), ('Weijia', 'Sun'), ('Rajna', 'Jankovic'), ('Callie', 'Craig'), ('Caitlin', 'Mcgraw'), ('Jacqueline', 'Kasler'), ('Vidushi', 'Gupta'), ('Olga', 'Tatarchenko'), ('Blanca', 'Garcia'), ('Mary', 'Malkin'), ('Martina', 'Mikulcikova'), ('Stefanie', 'Mikesz'), ('Susita', 'Das'), ('Julia', 'Boserup'), ('Gisella', 'Pere'), ('Estelle', 'Suys'), ('Michelle', 'Farley'), ('Jenny', 'Jullien'), ('Monique', 'Albuquerque'), ('Maria Paula', 'Sanchez'), ('Kennedy', 'Scott'), ('Carol', 'Fernandez'), ('Sakina', 'Nshimirimana'), ('Anastasia', 'Aleshcheva'), ('Jung Eun', 'Nam'), ('Julia', 'Courter'), ('Line', 'Jouayed'), ('Diana', 'Bukajeva'), ('Justyna', 'Jegiolka'), ('Urszula', 'Kolodziejczak'), ('Thien Trang', 'Nguyen'), ('Gabriela', 'Pintos'), ('Brittany', 'Augustine'), ('Ayano', 'Honda'), ('Lisa', 'Grosselius'), ('Sinead', 'Disaya'), ('Anzhelika', 'Adzhamyan'), ('Rebecca', 'Leahy'), ('Paulina', 'Hinojosa'), ('So Yeon', 'Kim'), ('Jennifer', 'Hadjieva'), ('Cristina Andreea', 'Mitu'), ('Sonya', 'Dayal'), ('Melanie', 'Oudin'), ('Aleah', 'Marrow'), ('Aki', 'Yamasoto'), ('Aline', 'Laurioux'), ('Yoko', 'Nagai'), ('Veronika', 'Tobolova'), ('Bistra', 'Otashliyska'), ('Julia', 'Jagodzinska'), ('Josselin', 'Lattanzio'), ('Simona', 'Halep'), ('Ksenia', 'Moskal'), ('Maho', 'Kowase'), ('Cierra', 'Gaytan Leach'), ('Margaret', 'Boyette'), ('Anastasiya', 'Lytovchenko'), ('Gabriela', 'Paz'), ('Julie', 'Queval'), ('Daria', 'Yakauleva'), ('Ai', 'Koga'), ('Marcela', 'Jimenez Ramos'), ('Filipa', 'Correia'), ('Anna', 'Brazhnikova'), ('Maria', 'Fedosyuk'), ('Haruka', 'Yoshida'), ('Millie', 'Nichols'), ('Jessica', 'Green'), ('Nathaly', 'Miranda'), ('Paulina', 'Milosavljevic'), ('Arezou', 'Youlghouni'), ('Elzbieta', 'Kowalczyk'), ('Patricia', 'Chirea'), ('Jenny', 'Lunde'), ('Alexandra', 'Apostu'), ('Cayla', 'Cross'), ('Shiho', 'Sakagawa'), ('C C', 'Sardinha'), ('Yoo Ri', 'Song'), ('Sabina', 'Kovtunova'), ('Mia', 'Ramic'), ('Ruxandra Gabriela', 'Costov'), ('Ekaterina', 'Strogonova'), ('Stefania', 'Di Vasto'), ('Alisa Juliana', 'Caluseriu'), ('Alice', 'Grilli'), ('Shoko', 'Yamamoto'), ('Marketa', 'Placha'), ('Mawuena', 'Ankutse'), ('Lucia', 'Zavarcikova'), ('Pamela', 'Adom Mendez'), ('Gally', 'De Wael'), ('Francesca', 'Campigotto'), ('Lucie', 'Rey'), ('Elizabeth', 'Tapia'), ('Ana', 'Puerto Jaimez'), ('Camila Vital', 'De Castro'), ('Federica', 'Severi'), ('Sofia', 'Vaynberg'), ('Loveth', 'Nnadozie'), ('Monique', 'Zuur'), ('Sina', 'Bader'), ('Natchanok', 'Saenyaukhot'), ('Hui', 'Li'), ('Daniela', 'Lozano'), ('Disha', 'Saigal'), ('Bernice', 'Van De Velde'), ('Carina', 'Paulitsch'), ('Roxana', 'Rabago'), ('Isabella', 'Shinikova'), ('Cecilia', 'Crevani'), ('Victoire', 'Mfoumouangana'), ('Ana Claudia', 'Carbajal Espinosa'), ('Lisa', 'Borckink'), ('Raphaela', 'Zotter'), ('Cristina Bianca', 'Danaila'), ('Nida', 'Hamilton'), ('Nicole', 'Bartnik'), ('Giulia', 'Gasparri'), ('Francesca', 'Gonzalez'), ('Lilly F', 'Kimbell'), ('Beatriz Magdalena', 'Flores'), ('Kanako', 'Ootsuka'), ('Ai', 'Kamiyoshihara'), ('Ya Qi', 'Deng'), ('Lesley', 'Kerkhove'), ('Olga', 'Zaicenco'), ('Diana', 'Marcu'), ('Argyro', 'Christofi'), ('Lilija', 'Sabirzjanova'), ('Maria', 'Kuznetsova'), ('Sally', 'Dischmann'), ('Anna', 'Saito'), ('Hanna', 'Mar'), ('Karolina', 'Kostro'), ('Alexandra', 'Wetterstrom'), ('Hope', 'Johnson'), ('Ashleigh', 'Richardson'), ('Iesha', 'Holton'), ('Aleksandra', 'Grela'), ('Jessica Marie', 'Agra'), ('Carolina', 'Viteri'), ('Dalya', 'Pupchenok'), ('Anastasia', 'Putilina'), ('Magali', 'Van Landegem'), ('Demi', 'Barao Rodrigues'), ('Prang', 'Pantusart'), ('Ludmila', 'Vasilieva'), ('Sandra', 'Arsovska'), ('Claudia Gianina', 'Dumitrescu'), ('Le', 'Ma'), ('Sabina', 'Ramirez'), ('Emma', 'Reyes Baca'), ('Bianca', 'Ambros'), ('Noppawan', 'Lertcheewakarn'), ('Valentina', 'Starkova'), ('Margarita Greta', 'Skripnik'), ('Constance', 'Alexander'), ('Miyabi', 'Inoue'), ('Prachi', 'Nadkarni'), ('Jana', 'Mihalovicova'), ('Stephanie', 'Cornish'), ('Raquel', 'Barcala Lopez'), ('Yessica', 'Medina'), ('Giulia', 'Coletti'), ('Nathalie', 'Mohn'), ('Hannah', 'Toro'), ('Luca', 'Pump'), ('Mary', 'Clayton'), ('Melissa', 'Bolivar'), ('Milica', 'Stepanovic'), ('Tereza', 'Budilova'), ('Milana', 'Spremo'), ('Viktoria', 'Kamenskaya'), ('Ana Paula', 'Folch'), ('Julieta Soledad', 'Rodriguez'), ('Gemma', 'Praditngam'), ('Maria Claudia', 'Santos Santanna'), ('Elisa', 'Tassotti'), ('Gayeong', 'Back'), ('Cristina', 'Bachiller Madrono'), ('Alexandra', 'Cercone'), ('Hilda', 'Melander'), ('Maria', 'Pulido'), ('Ekaterine', 'Gorgodze'), ('Maria', 'Jespersen'), ('Fernanda', 'Faria'), ('Antonina', 'Rafikova'), ('Manuela', 'Leme'), ('Maria Fernanda', 'Aguirre Arteaga'), ('Dejana', 'Raickovic'), ('Janaki', 'Gunuganti'), ('Coco', 'Vandeweghe'), ('Veronica M', 'Corning'), ('Yen Ling', 'Chen'), ('Kaede', 'Hayase'), ('Sandra', 'Herrera Gonzalez'), ('Kiki', 'Bertens'), ('Aleksandra', 'Filipovski'), ('Mariona', 'Del Peral Francin'), ('Sophia', 'Bouganga'), ('Martina', 'Kubicikova'), ('Verena', 'Joechle'), ('Eduarda', 'Piai'), ('Sandra', 'Bellver Fructuoso'), ('Raquel', 'Martini'), ('Brittany', 'Wowchuk'), ('Elisa', 'Brentino'), ('Tiffany', 'Tran'), ('Maria Andreina', 'Varela'), ('Anna', 'Naumova'), ('Shahzodaxon', 'Hatamova'), ('Chantelle', 'Rigozzi'), ('Gabriella', 'Witdarmono'), ('Jessica', 'Cohen'), ('Leah', 'Daw'), ('Treta', 'Bhattacharyya'), ('Charlotte', 'Van Der Meij'), ('Neesha', 'Thirumalaichelvam'), ('Yui', 'Takauchi'), ('Sabrina', 'Baumgarten'), ('Pauline', 'Paire'), ('Laura', 'Slater'), ('Yan Tung', 'Ki'), ('Nadine', 'Ruegg'), ('Alexandra', 'Cannizzaro'), ('Hyun Hee', 'Jang'), ('Alena', 'Gerasimova'), ('Tina', 'Miller'), ('Lara', 'Michel'), ('Quirine', 'Lemoine'), ('Anastacia', 'Simons'), ('Mohana', 'Chintala'), ('Larissa', 'Horat'), ('Hyun Hui', 'Hong'), ('Belen', 'Tajmuch'), ('Jessica', 'Brito'), ('Marifer', 'Abreu'), ('Anna Christine', 'Patrimonio'), ('Alex', 'Geremia'), ('Kurumi', 'Nara'), ('Camila', 'Giorgi'), ('Nimisha', 'Mohan'), ('Bojana', 'Jovanovski'), ('Tanja', 'Winkler'), ('Mariami', 'Samkanashvili'), ('Marilia', 'Camara'), ('Nazil', 'Ander'), ('Sonia Stefania', 'Negrila'), ('Isabella', 'Holland'), ('Elena', 'Kuznetsova'), ('Nataliya', 'Pintusova'), ('Anna Arina', 'Marenko'), ('Sandra', 'Zaniewska'), ('Carla', 'Roset Franco'), ('Nutwadee', 'Suthiprapha'), ('Petra', 'Capin'), ('Alia', 'Nour'), ('Iris', 'Verboven'), ('Anastasia', 'Vivdenko'), ('Ioana Andreea', 'Cristea'), ('Nanuli', 'Pipiya'), ('Adnya', 'Naik'), ('Victoria', 'Schweizer'), ('Xin Tong', 'Liu'), ('Oksana', 'Pavlova'), ('Rocio Maria', 'Diaz'), ('Ursa', 'Jerman'), ('Melina', 'Gonzalez Morganti'), ('Natasha', 'Bertolucci'), ('Bella', 'Destriana'), ('Joanna', 'Horne'), ('Tea', 'Palandacic'), ('Tara', 'Vasovic'), ('Rashmi', 'Teltumbde'), ('Nan Nan', 'Zhang'), ('Jana', 'Urbanova'), ('Kate', 'Fuller'), ('Elena', 'Corsini'), ('Ekaterina', 'Verho'), ('Nadejda', 'Guskova'), ('Alejandra', 'Sala Juste'), ('Thanyarat', 'Karnjanapong'), ('Ale', 'Rojas'), ('Elyse', 'Edwards'), ('Lavanya', 'Nath'), ('Daria', 'Kuchmina'), ('Amreetha', 'Muttiah'), ('Maria', 'Barbed Isusi'), ('Ze Xin', 'Pu'), ('Bhavani', 'Ravisankar'), ('Dinah', 'Pfizenmaier'), ('Kaitlyn', 'Christian'), ('Emily', 'Askew'), ('Sophia', 'Bursulaya'), ('Sabrina', 'Man Son Hing'), ('Chieh Yu', 'Hsu'), ('Qiang', 'Wang'), ('Ganna', 'Piven'), ('Elizabeth', 'Begley'), ('Fiorella Maria', 'Jarufe'), ('Mia', 'Radulovic'), ('Jamila', 'Paul'), ('Trivena Monika', 'Putri'), ('Jovanna', 'Pecovski'), ('Yui Lynn', 'Miao'), ('Karolina', 'Cechova'), ('Paula Natalia', 'Orlini Campos'), ('Cody', 'Morris'), ('Mia', 'Lancaster'), ('Simona', 'Pascau'), ('Biljana', 'Milosevska'), ('Minori', 'Tamura'), ('Anastasiya', 'Vasylyeva'), ('Ania', 'Mazor'), ('Yang', 'Shen'), ('Veronica', 'Cepede Royg'), ('Ann Sophie', 'Porry'), ('Boyan', 'Wang'), ('Andrea', 'Konjuh'), ('Barbara', 'Pietrkiewicz'), ('Andrea', 'Lopez Seco'), ('Irina', 'Repede'), ('Dominique', 'Harmath'), ('Risako', 'Sugihara'), ('Liana', 'Todorova'), ('Sylwia', 'Mikolajczuk'), ('Deborah', 'Paulo Lamelas'), ('Talia', 'Rojas'), ('Jihye', 'Choi'), ('Tatiana', 'Postnikova'), ('Gabrielle', 'Zambotto Interlich'), ('Rina', 'Fujiwara'), ('Alexia', 'Quartetto'), ('Katarena', 'Paliivets'), ('Thais', 'Xavier'), ('Sheila', 'Moradian'), ('Anezka', 'Makovickova'), ('Anastasia', 'Koroliova'), ('Isadora', 'Busch'), ('Samara', 'Amour'), ('Ana Maria', 'Nedelcu'), ('Emily', 'Crowe'), ('Leia', 'Kaukonen'), ('Nicole', 'Saracino'), ('Diana Carolina', 'Casas'), ('Kristina', 'Korochinskaya'), ('Gabrielle', 'Alford'), ('Ajeng', 'Aquinia'), ('Martina', 'Krischkeova'), ('Maya', 'Milosevic'), ('Sofie', 'Oyen'), ('Garima', 'Vatwani'), ('Saadgi', 'Rajani'), ('Kanae', 'Iha'), ('Xi', 'Bai'), ('Yasmina', 'Demane'), ('Katharina', 'Morth'), ('Yana', 'Buchina'), ('Oriana', 'Nowicki'), ('Alicia', 'Perez Gonzalez'), ('Julia', 'Landauer'), ('Polina', 'Rodionova'), ('Magda', 'Linette'), ('Kristina', 'Kinarkina'), ('Camila', 'Basto'), ('Mina', 'Gardic'), ('Fernanda', 'Brito'), ('Johanna', 'Hyoty'), ('Nilaya', 'Tarimela'), ('Mary Anne', 'Macfarlane'), ('Yu Ting', 'Deng'), ('Elen', 'Chelidze'), ('Zsofia', 'Susanyi'), ('Viktoriya', 'Serenkova'), ('Alina Silvana', 'Moise'), ('Hui I', 'Huang'), ('Jelena', 'Simic'), ('Ashvarya', 'Shrivastava'), ('Nastassja', 'Burnett'), ('Morgan', 'Basil'), ('Ekin', 'Gunaysu'), ('Marie', 'Menacer'), ('Milica', 'Hadzi Tanovic'), ('Maria Clara', 'Bernardez'), ('Andrea', 'Blazevic'), ('Vicky', 'Stuckey'), ('Giulia', 'Pasini'), ('Mara', 'Schmidt'), ('Alexandra', 'Anghelescu'), ('Maria', 'Biryukova'), ('Rebecca', 'Horompoliova'), ('Fernanda', 'Soares'), ('Giorgia', 'Pinto'), ('Kurumi', 'Sensui'), ('Jasmin', 'Matter'), ('Alex', 'Martin'), ('Lola', 'Azimova'), ('Cecilia', 'Estlander'), ('Alexandra', 'Borovina'), ('Aleksandrina', 'Naydenova'), ('Shakhnoza', 'Karieva'), ('Marta', 'Stoyanova'), ('Giulia', 'Lambiase'), ('Brittany', 'Dubins'), ('Maria', 'Lawton'), ('Nikolina', 'Rimac'), ('Bao Yi', 'Xu'), ('Diana', 'Davitaia'), ('Oleksandra', 'Piskun'), ('Nadja', 'Teufel'), ('Roshenka', 'Fernando'), ('Chloe', 'Babet'), ('Karina', 'Isayan'), ('Margarida', 'Fernandes'), ('Sarah Lynn', 'Du Plessis'), ('Julie', 'Tringa'), ('Martina', 'Puglierin'), ('Paola', 'Garrido Rodriguez'), ('Amina', 'El Khattabi'), ('Helena', 'Martinez Soler'), ('Natalia', 'Berezhnaya'), ('Nikki Camille', 'Zoleta'), ('Patricia', 'Avramescu'), ('Joanna', 'Bougon'), ('Jolien', 'De Wulf'), ('Neus', 'Bestard Pomar'), ('Kirsten', 'Mcarthur'), ('Klara', 'Koprivova'), ('Ana Izabela', 'Oliveira'), ('Vanessa', 'Foltinger Garcia'), ('Amber', 'Walker'), ('Joyce', 'Van Der Linden'), ('Carolina', 'Abello'), ('Johana', 'Hernandez'), ('Anastasia', 'Golovatch'), ('Marina', 'Raicevic'), ('Malak', 'Demerdash'), ('Katrina', 'Raicevic'), ('Rebeca', 'Mitrea'), ('Sabine', 'Van Der Sar'), ('Soledad', 'Blanco'), ('Giulia', 'Porcu'), ('Beatriz Maria', 'Martins Cecato'), ('Nuria', 'Sanjurjo'), ('Anna', 'Momot'), ('Marcela', 'Costa Quintas'), ('Michika', 'Ozeki'), ('Laili', 'Rahmawati Ulfa'), ('Karni', 'Cohen'), ('Zulema', 'Zelaya'), ('Emilia', 'Banos Gregorians'), ('Madeleine', 'Kobelt'), ('Gabriela', 'Vazquez'), ('Lara', 'Arruabarrena'), ('Aya', 'Bara'), ('Costanza', 'Mecchi'), ('Sofia', 'Hager'), ('Karolina', 'Pliskova'), ('Kristyna', 'Pliskova'), ('Polina', 'Pekhova'), ('Laura', 'Perez'), ('Roosh', 'Wijesundera'), ('Chelsie Marie', 'Yacks'), ('Martina', 'Toto'), ('Karen', 'Hernandez'), ('Sabastiani', 'Leon'), ('Lisa', 'Canova'), ('Giovanna', 'Palumbo'), ('Nadine', 'Klug'), ('Francesca', 'Aureli'), ('Courtney B', 'Dolehide'), ('Lizette', 'Gomez'), ('Mami', 'Hasegawa'), ('Gabriela Alejandra', 'Carrillo Palacios'), ('Isaura', 'Enrique Aguilar'), ('Deborah', 'Pagani'), ('Fumika', 'Kumagai'), ('Bitna', 'Lee'), ('Ji Su', 'Bae'), ('Elena', 'Bogdan'), ('Carolina', 'Pillot'), ('Anastasia', 'Etkin'), ('Dominique', 'Bruce'), ('Kaja', 'Rajh'), ('Isabella', 'Robbiani'), ('Panoria', 'Tsekoura'), ('Iris', 'Mannarino'), ('Silvia', 'Ranocchi'), ('Natalia', 'Marques Melibeu'), ('Gabriela', 'Dabrowski'), ('Klaudia', 'Gawlik'), ('Gaia', 'Sanesi'), ('Bianca', 'Brasoveanu'), ('Amel', 'Ouahab'), ('Giulia', 'Calafiore'), ('Sanne', 'Lemmers'), ('Antonela', 'Susak'), ('Milagros', 'Abal'), ('Rocio', 'Portela'), ('Jia Bei', 'Mei'), ('Morgane', 'Pons'), ('Lucia', 'Kovalova'), ('Monika', 'Wejnert'), ('Beatrice', 'Capra'), ('Alexandra', 'Hietaniemi'), ('Flora', 'Birnbaum'), ('Klara', 'Ellingerova'), ('Lise', 'Marbach'), ('Greta', 'Veinberga'), ('Brooke', 'Bolender'), ('Marie Frederique', 'Bedard'), ('Alessia', 'Carrozzo'), ('Marlen', 'Hacke'), ('Ekaterina', 'Mitroshina'), ('Laura', 'Maisonnave'), ('Rocio', 'Benavent Rojas'), ('Alexandra', 'Reboul'), ('Caroline', 'Rohde Moe'), ('Ksenia', 'Kolesnikova'), ('Fiorella', 'Zecchino'), ('Gesa', 'Focke'), ('Tanja', 'Rebholz'), ('Kerrie', 'Cartwright'), ('Mayka', 'Zima'), ('Ilaria', 'Popovic'), ('Anastasia', 'Erofeeva'), ('Katarina', 'Baranova'), ('Or', 'Meir'), ('Lorena', 'Gheorghe'), ('Caryssa L', 'Peretz'), ('Sandra', 'Andriamarosoa'), ('Ya', 'Zhou'), ('Georgina', 'Bastick'), ('Teresa', 'Pladevall Oroz'), ('Roberta', 'Di Rosa'), ('Richel', 'Hogenkamp'), ('Mai', 'Minokoshi'), ('Aranxta', 'Portugal'), ('Seung Yeon', 'Hong'), ('Lina', 'Lileikite'), ('Misa', 'Eguchi'), ('Mai', 'Grage'), ('Malak', 'Elazze'), ('Susan', 'Mcrann'), ('Noura', 'Abdul Aal'), ('Viviana', 'Bolivar'), ('Rita', 'Oliveira'), ('Barbara', 'Ferreira'), ('Chinami', 'Takada'), ('Tania', 'Alaby'), ('Yamini', 'Reddy'), ('Anna', 'Depenau'), ('Mayna', 'Andrade'), ('Isadora', 'Bickham'), ('Alexandra', 'Clay'), ('Lolia', 'Kienka'), ('Saya', 'Yoshimi'), ('Mariana', 'Perez Saaibi'), ('Anastasiya', 'Kyrylova'), ('Daniela Lucia', 'Sierra Jurado'), ('Estelle', 'Mehta'), ('Irina Mihaela', 'Giusca'), ('Andrea', 'Ka'), ('Imogen', 'Golder'), ('Carolyn Ann', 'Lim Hui'), ('Laura', 'Lim'), ('Sun Young', 'Choi'), ('Valentine', 'Confalonieri'), ('Ema', 'Mikulcic'), ('Flavia', 'Nagayama'), ('Kaede', 'Ikuma'), ('Vladislava', 'Kuzmenkova'), ('Lorena', 'Arandia'), ('Valeria', 'Podda'), ('Emmerentia', 'Marx'), ('Maria Teresa', 'Torro Flor'), ('Courtney', 'Gulihur'), ('Alyona', 'Sotnikova'), ('Davina', 'Meza'), ('Joke', 'De Kok'), ('Feronika', 'Katarina'), ('Mara', 'Nowak'), ('Christina', 'Auer'), ('Kimberley', 'Cassar'), ('Simone Lindsay', 'Krog'), ('Charlotte', 'Windley'), ('Khristina', 'Blajkevitch'), ('April', 'Bisharat'), ('Dinka', 'Lujinovic'), ('Kadi Liis', 'Saar'), ('Gabriela', 'Eufrasio'), ('Christina', 'Mchale'), ('Albina', 'Khabibulina'), ('Clara', 'Matias'), ('Martina', 'Spigarelli'), ('Hong Kyung', 'Shin'), ('Zi Xuan', 'Ma'), ('Hana', 'Kovacova'), ('Georgina', 'Garcia Perez'), ('Flavia', 'Guimaraes Bueno'), ('Ana Paula', 'Molero'), ('Katy', 'Oshea'), ('Angela', 'Dishkova'), ('Emily', 'Southall'), ('Tamara', 'Alvarado'), ('Lorena', 'Hernandez'), ('Alessia', 'Piran'), ('Thi Thanh Binh', 'Phan'), ('Caroline', 'Huberty'), ('Lottie', 'Fox'), ('Marta', 'Bertolaso'), ('Daphne', 'Friedrichs'), ('Karyn', 'Emeralda'), ('Natasha Natalia', 'Shigina'), ('Dana', 'Ihsanova'), ('Elin', 'Winkler'), ('Heather', 'Watson'), ('Martina', 'Caregaro'), ('Jasmine Janelle', 'Williams'), ('Welma', 'Luus'), ('Miharu', 'Imanishi'), ('Yuliya', 'Artsiomava'), ('Ivonne', 'Cavalle Reimers'), ('Derly', 'Cunya'), ('Julija', 'Lukac'), ('Ivana', 'Spasojevic'), ('Zane', 'Zarina'), ('Fiorella', 'Jerardino'), ('Anastasia', 'Mukhametova'), ('Diane', 'Trebalag'), ('Elizaveta', 'Kuzmina'), ('Ayaka', 'Terashi'), ('Marion', 'Dupuy'), ('Sarah', 'Moundir'), ('Giulia', 'Sussarello'), ('Julie', 'Gonzalez Rodriguez'), ('Mila', 'Marinkovic'), ('Isel', 'Martinez Marcos'), ('Danny', 'Engel'), ('Constanza Lara', 'Tempone'), ('Sibel', 'Ruzkar'), ('Seven', 'Oral'), ('Este', 'Potgieter'), ('Sabrina', 'Stewart'), ('Barbara', 'Bonic'), ('Shir', 'Aharon'), ('Carolina', 'Maso'), ('Martina', 'Furlanetto'), ('Elena', 'Mandzhukova'), ('Adriana', 'Chavez'), ('Dana', 'Machalkova'), ('Isabella', 'Aumueller'), ('Arushi', 'Sharma'), ('Yasmine', 'Abou Farah Trigueros'), ('Ye Ji', 'Mun'), ('Pilar', 'Quintana'), ('Natasha', 'Yonan'), ('Carolin', 'Daniels'), ('Nupur', 'Kaul'), ('Kelsey', 'Lawson'), ('Amanda', 'Bertani'), ('Lilien', 'Pacheco'), ('Marcela', 'Rosales'), ('Jovana', 'Karac'), ('Alejandra', 'Barragan'), ('Alyssa', 'Hibberd'), ('Valeria', 'Osadchenko'), ('Irene', 'Gonzalez Olivar'), ('Alexandra Alina', 'Tincu'), ('Anastasia', 'Burmistrova'), ('Ida', 'Krnic'), ('Kristie', 'Ahn'), ('Clara', 'Perez Marcos'), ('Marina', 'Lushchina'), ('Christina', 'Mathis'), ('Louise', 'Johansson'), ('Suzy', 'Larkin'), ('Alice', 'Savoretti'), ('Ghislaine', 'Van Baal'), ('Ivana', 'Filipi'), ('Nina', 'Pfahler'), ('Renata', 'Bakieva'), ('Genevieve', 'Barnes'), ('Maria', 'Belaya'), ('Maria Jose', 'Rodriguez'), ('Gvantsa', 'Robakidze'), ('Milena', 'Vujanovic'), ('Anna', 'Mangano'), ('Ashley', 'Krysiak'), ('Yi', 'Zhong'), ('Monica', 'Yajima'), ('Sandy', 'Marti'), ('Maiko', 'Yamashita'), ('Harriet', 'Sheahan'), ('Tomoko', 'Hagita'), ('Carla', 'Manzi'), ('Jolien', 'Gadeyne'), ('Chihiro', 'Nunome'), ('Ecaterina', 'Vasenina'), ('Pui Wing', 'Sher'), ('Ayna', 'Ereshova'), ('Yamit', 'Vodovoz'), ('Paloma', 'Mielgo'), ('Georgina', 'Campins Schonofer'), ('Alejandra', 'Renda Bouzada'), ('Gemma', 'Triay Pons'), ('Adelaide', 'Wood'), ('Adriana', 'Guzman'), ('Carolina', 'Barrionuevo'), ('Nerea', 'Piquer Albisu'), ('Elena', 'Burrone'), ('Katharina', 'Hock'), ('Petra', 'Jaskova'), ('Veronica', 'Virseda Sanchez'), ('Noemi', 'Novo Pereira'), ('Jin', 'Yoo'), ('Cristina', 'Melgarejo'), ('Karen', 'Barbat'), ('Sarah Rebecca', 'Sekulic'), ('Tamara', 'Stanic'), ('Daria', 'Kulbikova'), ('Chi Chi', 'Scholl'), ('Nelo', 'Phiri'), ('Na Lae', 'Han'), ('Tricia', 'Mar'), ('Xin', 'Wen'), ('Majoly', 'De Wilde'), ('Kamila', 'Rafkat'), ('Alina', 'Jerjomina'), ('Abi', 'Claydon'), ('Yurina', 'Tago'), ('Natalia', 'Kozel'), ('Aselya', 'Arginbayeva'), ('Kotchamon', 'Kongkerd'), ('Abigail', 'Tere Apisah'), ('Olivia', 'Rich'), ('Natali', 'Coronel'), ('Alexandra', 'Walters'), ('Marina', 'Kachar'), ('Alyssa', 'Fuentes'), ('Dominika', 'Schlehoferova'), ('Rachel', 'Michell'), ('Simone', 'Vranov Brown'), ('Claudia', 'Ortiz Albert'), ('Nadine', 'Pauli'), ('Rachel', 'Kahan'), ('Lyudmyla', 'Kichenok'), ('Nadiya', 'Kichenok'), ('Francesca', 'Franco'), ('Bianca', 'Hincu'), ('Indra', 'Bigi'), ('Catrin', 'Levers'), ('Carina', 'Litfin'), ('Alrissa', 'Tobe'), ('Marie', 'Temin'), ('Hyun Jung', 'Kim'), ('Yu', 'Nakashima'), ('Sarah', 'Seiderer'), ('Mafalda', 'Lhorca'), ('Sarah', 'Mclean'), ('Kristyna', 'Hancarova'), ('Oana', 'Danescu'), ('Raye Ann', 'Sandy'), ('Marina', 'Kozachenko'), ('Doroteja', 'Eric'), ('Sarah', 'Pham'), ('Amelia', 'Herring'), ('Diana', 'Marcinkevica'), ('Rowie', 'Kouw'), ('Dijana', 'Banovec'), ('Yvonne', 'Neuwirth'), ('Anja', 'Koell'), ('Fanny', 'Lundsgard'), ('Tara', 'Moore'), ('Anna', 'Velica'), ('Ana Maria', 'Szilagyi'), ('Yvonne Elizabeth', 'Tirado Tejeda'), ('Chanel', 'Simmonds'), ('Kobkanok', 'Upapong'), ('Natalia', 'Escobar'), ('Franziska Louise', 'Koehler'), ('Bianca', 'Tepper'), ('Tamaryn', 'Hendler'), ('Isabella', 'Escobar'), ('Alexandra', 'Leatu'), ('Giulia', 'Mecca'), ('Jimena', 'Wu'), ('Hannah', 'Hume'), ('Manisha', 'Chowdhury'), ('Song Yee', 'You'), ('Elliesa', 'Ball'), ('Yuri', 'Okada'), ('Kim', 'Berghaus'), ('Amit', 'Berkovitz'), ('Karina', 'Fiamenghi'), ('Matilda', 'Hamlin'), ('Barbara', 'Gueno'), ('Dagmara', 'Baskova'), ('Ema', 'Burgic'), ('Karolina', 'Lisiecka'), ('Mia', 'Vriens'), ('Sena', 'Bensafi'), ('Ivana', 'Kubickova'), ('Mariya', 'Sukhareva'), ('Nicola', 'George'), ('Yuliana', 'Umanets'), ('Agathe', 'Timsit'), ('Andrea', 'Tabachnik'), ('Agata', 'Bachanek'), ('Emily', 'Madill'), ('Julianna Barbosa', 'Bacelar'), ('Karina', 'Goia'), ('Raquel', 'Diaz'), ('Paola', 'Cos'), ('Ting Fei', 'Juan'), ('Elisha', 'Hande'), ('Fanni', 'Varga'), ('Ashley', 'Mackey'), ('Akilah', 'James'), ('Annie', 'Sullivan'), ('Hadar', 'Ostashinsky'), ('Maria Jesus', 'Ibanez Galindo'), ('Sandra', 'Gonzalez Salas'), ('Kristina', 'Vesse'), ('Tina', 'Tehrani'), ('Stephanie', 'Fox'), ('Yuliana', 'Motyl'), ('Jenny Thuy', 'Le'), ('Xenia', 'Knoll'), ('Laura', 'Antonana Iriarte'), ('Sachie', 'Ishizu'), ('Julia', 'Samuseva'), ('Vanessa', 'Moor'), ('Claudia Irene', 'Ponton Caamano'), ('Sibilla', 'Fiorentino'), ('Sasha', 'Khabibulina'), ('Andrea', 'Lippe'), ('Lu', 'Lin'), ('Violetta', 'Milkova'), ('Houda', 'Bellamine'), ('Chantal', 'Brutschin'), ('Rebecca', 'Kaineder'), ('Nino', 'Mebuke'), ('Sindhu Nila', 'Partheepan'), ('Anna', 'Rapoport'), ('Melina', 'Ferrero'), ('Natasha', 'Afridi'), ('Anastasia', 'Stepu'), ('Ursula', 'Castillejos'), ('Petra Maria', 'Kulhova'), ('Petra', 'Jurova'), ('Miruki', 'Kugai'), ('Stephanie', 'Slaveski'), ('Prerna', 'Bhambri'), ('Sviatlana', 'Pirazhenka'), ('Sabrina', 'Kierberg'), ('Francisca', 'Matos'), ('Alexandra', 'Mitrovska'), ('Melissa', 'Lutring'), ('Seyedeh', 'Saadat'), ('Anastasia', 'Kriz'), ('Kanyapat', 'Narattana'), ('Rebecca', 'Pedrazzi'), ('Mako', 'Mizunuma'), ('Virginia Eliana', 'Tica'), ('Christina', 'Madenoglou'), ('Silviya', 'Zhelyazkova'), ('Maria Fernanda', 'Jimenez'), ('Vincenza', 'Ciraolo'), ('Rani Fitriya', 'Wardhani'), ('Stefanie', 'Tan'), ('Maria Angelica', 'Tangarife'), ('Laura Sofia', 'Sanchez Perez'), ('Martina', 'Frantova'), ('Chelsea', 'Te Tai'), ('Michele Ayomide', 'Idera'), ('Alexandra', 'Avirvarei'), ('Christina Lavinia', 'Badan'), ('Karina Natalia', 'Lojo'), ('Fernanda', 'Guilhaume Correa'), ('Priscila', 'Nunez'), ('Isabela', 'Espinosa Davila'), ('Hitomi', 'Ozaki'), ('Sina', 'Haas'), ('Alexandra', 'Walker'), ('Kayla', 'Rizzolo'), ('Alessia', 'Camplone'), ('Claudia', 'Basciani'), ('Andrea', 'Gomez Carus'), ('Pia', 'Rygh'), ('Nikola', 'Horakova'), ('Xi Yao', 'Wang'), ('Monica', 'Aguado'), ('Daniel', 'Hava'), ('Shukufa', 'Abdullayeva'), ('Anett', 'Ferenczi Bako'), ('Nayara', 'Candido De Moraes'), ('Carolina', 'Prats Millan'), ('Federica', 'Colmari'), ('Paula', 'Ormaechea'), ('Derja', 'Turhan'), ('Louise', 'Harbo Schmidt'), ('Tarlina', 'Tipungwuti'), ('Kendal', 'Drake'), ('Gorana', 'Stevanovic'), ('Georgina', 'Fedosenkova'), ('Jessica', 'Bertoldo'), ('Daria', 'Kirpicheva'), ('Irina', 'Koripenko'), ('Isabella', 'Assad'), ('Simonka', 'Parajova'), ('Melissa', 'Minniti'), ('Rubi', 'Morales'), ('Dasa', 'Orlic'), ('Maria Joao', 'Koehler'), ('Lidziya', 'Marozava'), ('Giulia', 'Squadrin'), ('Andrea', 'Caamano'), ('Dominique', 'Wahl'), ('Hwa', 'Lee'), ('Colet', 'Weening'), ('Maria Daniela', 'Frascini'), ('Elizabeth', 'Golovkin'), ('Shelby', 'Rogers'), ('Tatiana', 'Rodens'), ('Andrea', 'Medina Tomas'), ('Christi', 'Potgieter'), ('Lee Anne', 'Lingo'), ('Viktorija', 'Golubic'), ('Stephanie', 'Hirsch'), ('Anne Laure', 'Dorseuil'), ('Inna', 'Volkovich'), ('Emiliana', 'Spinardi'), ('Kyra', 'Shroff'), ('Janneke', 'Wikkerink'), ('Greys', 'Moroder'), ('Diana', 'Isaeva'), ('Huai Hsuan', 'Huang'), ('Aida', 'Zukic'), ('Jessica', 'Ginier'), ('Daniela', 'Vidal'), ('Ayelen', 'Quinteros'), ('Gislaine', 'Conceicao Farias'), ('Verena', 'Schmid'), ('Marcelina', 'Cichon'), ('Anjyu', 'Kanda'), ('Ebba', 'Unden'), ('Ana', 'Claro'), ('Helga', 'Pinones'), ('Esthefhanie Darehly', 'Juarez Rojo'), ('Antea', 'Dedic'), ('Kiki', 'Filippou'), ('Niriantsa', 'Rasolomalala'), ('Aleksandra', 'Treskunova'), ('Julia Christine', 'Fellerhoff'), ('Rocio', 'Sanchez Palacio'), ('Jade', 'Frampton'), ('Isabela', 'Miro'), ('Julia', 'Rissanen'), ('Dalma Maria', 'Rojas Rodas'), ('Evelyne', 'Dom'), ('Kristina', 'Horsikyan'), ('Moe', 'Aoki'), ('Camila', 'Silva'), ('Andrea', 'Gamiz'), ('Kim', 'Stubbe'), ('Katarzyna', 'Kaleta'), ('Adelina Georgiana', 'Lipan'), ('Tanja', 'Grzan'), ('Sabrina', 'Xu'), ('Valeria', 'Solovieva'), ('Marta', 'Lewandowska'), ('Nicole', 'Peterson'), ('Khrystyna', 'Pavlyuk'), ('Ioana', 'Dinescu'), ('Amala', 'Amol Warrick'), ('Leona', 'Masuoka'), ('Paula', 'Kania'), ('Anna Benita', 'Fuchs'), ('Santina', 'Mushtakova'), ('Polina', 'Konop'), ('Morocco', 'Hitt'), ('Belen', 'Luduena'), ('Sofia', 'Luini'), ('Alessandra', 'Bonte'), ('Riko', 'Fujioka'), ('Peangtarn', 'Plipuech'), ('Daniela', 'Seguel'), ('Marta', 'Hnatyshyn'), ('Nikolina', 'Grbac'), ('Emily', 'Leenen'), ('Alexandra', 'Moreno Kaste'), ('Katarzyna', 'Kawa'), ('Ran', 'Meng'), ('Ana Maria', 'Stroe'), ('Alexandra', 'Artamonova'), ('Adriana', 'Perez'), ('Amina', 'Berdieva'), ('Lynda', 'Xepoleas'), ('Julia', 'Goloborodko'), ('Michela', 'Casanova'), ('Ana', 'Bogdan'), ('Cindy', 'Burger'), ('Irina', 'Chaukina'), ('Jennifer', 'Witthoeft'), ('Rebecca', 'Siegler'), ('Macarena', 'Acuna'), ('Nadia', 'Frederika'), ('Cielo Marisol', 'Castro Chao'), ('Leticia', 'Sanchez'), ('Maria', 'Navarro Cruz'), ('Eliana Elizabeth', 'Pistone'), ('Sophie', 'Letcher'), ('Anna', 'Livadaru'), ('Maria Patricia', 'Cordova'), ('Juliette', 'Sapene'), ('Emily', 'Gelber'), ('Hannah', 'Mueller'), ('Amina', 'St Hill'), ('Maryna', 'Zhytska'), ('Alena', 'Gizdic'), ('Aurora', 'Davis'), ('Ana Victoria', 'Pimienta'), ('Varvara', 'Kuznetsova'), ('Stefania', 'Rubini'), ('Shalaka', 'Uddur Manjunath'), ('Loreto', 'Alonso Martinez'), ('Vanda', 'Lukacs'), ('Taylor', 'Hollander'), ('Olga', 'Serbyn'), ('Marina', 'Cernea'), ('Johana Maria', 'Vitanzo Maravi'), ('Alicia', 'Doms Golobart'), ('Katie', 'Le'), ('Katelyn', 'Stokes'), ('Andrea Natalia', 'Martin'), ('Julieta Evangelina', 'Bidahorria'), ('Francesca', 'Bernardi'), ('Charo', 'Bintureira'), ('Alexandra', 'Kolesnichenko'), ('Rozike', 'Janzen Van Rensburg'), ('Farah', 'Baracat'), ('Kaitlin', 'Ray'), ('Nigina', 'Rahmanova'), ('Ulrikke', 'Eikeri'), ('Erika', 'Sugamura'), ('Sarah', 'Urbanek'), ('Epiphany B', 'Turner'), ('Kataraina', 'Hunia'), ('Yana', 'Koroleva'), ('Iveta', 'Masarova'), ('Cynthia Alejandra', 'Lopez'), ('Michaela', 'Frlicka'), ('Michaela', 'Honcova'), ('Gopika', 'Kapoor'), ('Nika', 'Kovac'), ('Patricia', 'Guerreiro'), ('Eva', 'Raszkiewicz'), ('Katie', 'Goepel'), ('Linda', 'Prenkovic'), ('Alina', 'Yanovskaya'), ('Ashling', 'Sumner'), ('Jitsupang', 'Samrej'), ('Arisa', 'Murakami'), ('Cecilia', 'Costa Melgar'), ('Sabina', 'Stilu'), ('Claudia Noemi', 'Cascella'), ('Flavia', 'Dechandt Araujo'), ('Ann Sophie', 'Rufyikiri'), ('Amy', 'Hoburn'), ('Louise', 'Brunskog'), ('Karolina', 'Chernaya'), ('Nives', 'Baric'), ('Diana', 'Makki'), ('Laura', 'Hornsby'), ('Chloe', 'Murphy'), ('Janina', 'Ruhstaller'), ('Yisel', 'Nodarse Darvois'), ('Milena', 'Zubkov'), ('Anastasia', 'Poliakova'), ('Sabrina', 'Tahir'), ('Di', 'Zhao'), ('Tory', 'Parravi'), ('Sederique', 'Merola'), ('Ece', 'Unlu'), ('Tamara', 'Alvarez Riobo'), ('Caroline', 'Wegner'), ('Lindsey', 'Lyles'), ('Fernanda', 'Sandoval'), ('Varunya', 'Wongteanchai'), ('Mariana', 'Salvador'), ('Lindsay', 'Graff'), ('Hana', 'Shimokawa'), ('Michelle', 'Fischer'), ('Monica', 'Turewicz'), ('Maria Florencia', 'Albertalli'), ('Komal', 'Safdar'), ('Laura', 'Fiala'), ('Costanza', 'Bruno De Lisi'), ('Paula', 'Lopez'), ('Martina', 'Zerbola'), ('Roisin', 'Mullins'), ('Lucy', 'Brown'), ('Ankita', 'Raina'), ('Cassidy', 'Crawford'), ('Amanda', 'Belgini Franchi'), ('Jana', 'Stankovicova'), ('Chiara', 'Basso Basset'), ('Marianne', 'Jodoin'), ('Naomi', 'Bleisch'), ('Mashaal', 'Hameed'), ('Charlotte', 'Phillips'), ('Sabrina', 'Dos Reis'), ('Thais', 'Romero'), ('Linnea', 'Pedersen'), ('Maria Sol', 'Carrasco'), ('Livia', 'Turiano'), ('Shelby', 'Talcott'), ('Yunjun', 'Wu'), ('Sofia Giantvigka', 'Zengou Nieviantomska'), ('Aida', 'Martinez Sanjuan'), ('Amandine', 'Hesse'), ('Rosie', 'Bird'), ('Ramona', 'Ghermani'), ('Cristina', 'Dinu'), ('Jainy', 'Scheepens'), ('Nadiya', 'Kolb'), ('Meheq', 'Khokhar'), ('Rebecca', 'Poikajarvi'), ('Midori', 'Yamamoto'), ('Alexandra M', 'Sheeran'), ('Jennifer', 'Ren'), ('Valeria', 'Detogni'), ('Laurie', 'Gingras'), ('Violetta', 'Tosmuk'), ('Gabriela', 'Markova'), ('Mishel', 'Kenin'), ('Samira', 'Giger'), ('Nicol', 'Signorini'), ('Jessica', 'Gomez Galloso'), ('Kaori', 'Yamazaki'), ('Mayte', 'Cuellar'), ('Eleanor', 'Lika'), ('Rachael', 'Tredoux'), ('Candela', 'Munoz Giron'), ('Ruxandra', 'Ababii'), ('Elisha', 'Gabb'), ('Samantha', 'Lieb'), ('Maria Paula', 'Ribero'), ('Hailey M', 'Johnson'), ('Chisato', 'Kobayashi'), ('Michelle', 'Larcher De Brito'), ('Akiko', 'Omae'), ('Iveta', 'Dapkute'), ('Alena', 'Shichkova'), ('Nina', 'Nagode'), ('Margot', 'De Haan'), ('Veronika', 'Bacikova'), ('Catalina', 'Pella'), ('Rosaline Zafir', 'Chavez Tello'), ('Mirjam', 'Gamperli'), ('Clotilde', 'Barriere'), ('Marija', 'Mirosavljevic'), ('Joanna Mary', 'Smith'), ('Beladora', 'Matallah'), ('Kim Alena', 'Twelker'), ('Zsofia', 'Miko'), ('Misaki', 'Yoshimoto'), ('Noel', 'Scott'), ('Florencia', 'Di Biasi'), ('Maryam', 'Eslami'), ('Natalla', 'Khaniejo'), ('Daniella', 'Patton'), ('Min', 'Liu'), ('Berat Sena', 'Dogru'), ('Ladina', 'Soler'), ('Namita', 'Bal'), ('Claire Cynthia', 'Mulyadi'), ('Isabella', 'Williams'), ('Sian', 'Bayliss'), ('Anastasia', 'Trubich'), ('Jil', 'Wagner'), ('Chiara', 'Mossi'), ('Anna', 'Peregudova'), ('Anjana', 'Kompally'), ('Despina', 'Papamichail'), ('Veronika', 'Zavodska'), ('Judit', 'Domingo Casas'), ('Lisa', 'Bastianello'), ('Nathaly', 'Kurata'), ('Briar', 'Preston'), ('Antonella', 'Galeano'), ('Maria Del Rosario', 'Rodriguez Arias'), ('Tamara', 'Blum'), ('Sandy', 'Vo'), ('Saana', 'Saarteinen'), ('Kalliopi', 'Zamanoudi'), ('Nicole', 'Martinez'), ('Alejandra', 'Hernandez Medel'), ('Beatrice', 'Cedermark'), ('Lucia', 'Paz Monteagudo'), ('Natasha', 'Kanvinde'), ('Romilda', 'Zitarosa'), ('Sanne', 'Louwers'), ('Sanskriti', 'Sinha'), ('Dane', 'Vorster'), ('Mishel', 'Okhremchuk'), ('Ekaterina', 'Kiseleva'), ('Kat', 'Facey'), ('Alexandra', 'Facey'), ('Desiree', 'Jakle'), ('Stephanie', 'Vidov'), ('Viktoriya', 'Bon'), ('Eva Maria', 'Sjolund'), ('Natalia', 'Lysova'), ('Stefania', 'Haddad'), ('Juliana', 'Gajic'), ('Mora', 'Eshak'), ('Maja', 'Jovic'), ('Jeni', 'Patel'), ('Ana Mihaela', 'Vladutu'), ('Zhen', 'Yan'), ('Jazmin', 'Britos'), ('Ziqi', 'Hou'), ('Anamaria', 'Candanoza'), ('Natasha Mayumi', 'Tomishima'), ('Chisato', 'Nakagawa'), ('Kayla', 'Gammie'), ('Cristina', 'Gimenez Pena'), ('Alicia', 'Robinson'), ('Xiao Jing', 'Lu'), ('Vassiliki', 'Giannakaki'), ('Hsin Ting', 'Tsai'), ('Yuka', 'Sadakane'), ('Mara', 'Benz'), ('Sabrina', 'Santamaria'), ('Alexandra', 'Petrzalkova'), ('Vaszilisza', 'Bulgakova'), ('Hisaimet', 'Mendez Gonzalez'), ('Nina', 'Wellnitz'), ('Marina', 'Danzini'), ('Elisa', 'Celi'), ('Natela', 'Dzalamidze'), ('Gabrielle', 'Desimone'), ('Iulia', 'Vodislav'), ('Yuka', 'Iijima'), ('Serena', 'Venica'), ('Jasmin', 'Kling'), ('Se Won', 'Lee'), ('Michaela', 'Meszarosova'), ('Debora', 'Echeverria'), ('Paula', 'Montoya'), ('Nicole', 'Gibbs'), ('Gabriela', 'Ce'), ('Giuliana', 'Olmos'), ('Milagros', 'Cubelli'), ('Ekin', 'Bahitli'), ('Karina', 'Saeri Ono'), ('Anna', 'Orlik'), ('Hana', 'Umek'), ('Marina Raluca', 'Tudorache'), ('Marion', 'Codino'), ('Eleni', 'Kordolaimi'), ('Denisa', 'Allertova'), ('Ruth', 'Seaborne'), ('Marcella', 'Cucca'), ('Dora', 'Andrejszki'), ('Christina', 'Laskaridou'), ('Elizaveta', 'Ianchuk'), ('Laetitia', 'Sarrazin'), ('Diana', 'Stomlega'), ('Sara', 'Pilic'), ('Ellina', 'Kornilova'), ('Denise', 'Scheiflinger'), ('Adreanna', 'Christopoulou'), ('Camilia', 'Benabdeljalil'), ('Sara', 'Benabdeljalil'), ('Anna', 'Smirnova'), ('Katharina', 'Holert'), ('Larisa', 'Sporea'), ('Nozomi', 'Fujioka'), ('Taro', 'Keens'), ('Anastasiya', 'Prenko'), ('Sayaka', 'Koumura'), ('Caroline', 'Price'), ('Suzana', 'Sava'), ('Antigoni', 'Kleftouri'), ('Katherine', 'Westbury'), ('Sheila Bertha', 'Aquino Aragon'), ('You Na', 'Sul'), ('Aleksandra', 'Krunic'), ('Paula', 'Rincon Otero'), ('Johanna', 'Skoglund'), ('Beatriz', 'Nallar'), ('Elena', 'Garcia Garrido'), ('Alix', 'Collombon'), ('Ekaterina', 'Yakovleva'), ('Nicole Theresa', 'Leisher'), ('Janine', 'Erasmus'), ('Danica', 'Milinkovicova'), ('Besarta', 'Avdullahi'), ('Kirsten', 'Scott'), ('Mercedes', 'Giner Gasco'), ('Catherine', 'Chantraine'), ('Leyla', 'Taracena'), ('Sloane', 'Stephens'), ('Esther', 'Santiago'), ('Sharni', 'Stocker Jones'), ('Mukhabbat', 'Saidova'), ('Ekaterina', 'Nikitina'), ('Amanda', 'Rodgers'), ('Nihal', 'El Aasar'), ('Rebeca', 'Pereira'), ('Kadi', 'Ilves'), ('Veronika', 'Zatekova'), ('Antonella', 'La Viola'), ('Dora', 'Vajdic'), ('Olga', 'Parres Azcoitia'), ('Ke Hsin', 'Chen'), ('Elisaveta', 'Baer'), ('Monika', 'Magusiak'), ('Cecilia Maria', 'Barbiero'), ('Annie', 'Mulholland'), ('Tal', 'Gorenstein'), ('Helene', 'Meuleman'), ('Sophia', 'Dzulynsky'), ('Emina', 'Bektas'), ('Carolina', 'Betancourt'), ('Dunja', 'Stamenkovic'), ('Priscila', 'Garcia'), ('Daniela', 'Degano'), ('Charlene', 'Monterrain'), ('Yang', 'Pang'), ('Ainhoa', 'Zamora Rubio'), ('Martina', 'Natali'), ('Sarah', 'Mateo'), ('Giovanna', 'Tomita'), ('Jennifer', 'Rink'), ('Na Hee', 'Lee'), ('Ksenia', 'Chimpoake'), ('Louise', 'Boinay'), ('Saya', 'Nishi'), ('Polina', 'Monova'), ('Helena', 'Bel Franquesa'), ('Alisa', 'Danilova'), ('Ines', 'Martins'), ('Rut Ester', 'Prudencio Csapek'), ('Daria', 'Mironova'), ('Catalina', 'Ronco'), ('Brigith Alejandra', 'Teran'), ('Dominique Chante', 'Mclean'), ('Adi', 'Ella'), ('Sofia', 'Holmberg'), ('Robin', 'Anderson'), ('Liat', 'Zimmermann'), ('Irini', 'Papageorgiou'), ('Anastasia', 'Matyukhina'), ('Isabella', 'Dale'), ('Federica', 'Arcidiacono'), ('Nadiia', 'Baryshpolets'), ('Nova', 'Patel'), ('Jeong Min', 'Jeon'), ('Mehreen', 'Izhar'), ('Melita', 'Ferjanic'), ('Laura', 'Ubeda Lopez'), ('Natalia', 'Zamora Jimenez'), ('Ksenia', 'Gospodinova'), ('Marta', 'Stojanovic'), ('Olga', 'Terteac'), ('Brenda', 'Moreira'), ('Leyla', 'Erkan'), ('Sarah', 'Hellstern'), ('Aishwarya', 'Agrawal'), ('Karen Johana', 'Martinez'), ('Laura', 'Bernard'), ('Laura', 'Schaeder'), ('Viktoria', 'Matejevic'), ('Xianghong', 'Yin'), ('Jessica', 'Wacnik'), ('Oana', 'Ionescu'), ('Silvia', 'Tumova'), ('Seunghyun', 'Lee'), ('Alexandra', 'Romanova'), ('Thale', 'Myhre'), ('Dajana', 'Ognjenovic'), ('Mimi', 'Fotopoulos'), ('Alina', 'Savchuk'), ('Lisa', 'Vallone'), ('Constanze', 'Lotz'), ('Lina', 'Padegimaite'), ('Clare', 'Fong'), ('Karolina', 'Pondusova'), ('Erika', 'Faba Lopez'), ('Niu Xuan', 'Zhou'), ('Lucia', 'Butkovska'), ('Melina', 'Gonzalez'), ('Dana', 'Nussralla'), ('Katerina', 'Popova'), ('Erin Carol', 'Stephens'), ('Nicole', 'Meyer'), ('Julia', 'Schiller'), ('Ajla', 'Tomljanovic'), ('Gloire', 'Mfoumouangana'), ('Natasa', 'Vukovic'), ('Maria', 'Bengtsson'), ('Madina', 'Yekubjanova'), ('Andrea', 'Pavlovic'), ('Viktoria', 'Stojanova'), ('Denise', 'Konig'), ('Timea', 'Babos'), ('Grace Sari', 'Ysidora'), ('Paula', 'Mocete Talamantes'), ('Carla', 'Mocete Talamantes'), ('Ji Yun', 'Park'), ('Kristina', 'Mladenovic'), ('Rishika', 'Sunkara'), ('Pia', 'Konig'), ('Daneika', 'Borthwick'), ('Mikele', 'Irazusta'), ('Klara', 'Dohnalova'), ('Haruka', 'Yamaura'), ('Divija', 'Mandava'), ('Elena', 'Zenko'), ('Chiara', 'Mendo'), ('Raluca', 'Mita'), ('Ivana', 'Vukovic'), ('Ma Regina', 'Santiago'), ('Mizuki', 'Konakawa'), ('Romina', 'Aufieri'), ('Ana Maria', 'Ayala Villacorta'), ('Breanna Alexa Bachini', 'Bachini'), ('Michal', 'Yogev'), ('Laura', 'Deigman'), ('Cyntia Soledad', 'Gimenez'), ('Jaruwadee', 'Kaewma'), ('Yuliana', 'Lizarazo'), ('Verena', 'Gantschnig'), ('Marina', 'Cunningham Pereira'), ('Andrea', 'Murillo'), ('Sabrina', 'Bamburac'), ('Abbi', 'Melrose'), ('Ainhoa', 'Atucha Gomez'), ('Steffi', 'Carruthers'), ('Matea', 'Curic'), ('Ireen', 'Kuipers'), ('Lok Sze', 'Leung'), ('Katarzyna', 'Kossowska'), ('Kseniia', 'Berestetskaya'), ('Su San Na', 'Sim'), ('Melanie', 'Maietti'), ('Julia', 'Lorca'), ('Barbara', 'Luz'), ('Siriporn', 'Phakamad'), ('Shir', 'Perkis'), ('Jana', 'Cepelova'), ('Sonia', 'Daggou'), ('Yekaterina', 'Sagitova'), ('Beatriz', 'Prieto Cabrera'), ('Alejandra', 'Reyes Menacho'), ('Ingrid Alexandra', 'Radu'), ('Steffi', 'Distelmans'), ('Melis', 'Sezer'), ('Farangiz', 'Shamsieva'), ('Paula', 'Feitosa'), ('Marija', 'Milutinovic'), ('Melissa', 'Kopinski'), ('Madison', 'Craft'), ('Lisa', 'Ehrensberger'), ('Ksenya', 'Bardabush'), ('Julia', 'Stamatova'), ('Elizabeth', 'Rafailidis'), ('Viktoria', 'Bjork'), ('Mari', 'Mahoni'), ('Tine', 'Maertens'), ('Lesbia', 'Zuniga'), ('Shruti', 'Archita'), ('Theresa', 'Smith'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Cordelia Currey', 'Witten'), ('Sofia', 'Baptista'), ('Kana', 'Okada'), ('Jessica', 'Sabeshinskaja'), ('Catherine', 'Leduc'), ('Michaela', 'Jasenakova'), ('Pauline', 'Lollia'), ('Dane', 'Joubert'), ('Raluca Elena', 'Platon'), ('Tamara', 'Mihajlovic'), ('Yuriko', 'Shinmura'), ('Maria Jose', 'Marino Calvino'), ('Amy', 'Askew'), ('Dan Ni', 'Wang'), ('Renata', 'Kuricova'), ('Abhilasha', 'Ahuja'), ('Xuanshuo', 'Ou'), ('Eliana Maria', 'Lopez Pappalardo'), ('Lorraine M', 'Guillermo'), ('Matilda', 'Hurst'), ('Svetlana', 'Piquerez'), ('Irina', 'Glimakova'), ('Giulia', 'Andreazza'), ('Hyejin', 'Lee'), ('Marina', 'Prosenica'), ('Chanel', 'Glasper'), ('Machika', 'Miyaji'), ('Marta', 'Dallosso'), ('Lidiia', 'Dashchenko'), ('Ksenia', 'Kirillova'), ('Nour', 'Abbes'), ('Meghan', 'Blevins'), ('Ashleigh', 'De Wet'), ('Rosalyn', 'Small'), ('Silvia', 'Miguel'), ('Ivanna', 'Slobodian'), ('Emma', 'Marti'), ('Romina Soledad', 'Sanio Juarez'), ('Patricia', 'Cyranowski'), ('Whitney P', 'Kay'), ('Oceane', 'Adam'), ('Ushna', 'Suhail'), ('Nikoleta', 'Vlaikoudi'), ('Amonica', 'Arcos'), ('Ikttesh', 'Chahal'), ('Valentyna', 'Ivakhnenko'), ('Camelia', 'Abdellah'), ('Katja', 'Milas'), ('Miu', 'Hongo'), ('Agustina Sol', 'Eskenazi'), ('Or', 'Sasson'), ('Ana Lorena', 'Belmar'), ('Ester', 'Goldfeld'), ('Pauline', 'Clavel'), ('Ivana', 'Kopsova'), ('Lauren', 'Mcminn'), ('Hanna', 'Tolonen'), ('Ivana', 'Kafedjiyska'), ('Fausthyara', 'Pietersz'), ('Satomi', 'Fujitani'), ('Yasemin', 'Cetinel'), ('Sayako', 'Matsunaga'), ('Silvia', 'Njiric'), ('Nikolette', 'Budai'), ('Andreea', 'Zabrac'), ('Marina', 'Lidiya'), ('Cynthia', 'Melita'), ('Yasmin', 'Ebada'), ('Pilar', 'Dominguez Lopez'), ('Heini', 'Salonen'), ('Megumi', 'Nishimoto'), ('Paula Alejandra', 'Saenz'), ('Vaniya', 'Dangwal'), ('Sarah', 'Means'), ('Ani', 'Vangelova'), ('Jana', 'Matouskova'), ('Salome', 'Kvitashvili'), ('Stefania', 'Fadabini'), ('Vivien', 'Juhaszova'), ('Michelle Paz', 'Coccio Nieto'), ('Clorinda', 'Wessels'), ('Georgina', 'Carswell'), ('Luksika', 'Kumkhum'), ('Shu Ying', 'Hsieh'), ('Lauren', 'Herring'), ('Nikol', 'Hristova'), ('Camille', 'Cheli'), ('Joanna', 'Nalborska'), ('Mubina', 'Vahobova'), ('Sofya', 'Malysheva'), ('Hongrui', 'Sun'), ('Aneliya', 'Kairlenova'), ('Raquel', 'Madrigal Rodriguez'), ('Nicole', 'Melichar'), ('Aminat', 'Kushkhova'), ('Nikolina Marija', 'Turudic'), ('Lana', 'Groenvynck'), ('Andela', 'Brguljan'), ('Margarida', 'Moura'), ('Liz Tatiane', 'Koehler Bogarin'), ('Jessica', 'Laing'), ('Teona', 'Tatishvili'), ('Diana', 'Reverte'), ('Grace', 'Denga'), ('Charlene', 'Seateun'), ('Trang', 'Huynh Phuong Dai'), ('Demi', 'Schuurs'), ('Hannah', 'Liljekvist'), ('Martina', 'Lombardi'), ('Adriana', 'Moedano'), ('Michiru', 'Furuya'), ('Stefanie', 'Stemmer'), ('Maja', 'Mladenovic'), ('Natasa', 'Trailovic'), ('Trevine', 'Sellier'), ('Giulia', 'Costa'), ('Robyn', 'Beddow'), ('Alina', 'Mikheeva'), ('Josephine', 'Boualem'), ('Alma Michelle', 'Espinosa Rodriguez'), ('Satomi', 'Yasuno'), ('Ekaterina', 'Yashina'), ('Yurika', 'Aoki'), ('Catalina', 'Lopez'), ('Ellie', 'Yates'), ('Sharmada', 'Balu'), ('Shweta', 'Rana'), ('Nadine', 'Zeitoun'), ('Maria', 'Zela'), ('Molly', 'Okoniewski'), ('Beatrice', 'Krauss Granate'), ('Karen M', 'Gomez Gonzalez'), ('Lyubov', 'Pogribnyak'), ('Mako', 'Irie'), ('Maria', 'Arenas'), ('Napatsakorn', 'Sankaew'), ('Martha Paola', 'Sanchez Merigo'), ('Sina', 'Niketta'), ('Sarah', 'Lee'), ('Sung Ah', 'Park'), ('Kemalie', 'Herath'), ('Valeriya', 'Savina'), ('Masa', 'Smic'), ('Lenka', 'Filipova'), ('Jamie', 'Pawid'), ('Natsumi', 'Kujime'), ('Paula', 'De Man'), ('Ariel', 'Sulimany'), ('Manisha', 'Foster'), ('Rafaela', 'Orenga Panizza'), ('Yue', 'Fei'), ('Francesca', 'Stephenson'), ('Camila', 'Franco'), ('Giovanna', 'Ramos'), ('Dilyara', 'Merzadinova'), ('Maryna', 'Zanevska'), ('Patricia', 'Fargas Osorio'), ('Yuki', 'Ito'), ('Andrea', 'Castillo Gutierrez'), ('Aleksandra', 'Trifunovic'), ('Maria Belen', 'Mosca'), ('Jasmine Nicole', 'Minor'), ('Edmee', 'Morin Kougoucheff'), ('Maria', 'Benkirane'), ('Dide', 'Beijer'), ('Grazia', 'Ripepi'), ('Haine', 'Ogata'), ('Elizaveta Anna', 'Nemchinov'), ('Yukako', 'Noi'), ('Anastasiya', 'Tripolskaya'), ('Alexandra', 'Nancarrow'), ('Mateja', 'Kraljevic'), ('Renata', 'Campagnolo'), ('Dominika', 'Rozanska'), ('Marjorie', 'Wladimirski'), ('Chantal', 'Skamlova'), ('Laura', 'Valkova'), ('Renata', 'Arshavskaya'), ('Sandra', 'Garriga Catala'), ('Iva', 'Jancevski'), ('Lucia', 'Soulie'), ('Pascalle', 'Thenoux Acuna'), ('Chen Lu', 'Wu'), ('Rita', 'Vilaca'), ('Elena', 'Bertoia'), ('Zanmarie', 'Pienaar'), ('Karoline', 'Grieshofer'), ('Luisanna', 'Rodriguez'), ('Linn', 'Timmermann'), ('Ankita', 'Bhatia'), ('Luicelena', 'Perez'), ('Chihiro', 'Matsumoto'), ('Soumeya', 'Anane'), ('Patricia', 'Haas'), ('Agustina', 'Valenzuela'), ('Smriti', 'Joon'), ('Isabel', 'Bischof'), ('Zi', 'Yang'), ('Marie Elise', 'Casares'), ('Chaimae', 'Roudami'), ('Valentina', 'Beccaria'), ('Akiko', 'Okuda'), ('Melanie', 'Benyadi'), ('Hua Chen', 'Lee'), ('Skylar', 'Kuykendall'), ('Denise', 'Van Der Ben'), ('Viktoria', 'Malova'), ('Tanya', 'Noury'), ('Devon', 'Kuijstermans'), ('Stacia', 'Kissell'), ('Nattawadee', 'Kotcha'), ('Rio', 'Kitagawa'), ('Andrea', 'Berzal Albaladejo'), ('Carlotta', 'Orlando'), ('Amy', 'Bowtell'), ('Ilinca', 'Stoica'), ('Melanie', 'Vlak'), ('Nikarat', 'Wateenukit'), ('Kenna', 'Kilgo'), ('Hao Ching', 'Chan'), ('Noy', 'Mor'), ('Ilijana', 'Ivic'), ('Claudia', 'Lorenzo Fernandez'), ('Zoe Gwen', 'Scandalis'), ('Tracy', 'Plant'), ('Eleni', 'Konstantinidou'), ('Yaiza', 'Franco'), ('Sarah', 'Petrides'), ('Idia', 'Amen'), ('Binasa', 'Beslagic'), ('Hannah', 'Martin Merchant'), ('Katarina', 'Adamovic'), ('India', 'Maggen'), ('Maria Eduarda', 'Medeiros'), ('Aiko', 'Yoshitomi'), ('Anastasia', 'Klyueva'), ('Gwendolyne', 'Laugier'), ('Yasmin', 'Hamzawy'), ('Alexiina', 'Ahonkivi'), ('Diletta', 'Alessandrelli'), ('Natallia', 'Vavulina'), ('Monica', 'Puig'), ('Louise', 'Reis De Campos'), ('Manon', 'Provost'), ('Solene', 'Ficheux'), ('Stephanie', 'Ntcha'), ('Natalia', 'Maynetto'), ('Irene', 'Gandara Gonzalez'), ('Emi', 'Mutaguchi'), ('Jovana', 'Jaksic'), ('Caterina', 'Ghedin'), ('Liv', 'Geurts'), ('Flavia', 'Porru'), ('Sabina', 'Lupu'), ('Kim', 'Sadi'), ('Karine', 'Celis'), ('Gun Hee', 'Kim'), ('Anna', 'Vasilyeva'), ('Kinga', 'Anusiewicz'), ('Paulina', 'Petriskova'), ('Martha Elena', 'Garza Del Alto'), ('Juliana', 'Silva De Carvalho'), ('Yana', 'Filyushina'), ('Maci', 'Epstein'), ('Charlotte', 'Villeminot'), ('Garbine', 'Muguruza'), ('Ellen', 'Tsay'), ('Kriszina', 'Kapitany'), ('Marina', 'Zhurba'), ('Wan Yi', 'Sweeting'), ('Marina', 'Moreno'), ('Laura Silva', 'De Arruda'), ('Lauren', 'Davis'), ('Ani', 'Amiraghyan'), ('Emily', 'Gitman'), ('Agnese', 'Rella'), ('Jovana', 'Blagojevic'), ('Julia', 'Kimmelmann'), ('Daniela', 'Garcia Diaz'), ('Reykan', 'Woro'), ('Alexandra', 'Aiello'), ('Caitlyn', 'Williams'), ('Caroline', 'Garcia'), ('Georgiana', 'Patrasc'), ('Zarina', 'Diyas'), ('Alicia', 'Barnett'), ('Rejhana', 'Mekic'), ('Daniel', 'Kestenboum'), ('Ravnoor', 'Kaur'), ('Kaede', 'Matsuo'), ('Nikita', 'Uberoi'), ('Stefana', 'Andrei'), ('Charlotte', 'Koning'), ('Raquel', 'Fernandes'), ('Klara', 'Fabikova'), ('Yanina', 'Darishina'), ('Mojca', 'Fijavz'), ('Blanka', 'Szavay'), ('Elizabeth', 'Thoms'), ('Manoela Corbellini', 'Chiacchio'), ('Tijana', 'Uzelac'), ('Luz Rocio', 'Jara'), ('Amina', 'Mrad'), ('Zeljana', 'Radicevic'), ('Estelle', 'Metadieu'), ('Cemre', 'Anil'), ('Agnes', 'Bukta'), ('Liliana', 'Stoiu'), ('Valeriya', 'Maksimchenko'), ('Ina', 'Kaufinger'), ('Josepha', 'Adam'), ('Lisa', 'Ruckenbaum'), ('Felicitas', 'Kastner'), ('Martina', 'Trevisan'), ('Alessia', 'Rossetti'), ('Jennifer', 'Pusey'), ('Ainhoa', 'Rico Martin'), ('Susana', 'Florez'), ('Ingrid', 'Vojcinakova'), ('Jil Nora', 'Engelmann'), ('Nelli', 'Buyuklianova'), ('Charitomeni', 'Matoula'), ('Barbora', 'Ruffini'), ('Beatriz', 'Morales Hernandez'), ('Andreea', 'Istrate'), ('Yulia', 'Georgieva'), ('Matea', 'Cutura'), ('Desiree', 'Tran'), ('Christine', 'Guerrazzi'), ('Stephanie M', 'Vlad'), ('Hristina', 'Dishkova'), ('Julia Mihaela', 'Moldovan'), ('Emily', 'Mazzola'), ('Amreen', 'Chaudhary'), ('Anna', 'Klasen'), ('Pleun', 'Burgmans'), ('Sandra', 'Roldan'), ('Ancia', 'Ifill'), ('Tatiana', 'Filaire'), ('Bianca', 'Nicolela Susanna'), ('Jessica', 'Lawrence'), ('Martina Alejandra', 'Baca Villagomez'), ('Yauheniya', 'Shapaval'), ('Disha Satish', 'Agarwal'), ('Leticia', 'Giudici'), ('Helen', 'Harvey'), ('Sylwia', 'Kociecka'), ('Valeria', 'Campigotto'), ('Kamila', 'Abdukadirova'), ('Darya', 'Shulzhanok'), ('Elena', 'Fayner'), ('Martina', 'Demichelis'), ('Sofia', 'Lozano'), ('Anna Clarice', 'Patrimonio'), ('Mary Ann', 'Balint'), ('Isabel', 'Steger'), ('Polina', 'Vinogradova'), ('Jenna', 'Laroussi'), ('Sinem', 'Alptekin'), ('Anastasia', 'Vovk'), ('Rona', 'Lavian'), ('Olga', 'Kishchun'), ('Valentina', 'Gemini'), ('Viktoriya', 'Karmenova'), ('Adrija', 'Runcha'), ('Naomi', 'Holopainen'), ('Kelli', 'Hine'), ('Ronit', 'Yurovsky'), ('Leighann', 'Sahagun'), ('Fabiana', 'Araya'), ('Francesca M', 'Fanchin'), ('Kateryna', 'Pyatakova'), ('Julia', 'Casselbury'), ('Meng Ning', 'Deng'), ('Juliana', 'Jofre'), ('Arney', 'Johanessdottir'), ('Nadejda', 'Sidorenko'), ('Belen', 'Rivera'), ('Rachael', 'Reed'), ('Antonia', 'Markuskova'), ('Ekaterina', 'Tour'), ('Polina', 'Movchan'), ('Marzhan', 'Kukoneva'), ('Sowjanya', 'Bavisetti'), ('Mina', 'Matsuba'), ('Anaeve', 'Pain'), ('Nithya Raj', 'Babu Raj'), ('Danielle Rose', 'Collins'), ('Yongyuan', 'Wang'), ('Fatima Zohra', 'Boukezzi'), ('Patricia', 'Ku Flores'), ('Caroline Betzave', 'Lojan Cruz'), ('Nathania Ratih Putri', 'Karsita'), ('Iryna', 'Kyrychenko'), ('Petra', 'Kubinova'), ('Risa', 'Nakahara'), ('Catalina Paz', 'Arce Riquelme'), ('Agata', 'Baranska'), ('Jeanette', 'Draeger'), ('Alina', 'Pakharenko'), ('Khaoula', 'Allaoui'), ('Karyna', 'Alesha'), ('Gabrielle', 'Moxey'), ('Eden Megan', 'Chang'), ('Kana', 'Natsume'), ('Haruka', 'Taniguchi'), ('Vivian', 'Heisen'), ('Eirdis', 'Ragnarsdottir'), ('Jane', 'Stewart'), ('Biola', 'Akewula'), ('Viktoryia', 'Kisialeva'), ('Lizeth Vanessa', 'Gomez Diaz'), ('Camille', 'Goodman'), ('Anna', 'Makuha'), ('Bruna', 'Magalhaes'), ('Kyria', 'Dunford'), ('Emily', 'Rodbourne'), ('Tamar', 'Komakhidze'), ('Sarahi', 'Garcia Carrera'), ('Aina', 'Morey Juan'), ('Dora', 'Pavlinic'), ('Eleanor', 'Deaves'), ('Ioana Daniela', 'Bighiu'), ('Kimika', 'Sakamoto'), ('Lee', 'Levy'), ('Aikaterini', 'Stavroulaki'), ('Theresa', 'Kleinsteuber'), ('Patricia', 'Quintana Cerezo'), ('Nadya', 'Syarifah'), ('Aggeliki', 'Prezani'), ('Mina', 'Saygi'), ('Lina', 'Amouzoune'), ('Rebeca', 'Aguilar Dominguez'), ('Fiona', 'Gervais'), ('Julija', 'Kulibaba'), ('Kendal', 'Woodard'), ('Yujia', 'Wang'), ('Mckenzie', 'Thomas'), ('Ran', 'Tian'), ('Simona', 'Ionescu'), ('Marines', 'Holguin'), ('Charlotte', 'Roemer'), ('Anne Sophie', 'Forget'), ('Yasuyo', 'Numajiri'), ('Rachel', 'Girard'), ('Carla', 'Forte'), ('Camila Andrea', 'Roca'), ('Shi Ying', 'Li'), ('Desirae', 'Krawczyk'), ('Kenia', 'Vasallo Soto'), ('Stephanie', 'Carmans'), ('Isidora', 'Radojkovic'), ('Elizaveta', 'Deykun'), ('Audrey', 'Capouet'), ('Nicole', 'Collie'), ('Elizabeta', 'Bauer'), ('Benedetta', 'Fasciani'), ('Paulina', 'Czarnik'), ('Alice', 'Garcia'), ('Mariangeles', 'Gomez Quintana'), ('Sanae', 'Ohta'), ('Tian', 'Cao'), ('Angie', 'Torres'), ('Brooke', 'Taylor'), ('Maria Jose', 'Buil Tellaeche'), ('Kerstin', 'Gressmann'), ('Natasha', 'Palha'), ('Ilona', 'Kremen'), ('Lyuboslava', 'Peruhova'), ('Chanelle', 'Van Nguyen'), ('Soledad', 'Calderon Arroyo'), ('Julia', 'Teufel'), ('Laura', 'Robson'), ('Nicole', 'Hoynaski'), ('Samantha', 'Pribaz'), ('Claudia Antonia', 'Enache'), ('Vaibhavi', 'Trivedi'), ('Libby', 'Muma'), ('Aida', 'Golman'), ('Seraina', 'Jaeger'), ('Corina', 'Jaeger'), ('Mirjam', 'Zeller'), ('Aleksandra', 'Nionova'), ('Karin', 'Hoppler'), ('Jenya', 'Plevako'), ('Robu', 'Kajitani'), ('Nino G', 'Sujashvili'), ('Pei Yu', 'Sieh'), ('Maria', 'Panaite'), ('Lin', 'Zhu'), ('Maria', 'Masini'), ('Alexandra', 'Bykova'), ('Inna', 'Bondarenko'), ('Valeryia', 'Kulikouskaya'), ('Natasha', 'Fourouclas'), ('Stephanie', 'Nauta'), ('Antoaneta', 'Tzarvulkova'), ('Diala', 'Jamaleddine'), ('Anna Lena', 'Friedsam'), ('Kate', 'Vialle'), ('Anna', 'Schubries'), ('Estelle', 'Balan'), ('Elyzaveta', 'Tymchenko'), ('Tessa', 'Breve'), ('Saisai', 'Zheng'), ('Katerina', 'Kaminkova'), ('Tijana', 'Rotim'), ('Fernanda Luvizotto Do', 'Amaral'), ('Dariya', 'Dashutina'), ('Dominika', 'Toronyi'), ('Sarah', 'Tremuth'), ('Ksenia', 'Khatsey'), ('Camila', 'Aguirri'), ('Giulia', 'Ferrari'), ('Morgan', 'Mccray'), ('Leela', 'Beattie'), ('Danielle', 'Zinn'), ('Astrid Maria', 'Gehre Boettner'), ('Nelly', 'Garcia Sanchez'), ('Steffany', 'Bermudez'), ('Katharina', 'Blik'), ('Siria Elena', 'Brebenel'), ('Liubov', 'Vasilyeva'), ('Katherine Gabriela', 'Miranda Chang'), ('Jeannette', 'Moesgen'), ('Deimante', 'Bulatovaite'), ('Hyojung', 'Yea'), ('Lorenza', 'Stefanelli'), ('Charlene', 'Favier'), ('Anais', 'Deville'), ('Annika', 'Beck'), ('Beatriz Valente', 'De Castro Coelho'), ('Megane', 'Bianco'), ('Morven', 'Mcculloch'), ('Brenda', 'Njuki'), ('Eri', 'Hozumi'), ('Xinyi', 'Jiang'), ('Katharina', 'Lehnert'), ('Tijana', 'Vrhovac'), ('Katerina', 'Latalova'), ('Brianna', 'Morgan'), ('Michala', 'Kucharova'), ('Kateryna', 'Kozlova'), ('Hao Chen', 'Tang'), ('Mayte', 'Calmet'), ('Vanessa Steffi', 'Ortiz Perez'), ('Anna', 'Montserrat Sanchez'), ('Elizabeth', 'Arce'), ('Frances', 'Altick'), ('Aminat', 'Quadri'), ('Jessica', 'Pegula'), ('Natalia', 'Galan Gomez'), ('Elena Teodora', 'Cadar'), ('Carol', 'Augustine Benito'), ('Manon', 'Peral'), ('Karolina', 'Stuchla'), ('Eugenie', 'Bouchard'), ('Caterina', 'Lepore Palmisano'), ('Joanna', 'Henderson'), ('Fang Chi', 'Tsao'), ('Maria', 'Pujol Serra'), ('Sinhee', 'Kim'), ('Camila', 'Acuna'), ('Michele', 'Erkens'), ('Malin', 'Ulvefeldt'), ('Da Un', 'Lee'), ('Yuly Marcela', 'Tamayo'), ('Petra', 'Pokorna'), ('Elsa', 'Pellegrinelli'), ('Cheng Ling', 'Huang'), ('Candelaria', 'Sedano Acosta'), ('Dafna', 'Peleg'), ('Ekaterina', 'Semenova'), ('Noemi', 'Hemmerich'), ('Lize', 'Leenknecht'), ('Soraya', 'Moradian'), ('Sofiya', 'Bogatova'), ('Maria Paula', 'Deheza'), ('Maria Ines', 'Deheza'), ('Jessie Felisia', 'Pakaya'), ('Barbora', 'Kijasova'), ('Caroline', 'Van De Wijgaart'), ('Magdalena', 'Cordero'), ('Ananya', 'Sarkar'), ('Ashley M', 'Kitchen'), ('Daria', 'Gavrilova'), ('Asmae', 'Benzit'), ('Deniz', 'Ulutug'), ('Thaisa', 'Pereira'), ('Daphne', 'Van Den Heuvel'), ('An Sophie', 'Mestach'), ('Andromachi', 'Bakagianni'), ('Anna', 'Mamalat'), ('Andreea', 'Badileanu'), ('Nada', 'Zaher'), ('Sofia', 'Montemayor'), ('Vicki', 'Saxegaard'), ('Cecilia', 'Mercier'), ('Charlotte', 'Pearce'), ('Daniela Renee', 'Leitch'), ('Giulia', 'Mastellone'), ('Carolin', 'Schmidt'), ('Natalie', 'Laus'), ('Ha Young', 'Ji'), ('Maria', 'Garoz Moreno'), ('Juliana', 'Goncalves'), ('Nilushi', 'Fernando'), ('Paloma Margarita', 'Mereles Aranda'), ('Suzanna', 'Grigoryan'), ('Carmene', 'Dotto'), ('Alejandra', 'Starkova'), ('Irina', 'Constantinide'), ('Emma', 'Onila'), ('Alisa', 'Ogorodova'), ('Bruna', 'Ponce'), ('Jaeyeon', 'Kim'), ('Dariya', 'Berezhnaya'), ('Barbara Guadalupe', 'Urrutia'), ('Vlada', 'Svarkovskaya'), ('Aliaksandra', 'Sasnovich'), ('Elianne', 'Douglas Miron'), ('Francesca', 'Sella'), ('Cynthia', 'Del Rey Guardiola'), ('Andrea Renee', 'Villarreal'), ('Ekaterina', 'Lavrikova'), ('Courtney', 'Colton'), ('Maria Fernanda', 'Vargas'), ('Ioana', 'Posirca'), ('Janine', 'Remler'), ('Alison', 'Van Uytvanck'), ('Marcela', 'Zacarias'), ('Qianqian', 'Zhao'), ('Jana', 'Boubelikova'), ('Olha', 'Romanyshyn'), ('Dina', 'El Harazi'), ('Ekaterina', 'Tugarinova'), ('Daria', 'Afanasyeva'), ('Kari', 'Gunton'), ('Kamila', 'Pavelkova'), ('Andrea', 'Rodriguez Company'), ('Daria', 'Salnikova'), ('Lena', 'Specht'), ('Elisabeth', 'Abanda'), ('Konstantina', 'Tsadari'), ('Claudia Lazara', 'Magarino Lopez'), ('Alicia', 'Fernandez Galvez'), ('Waka', 'Kirihata'), ('Rei', 'Ikeda'), ('Elizaveta', 'Ignatova'), ('Antonia', 'Conze'), ('Shani', 'Blecher'), ('Hanna', 'Landener'), ('Julia', 'Jones'), ('Olena', 'Kyrpot'), ('Cristina', 'Nicolae'), ('Kelly', 'Southwood'), ('Kyle', 'Mcphillips'), ('Eva', 'Rodriguez De Las Heras'), ('Arantxa', 'Sanchez'), ('Brittany', 'Lashway'), ('Viktorija', 'Rajicic'), ('Sarai', 'Flores Diaz'), ('Silky', 'Sachdeva'), ('Ganna', 'Poznikhirenko'), ('Amy', 'He'), ('Catherine', 'Harrison'), ('Chia Hsien', 'Yang'), ('Kelli Elizabeth', 'Close'), ('Florencia', 'Magni'), ('Risa', 'Ozaki'), ('Maria Ximena', 'Herrera Rea'), ('Olivia', 'Larsson'), ('Samantha Rose', 'Droop'), ('Yuumi', 'Totsuka'), ('Maayan', 'Mastey'), ('Anna', 'Abadias Morales'), ('Ana Sofia', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Natalia', 'Davila'), ('Patrizia', 'Fusco'), ('Daniela', 'Vanko'), ('Magdalena', 'Stencel'), ('Sofico', 'Kadzhaya'), ('Natnicha', 'Ruangsumrej'), ('So Hee', 'Jung'), ('Sohinee', 'Ghosh'), ('Katarzyna', 'Kapustka'), ('Alejandra', 'Diaz Mares'), ('Anastasia', 'Vdovenco'), ('Kirandeep Kaur', 'Kotade'), ('Nela', 'Platkova'), ('Vera', 'Tverdikova'), ('Marta', 'Galka'), ('Alexia', 'Rycroft'), ('Steffy', 'Canals Baker'), ('Romaine', 'Zenhausern'), ('Andrea', 'Norlander'), ('Skylar Alexandra', 'Morton'), ('Mandy', 'Wagemaker'), ('Anastasiya', 'Zubkova'), ('Aashima', 'Garg'), ('Andjela', 'Novcic'), ('Katarina', 'Pavlovic'), ('Rosalie', 'Willig'), ('Vannesa', 'Gunawan'), ('Sung Hee', 'Kim'), ('Sharifah Syafeenaz', 'Syed Azmir'), ('Daria', 'Shakoulina'), ('Christina', 'Shakovets'), ('Stephany', 'Gamiz'), ('Caty', 'Santos'), ('Janina', 'Mistecky'), ('Angelica', 'Sepulveda'), ('Laura', 'Svatikova'), ('Sophie', 'Dunlop'), ('April', 'Van Gennip'), ('Yafan', 'Wang'), ('Tria Rizki', 'Amalia'), ('Tristen Z', 'Dewar'), ('Roumeila', 'Zhir'), ('Carita', 'Moolman'), ('Noelia', 'Zeballos'), ('Simina Teodora', 'Bodea'), ('Misano', 'Sato'), ('Caitlin Paige', 'Hindmarsh'), ('Jelena', 'Lazarevic'), ('Konstantina', 'Papaoikonomou'), ('Alejandra', 'Obando'), ('Haruna', 'Umemoto'), ('Nadejda', 'Stavreva'), ('Irene', 'Martinez Del Olmo'), ('Irina', 'Slizovskaya'), ('Asel', 'Espolova'), ('Grace', 'Min'), ('Rocio', 'Martin Fernandez'), ('Giada', 'Clerici'), ('Reem', 'Fayed'), ('Elisa', 'Idini'), ('Ecaterina', 'Oproiu'), ('Adina Alexandra', 'Marinescu'), ('Kirsten', 'Lewis'), ('Saneeya', 'Singh'), ('Ellen', 'Allgurin'), ('Kelsey', 'King'), ('Stephanie', 'Loutsenko'), ('Zalina', 'Khairudinova'), ('Melissa Emile', 'Kandinata'), ('Deborah', 'Suarez'), ('Kathinka', 'Von Deichmann'), ('Isadora Borges', 'Zwetsch'), ('Andrea', 'Crespo De La Concepcion'), ('Athena', 'Nathalia'), ('Lisa', 'Andersson'), ('Martina', 'Biollo'), ('Chinatsu', 'Shimizu'), ('Asya', 'Latifoglu'), ('Daria', 'Prytkova'), ('Camille', 'Lalou'), ('Yana', 'Yurchenko'), ('Georgina', 'Sellyn'), ('Snigdha', 'Padamata'), ('Mila', 'Majtan'), ('Miu', 'Ema'), ('Yara', 'Abed'), ('Maeva', 'Razakasoa'), ('Cornelia', 'Lister'), ('Mariami', 'Skhirtladze'), ('Isabella', 'Catelani'), ('Maya', 'Jansen'), ('Ana Maria', 'Gilca'), ('Isotta', 'Mancini'), ('Makoto', 'Ninomiya'), ('Zainab', 'Ali Sajjad'), ('Devan', 'Mccluskey'), ('Paula', 'Castro'), ('Cisil Buse', 'Ilgazli'), ('Nina', 'Catovic'), ('Gabriela', 'Porubin'), ('Sara', 'Castellano'), ('Maria Jose', 'Samano Moreno'), ('Mariah', 'Plauth'), ('Lucie', 'Chrastecka'), ('Tijana', 'Filipovic'), ('Samantha', 'Koelliker'), ('Soo Bin', 'Oh'), ('Melissa', 'Missaglia'), ('Emiliya', 'Gadzhieva'), ('Ann Kathrin', 'Schmitz'), ('Denise', 'Maxl'), ('Sharon Sanchana', 'Paul'), ('Karolina', 'Rozenberg'), ('Lorena', 'Constantin'), ('Nadia Yahya Tear', 'Tjahjana'), ('Pernilla', 'Mendesova'), ('Sara', 'Sherif'), ('Martina', 'Chrobakova'), ('Giulia', 'Riepe'), ('Julia', 'Dinhof'), ('Dinara', 'Khalilova'), ('Vesilina', 'Ivanova'), ('Malene', 'Stripp'), ('Sari', 'Baba'), ('Giulia', 'Guidetti'), ('Lenice', 'Van Eyk'), ('Suleika', 'Besser'), ('Reika', 'Agata'), ('Emy', 'Damiani'), ('Federica', 'Spazzacampagna'), ('Naomi', 'Tran'), ('Tabata Oshiro', 'Coutinho'), ('Julia', 'Elbaba'), ('Silvia', 'Margaroli'), ('Sofia', 'Garcia Morales'), ('Susan', 'Niemann'), ('Valentina', 'Quinones'), ('Manya', 'Nagpal'), ('Michelle', 'Bertolini'), ('Sonya', 'Latycheva'), ('Martina', 'Parmigiani'), ('Yuriko', 'Ono'), ('Angelika', 'Sobiecka'), ('Elizaveta', 'Luzina'), ('Martina', 'Zavarise'), ('Francesca', 'Fusinato'), ('Darina', 'Dobrovolski'), ('Bilyana', 'Savova'), ('Prarthana G', 'Thombare'), ('Liora', 'Krasnopolski'), ('Andrea', 'Mekel'), ('Lauren', 'Stratman'), ('Carla', 'Tur Mari'), ('Theiviya', 'Selvarajoo'), ('Rana', 'Sherif Ahmed'), ('Emilija', 'Ceranic'), ('Rona', 'Berisha'), ('Basak', 'Eraydin'), ('Anastasia', 'Frolova'), ('Nadia', 'Ravita'), ('Kristina', 'Beznakova'), ('Brooke Lindsey', 'Hughes'), ('Rhiann', 'Newborn'), ('Annika', 'Sillanpaa'), ('Ana Paula', 'Menezes Simoes'), ('Reka', 'Muller'), ('Sonora', 'Ijdo'), ('Olivia', 'Boesing'), ('Barbara', 'Rivera Rivera'), ('Olga', 'Doroshina'), ('Emma', 'Allen'), ('Konstantina', 'Lalaouni'), ('Aldea', 'Rinciari'), ('Carla', 'Georgescu'), ('Anita', 'Husaric'), ('Patricia', 'Martins'), ('Andressa Cristina', 'Souza'), ('Arushi', 'Jain'), ('Maria', 'Milanova'), ('Yaar Ester', 'Shafir'), ('Tanaporn', 'Thongsing'), ('Isabella', 'Fernandez Diaz'), ('Yui', 'Tomita'), ('Hui Ling', 'Sun'), ('Chloe', 'Paquet'), ('Montserrat', 'Gonzalez'), ('Jessica', 'Birowski'), ('Andrea', 'Retolaza Andrade'), ('Taisiya', 'Zakarlyuk'), ('Pauline', 'Payet'), ('Sara', 'Eccel'), ('Katya', 'Malikova'), ('Giovana', 'Patitucci'), ('Daiana', 'Hail'), ('Elizabeth', 'Means'), ('Nigina', 'Abduraimova'), ('Gabriela', 'Van De Graaf'), ('Daria', 'Gajos'), ('Shannon', 'Cox'), ('Lauren', 'Chypyha'), ('Janine', 'Koleta'), ('Ann Kathrin', 'Wind'), ('Selma', 'Husic'), ('Lobke', 'Haepers'), ('Tina', 'Mohorcic'), ('Camilla', 'Scala'), ('Sofiya', 'Kovalets'), ('Natsumi', 'Kobayashi'), ('Tamitha', 'Nguyen'), ('Michele', 'Grimm'), ('Vimbai Patience', 'Ugaro'), ('Chiara', 'Pappacena'), ('Tanya Amala', 'Burgula'), ('Nastja', 'Kolar'), ('Abla', 'Chadli'), ('Ana Helena', 'De Moraes Pinto'), ('Yuka', 'Hayashi'), ('Sara', 'Sussarello'), ('Caroline', 'Romeo'), ('Covadonga', 'Muradas'), ('Maria Concepcion', 'Bulilan'), ('Ratnika', 'Batra'), ('Mingyang', 'Liu'), ('Julia', 'Valetova'), ('Abbie', 'Myers'), ('Eloise', 'Gournay'), ('Honoka', 'Kawauchi'), ('Nicole', 'Ballach'), ('Jazzamay', 'Drew'), ('Tiffany', 'William'), ('Luise', 'Intert'), ('Natasha', 'Micevski'), ('Alena', 'Karpova'), ('Rachel', 'Porter'), ('Erina', 'Hayashi'), ('So Ra', 'Lee'), ('Maria', 'Palhoto'), ('Xue', 'Zhang'), ('Alejandra', 'Alvarez'), ('Brandy', 'Mina'), ('Miriam Ruth', 'Lane'), ('Antonia', 'Berse'), ('Kimberley Ann', 'Surin'), ('Natalija', 'Kostic'), ('Chiara', 'Trovi'), ('Ella', 'Leivo'), ('Gussie', 'Osullivan'), ('Consuelo', 'Costantino'), ('Patricia Maria', 'Tig'), ('Viktoria', 'Laskutova'), ('Kirstie', 'Pathumanun Hearn'), ('Andrea', 'Duva'), ('Kathleen', 'Derienzo'), ('Tjasa', 'Srimpf'), ('Irem', 'Ergun'), ('Eleonore', 'Tchakarova'), ('Pamela', 'Lopez Cervantes'), ('Ekaterina', 'Donetskova'), ('Verginie', 'Tchakarova'), ('Silvia', 'Garcia Jimenez'), ('Loes', 'Janssen'), ('Lea', 'Winkler'), ('Beatriz', 'Leon Hernandez'), ('Ashley', 'Keir'), ('Sybille', 'Gauvain'), ('Emira', 'Spaho'), ('Anel', 'Luus'), ('Emi', 'Yamaguchi'), ('Alina', 'Hoelzel'), ('Laura', 'Pigossi'), ('Monica Putri Kusuma', 'Wardhani'), ('Tamara', 'Bizhukova'), ('Lina', 'Gjorcheska'), ('Sveva', 'Mazzari'), ('Noemi', 'Giraudo'), ('Amrita', 'Mukherjee'), ('Siyu', 'Qin'), ('Beatrice Shirin', 'Khosravi'), ('Seda', 'Arantekin'), ('Dina', 'Karina'), ('Natalie', 'Novakova'), ('Hui Zhen', 'Ruan'), ('Federica', 'Benitez Zafra'), ('Thyra', 'Taune'), ('Samantha', 'Lee'), ('Ericka Roxana', 'Rivero'), ('Storm', 'Sanders'), ('Sofia', 'Dmitrieva'), ('Alexandra', 'Martinez'), ('Mariame', 'Toure'), ('Vijayalakshmi', 'Radhakrishnan'), ('Ximena', 'Siles Luna'), ('Natalie', 'Lozano'), ('Amanda', 'Gilson'), ('Blair', 'Shankle'), ('Stella', 'Di Michele'), ('Alisa', 'Kniazeva'), ('Gunjee', 'Sukhbat'), ('Pauline', 'Descat'), ('Jesika', 'Maleckova'), ('Avni', 'Jain'), ('Konstantina', 'Adami'), ('Galina', 'Bykova'), ('Sonya Sheeran', 'Stover'), ('Eva', 'Castiglioni'), ('Thais', 'Castiglioni'), ('Marian', 'Martin Garcia'), ('Maria', 'Alvarez Aguaron'), ('Angelica', 'Moratelli'), ('Preethi', 'Ujjini'), ('Paloma', 'Villalba'), ('Yuxuan', 'Zhang'), ('Guadalupe', 'Perez Rojas'), ('Svetlana', 'Patakhonova'), ('Ursula', 'Alvarado Camino'), ('Kelsey', 'Laurente'), ('Areeporn', 'Wanichayapanich'), ('Shkekyana', 'Dubova'), ('Francesca', 'Rescaldani'), ('Alena', 'Vasilyeva'), ('Miki', 'Ukai'), ('Jessica', 'Ren'), ('Saray', 'Sterenbach'), ('Natasha', 'Prokhnevska'), ('Dael Alma', 'Mckenna'), ('Zarah', 'Razafimahatratra'), ('Verena Jane', 'Scott'), ('Olivera', 'Tadijin'), ('Solomiya', 'Zinko'), ('Veronika', 'Mazalova'), ('Catherine', 'Parenteau St Antoine'), ('Samantha', 'Czarniak Rego'), ('Joanna', 'Jurca'), ('Ons', 'Jabeur'), ('Manon', 'Arcangioli'), ('Lauren', 'Schmidt'), ('Giovanna', 'Manifacio'), ('Ysaline', 'Bonaventure'), ('Ayane', 'Iwai'), ('Jaimy Gayle', 'Van De Wal'), ('Victoria', 'Pahlett'), ('Suzy', 'Tan'), ('Margarita', 'Gasparyan'), ('Anna', 'Smolina'), ('Minori', 'Himeno'), ('Alexandra', 'Sigouin'), ('Elena', 'Maltseva'), ('Sabina', 'Sharipova'), ('Jennifer', 'Slotow'), ('Melisa', 'Martinov'), ('Hanna', 'Victorsson'), ('Meriem', 'Chaouachi'), ('Sophie', 'Arnuti'), ('Diera', 'Saidmukhamedova'), ('Suzuka', 'Furukawa'), ('Paula', 'Veza'), ('Sarie', 'Swanepoel'), ('Kourtney J', 'Keegan'), ('Macarena', 'Asensos'), ('Aimee', 'Tarun'), ('Lien', 'Van Geel'), ('Mai', 'El Kamash'), ('Madeline', 'Lipp'), ('Silvia', 'Albano'), ('Elina', 'Svitolina'), ('Karyn', 'Guttormsen'), ('Anna Karolina', 'Schmiedlova'), ('Ki Ryang', 'Kim'), ('Stefanie', 'Kastner'), ('Barbora', 'Trestikova'), ('Krista', 'Hardebeck'), ('Mana', 'Ayukawa'), ('Tamari', 'Tskhakaia'), ('Gabrielle Olamide', 'Idera'), ('Alana', 'Parnaby'), ('Aareyalee Amrutsinh', 'Chavan'), ('Misaki', 'Mori'), ('Stefania', 'Hristov'), ('Yana', 'Erkeeva'), ('Stephanie', 'Wagner'), ('Mariagiovanna', 'Nanti'), ('Olga', 'Saez Larra'), ('Genevieve', 'Luksich'), ('Estefania Julieta', 'Valli'), ('Polina', 'Leykina'), ('Ornella Marcela', 'Spinetta'), ('Ana Maria', 'Crisan'), ('Marinel', 'Rudas'), ('Camille', 'Descamps'), ('Christine', 'Kandler'), ('Helen', 'De Cesare'), ('Ai Wen', 'Zhu'), ('Gabriela', 'Duca'), ('Daniella', 'Daniel'), ('Likitha', 'Shetty'), ('Diana', 'Sumova'), ('Lisa', 'Wegmair'), ('Haruka', 'Kaji'), ('Sabina', 'Kairanbayeva'), ('Sophie', 'Watts'), ('Anneka', 'Watts'), ('Clementina Eugenia', 'Riobueno De Paola'), ('Marijana', 'Novakovic'), ('Aina', 'Hernandez Soler'), ('Laia', 'Hernandez Soler'), ('Petra', 'Kopic'), ('Momoka', 'Hoshino'), ('Alexandra', 'Clark'), ('Philippa', 'Tepper'), ('Giovana', 'Da Costa Rodrigues Alves'), ('Joana', 'Eidukonyte'), ('Shizuka', 'Hisamitsu'), ('Victoria', 'Bosio'), ('Charlotte', 'Swaans'), ('Xi Wei', 'Cai'), ('Ivana', 'Horvat'), ('Dominika', 'Lackova'), ('Sabina Elena', 'Preda'), ('Sabina', 'Kurbanova'), ('Elpida', 'Papanelopoulou'), ('Valeria', 'Franco'), ('Eva', 'Sung'), ('Molly', 'Polak'), ('Louise', 'Holtum'), ('Giulia', 'Cerutti'), ('Nidhi', 'Chilumula'), ('Alena', 'Poletinova'), ('Raquel', 'Mateus'), ('Bogna', 'Nowicka'), ('Tereza', 'Smitkova'), ('Karin', 'Terami'), ('Yi Ping', 'Chang'), ('Teresa', 'Afuang Haro'), ('Sofiya', 'Chekunova'), ('Luna', 'Cagnoni'), ('Emilie', 'Elsvad'), ('Anna Kate', 'Anderson'), ('Nanami', 'Masuoka'), ('Sophie', 'Pismont'), ('Stella', 'Crick'), ('Laura Margareta', 'Luca'), ('Pei Chi', 'Lee'), ('Justyna', 'Pajak'), ('Tereza', 'Jankovska'), ('Nune', 'Khachatryan'), ('Imane Maelle', 'Kocher'), ('Chiara', 'Rinaldi'), ('Rebecca', 'Andrade'), ('Anastasiya', 'Halaburda'), ('Tanya', 'Samodelok'), ('Audrey', 'Jumel'), ('Hannah', 'Sulz'), ('Mariana', 'Ranzahuer Garcia Calderon'), ('Kelly', 'Williford'), ('Laura', 'Cardone'), ('Macie', 'Elliott'), ('Tereza', 'Martincova'), ('Deniz', 'Khazaniuk'), ('Audrey', 'Albie'), ('Andreea Ana', 'Buiculescu'), ('Riko', 'Sawayanagi'), ('Giovanna', 'Lombardi'), ('Michaela', 'Capannolo'), ('Olivia', 'Nicholls'), ('Nastasia', 'Boitier Legourd'), ('Francesca', 'Palmigiano'), ('Stephanie', 'Tedja Abdi'), ('Spirit', 'Edley'), ('Tina', 'Rupert'), ('Amy', 'Zhu'), ('Salma', 'Charif'), ('Mia Nicole', 'Eklund'), ('Tamara', 'Curovic'), ('Caroline B', 'Dailey'), ('Fatem Zahra', 'Erraji'), ('Puspa Ratih', 'Tri Oktavira'), ('Julia', 'Bochkareva'), ('Marcela', 'Alves Pereira Valle'), ('Clemence', 'Fayol'), ('Helga Margret', 'Jeske'), ('Andrea', 'Lazaro Garcia'), ('Katarzyna', 'Witos'), ('Lynn', 'Chi'), ('Luiza', 'Sharipova'), ('Marine', 'Partaud'), ('Anastasia', 'Rudakova'), ('Georgia', 'Craven'), ('Quinn', 'Gleason'), ('Jana', 'Mccord'), ('Maria Azul', 'Cortiana'), ('Yana', 'Sizikova'), ('Babilina', 'Machaidze'), ('Giorgia', 'Stridacchio'), ('Rachel May', 'Pierson'), ('Darya', 'Chernetsova'), ('Fatyha', 'Berjane'), ('Minami', 'Shuto'), ('Ekaterina', 'Alexandrova'), ('Misato', 'Negi'), ('Clothilde', 'De Bernardi'), ('Vladyslava', 'Zanosiyenko'), ('Sofia', 'Benhalima'), ('Adela', 'Jarosova'), ('Dorota', 'Markowska'), ('Danka', 'Kovinic'), ('Kelly', 'Versteeg'), ('Marie', 'Natroshvili'), ('Annika', 'Hepp'), ('Santina', 'Lange'), ('Emilija', 'Kokanovic'), ('Lauren', 'Harrington'), ('Adas', 'Luiza Ferrari'), ('Miyu', 'Kato'), ('Olga', 'Babanova'), ('Sarah', 'Candeloro'), ('Saroop', 'Dhatt'), ('Masa', 'Jovanovic'), ('Takhmina', 'Burkhanova'), ('Mariajose', 'Cardona'), ('Carolina', 'Likhatcheva'), ('Azra', 'Hadzic'), ('Mikayla', 'Morkel Brink'), ('Gaelle', 'Rey'), ('Cristina', 'Bejarano Jimenez'), ('Mallaurie', 'Noel'), ('Yukari', 'Tsujimoto'), ('Borislava', 'Botusharova'), ('Nao', 'Hibino'), ('Si Ying Julienne', 'Keong'), ('Daniella', 'Arcila'), ('Amanda', 'Cerda Miranda'), ('Veronica', 'Lacerda'), ('Louise', 'Lampla'), ('Kim', 'Borg'), ('Sofia', 'Araujo'), ('Jane', 'Fennelly'), ('Xiaorong', 'Dong'), ('Bernarda', 'Pera'), ('Polina', 'Lyuksheva'), ('Jacqueline', 'Crawford'), ('Emily', 'Burns'), ('Christina', 'Oberger'), ('Lauren', 'Burich'), ('Claudia', 'Coppola'), ('Ipek', 'Birol'), ('Alina', 'Jane'), ('Susanne', 'Celik'), ('Daniela', 'Montoya Sierra'), ('Zerina', 'Gozhdari'), ('Alena', 'Tarasova'), ('Montserrat', 'Alonso'), ('Annika', 'Schneider'), ('Nina', 'Khrisanova'), ('Rano', 'Nizamova'), ('Nicoleta', 'Dan'), ('Nana', 'Nemoto'), ('Jillian', 'Rooney'), ('Khanh Phi', 'Huynh'), ('Ana', 'Batiri'), ('Olivia', 'Messineo'), ('Mariella', 'Calderon'), ('Brittany', 'Brewster'), ('Chiara', 'Rebecchi'), ('Patcharin', 'Cheapchandej'), ('Viktoryia', 'Mun'), ('Hitomi', 'Hasebe'), ('Iris Julia Antje', 'Verweij'), ('Victoria', 'Bensimon'), ('Viviana', 'Tedino Morandi'), ('Beatrice', 'Kight'), ('Alexandra', 'Goncharova'), ('Emma', 'Devine'), ('Maria Andrea', 'Cardenas'), ('Rosalie', 'Van Der Hoek'), ('Ting Ya', 'Wang'), ('Elodie', 'Busson'), ('Preeti', 'Gokhale'), ('Ayaka', 'Santo'), ('Zoe Adeline', 'Katz'), ('Rowan', 'Arafat'), ('Maylis', 'Lafaysse'), ('Sarah', 'Savedra'), ('Yana', 'Sluzhiteleva'), ('Morgan', 'Barnhill'), ('Sheila', 'Jacobo'), ('Maria Julia', 'Bernal Penteado De Lima Mendes'), ('Victoria', 'Zukowski'), ('Eva', 'Paalma'), ('Paula', 'Insaurralde'), ('Michela', 'Verpelli'), ('Breaunna', 'Addison'), ('Neda', 'Koprcina'), ('Sandra', 'Bendlova'), ('Anna Signe', 'Rasmussen'), ('Pei Chuan', 'Kao'), ('Manon Cristina', 'Peri'), ('Maria', 'Kajikawa'), ('Erin', 'Faulkner'), ('Anna', 'Tyulpa'), ('Elke', 'Lemmens'), ('Anna', 'Woosley'), ('Madison', 'Crawford'), ('Yukiho', 'Yasuda'), ('Natalia L S', 'Abdalla'), ('Lee', 'Or'), ('Nicole', 'Robinson'), ('Fatmanur', 'Atilgan'), ('Gulsah', 'Cetin'), ('Madina', 'Khatamova'), ('Yuanyi', 'Yu'), ('Ana', 'Stojacic'), ('Saori', 'Enmoto'), ('Inas', 'Ziki'), ('Marijana', 'Vlahinic'), ('Dhanielly', 'Quevedo'), ('Gulnaz', 'Dokey'), ('Jessica', 'Perez'), ('Maree Teiwa', 'Casey'), ('Elena', 'Pavolucci'), ('Carol Yubitza', 'Arnez  Mercado'), ('Michaela', 'Marikova'), ('Zeineb', 'Ben Hamida'), ('Liniques', 'Theron'), ('Evy', 'Van Genechten'), ('Saska', 'Gavrilovska'), ('Danielle', 'Konotoptseva'), ('Louise', 'Kwong'), ('Angeles', 'De Los Rios'), ('Lena', 'Lutzeier'), ('Adriana', 'Gergelyova'), ('Yulia', 'Putintseva'), ('Laura', 'Mueller'), ('Si Qi', 'Liu'), ('Hedda', 'Odegaard'), ('Greta', 'Di Majo'), ('Alanna', 'Wolff'), ('Mariana', 'Drazic'), ('Violeta', 'Jankovic'), ('Miriana', 'Tona'), ('Arthi', 'M'), ('Ivanka', 'Mocic'), ('Nora', 'Niedmers'), ('Milena', 'Toseva'), ('Sitara', 'Prabhu'), ('Nicole', 'Cianci'), ('Klaartje', 'Liebens'), ('Nicole', 'Bonnaffoux'), ('Ao', 'Gai'), ('Ana', 'Ruiz'), ('Apichaya', 'Runglerdkriangkrai'), ('Nastassia', 'Rubel'), ('Nadia', 'Echeverria Alam'), ('Samira', 'Radjaa'), ('Marina', 'Marti Hernanz'), ('Fang Ying', 'Xun'), ('Khee Yen', 'Wee'), ('Laksmi', 'Nuraningsih'), ('Nikita', 'Deshmukh'), ('Savannah', 'Wood'), ('Lara', 'Afonso Garcia'), ('Shivani', 'Manchanda'), ('Jerricka', 'Boone'), ('Sai Samhitha', 'Chamarthi'), ('Taylor L', 'Davidson'), ('Kiah', 'Generette'), ('Miho', 'Kowase'), ('Zuzanna', 'Maciejewska'), ('Marnelle', 'Boshoff'), ('Grace', 'Orourke'), ('Silvia', 'Fuentes Perez'), ('Katerina', 'Baka'), ('Giorgia', 'Marchetti'), ('Anushka', 'Bhargava'), ('Kett', 'Sadi'), ('Guadalupe', 'Delgado'), ('Sonja', 'Becarevic'), ('Grace Maleka', 'Mpassy Nzoumba'), ('Michelle', 'Erasmus'), ('Isadora', 'Vieira'), ('Belinda', 'Woolcock'), ('Spencer', 'Liang'), ('Wing Man', 'Lin'), ('Salma', 'Cabrera'), ('Libi', 'Mesh'), ('Carla', 'Bruzzesi Avella'), ('Nuria', 'Ormeno Ruiz'), ('Kristina', 'Ostojic'), ('Anna', 'Shkudun'), ('Julaluck', 'Sae Eung'), ('Majlena', 'Pedersen'), ('Maria', 'Limanskaya'), ('Tamara', 'Vrhovac'), ('Shanna', 'Krimatschow'), ('Bhuvana', 'Kalva'), ('Yuliya', 'Alexsandrova'), ('Yulia', 'Shupenia'), ('Nabila', 'Farah'), ('Cassie', 'Pough'), ('Diana', 'Shevchenko'), ('Peeraya', 'Charoensirisutthikul'), ('Yani', 'Genesse'), ('Caroline', 'Cordat Auclair'), ('Hanna', 'Karczewska'), ('Laura', 'Holterbosch'), ('Cecilie Lundgaard', 'Melsted'), ('Alicia Andrea', 'Rodriguez Castillo'), ('Mariami', 'Gogelashvili'), ('Arianna', 'Fardanesh'), ('Gornganok', 'Tiraganok'), ('Hee Jin', 'Oh'), ('Sydney', 'Campbell'), ('Alina', 'Soltanici'), ('Sol', 'Ferrero'), ('Franziska', 'Lautenschlager'), ('Ebony', 'Panoho'), ('Sherry', 'Li'), ('Eduarda Nardi Dos', 'Santos'), ('Ksenia', 'Gaydarzhi'), ('Carlotta', 'Svaluto'), ('Ivana', 'Andric'), ('Ji Hee', 'Choi'), ('Gabriela', 'Pantuckova'), ('Kim Jana', 'Hausler'), ('Sinead', 'Lohan'), ('Zhaoxuan', 'Yang'), ('Claudia', 'Gaspar'), ('Chu Chen', 'Chuen'), ('Chiara', 'Quattrone'), ('Jessica', 'Cortes'), ('Ye Rin', 'Lee'), ('Disha', 'Dang'), ('Marta', 'Morga Alonso'), ('Alpha', 'Ambaye'), ('Saumya', 'Vig'), ('Weronika', 'Halicka'), ('Ana Laura', 'Gutierrez'), ('Zeynep', 'Nalbantoglu'), ('Francesca Dorothea', 'Ciutescu'), ('Stefani', 'Stojic'), ('Alyssa Grace', 'Smith'), ('Alina', 'Robok'), ('Yuan', 'Xin'), ('Carina', 'Witthoeft'), ('Katy', 'Dunne'), ('Daria', 'Glushich'), ('Oksana', 'Koshman'), ('Anastasiya', 'Saitova'), ('Madison', 'Keys'), ('Natalie', 'Faeh'), ('Ana Marija', 'Banic'), ('Samantha', 'Crawford'), ('Ana Beatriz', 'Balderas'), ('Dominique', 'Covington'), ('Adrianna', 'Zorawska'), ('Magnolia', 'Galvez'), ('Mayara', 'Galvez'), ('Giulia', 'Maiorana'), ('Victoria', 'Jorjoliani'), ('Parminder', 'Kaur'), ('Lana', 'Rostiashvili'), ('Alice', 'Lamaro'), ('Pattaraporn', 'Salirathavibhaga'), ('Rotem', 'Shveber'), ('Begum', 'Dilek'), ('Zarina', 'Yunusalieva'), ('Skye', 'Hopper'), ('Idil', 'Ozdamar'), ('Sofia', 'Henning'), ('Maura', 'Aveta'), ('Iva', 'Mekovec'), ('Andrea', 'Vosecka'), ('So Dam', 'Park'), ('Fabiana', 'Pitisci'), ('Alexandra', 'Morozova'), ('Ima', 'Nindi'), ('Viktoriya', 'Tomova'), ('Lauren Joanna', 'Lang'), ('Femke', 'Van Diemen'), ('Coline', 'Chauvet'), ('Natnicha', 'Sirijariyaporn'), ('Michelle', 'Werbrouck'), ('Laura', 'Gulbe'), ('Ann Christin', 'Nilsson'), ('Svetlana', 'Zdorova'), ('Paula Estefania', 'Diaz Cabrera'), ('Milena', 'Vitez'), ('Alejandra Maria', 'Marma Gutierrez'), ('Jialu', 'Huang'), ('Katharina', 'Hering'), ('Sonja', 'Liasovska'), ('Jan', 'Abaza'), ('Adriana', 'Lavoretti'), ('Erika', 'Vogelsang'), ('Mirea', 'Signorini'), ('Siyu', 'Chen'), ('Tess', 'Sugnaux'), ('Annie', 'Donaldson'), ('Zoel', 'Kastelic'), ('Carmen', 'Smolka'), ('Anna Maria', 'Levers'), ('Xin', 'Yang'), ('Claudia', 'Sanchez Gonzalez'), ('Johanna', 'Ranta Aho'), ('Camille', 'Giacalone'), ('Nagi', 'Hanatani'), ('Xu Liu', 'Sun'), ('Saravinder', 'Pannu'), ('Jamie', 'Loeb'), ('Rongrong', 'Leenabanchong'), ('Daniela', 'Ciobanu'), ('Yulia', 'Zakharova'), ('Farah', 'Abdelaziz'), ('Anjali', 'Thakur'), ('Deborah', 'Kerfs'), ('Amanda', 'Spindola Veiga'), ('Zineb', 'Rajib'), ('Marlou', 'Kluiving'), ('Su Jeong', 'Jang'), ('Nahathai', 'Khuntaket'), ('Sanaa', 'Benkaddour'), ('Klara', 'Skopac'), ('Arianna', 'Tricarico'), ('Anna', 'Arustamyan'), ('Marie', 'Benoit'), ('Amelia', 'Stuart'), ('Angela', 'Sokovnikova'), ('Megha', 'Sehrawat'), ('Liza', 'Fieldsend'), ('Morgan', 'Chumney'), ('Sanae', 'Guenfoudi'), ('Margarita', 'Kotok'), ('Rikako', 'Suga'), ('Irina Maria', 'Bara'), ('Maria', 'Martin Lozano'), ('Lisa', 'Schlatter'), ('Shehnaz', 'Singh'), ('Caroline', 'Kallberg'), ('Justine', 'De Sutter'), ('Mayya', 'Katsitadze'), ('Irina Elena', 'Preotescu'), ('Anna', 'Veleva'), ('Aggeliki', 'Kokkota'), ('Andreea', 'Mihai'), ('Alina', 'Abdurakhimova'), ('Andrada', 'Hai'), ('Aliya', 'Tarpischeva'), ('Lucia', 'Zelenka'), ('Marie', 'Klocker'), ('Natalia', 'Janowicz'), ('Tereza', 'Susen'), ('Kanika', 'Vaidya'), ('Vanja', 'Babunski'), ('Tatiana', 'Guskova'), ('Daniela', 'Schippers'), ('Marina', 'Hruba'), ('Olga', 'Ianchuk'), ('Esther', 'Zelaya'), ('Midian', 'Tulio'), ('Elpida', 'Malamou'), ('Julija', 'Jauk'), ('Amy', 'Sneath'), ('Alison Brigette', 'Sanders'), ('Tanvee', 'Bose'), ('Vivienne', 'Kulicke'), ('Jin Li', 'Tang'), ('Valeria', 'Bhunu'), ('Chih Hsien', 'Chu'), ('Teodora', 'Stinga'), ('Alexandra', 'Rey'), ('Catrine', 'Landstrom'), ('Taryn', 'Swanepoel'), ('Iga', 'Odrzywolek'), ('Claudia', 'Herrero Garcia Honorato'), ('Paula Andrea', 'Puentes Jimenez'), ('Barbora', 'Stefkova'), ('Christina', 'Lao'), ('Shakhlo', 'Saidova'), ('Brittany', 'Collens'), ('Darya', 'Lebesheva'), ('Sofia', 'Sabljarevic'), ('Mia', 'King'), ('Georgina', 'Segarra Ferrer'), ('Michelle Marie', 'Valdez'), ('Tyra', 'Kotuwattegedera'), ('Alexandra', 'Osborne'), ('Anastasiia', 'Zviahintseva'), ('Soyeon', 'Park'), ('Ana M', 'Sanchez'), ('Nancy', 'Karaky'), ('Grace Lola', 'Lymer Sullivan'), ('Erin', 'Routliffe'), ('Gema', 'Mendoza'), ('Alina', 'Ageichik'), ('Ines', 'Fontanarosa'), ('Wendy Qi Wen', 'Zhang'), ('Petra', 'Uberalova'), ('Brigit', 'Folland'), ('Jennifer', 'Brady'), ('Zhamilia', 'Duisheeva'), ('Donika', 'Bashota'), ('Nora Luciana', 'David'), ('Rocio Daniela', 'Merlo'), ('Miriam', 'Monsutti'), ('Valeria', 'Prosperi'), ('Ines', 'Nicault'), ('Lucia', 'Ioli'), ('Maegan', 'Manasse'), ('Miki', 'Kobayashi'), ('Mengjuan', 'Yi'), ('Denise', 'Starr'), ('Ana', 'Baran'), ('Amiru', 'Shimoguchi'), ('Alejandra', 'Cisneros'), ('Evangeline', 'Repic'), ('Gabriela', 'Srodowski'), ('Maaya', 'Uno'), ('Madrie', 'Le Roux'), ('Madina', 'Hatamova'), ('Lisa Marie', 'Maetschke'), ('Kathryn', 'Hughes'), ('Monica', 'Robinson'), ('Joanna Nena', 'Savva'), ('Alba', 'Escalona Perny'), ('Diana', 'Bogoliy'), ('Akiho', 'Kakuya'), ('Victoria', 'Rodriguez'), ('Kassandra', 'Dunser'), ('Tarrannum', 'Handa'), ('Anastasia', 'Pogorelskaya'), ('Sarah Inga', 'Senger'), ('Nicolin', 'Luecke'), ('Intissar', 'Rassif'), ('Efriliya', 'Herlina'), ('Amanda', 'Carrillo Galera'), ('Nihel', 'Adjali'), ('Sarah', 'De Clercq'), ('Natalia', 'Vajdova'), ('Valeria', 'Salazar'), ('Jade', 'Suvrijn'), ('Tina', 'Jiang'), ('Valeria', 'Danilova'), ('Luisa', 'Rosa'), ('Alisa', 'Tymofeyeva'), ('Sofia', 'Santa Maria'), ('Hanna', 'Sohn'), ('Brooke', 'Rischbieth'), ('Minami', 'Akiyama'), ('Solene', 'Guyomard'), ('Aldila', 'Sutjiadi'), ('Nicole', 'Aragones Miro Quesada'), ('Xixi', 'Feng'), ('Natella', 'Nabieva'), ('Nataliya', 'Naumova'), ('Valeria', 'Koussenkova'), ('Rana', 'Sabry'), ('Margarita', 'Febrer Marza'), ('Evgeniya', 'Svintsova'), ('Joy', 'Yaich'), ('Izabella', 'Ismailova'), ('Tsveta Konstantinova', 'Dimitrova'), ('Alory Regina Elorriaga', 'Pereira'), ('Fatma', 'Al Janahi'), ('Andrea', 'Ivanovic'), ('Lea', 'Godallier'), ('Tena', 'Lukas'), ('Cassidy', 'Spearman'), ('Sachia', 'Vickery'), ('Jieke', 'Stroobant'), ('Alzbeta', 'Veverkova'), ('Jenna', 'Davidson'), ('Jodi', 'Davidson'), ('Irina', 'Khromacheva'), ('Lolade', 'Ogungbesan'), ('Tamara', 'Korpatsch'), ('Anabel', 'Ossombi'), ('Ingrid', 'Navarro Rodriguez'), ('Helena', 'Phillips'), ('Corina', 'Mader'), ('Yuliya', 'Lysa'), ('Voni', 'Darlina'), ('Stefani', 'Andreeva'), ('Natalia', 'Zhuravleva'), ('Vishesh', 'Vkc'), ('Marine', 'Beugre Guyot'), ('Maria', 'Cespedes'), ('Laura', 'Gibanel Velasco'), ('Michela', 'Isella'), ('Hayley', 'Carter'), ('Lauren', 'Marker'), ('Mihoki', 'Miyahara'), ('Daniela', 'Vita'), ('Lou', 'Brouleau'), ('Anna', 'Segarra Rius'), ('Selma', 'Saran'), ('Beatrice', 'Caruso'), ('Tereza', 'Hejlova'), ('Olaya', 'Garrido Rivas'), ('Daniela', 'Raygadas Dominguez'), ('Paula', 'Pastor Mir'), ('Maria Paula', 'Coyos'), ('Vanessa', 'Dobson'), ('Nikola', 'Schweinerova'), ('Nina', 'Asanin'), ('Lexi', 'Borr'), ('Barbara', 'Capellari Abou Haikal'), ('Mouna', 'Jebri'), ('Ana Carolina', 'Sigaki'), ('Nicole', 'Fossa Huergo'), ('Jiahui', 'Chen'), ('Samantha', 'Asch'), ('Camilla', 'Rosatello'), ('Maurien', 'Rikkert'), ('Sophie', 'Blom'), ('Amanda', 'Castillo'), ('Olivera', 'Veskovac'), ('Victoria', 'Vorontsova'), ('Sabina', 'Jeresic'), ('Jessica', 'Raith'), ('Isil', 'Ileri'), ('Razina', 'Shaibu'), ('Andrea', 'Prisco'), ('Marlies', 'Szupper'), ('Mariami', 'Kurasbediani'), ('Sansitha', 'Nandakumar'), ('Carolina', 'Cuevas Bucio'), ('Angela', 'Assal'), ('Caterina', 'Brunamonti'), ('Thais', 'Nascimento'), ('Marija', 'Bogicevic'), ('Alexis', 'Thoma'), ('Nataliya', 'Kotova'), ('Clara', 'Hoffman Loza'), ('Beatriz', 'Machado Santos'), ('Natasha', 'Piludu'), ('Laura', 'Gamarra'), ('Valeriya', 'Strakhova'), ('Eliza', 'Long'), ('Aneta', 'Dvorakova'), ('Mingxiu', 'Du'), ('Kristin Vivien', 'Rehse'), ('Marine', 'Fontaine'), ('Nehel', 'Sahni'), ('Carolina', 'Costamagna'), ('Emily', 'Fanning'), ('Laura', 'Ucros'), ('Kamilla', 'Galieva'), ('Maria', 'Kefala'), ('Jennifer', 'Zerbone'), ('Volha', 'Barshcheuskaya'), ('Barbare', 'Eristavi'), ('Daria', 'Sharapova'), ('Eugenie', 'Chapelle'), ('Marta', 'Sramkova'), ('Rozel Asuncion', 'Hernandez'), ('Skylar', 'Holloway'), ('Antonella', 'Altamirano'), ('Kamila', 'Kerimbayeva'), ('Aldana', 'Ciccarelli'), ('June', 'Lee'), ('Jessica', 'Simpson'), ('Nadja', 'Stojcic'), ('Anna Maria', 'Battista'), ('Tayla', 'Stenta'), ('Carol', 'Zhao'), ('Mi Jeong', 'Kwon'), ('Anna Maria', 'Heil'), ('Berta', 'Bonardi'), ('Ayaka', 'Okuno'), ('Giuliana', 'Verbauwen'), ('Luisa Marie', 'Huber'), ('Yana', 'Parshina'), ('Ella', 'Taylor'), ('Yuko', 'Kimura'), ('Yennifer', 'Delgado'), ('Leslie', 'Espinoza'), ('Perrine', 'Boisset'), ('Fabienne', 'Vincon'), ('Vilma Y', 'Gomez'), ('Ana', 'Gonzalez Andrade'), ('Matea', 'Zemunik'), ('Giovanna', 'Fioretti'), ('Susanna', 'Ciccone'), ('Adrijana', 'Lekaj'), ('Alexandra', 'Kiick'), ('Camila', 'Tobar'), ('Emma', 'Janssen'), ('Melissa', 'Ullrich'), ('Allie', 'Kiick'), ('Rasheeda', 'Mcadoo'), ('Salma', 'Chouhib'), ('Kristina', 'Chasovskikh'), ('Yukiko', 'Midorikawa'), ('Aleksandra', 'Reljic'), ('Natalia', 'Perepadenko'), ('Andrea', 'Martinovska'), ('Xiao Xuan', 'Guo'), ('Karin', 'Kennel'), ('Maria Camila', 'Trujillo Hoyos'), ('Gisele', 'Dufour'), ('Yelena', 'Nemchen'), ('Karina', 'Rovira'), ('Jelena', 'Stefanovic'), ('Camilla', 'Diez'), ('Despoina', 'Vogasari'), ('Maayan', 'Sela'), ('Katerina', 'Boiko'), ('Ilinca Teodora', 'Bercaru'), ('Millie', 'Radovic'), ('Megan', 'Mccray'), ('Spurti', 'Shivalingaiah'), ('Anna Katalina', 'Alzate Esmurzaeva'), ('Claudia', 'Marini'), ('Anastasia', 'Tokareva'), ('Minori', 'Yonehara'), ('Lu', 'Yu'), ('Teodora Adina', 'Ardeleanu'), ('Anabel', 'Carbo Estruch'), ('Swetha', 'Sree Hari'), ('Yasmine', 'Rashad'), ('Natalia', 'Kattah'), ('Alix', 'Theodossiou'), ('Andrea', 'Ternera'), ('Judit', 'Vives Joan'), ('Ya Hsuan', 'Lee'), ('Natsumi', 'Chimura'), ('Danielle', 'Wagland'), ('Ana Gabriela', 'Gerbasi'), ('Eva', 'Rutarova'), ('Georgiana', 'Ruhrig'), ('Victoria', 'Todorova'), ('Alice', 'Bacquie'), ('Anna', 'Zhylchuk'), ('Samantha', 'Palacio'), ('Alexis', 'Casati'), ('Senaida', 'Kambel'), ('Carlee', 'Rizzolo'), ('Maria', 'Sakkari'), ('Carmen', 'Blanco'), ('Adriana', 'Silva'), ('Ivania', 'Martinich'), ('Alena', 'Mayevskaya'), ('Farah', 'Mouri'), ('Natasa', 'Brnovic'), ('Dasha', 'Sergeeva'), ('Sujin', 'Yoon'), ('Carmen', 'Schauer'), ('Hanemas', 'Pangestu'), ('Diana', 'Ryashko'), ('Julyette Maria Josephine', 'Steur'), ('Beatriz', 'Abreu'), ('Ann', 'Okoro'), ('Lenka', 'Kuncikova'), ('Claudia', 'Chavarria Perez'), ('Kana', 'Daniel'), ('Angelina', 'Salihbaeva'), ('Anastasiya', 'Zablotskaya'), ('Ines', 'Canepa'), ('Di Andrea', 'Galloway'), ('Alena', 'Panfilova'), ('Taylor', 'Ng'), ('Sofia', 'Rojas'), ('Agustina', 'Serio'), ('Jana', 'Haid'), ('Victoria', 'Kan'), ('Tamar', 'Shahaf'), ('Saule', 'Valantiejute'), ('Chanikarn', 'Silakul'), ('Luca', 'Fabian'), ('Rebecca', 'Peterson'), ('Lynn', 'Kiro'), ('Ana Sofia', 'Cordero'), ('Nour', 'Tohamy'), ('Sarah Beth', 'Askew'), ('Cristiana', 'Ferrando'), ('Kristina', 'Lagoda'), ('Miriam', 'Rosell Canudas'), ('Andreea Maria', 'Trocan'), ('Alexandra', 'Zachem'), ('Claudia', 'Cirillo'), ('Gozde', 'Adar'), ('Petra', 'Rohanova'), ('Leolia', 'Jeanjean'), ('Luisa Maria', 'Varon Diaz'), ('Tatiana', 'Feliciano Granda'), ('Jelena', 'Popovic'), ('Gabriela', 'Valdes Garcia'), ('Viktoriya', 'Klimushkina'), ('Zamira', 'Jadue'), ('Aya', 'Tanaka'), ('Mara Sofia', 'Martinez Santori'), ('Mary', 'Closs'), ('Yulia', 'Chubarova'), ('Ka Man Carina', 'Ma'), ('Yasmine', 'Xantos'), ('Chalena', 'Scholl'), ('Minami', 'Uesugi'), ('Tiffany', 'Hoberth'), ('Emilia', 'Granstrom'), ('Varunya', 'Chandrashekar'), ('Carolina', 'Barsante'), ('Yuki Kristina', 'Chiang'), ('Alice', 'Zapolla'), ('Anna', 'Danilina'), ('Isabella', 'Kimberly'), ('Fernanda', 'Rodriguez Navarro'), ('Vita', 'Taher'), ('Amy', 'Olivier'), ('Shangqing', 'Yang'), ('Gabriela', 'Talaba'), ('Katrina', 'Andrzejevska'), ('Malin', 'Cubukcu'), ('Nicolette', 'Tran'), ('Se Hyun', 'Kim'), ('Cecilia', 'Barrionuevo'), ('Charlene', 'Mueller'), ('Nishtha', 'Dudeja'), ('Tereza', 'Janatova'), ('Anastasia', 'Gavryukova'), ('Anastasia', 'Reimchen'), ('Madeline', 'Bosnjak'), ('Fiona', 'Codino'), ('Astrid', 'Leclere'), ('Ximena', 'Mino'), ('Yumeka', 'Maeda'), ('Audrey', 'Bois'), ('Ilona', 'Golynker'), ('Sarah', 'Finck'), ('Lea', 'Tholey'), ('Bruna', 'Pacheco Chaves'), ('Kalita', 'Saraiva'), ('Karla', 'Popovic'), ('Rika', 'Yamamoto'), ('Szabina', 'Szlavikovics'), ('Aissa', 'Muamba'), ('Eszter', 'Palinkas'), ('Yui', 'Kiyohara'), ('Frederikke', 'Karst'), ('Selina', 'Jordi'), ('Emilia', 'Tenizbaeva'), ('Wu', 'Mei Qi'), ('Nini', 'Guensler'), ('Sydney', 'Rider'), ('Sanya', 'Madan'), ('Astra', 'Sharma'), ('Larissa', 'Ravanini De Souza'), ('Jasmina', 'Stojiljkovic'), ('Sofia', 'Compostizo De Andres'), ('Sonja', 'Larsen'), ('Alice Alexandra', 'Banica'), ('Paula', 'Sanchez'), ('Madara', 'Straume'), ('Shannon', 'Hudson'), ('Mieri', 'Aoki'), ('Kikka', 'Adachi'), ('Marian Jade', 'Capadocia'), ('Katherine', 'Ip'), ('Arianna', 'Paules Aldrey'), ('Laura', 'Enea'), ('Marina', 'Albert'), ('Elke', 'Tiel'), ('Dominika', 'Paterova'), ('Elena', 'Sava'), ('Valentina', 'Lia'), ('Margarita', 'Khasanova'), ('Khwanthiti', 'Banthao'), ('Leonela', 'Gonzalez'), ('Maria Constanza De Las Mercedes', 'Vega'), ('Maria', 'Avgerinos'), ('Noelia Alejandra', 'Acuna'), ('Patricia', 'Lancranjan'), ('Olga', 'Baikoulova'), ('Mariana', 'Gould'), ('Carmen', 'Pestano Hernandez'), ('Ji Hey', 'Lee'), ('Alice', 'Wenner'), ('Rocio', 'Macri'), ('Ambika', 'Pande'), ('Nikki', 'Luttikhuis'), ('Denisa', 'Kulhankova'), ('Makoto', 'Nishida'), ('Camila', 'Fuentes'), ('Alice', 'Matteucci'), ('Zhi Yan', 'Ye'), ('Dominique', 'Karregat'), ('Riko', 'Tachibana'), ('Pippa', 'Horn'), ('Diana', 'Vlad'), ('Keiko', 'Fukui'), ('Anna', 'Davydova'), ('Abir', 'El Fahimi'), ('Sri Vaishnavi', 'Peddi Reddy'), ('Laura', 'Pertusa Garcia'), ('Feruzabonu', 'Saidova'), ('Helena', 'Korompis'), ('Franceske', 'Stroh'), ('Jana', 'Nabel'), ('Hikari', 'Yamamoto'), ('Luisa', 'Fernandez'), ('Diana', 'Tokar'), ('Ines Miren', 'De Pablo'), ('Kyoka', 'Okamura'), ('Liberty', 'Crawford'), ('Josephine', 'Jedrychowski'), ('Ayano', 'Sonoda'), ('Laura', 'Sanchez'), ('Melissa', 'Laing'), ('Charlotte', 'Klasen'), ('Ellen', 'Perez'), ('Brooke', 'Broda'), ('Nina', 'Stadler'), ('Ayaka', 'Kanai'), ('Aniek', 'Van Rossum'), ('Eetee', 'Maheta'), ('Brianna', 'Lashway'), ('Laura', 'Torres'), ('Stuti', 'Singh Tomar'), ('Tamari', 'Chalaganidze'), ('Rafaela Arsenia', 'Alipranti'), ('Violetta', 'Shatalova'), ('Julia', 'Albuquerque'), ('Ana', 'Glumac'), ('Amina', 'Mukhametshina'), ('Sang Hee', 'Park'), ('Lani', 'Tuemmers'), ('Naomi', 'Totka'), ('Andjela', 'Stojkovic'), ('Na Young', 'Lee'), ('Elena', 'Cortimiglia'), ('Giovanna', 'Baccarini'), ('Anastasiya', 'Shestakova'), ('Alexandra', 'Grinchishina'), ('Ivanka', 'Karamalak'), ('Ana Gabriela', 'Meis'), ('Yuliya', 'Brotgal'), ('Kathrin', 'Spendier'), ('Cristina', 'Adamescu'), ('Danielle', 'Vernier'), ('Zhi Huan Eva', 'Chen'), ('Maika Jae', 'Tanpoco'), ('Vladica', 'Babic'), ('Kim', 'Kermet'), ('Polina', 'Bezsmertnaya'), ('Bridget', 'Liddell'), ('Sofia', 'Salimova'), ('Luize Liva', 'Strike'), ('Audrey', 'Marquard'), ('Burcu', 'Tari'), ('Angela', 'Tejedor Espinosa'), ('Joana', 'Vale Costa'), ('Veronika', 'Stotyka'), ('Lisanna', 'Pihlak'), ('Gabriella', 'De Santis'), ('Mariam', 'Kiknadze'), ('Janina', 'Geiss'), ('Sultan', 'Gonen'), ('Hannah', 'King'), ('Wallis', 'Vitis'), ('Chiara', 'Icardi'), ('Chompoothip', 'Jandakate'), ('Cassandre', 'Thebault'), ('Elena', 'Cerezo Codina'), ('Deborah', 'Cruciani'), ('Masa', 'Marc'), ('Josie', 'Kuhlman'), ('Nam Yeon', 'Jun'), ('Brooke', 'Harding'), ('Snezhana', 'Nekrasova'), ('Elizaveta', 'Kardaseva'), ('Marijana', 'Acimovic'), ('Gabriela', 'Bueno'), ('Marika', 'Akkerman'), ('Teodora', 'Djordjevic'), ('Florencia', 'Dezotti'), ('Kimberley', 'Zimmermann'), ('Marie', 'Decamps'), ('Ivona', 'Stankovic'), ('Elaine', 'Van Zyl'), ('Peggy', 'Porter'), ('Polina', 'Merenkova'), ('Yuriko', 'Miyazaki'), ('Giulia', 'Perrone'), ('Brenda', 'Rique'), ('Carolina', 'Sa'), ('Emily', 'Dunne'), ('Juli', 'Raventos'), ('Liudmila', 'Gazzaeva'), ('Surya', 'Tejaswini'), ('Catherine', 'Shulman'), ('Eva', 'Zagorac'), ('Marija', 'Radulovic'), ('Gabriele', 'Bertasiute'), ('Yesmine', 'Kharrat'), ('Rima', 'Asatrian'), ('Christiana', 'Brigante'), ('Elise', 'Mertens'), ('Leciane', 'Comparin Da Silva'), ('Juana', 'Zambrano'), ('Aandrita', 'Deb'), ('Sofia', 'Blanco'), ('Daria', 'Sapogova'), ('Mizuno', 'Kijima'), ('Abbie', 'Pahz'), ('Kristin', 'Wiley'), ('Alyza', 'Benotto'), ('Julia', 'Wagner'), ('Ludivine', 'Burguiere'), ('Ioanna', 'Markesini'), ('Maria Vitoria', 'Beirao'), ('Nikol', 'Yordanova'), ('Dajana', 'Cvjetkovic'), ('Nadja', 'Dzafic'), ('Bolzan', 'Ana Paula'), ('Elena', 'Rief'), ('Ferny', 'Angeles Paz'), ('Laura', 'Correia'), ('Victoria', 'Duval'), ('Aymet', 'Uzcategui'), ('Avika', 'Sagwal'), ('Agne', 'Cepelyte'), ('Tatsiana', 'Sakovich'), ('Breana', 'Stampfli'), ('Kristina', 'Mathis'), ('Shellita', 'Haughton'), ('Sharon', 'Biondi'), ('Camila', 'Blanes'), ('Paula', 'Rodriguez'), ('Ethel', 'Kouniavsky'), ('Jelena', 'Dzinic'), ('Ege', 'Kurtoglu'), ('Selenay', 'Heper'), ('Gabriella', 'Castaneda'), ('Teodora', 'Radosavljevic'), ('Ani', 'Gogvadze'), ('Natalia', 'Siedliska'), ('Anastasia', 'Koveshnikova'), ('Eden', 'Konorti'), ('Vera', 'Bessonova'), ('Laura Sarah', 'Ambrozic'), ('Fangzhou', 'Liu'), ('Kristina', 'Savchenkova'), ('Adi', 'Milstein'), ('Anastasia', 'Kuprina'), ('Hila', 'Mizrahi'), ('Maria', 'Zubkova'), ('Hannah', 'Nagel'), ('Katrin', 'Tebaldini'), ('Assem', 'Myssyr'), ('Miriam', 'Civera Lima'), ('Barbora', 'Krejcikova'), ('Cristina', 'Ene'), ('Anita', 'Safronenka'), ('Ee Yi Olivia', 'Koh'), ('Nicoleta Catalina', 'Dascalu'), ('Nerma', 'Caluk'), ('Samantha', 'Harris'), ('Celina', 'Bester'), ('Chiara', 'Carboni'), ('Misaki', 'Shuto'), ('Camila', 'Valencia'), ('Shreya', 'Pasricha'), ('Barbara', 'Rico Godino'), ('Sofia', 'Macias Mendoza'), ('Vania', 'Ivanova'), ('Zongzhen', 'Li'), ('Anett', 'Kontaveit'), ('Yukun', 'Zhang'), ('Nouha', 'Ziki'), ('Maria Belen', 'Da Luz'), ('Marine', 'Meraut'), ('Nicol', 'Padilla'), ('Macarena', 'Olivares Lopez'), ('Jessie Lynn', 'Paul'), ('Blaga', 'Delic'), ('Alessandra', 'Polese'), ('Maria', 'Ouazzani'), ('Alberta', 'Detogni'), ('Maftuna', 'Yunusova'), ('Elif', 'Turgul'), ('Yan', 'Wang'), ('Paulina', 'Wulcan'), ('Anna', 'Bini'), ('Idhun', 'Safaati'), ('Elba', 'Kasum'), ('Yosr', 'Elmi'), ('Caroline', 'Brinson'), ('Mina', 'Markovic'), ('Federica', 'Prati'), ('Yuqi', 'Sheng'), ('Jasmine', 'Paolini'), ('Roksana', 'Lukasiak'), ('Dinara', 'Imazhanova'), ('Marija', 'Mastilovic'), ('Sanya', 'Sinha'), ('Oana Carmen', 'Trus'), ('Simone', 'Pratt'), ('Eleanor', 'Dean'), ('Monet', 'Willis'), ('Sara', 'Marjanovic'), ('Trinidad Maria', 'Merdeni'), ('Ioana Andreea', 'Sascau'), ('Alzbeta', 'Houbova'), ('Francisca', 'Hernandez'), ('Helene', 'Scholsen'), ('Ailen', 'Crespo Azconzabal'), ('Amangul', 'Mollayeva'), ('Sara', 'Mitrovic'), ('Sara', 'Palcic'), ('Xenia', 'Oberson'), ('Ivana', 'Klac'), ('Maria Paulina', 'Perez Garcia'), ('Paula Andrea', 'Perez Garcia'), ('Nouha', 'Bazir'), ('Anke', 'Poncelet'), ('Shanon', 'Bronzi'), ('Kayla Symone', 'Price'), ('Anastassiya', 'Bessarab'), ('Suellen', 'Abel'), ('Ming Ming Joy', 'Chia'), ('Gabrielle', 'Smith'), ('Yu Mi', 'Hwang'), ('Gulben', 'Guldas'), ('Aleksandra', 'Zenovka'), ('Rebecca', 'Smaller'), ('Giulia', 'Leone'), ('Katharina', 'Feldmer'), ('Mineri', 'Sukegawa'), ('Victoria', 'Ocheva'), ('Fanny', 'Caramaro'), ('Kamilla', 'Farhad'), ('Olivia', 'Pimia'), ('Natalie', 'Cvackova'), ('Olga', 'Arruabarrena Vecino'), ('Giulia', 'Pairone'), ('Irina', 'Lidkovskaya'), ('Olivia', 'Sneed'), ('Morgan', 'Bernabe'), ('Amreen', 'Naaz'), ('Mercedes', 'Lopez Velez'), ('Molly', 'Reed'), ('Megan', 'Smith'), ('Khrystsina', 'Kandratsiuk'), ('Catiana', 'Kaercher'), ('Naz', 'Karagoz'), ('Kanami', 'Tsuji'), ('Yukino', 'Emi'), ('Daniela', 'Carrillo'), ('Asiya', 'Dair'), ('Angelique', 'Svinos'), ('Maliha', 'Al Awaidy'), ('Tatiana', 'Grigoryan'), ('Anna', 'Grigoryan'), ('Brigitte', 'Beck'), ('Angela', 'Lorenzo Garrido'), ('Aslina', 'Chua'), ('Ariana', 'Rodriguez'), ('Jacqueline', 'Cabaj Awad'), ('Hsin Min', 'Chin'), ('Anna', 'Sanford'), ('Elena', 'Golovnyova'), ('Cristina', 'Perez De La Torre Ma'), ('Jana', 'Schober'), ('Zofia', 'Kulig'), ('Ulyana', 'Ayzatulina'), ('Sophie', 'Cloessner'), ('Dominique', 'Esparza Fuster'), ('Siriyakorn', 'Makpoon'), ('Chiara', 'Volejnicek'), ('Antonella', 'Murialdo'), ('Jana', 'Jablonovska'), ('Petra', 'Remedio'), ('Sona', 'Priscakova'), ('Christi', 'Woodson'), ('Gaby Alexandra', 'Fonseca Tamayo'), ('Yana', 'Mogilnitskaya'), ('Daniela', 'Garstea'), ('Aziza', 'Berriri'), ('Yuliya', 'Latokhina'), ('Roos', 'Van Der Zwaan'), ('Justina', 'Mikulskyte'), ('Resha', 'Chandak'), ('Emma', 'Haakansson'), ('Sabina', 'Shaydullina'), ('Lena', 'Pacholski'), ('Emily', 'Casteleyn'), ('Katya', 'Krivoshapov'), ('Tiare', 'Rebolledo'), ('Woyla', 'Waluyo'), ('Georgia', 'Brescia'), ('Yeong Won', 'Jeong'), ('Anja', 'Bebic'), ('Kristina', 'Pastukhova'), ('Brooke', 'Austin'), ('Domenica', 'Gonzalez'), ('Ana Filipa', 'Santos'), ('Janet', 'Koch'), ('Isabella', 'Capato Camargo'), ('Maria', 'Ahumada'), ('Anastasia', 'Pribylova'), ('Verolalaina Helene', 'Radilofe'), ('Emily', 'Da Silva Chang'), ('Maria Del', 'Prados Cid'), ('Ekaterina', 'Popova'), ('Felicitas', 'Runkel'), ('Kamonwan', 'Buayam'), ('Beatrice', 'Lombardo'), ('Lyann', 'Hoang'), ('Eleonora', 'Mindiyarova'), ('Julia', 'Przybylska'), ('Ines', 'Arfaoui'), ('Greta', 'Mokrousova'), ('Carol', 'Finke'), ('Sonja', 'Balic'), ('Kelly', 'Shaffer'), ('Angeliki', 'Kairi'), ('Dajana', 'Dukic'), ('Daria', 'Chernyshkova'), ('Britt', 'Geukens'), ('Komal', 'Nagare'), ('Evita', 'Febri Habsari'), ('Karolina', 'Snita'), ('Sumina', 'Eshiro'), ('Juliana Jose', 'Parra Gomez'), ('Adriana', 'Rajkovic'), ('Janaya', 'Smith'), ('Cassie', 'Mercer'), ('Grace', 'Dixon'), ('Ayumi', 'Mori'), ('Claudia', 'Williams'), ('Aida', 'Kalimullina'), ('Ralina', 'Kalimullina'), ('Oleksandra', 'Korashvili'), ('Elizaveta', 'Khabarova'), ('Nikola', 'Tomanova'), ('Helena', 'Nyikos'), ('Laura', 'Tanfin'), ('Maria Jose', 'Zehnder'), ('Hayley', 'Macpherson'), ('Jandayia', 'Lubin'), ('Natalie', 'Syme'), ('Alize', 'Boccard'), ('Tatjana', 'Stoll'), ('Alena', 'Macharova'), ('Busra', 'Kayrun'), ('Julia', 'Terziyska'), ('Mahitha', 'Dadi Reddy'), ('Lea', 'Bruno'), ('Sarvinoz', 'Sharipova'), ('Stephanie J', 'Smith'), ('Monika', 'Stanikova'), ('Viktoriya', 'Yankovskaya'), ('Sara', 'Ottomano'), ('Alba', 'Carrillo Marin'), ('India', 'Sanders'), ('Oana Georgeta', 'Simion'), ('Mana', 'Furuhashi'), ('Madison', 'Frahn'), ('Sandra', 'Segura Mandarino'), ('Hadley', 'Berg'), ('Bianca', 'Ravinis Lombardi'), ('Erin', 'Larner'), ('Estelle', 'Cascino'), ('Hayaka', 'Murase'), ('Amanda Miguel', 'Perez Franco'), ('Stephani', 'Rodriguez'), ('Francesca', 'Gariglio'), ('Eden', 'Silva'), ('Devin', 'Chypyha'), ('Katrine Isabel', 'Steffensen'), ('Caroline', 'Doyle'), ('Mia', 'Middleton'), ('Ji Yun', 'Yun'), ('Jade', 'Hilton'), ('Giorgia', 'Bove'), ('Kennan', 'Johnson'), ('Mami', 'Adachi'), ('Barbara', 'Haas'), ('Julie', 'Noe'), ('Klaudia', 'Szabo'), ('Veronica', 'Napolitano'), ('Angela', 'Dahnous'), ('Raquel', 'Montalvo'), ('Colomba', 'Di Filippo'), ('Natalie', 'Hepburn'), ('Katarzyna', 'Pyka'), ('Stephanie', 'Doboara'), ('Martine', 'Ditlev'), ('Jeongyun', 'Lee'), ('Maria', 'Uvarova'), ('Anna', 'Shepita'), ('Alina', 'Zolotareva'), ('Chisa', 'Hosonuma'), ('Regina', 'Clark'), ('Alina', 'Lazareva'), ('Cheyenne', 'Biancheri'), ('Rutuja', 'Bhosale'), ('Maria', 'Gomez Saldarriaga'), ('Lise', 'Brulmans'), ('Camila', 'Ramos'), ('Aneta', 'Miksovska'), ('Sandra', 'Bolstad'), ('Nour', 'Azzouz'), ('Yagmur', 'Akgul'), ('Alessandra', 'Vacca'), ('Man Ying Maggie', 'Ng'), ('Srijita', 'Ghosh'), ('Alma', 'Thell Lenntorp'), ('Klara', 'Thell Lenntorp'), ('Andrea', 'Kulova'), ('Linda', 'Dubska'), ('Giulia', 'Crescenzi'), ('Ayumi', 'Oishi'), ('Maria', 'Martinez Martinez'), ('Viviana', 'Onorato'), ('Ana', 'Oparenovic'), ('Maria Elisa', 'Franco'), ('Andrea', 'Dikosavljevic'), ('Jin Ju', 'Lee'), ('Madison', 'Westby'), ('Mayo', 'Hibi'), ('Mari', 'Osaka'), ('Kristyna', 'Hrabalova'), ('Jihene', 'Benzeggouta'), ('Oana', 'Irimescu'), ('Nagisa', 'Nishimura'), ('Valeriya', 'Boyanovska'), ('Caitlin', 'Bernard'), ('Maria Regina', 'Espindola Mancera'), ('Aziza', 'Bhiri'), ('Damira', 'Muminovic'), ('Gyung Eun', 'Song'), ('Caroline', 'Uebelhoer'), ('Priscilla', 'Medlich Leal'), ('Mouna Naila', 'Azzouni'), ('Manon', 'Robine'), ('Aleksandra', 'Mally'), ('Iva', 'Primorac'), ('Amit', 'Gavrieli'), ('Leire', 'Martin Tena'), ('Marta', 'Ruszczynska'), ('Pippa', 'Carr'), ('Elizaveta', 'Kulichkova'), ('Lou', 'Adler'), ('Ilka', 'Csoregi'), ('Magdalena', 'Stoilkovska'), ('Hristina', 'Dyankova'), ('Kelly', 'Pedrazzoli'), ('Silvia', 'Russo'), ('Mariia', 'Tcakanian'), ('Drousile', 'Dzeubou'), ('Alizee', 'Michaud'), ('Ipek', 'Soylu'), ('Ying', 'Zhang'), ('Taylor', 'Townsend'), ('Nicole', 'Mingazzini'), ('Irina', 'Fetecau'), ('Andrea', 'Raaholdt'), ('Aliona', 'Ladutska'), ('Ioana', 'Ducu'), ('Aysenur', 'Durmus'), ('Nikki', 'Kallenberg'), ('Kathrine', 'Berge'), ('Sarah', 'Dvorak'), ('Daria', 'Vasekina'), ('Eliana', 'Antequera'), ('Alessandra', 'Vargas'), ('Arianne', 'Hartono'), ('Anastasiya', 'Yepisheva'), ('Ilze', 'Hattingh'), ('Eudice Wong', 'Chong'), ('Carolina Meligeni Rodrigues', 'Alves'), ('Ashleigh', 'Barty'), ('Anastasiya', 'Shcherbakova'), ('Rheeya', 'Doshi'), ('Iana', 'Tishchenko'), ('Eliana Sol', 'Gonzalez'), ('Paulina', 'Rustecka'), ('Da Hye', 'Kim'), ('Sumeera', 'Kamil'), ('Yukina', 'Saigo'), ('Teertha', 'Iska'), ('Lizanne', 'Jinkertz'), ('Pauline', 'Wuarin'), ('Meike', 'Vorschel'), ('Natalie Greer Watts', 'Da Silveira'), ('Claudia', 'Negron'), ('Julie', 'Garret'), ('Ashley', 'Barron'), ('Ksenija', 'Sharifova'), ('Gabriela', 'Pereira Alves'), ('Silvia', 'Mocciola'), ('Marta', 'Bellucco'), ('Dominique', 'Beauvais'), ('Angeline Devi', 'Devanthiran'), ('Paula', 'Smetak'), ('Stefani', 'Hofer'), ('Tanja', 'Tuomi'), ('Nicole', 'Mitchell'), ('Mayar', 'Sherif'), ('Anna', 'Bryukhova'), ('Suryaningsih', 'Suryaningsih'), ('Sade', 'Atkinson'), ('Crystal', 'Sutar'), ('Andreea', 'Gradinaru Fometescu'), ('Elisa Mai', 'Koonik'), ('Lujza', 'Ryskova'), ('Carmen', 'Blasco Robaina'), ('Natalie', 'Suk'), ('Giulia', 'Della Cioppa'), ('Maurine', 'Lena'), ('Debora Emanuela', 'Scurt'), ('Agustina Elena', 'Otegui'), ('Kyra', 'Wojcik'), ('Maria', 'Bogdanova'), ('Katerina', 'Siniakova'), ('Anelisse', 'Torrico'), ('Johnnise', 'Renaud'), ('Risa', 'Ushijima'), ('Valeria', 'Patiuk'), ('Camila', 'Gil'), ('Alexandria', 'Stiteler'), ('Ah', 'Song'), ('Erin Kane', 'Rodriguez'), ('Annabelle', 'Andrinopoulos'), ('Barbara', 'Kotelesova'), ('Xiaodi', 'You'), ('Marine', 'Dans'), ('Sarah', 'Baron'), ('Dejana', 'Radanovic'), ('Cory Pierina', 'Molina Chenet'), ('Hannah En Xin', 'Chew'), ('Sandra', 'Honigova'), ('Timea', 'Jaruskova'), ('Isabela', 'Jovanovic'), ('Aleksandra', 'Emelianova'), ('Ulrikke', 'Hoyer'), ('Ana Fernanda', 'Loaiza Esquivias'), ('Louisa', 'Chirico'), ('Petra', 'Piirtola'), ('Qian Nan', 'Feng'), ('Monika', 'Rajicic'), ('Martina', 'Husarova'), ('Kylie', 'Waschuk'), ('Dugleisy', 'Linares'), ('Mila', 'Popivoda'), ('Indy', 'De Vroome'), ('Karoline', 'Kurz'), ('Sabrina', 'Federici'), ('Paola', 'Gullino'), ('Michele Alexandra', 'Zmau'), ('Karina', 'Silkina'), ('Tereza', 'Melicharkova'), ('Daniella', 'Silva'), ('Bianca', 'Birkenstock'), ('Mariami', 'Dolashvili'), ('Yuri', 'Sugimoto'), ('Nina Isabella', 'Scholten'), ('Eleni', 'Stamati'), ('Daria', 'Lodikova'), ('Dea Ioanna', 'Petropoulou'), ('Anne Liz', 'Jeukeng'), ('Nadege', 'Jorda'), ('Veronika', 'Badurova'), ('Beatriz', 'Maia'), ('Yasmina', 'El Sayed'), ('Yvonne', 'Bruce Tagoe'), ('Christina', 'Makarova'), ('Seda', 'Vardanyan'), ('Milica', 'Sljukic'), ('Gracia', 'Mboko'), ('Beatriz', 'Haddad Maia'), ('Sara', 'Djurdjevic'), ('Maria Styliani', 'Botsa'), ('Koralie', 'Etienne'), ('Ekaterina', 'Klyueva'), ('Maria', 'Zotova'), ('Milica', 'Novakovic'), ('Valeria', 'Cealic'), ('Mao', 'Ohmine'), ('Nelise', 'Verster'), ('Valeria', 'Munoz Velasquez'), ('Marina', 'Margulis'), ('Jennifer', 'Brown'), ('Laura', 'Moreno Martinez'), ('Nozomi', 'Kawai'), ('Woo Keoung', 'Lee'), ('Maria Jose', 'Luque Moreno'), ('Sunam', 'Jeong'), ('Sheetal', 'Shetty'), ('Claudia', 'Cianci'), ('Adel', 'Musina'), ('Vanessa', 'Dzmurova'), ('Izel Ece', 'Yilmaz'), ('Lodovica', 'Giannini'), ('Marta', 'Sexmilo Pascual'), ('Stefany', 'Ferigatto'), ('Ena', 'Kajevic'), ('Cecilia', 'Pattacini'), ('Elisabet', 'Strand'), ('Deborah', 'Chiesa'), ('Ines', 'Miranda'), ('Huijie', 'Li'), ('Sadafmoh', 'Tolibova'), ('Anais', 'Emelie'), ('Sara', 'Quiroga'), ('Eleonore', 'Barrere'), ('Mariana Mayer', 'Humberg'), ('Nadia', 'Mechaala Gordillo'), ('Sara', 'Mechaala Gordillo'), ('Marie', 'Mayerova'), ('Luana', 'Stanciu'), ('Juliana Rocha', 'Cardoso'), ('Viktoriya', 'Bogoslovska'), ('Sarina', 'Kang'), ('Petra', 'Ivankovic'), ('Regina', 'Lopez Ley'), ('Michelle Kerubo', 'Onyancha'), ('Mia', 'Jurasic'), ('Emma', 'Hurst'), ('Carolina', 'Monteiro Ribeiro De Lima'), ('Ning', 'Hai'), ('Maria Fernanda', 'Navarro Oliva'), ('Samantha', 'Echevarria'), ('Simran Kaur', 'Sethi'), ('Masako', 'Makiba'), ('Anastasia', 'Prokopenko'), ('Tjasa', 'Jerse'), ('Donna', 'Vekic'), ('Olaya', 'Inclan Solis'), ('Ariadna', 'Marti Riembau'), ('Maja', 'Ornberg'), ('Francesca', 'Delledera'), ('Jovana', 'Kenic'), ('Yumeko', 'Yoshitomi'), ('Maria Agustina', 'De Carli'), ('Sarah', 'Al Balushi'), ('Anastasiya', 'Shleptsova'), ('Amelie', 'Intert'), ('Marina', 'Guinart Espana'), ('Philippine', 'Gauduffe'), ('Anastasiya', 'Galickaya'), ('Elizaveta', 'Kamzolova'), ('Linda', 'Guerzize'), ('Julia', 'Grabher'), ('Gabriella Angelin', 'Alves'), ('Katarina', 'Guarino'), ('Ines', 'Chibout'), ('Ziyue', 'Sun'), ('Marli', 'Van Heerden'), ('Eva', 'Martinez Regalado'), ('Jeannez', 'Daniel'), ('Evgeniya', 'Ivanichenko'), ('Yihong', 'Li'), ('Daniela Estefania', 'Rosado Vega'), ('Gabriella', 'Umoquit'), ('Megen', 'Cochran'), ('Alina', 'Silich'), ('Erica', 'Braschi'), ('Misaki', 'Kawamura'), ('Kristina', 'Mrazova'), ('Ayla', 'Aksu'), ('Pei Wen', 'Kao'), ('Tomomi', 'Takaichi'), ('Jennifer', 'Hauer'), ('Vanessa', 'Stiegner'), ('Ana', 'Madcur'), ('Hanna', 'Borjeson'), ('Bhavani', 'Balakumar'), ('Louise', 'Ronaldson'), ('Thanthita', 'Suetrong'), ('Zeina', 'El Tawil'), ('Natallia', 'Niahrei'), ('Ryann', 'Foster'), ('Terri', 'Fleming'), ('Jennifer', 'Moinard'), ('Nia', 'Rose'), ('Chan', 'Zhang'), ('Pia', 'Cuk'), ('Dzina', 'Milovanovic'), ('Barbara', 'Rajic'), ('Tina', 'Bokhua'), ('Sara', 'Kalkenova'), ('Liana', 'Sakvarelidze'), ('Tatjana', 'Vorobjova'), ('Chatchaya', 'Sakchatchawan'), ('Melena', 'Lopez'), ('Yenise', 'Machado'), ('Ines', 'Baccouche'), ('Harriet', 'Dart'), ('Angela', 'Leweurs'), ('Nina', 'Stojanovic'), ('Nyla', 'Beenk'), ('Kana', 'Kubota'), ('Katie', 'Boulter'), ('Nelli', 'Ponomareva'), ('Eleonora', 'Maserati'), ('Vukosava', 'Medojevic'), ('Suzuho', 'Oshino'), ('Maria Eleni', 'Charalampopoulou'), ('Bianca', 'Moldovan'), ('Elizabeth Anita Alexandria', 'Profit'), ('Anastasia', 'Vasileiou'), ('Lara', 'Glavic'), ('Wanyuanyun', 'Jin'), ('Reina', 'Takahashi'), ('Yolimar', 'Ogando'), ('Polina', 'Yuzefovich'), ('Paulina', 'Lewandowska'), ('Anastasia', 'Artemova'), ('Shanshan', 'Guo'), ('Ines', 'Teixeira'), ('Agata', 'Borgman'), ('Alyssa', 'Boey'), ('Dona', 'Abo Habaga'), ('Jovana', 'Petrovic'), ('Mariella', 'Blackwell'), ('Valeriya', 'Korotina'), ('Antonia', 'Lottner'), ('Yusleydis', 'Smith Dias'), ('Clara', 'Tanielian'), ('Agustine Pangestu', 'Palupi'), ('Kristyna', 'Rouckova'), ('Tomoe', 'Yazawa'), ('Bojana', 'Petrovic'), ('Barbara', 'Gatica'), ('Michelle', 'Van Lier'), ('Viktoriya', 'Lushkova'), ('Mathilda', 'Malm'), ('Andrea', 'Sanchez Sainz'), ('Iva', 'Ivkovic'), ('Kimberley', 'Koerner'), ('Ching Wen', 'Hsu'), ('Alina', 'Zubkova'), ('Ioana Florentina', 'Popescu'), ('Natsuho', 'Nakazawa'), ('Emma', 'Ek'), ('Minami', 'Sonan'), ('Diandra', 'Berliana'), ('Karolina', 'Muchova'), ('Giorgia', 'Picano'), ('Paulina Javiera', 'Obreque'), ('Jiayuan', 'Xue'), ('Leticia Nayara Moura', 'Monteiro'), ('Ingrid', 'Gamarra Martins'), ('Sofia', 'Wicker'), ('Tatiana', 'Rico Viana'), ('Janina', 'Braun'), ('Sharmeen', 'Rizvi'), ('Larissa', 'Bucher'), ('Camila', 'Giangreco Campiz'), ('Gabriela', 'Anzola'), ('Alessandra', 'Gisonna'), ('Chiara', 'Frapolli'), ('Stephanie Mariel', 'Petit'), ('Shaddae', 'Findley'), ('Anastasia', 'Nikolaou'), ('Leslie', 'Soto'), ('Jena', 'Cheng'), ('Gorica', 'Spasojevic'), ('Ksenia', 'Laskutova'), ('Carla', 'Touly'), ('Klavdija', 'Bukovec'), ('Katarina', 'Jovanovic'), ('Sara', 'Boevska'), ('Lilla', 'Barzo'), ('Tanja', 'Stojanovska'), ('Habiba', 'Shaker'), ('Rianna', 'Valdes'), ('Hannah', 'Ploner'), ('Sara', 'Gimenez'), ('Kanako', 'Morisaki'), ('Yassamine', 'Boudjadi'), ('Yana', 'Tashaev'), ('Barbora', 'Kollarova'), ('Isabelle', 'Wallace'), ('Ekaterina', 'Ilina'), ('Nanette', 'Nylund'), ('Kim Janine', 'Gefeller'), ('Katelyn', 'Jackson'), ('Devi', 'Hasan'), ('Madeleine', 'Boepple'), ('Xiao', 'Fu'), ('Margaux', 'Brabant'), ('Septiana', 'Zahiroh'), ('Dakota', 'Norton'), ('Natalia', 'Zorgovska'), ('Giulia', 'Cascapera'), ('Eugenia', 'Sanchez'), ('Amit', 'Lev Ari'), ('Irem', 'Karamanoglu'), ('Jennifer', 'Wacker'), ('Seohyeon', 'Kim'), ('Chiara', 'Pascale'), ('Maria Juliana', 'Alzate'), ('Laura', 'Roig Tortajada'), ('Ioana Loredana', 'Rosca'), ('Theresa Alison', 'Van Zyl'), ('Chiara', 'Arcangeli'), ('Kristina', 'Eremina'), ('Maia A', 'Magill'), ('Marianna', 'Zakarlyuk'), ('Alice', 'Patch'), ('Gebriela', 'Mihaylova'), ('Hannah', 'Cseplo'), ('Anastasia', 'Reshetnikova'), ('Inger', 'Van Dijkman'), ('Alexis', 'Prokopuik'), ('Julia', 'Ascua'), ('Sarah', 'Vargas'), ('Jessika', 'Ponchet'), ('Magdalena', 'Boado'), ('Agata Jadwiga', 'Bienkowska'), ('Alena', 'Gulyaeva'), ('Lyn Yuen', 'Choo'), ('Guillermina', 'Naya'), ('Arisha', 'Ladhani'), ('Margot', 'Mercier'), ('Alicia', 'Smith'), ('Evelina', 'Hennigor'), ('Risa', 'Shimizu'), ('Alexa', 'Pirok'), ('Melanie', 'Stokke'), ('Lorea', 'Ganboa'), ('Ema', 'Barkovic'), ('Jelena Karla', 'Vujicic'), ('Emmanuelle', 'De Beer'), ('Jasmin', 'Jebawy'), ('Maria', 'Schneider'), ('Ana Bianca', 'Mihaila'), ('Ke', 'Mao'), ('Laura', 'Sainsbury'), ('Annelou', 'Nab'), ('Sara', 'Sorribes Tormo'), ('Stephanie', 'Yamada'), ('Tea', 'Jandric'), ('Manae', 'Miwa'), ('Rio', 'Suzuki'), ('Rehmat', 'Johal'), ('Antonia', 'Sakic'), ('Dasha', 'Ivanova'), ('Shannon', 'Wong Hon Chan'), ('Maria Victoria', 'Quinde Serrano'), ('Anna', 'Koval'), ('Kalina', 'Bozhilova'), ('Kimberly', 'Yee'), ('Gloria', 'Liang'), ('Mirna', 'Curcic'), ('Mariana', 'Carreira'), ('Rebecca', 'Sramkova'), ('Katharine', 'Fahey'), ('Alina', 'Kuzmenkova'), ('Maria', 'Tritou'), ('Ana', 'Sirovina'), ('Tamara', 'Pichkhadze'), ('Saera', 'Kanda'), ('Vasilisa', 'Aponasenko'), ('Camila', 'Pacheco'), ('Thalia', 'Martin'), ('Khume', 'Herring'), ('Oceane', 'Dodin'), ('Zoe', 'Hives'), ('Marianna', 'Petrei'), ('Ana Marcela', 'Rengifo Caracas'), ('Pia', 'Brglez'), ('Annely', 'Pokras'), ('Josefina', 'Surraco'), ('Amanda', 'Rebol'), ('Vasundara', 'Raju'), ('Anastasija', 'Homutova'), ('Albina', 'Yanko'), ('Vittoria', 'Avvantaggiati'), ('Bojana', 'Marinkovic'), ('Caroline', 'Daxhelet'), ('Vitaliya', 'Nekhoroshikh'), ('Anastasia', 'Trunina'), ('Barbara', 'Bacic'), ('Maria Paula', 'Martinez Gelvez'), ('Melanie Isabella', 'Diaz Padron'), ('Jana', 'Fett'), ('Eva', 'Siskova'), ('Minh Trang', 'Dao'), ('Ivone', 'Alvaro'), ('Anita Ance', 'Detlava'), ('Kasandra', 'Kozub'), ('Cyrine', 'Ben Cheikh'), ('Tanasha', 'Khandpur'), ('Emma Marie', 'Jensen'), ('Mara', 'Argyriou'), ('Karina', 'Komaruk'), ('Julieta Sofia', 'Canas'), ('Dea', 'Herdzelas'), ('Guljahan', 'Kadyrova'), ('Hye Ji', 'Ju'), ('Rachel', 'Chong'), ('Ellyse', 'Hamlin'), ('Judith', 'Bohnenkamp Serena'), ('Jane', 'Wasserson'), ('Alice', 'Keddie'), ('Aleksandra', 'Karamanoleva'), ('Caitlin', 'Herb'), ('Ana', 'Yrazusta Acosta'), ('Margaux', 'Deagostini'), ('Polina', 'Novoselova'), ('Marie', 'Villet'), ('Daniela', 'Pedraza Novak'), ('Maria Paula', 'Medina Blanco'), ('Tyler', 'Smith'), ('Kristina', 'Njegus'), ('Angelina', 'Zhuravleva'), ('Rafaela', 'Francisquiny'), ('Hannah', 'Lehfeldt'), ('Juliana', 'Pena'), ('Monica', 'Matias'), ('Malak Jasim', 'Fardan'), ('Maite', 'Cano'), ('Abhilasha', 'Vishwanath'), ('Shir', 'Hornung'), ('Camila', 'Wesbrooks'), ('Gizem Melisa', 'Ates'), ('Laura', 'Argente'), ('Sindhu', 'Janagam'), ('Marketa', 'Zeminova'), ('Maria Belen', 'Vaz Teixeira'), ('Yunjeong', 'Park'), ('Nihed', 'Benkaddour'), ('Yadira', 'Rubio'), ('Hitomi', 'Watanabe'), ('Melina', 'Lyubomirova'), ('Akvile', 'Parazinskaite'), ('Stefania', 'Sismanidou'), ('Anna', 'Vrbenska'), ('Julia', 'Jung'), ('Jasmine Kaur', 'Bajaj'), ('Lee', 'Ben Or'), ('Magdelini', 'Lesvidou'), ('Aina', 'Schaffner Riera'), ('Victoria', 'Yu'), ('Kristina', 'Djamalova'), ('Alli', 'Hodges'), ('Francesca', 'Bullani'), ('Lisa', 'Phillips'), ('Sabina', 'Calancea'), ('Jamilya', 'Sadykzhanova'), ('Miryam', 'Jabri'), ('Dina', 'Hegab'), ('Milana', 'Drca'), ('Oriana Belen', 'Labaqui'), ('Angelina', 'Kholikulova'), ('Nina', 'Kalezic'), ('Claudia', 'Wiktorin'), ('Lara', 'Kralj'), ('Sarlota', 'Cesnekova'), ('Graciela Patricia', 'Rosas Alvarado'), ('Pia', 'Ender'), ('Stefanie', 'Vorih'), ('Alannah', 'Griffin'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Costanza', 'Magazzini'), ('Ana', 'Lopez Camarero'), ('Martina', 'Colmegna'), ('Elina', 'Vikhryanova'), ('Sahar', 'Najaei'), ('Natalie', 'Novotna'), ('Varvara', 'Flink'), ('Catalina', 'Vives'), ('Cristina', 'Moroi'), ('Paula', 'Rives Palau'), ('Vineeta', 'Singh'), ('Madison', 'Harrison'), ('Sofia', 'Mariotto'), ('Palina', 'Dubavets'), ('Polina', 'Ivanova'), ('Francesca', 'Wilkes'), ('Alicja', 'Zduniak'), ('Yekaterina', 'Gubanova'), ('Natalija', 'Sipek'), ('Barbara', 'Mancera Carrillo'), ('Zarina', 'Jumajanova'), ('Sara', 'Ramadan'), ('Lara', 'Dimmer'), ('Lais', 'Carvalho De Oliveira Bicca'), ('Gabrielle Faith', 'Andrews'), ('Sumitra', 'Basnyat'), ('Kamilla', 'Beisenova'), ('Aayushi', 'Chouhan'), ('Katherine', 'Lee'), ('Vivian', 'Hegeman'), ('Ana Victoria', 'Gobbi Monllau'), ('Amanda', 'Andrade Silva'), ('Dagmar', 'Janischova'), ('Sophia', 'Grippo'), ('Marta', 'Kowalska'), ('Giuliana', 'Huerta Mercado'), ('Ariana', 'Rahmanparast'), ('Ruth', 'Copas'), ('Alessandra', 'Lucchetta'), ('Ksenia', 'Dmitrieva'), ('Maria Del Rosario', 'Canero Perez'), ('Arina', 'Folts'), ('Sena Lara', 'Nural'), ('Lior', 'Pachuorkovski'), ('Simran', 'Wadhwa'), ('Yik Yan Suki', 'Law'), ('Maria', 'Siopacha'), ('Ana Luisa', 'Perez Lopez'), ('Dabin', 'Kim'), ('Martina', 'Malmqvist'), ('Natsumi', 'Okamoto'), ('Michela', 'Piccioli'), ('Cecilia', 'Bahloul'), ('Camille', 'Sireix'), ('Laura', 'Pimenta'), ('Yada', 'Vasupongchai'), ('Lilia', 'Talaboulma'), ('Arushi', 'Bhasin'), ('Jasmin', 'Buchta'), ('Valentina', 'Losciale'), ('Jessica', 'Ho'), ('Mina Guner', 'Karamercan'), ('Ziyu', 'Wang'), ('Theresa', 'Piontek'), ('Chatmanee', 'Jankiaw'), ('Napawee', 'Jankiaw'), ('Isabel Veronica', 'Boada'), ('Valeriya', 'Solopaeva'), ('Andie K', 'Daniell'), ('Uljan', 'Espolova'), ('Lauren', 'Proctor'), ('Dhruthi', 'Tatachar Venugopal'), ('Ingy', 'Hashish'), ('Pornpawee', 'Premthong'), ('Lucia', 'Ondrasova'), ('Yijia', 'Shao'), ('Eliska', 'Kleisnerova'), ('Ivona', 'Cudina'), ('Ana', 'Roman Dominguez'), ('Sanjana', 'Sudhir'), ('Ayane', 'Tachibana'), ('Esen', 'Kokce'), ('Martina', 'Basic'), ('Sejla', 'Duzel'), ('Fernanda', 'Astete'), ('Nina', 'Potocnik'), ('Minja', 'Gligic'), ('Anastasiya', 'Rychagova'), ('Sofia', 'Smagina'), ('Natalia', 'Bey Barbe'), ('Clara', 'Carotta'), ('Josephine', 'Hofmann'), ('Maharevo', 'Ramanitrarivo Rosea'), ('Ana Paula', 'Neffa De Los Rios'), ('Dona', 'Valihanova'), ('Sasipa', 'Permpanich'), ('Karina', 'Gurgenyan'), ('Raluca', 'Ciufrila'), ('Anastasia', 'Chikalkina'), ('Alexandra', 'Bezmenova'), ('Dina', 'Zhamiyeva'), ('Maria', 'Patrascu'), ('Jiaqing', 'Mo'), ('Josefin', 'Halden'), ('Angelina', 'Klimova'), ('Nikol', 'Zaikin'), ('Amy', 'Yang'), ('Luz Angelica', 'Solano Delgado'), ('Nilufar', 'Ismailova'), ('Tsvetanka', 'Trifonova'), ('Rada', 'Manataweewat'), ('Alexandra', 'Tsereteli'), ('Victoria', 'Muntean'), ('Claire', 'Verwerda'), ('Isabelle', 'Entenza'), ('Katerina', 'Stloukalova'), ('Victoria', 'Giannaccini'), ('Maria', 'Novikova'), ('Isabella', 'Hurtado'), ('Pamela', 'Wu'), ('Nozomi', 'Ohya'), ('Denisa', 'Chereches'), ('Barbora', 'Kosejkova'), ('Chiara', 'Grimm'), ('Alona', 'Puskkarevsky'), ('Imen', 'Abid'), ('Anna', 'Sviripa'), ('Julia', 'Suzuki'), ('Melis', 'Bayraktaroglu'), ('Sara Catherine', 'Parker'), ('Charlotte', 'Petrick'), ('Mafalda', 'Fernandes'), ('Damini', 'Sharma'), ('Morgane', 'Michiels'), ('Vittoria', 'Beolchi'), ('Paige Mary', 'Hourigan'), ('Lidia', 'Moreno Arias'), ('Julia', 'Schepp'), ('Francoise', 'Abanda'), ('Mirabelle', 'Njoze'), ('Kim', 'Ha Nul'), ('Stacey', 'Fung'), ('Alexus', 'Jones'), ('Andreina', 'Pino'), ('Anhelina', 'Kalinina'), ('Eeshita', 'Pande'), ('Chantal', 'Martinez Blanco'), ('Sthefanie', 'Santos'), ('Marina', 'Gennimata'), ('Valentini', 'Grammatikopoulou'), ('Lana', 'Rush'), ('Anja', 'Dokic'), ('Evelyn Briyeeth', 'Moreno Rivera'), ('Linn', 'Ehrenstrom'), ('Nadia', 'Podoroska'), ('Agustina', 'Chlpac'), ('Nicole Caroline', 'Vaz Da Silva'), ('Atlanta ', 'Patsali'), ('Valeria', 'Nikolaev'), ('Ana Lucia', 'Carneiro Revoredo'), ('Hana', 'Pektorova'), ('Kseniia', 'Bekker'), ('Snehadevi S', 'Reddy'), ('Laura', 'Botero'), ('Nicole', 'Dzenga'), ('Aparna', 'Kondaveeti'), ('Vasanti', 'Shinde'), ('Jelena', 'Janosevic'), ('Margalita', 'Tchitchashvili'), ('Muge', 'Topsel'), ('Victoria', 'Chehal'), ('Natalia', 'Vikhlyantseva'), ('Kristina', 'Kostic'), ('Tuna', 'Kaya'), ('Andreia', 'Beberechi'), ('Nur Gulsan', 'Bicen'), ('Amanda', 'Schneider'), ('Kwan Yau', 'Ng'), ('Kamonluk', 'Kittitanom'), ('Lin', 'Ma'), ('Lamiaa', 'Aziz'), ('Montana', 'Moore'), ('Kristina', 'Samardzic'), ('Carina', 'Avram'), ('Anastasija', 'Filipovic'), ('Protiksha', 'Sharma'), ('Milica', 'Cortanovacki'), ('Roosa', 'Timonen'), ('Joanna', 'Zawadzka'), ('Meng', 'Qin'), ('Federica Joe', 'Gardella'), ('Giorgie', 'Jones'), ('Andria', 'Tsaggaridou'), ('Paige', 'Cline'), ('Marla', 'Mesa'), ('Lucia Annette', 'Davila Espejo'), ('Jelena', 'Lukic'), ('Camila', 'Ramazzini'), ('Lynn', 'Janssens'), ('Valentina', 'Gazzoli'), ('Katharina', 'Herpertz'), ('Yana', 'Khon'), ('Julia Mansano', 'Gomide'), ('Rebeka', 'Stolmar'), ('Anna Maria', 'Procacci'), ('Eleonora', 'Cecchinato'), ('Yu Ting', 'Hsieh'), ('Magda', 'Aubets Macia'), ('Jasmine Marina', 'Coteanu'), ('Kateryna', 'Lymar'), ('Anna', 'Sokiran'), ('Yi Ming', 'Huang'), ('Alexandra', 'Valenstein'), ('Oceane', 'Garibal'), ('Sara', 'Lanca'), ('Hazal', 'Unlugenc'), ('Daniela', 'Farfan'), ('Rayene Nour', 'Brahimi'), ('Antonella', 'Bramato'), ('Jiaxi', 'Lu'), ('Maren', 'Helgo'), ('Gabriela', 'Slavova'), ('Marija', 'Kelava'), ('Mckenna Alexandra', 'Root'), ('Sarah', 'Schaerer'), ('Maria', 'Kononova'), ('Laura', 'Gomez'), ('Tatiana', 'Feygina'), ('Michaela', 'Odraskova'), ('Nicole', 'Kadlec'), ('Marija Vera', 'Stankovic'), ('Victoria Fernanda', 'Angulo Pimentel'), ('Arina Gabriela', 'Vasilescu'), ('Tayisiya', 'Morderger'), ('Yana', 'Morderger'), ('Nagisa', 'Morimoto'), ('Michelle', 'Yang'), ('Neus', 'Torregrosa Parets'), ('Giulia', 'Porzio'), ('Marta', 'Garcia Gausi'), ('Belinda', 'Bencic'), ('Andreea', 'Ghitescu'), ('Lina', 'Qostal'), ('Fiona', 'Ferro'), ('Sara', 'Cakarevic'), ('Viktoryia', 'Viaklenka'), ('Patricia', 'Valimaa'), ('Frederikke', 'Svarre'), ('Leticia Garcia', 'Vidal'), ('Sarra', 'Boukezzi'), ('Ty Ana', 'Williams'), ('Maryna', 'Kolb'), ('Yu Jin', 'Ahn'), ('Tamara', 'Tomic'), ('Felicity', 'Maltby'), ('Hae Ok', 'Lee'), ('Hae Seon', 'Lee'), ('Kenadi', 'Hance'), ('Emel', 'Abibula'), ('Julie', 'Razafindranaly'), ('Alexis', 'Jones'), ('Latifah Amelia', 'Dinar'), ('Elvira', 'Juravliova'), ('Alija', 'Merdeeva'), ('Iryna', 'Vardanyan'), ('Natalia', 'Serrano Garcia'), ('Bianka', 'Bekefi'), ('Diana', 'Spissakova'), ('Ghita', 'Nassik'), ('Vera', 'Sakalouskaya'), ('Anna', 'Hermann'), ('Anna', 'Ulyashchenko'), ('Nikola', 'Dolakova'), ('Siqi', 'Xie'), ('Miljana', 'Milojevic'), ('Lauren', 'Bishop'), ('Savannah', 'Sills'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Sharon', 'Pesch'), ('Kristina', 'Evtushenko'), ('Yi Chi', 'Ma'), ('Liz Andrea', 'Miranda'), ('Vanessa', 'Zemp'), ('Francesca', 'Bonometti'), ('Ayako', 'Hayashi'), ('Mariana Lucia', 'Bedon Burgos'), ('Lindsay', 'Truscott'), ('Dominique', 'Ibarra Gomez'), ('Oceane', 'Razakaboana'), ('Camilla', 'Fabbri'), ('Harshita', 'Chugh'), ('Julia', 'Izotova'), ('Anhelina', 'Kalita'), ('Jiahuan', 'He'), ('Nilay Gizem', 'Altay'), ('Darya', 'Bulatova'), ('Eliska', 'Petrackova'), ('Laura', 'Luedemann'), ('Dijana', 'Bogicevic'), ('Matilde', 'Fernandes'), ('Natalia', 'De Ugarte'), ('Iulia', 'Truca'), ('Hanna', 'Kantenwein'), ('Alisha', 'Haas'), ('Madeline', 'Rolph'), ('Pauline', 'Courcoux'), ('Meropi', 'Parousi'), ('Laura', 'Moreno Hernandez'), ('Huibre Mare', 'Botes'), ('Louise Mare', 'Botes'), ('Melan', 'Butler'), ('Rafaela', 'Gomez'), ('Eliessa', 'Vanlangendonck'), ('Kristen', 'Thoms'), ('Ioana Larisa', 'Fuiorea'), ('Farah', 'Baklouti'), ('Ivana', 'Marinov'), ('Valentina', 'Abrile'), ('Lidia', 'Mugelli'), ('Daniela Macarena', 'Lopez'), ('Blanca Elena', 'Butnaru'), ('Nariman', 'Abo Bakr'), ('Anna', 'Fajnorova'), ('Ribana', 'Roth'), ('Olivia', 'Horn'), ('Britt', 'Schreuder'), ('Alejandra', 'Gil'), ('Miriam', 'Kolodziejova'), ('Vanja', 'Klaric'), ('Kateryna', 'Karpiuk'), ('Jelena', 'Stojanovic'), ('Tamachan', 'Momkoonthod'), ('Mathilde', 'Devits'), ('Dessislava', 'Zlateva'), ('Vendula', 'Zovincova'), ('Natalia', 'Vovk'), ('Sarai Delfina', 'Monarrez Yesaki'), ('Margot', 'Yerolymos'), ('Yixuan', 'Li'), ('Chiara', 'De Vito'), ('Helen', 'Ploskina'), ('Gabriela', 'Ferreira Sanabria'), ('Gabriela Andrea', 'Knutson'), ('Nastya', 'Gordeeva'), ('Daniela', 'Diez'), ('Anabel', 'Martinovic'), ('Arina', 'Umanskaya'), ('Veronika', 'Kudermetova'), ('Jessica', 'Pieri'), ('Dalila', 'Spiteri'), ('Andra Maria', 'Nitescu'), ('Elzbieta', 'Iwaniuk'), ('Maddie', 'Antoun'), ('Jennifer', 'Jussi'), ('Ana Carolina Caiuby', 'Mattos'), ('Defne', 'Ozerden'), ('Karolina', 'Porubska'), ('Anastasia', 'Shaulskaya'), ('Maria Jose', 'Pintos'), ('Martha', 'Matoula'), ('Erika', 'Drozd Pereira'), ('Melanie', 'Kovacic'), ('Nathalia', 'Naomy Sato'), ('Moulika', 'Ram'), ('Brianna', 'Thompson'), ('Micheline', 'Aubuchon'), ('Tatum', 'Prudhomme'), ('Anastasiya', 'Fedoryshyn'), ('Qi Li', 'Ma'), ('Aleksandra', 'Stosic'), ('Sara', 'Amiri'), ('Sol Hee', 'Sim'), ('Tanja', 'Gligoric'), ('Yulieth Eliana', 'Blanco Molina'), ('Gulchekhra', 'Muhammadsidikova'), ('Julia', 'Mikulski'), ('Ksenia', 'Tortsikava'), ('Lisa Marie', 'Rioux'), ('Laura', 'Tinello'), ('Margarida', 'Abreu'), ('Kateryna', 'Baranivska'), ('Ilayda', 'Yondem'), ('Zina', 'Mehikic'), ('Ivana', 'Jorovic'), ('Maftunabonu', 'Saidova'), ('Patricia', 'Delicado Orihuela'), ('Anna', 'Pavlova'), ('Devanshi G', 'Bhimjiyani'), ('Daniela', 'Ruiz'), ('Fanny', 'Ostlund'), ('Ainhoa', 'Ramos'), ('Talya', 'Zandberg'), ('Maria', 'Smith'), ('Valeriya', 'Urzhumova'), ('Sabrina', 'Rittberger'), ('Liisa', 'Pajumets'), ('Odile', 'Maesfranckx'), ('Nupur', 'Umashankar'), ('Vinja', 'Lehmann'), ('Darya', 'Kasatkina'), ('Maria Elena', 'Medina Betancourt'), ('Rafaella', 'Sampaio'), ('Candice', 'Paya'), ('Katerina', 'Valos'), ('Lara', 'Souza Soares'), ('Rui Jie', 'Jiang'), ('Olivia', 'Tjandramulia'), ('Melanie Azucena', 'Millan Acosta'), ('Irem Talya', 'Koken'), ('Arina', 'Kuznetsova'), ('Aliki', 'Kapella'), ('Daniela', 'Kabakova'), ('Valeria', 'Mishina'), ('Agustina', 'Santamaria Teixeira'), ('Merve', 'Gulten'), ('Antonina', 'Lysakova'), ('Yuchia', 'Chen'), ('Danielle', 'McIntyre'), ('Valentina', 'Vargas'), ('Lena', 'Reichel'), ('Maho', 'Hatta'), ('Katarina', 'Weymouth'), ('Valentina', 'Todeschin'), ('Lina', 'Grabow'), ('Lorena', 'Madahuar'), ('Isabella', 'Calves'), ('Zaina', 'Sufi'), ('Eugenia', 'Todaro'), ('Liliya', 'Izmaylova'), ('May', 'Wanvisa Thurakitseree'), ('Milka', 'Genkova'), ('Meredith', 'Xepoleas'), ('Lisa', 'Ponomar'), ('Kennedy', 'Shaffer'), ('Lotte', 'Van Leeuwen'), ('Anastasia', 'Goncharova'), ('Birgit', 'Burk'), ('Kanako', 'Osafune'), ('Ginevra', 'Chiara'), ('Pauline', 'Van Herck'), ('Alexsandra', 'Zhazhelo'), ('Carolyn', 'Xie'), ('Mercedes', 'Hammond'), ('Arezo', 'Ghannadan'), ('Thanyathorn', 'Putthuan'), ('Manuela Luz', 'Molesini'), ('Anna', 'Bondar'), ('Simona', 'Heinova'), ('Sophie', 'Chang'), ('Adela', 'Heinova'), ('Katie', 'Poluta'), ('Silvia', 'Mattiolo'), ('Maria Victoria', 'Valle Zimmernann'), ('Ines', 'Murta'), ('Milka Emilia', 'Pasanen'), ('Jacqueline', 'Pelletier'), ('Mathilde', 'Armitano'), ('Ekaterina', 'Alekseenko'), ('Jessica', 'Failla'), ('Martina', 'Okalova'), ('Darta Elizabete', 'Emulina'), ('Sena', 'Suswam'), ('Maria', 'Marfutina'), ('Kylie', 'Wilcox'), ('Melissa', 'Arnoldi'), ('Edith Ayelen', 'Monzon'), ('Deria', 'Nur Haliza'), ('Jelena', 'Ostapenko'), ('Barbara', 'Choon'), ('Lizaveta', 'Hancharova'), ('Patricia', 'Panta'), ('Meriam', 'Rhallab'), ('Zuzanna', 'Szuszkiewicz'), ('Madalina', 'Grigoriu'), ('Marie', 'Norris'), ('Gulnara', 'Axmedova'), ('Natalie', 'Kallmunzerova'), ('Masa', 'Antonijevic'), ('Marina', 'Darzyan'), ('Kiko', 'Nishizato'), ('Maximiliane', 'Wachall'), ('Radina', 'Dimitrova'), ('Maria', 'Tkachuk'), ('Ege', 'Tomey'), ('Natsumi', 'Koshino'), ('Camille', 'Mignac Haus'), ('Yelyzaveta', 'Pletnyeva'), ('Elizaveta', 'Voronova'), ('Sandra', 'Friedl'), ('Christiana', 'Mcdonald'), ('Sneha', 'Padamata'), ('Jocelijn', 'Cavero Roeper'), ('Ines Karmen', 'Vias'), ('Natasa', 'Kosanin'), ('Haruka', 'Sasaki'), ('Raluca Georgiana', 'Serban'), ('Bianca', 'Turati'), ('Anna', 'Turati'), ('Ceire', 'Mullins'), ('Imke', 'Schluenzen'), ('Yasmine', 'Ince'), ('Carla', 'Cerdan Vives'), ('Noelia', 'Lopez Lazaro'), ('Rebeca Ruth', 'Scurt'), ('Hana', 'Sisirak'), ('Joana', 'Brites'), ('Katharina', 'Hobgarski'), ('Vanessa', 'Timm'), ('Lorena', 'Clemente'), ('Ariana', 'Saki'), ('Isidora', 'Pejovic'), ('Mollie', 'Crouch'), ('Emma', 'Milicevic'), ('Leah', 'Luboldt'), ('Maria', 'Hamad'), ('Maria Giorgia', 'Farrugia Sacco'), ('Tami', 'Grende'), ('Diana', 'Krasnova'), ('Mariagrazia', 'Pedretti'), ('Mariya', 'Luss'), ('Cherise', 'Slocombe'), ('Francesca', 'Brancato'), ('Marta', 'Ruedas Burgos'), ('Emilie', 'Francati'), ('Sunae', 'Ji'), ('Melissa', 'Lord'), ('Eliza Maria', 'Dan'), ('Guzalhon', 'Nizamova'), ('Hassiba', 'Munoz Alcaman'), ('Olivia', 'Parson'), ('Machiko', 'Yahata'), ('Anastasia', 'Grosheva'), ('Chloe', 'Hule'), ('Joselyn Margarita', 'Treyes AlbarracN'), ('Katarina', 'Stresnakova'), ('Karola Patricia', 'Bejenaru'), ('Iryna', 'Shymanovich'), ('Vera', 'Aleshcheva'), ('Anna', 'Makhorkina'), ('Sasha', 'Alexander'), ('Mbolatiana', 'Randrianarisoa'), ('Sara', 'Orellana'), ('Veronica', 'Verzoletto'), ('Anna', 'Abualhaj'), ('Natalia', 'Ucros'), ('Florencia Sofia', 'Galdo'), ('Margaryta', 'Demchenko'), ('Anastasiya', 'Komardina'), ('Jessica', 'Golovin'), ('Lea', 'Gasparovic'), ('Anna', 'Popescu'), ('Raluca Adriana', 'Belehuz'), ('Ellie', 'Halbauer'), ('Anita', 'Perez Flor'), ('Nina', 'Holanova'), ('Milica', 'Cubranovic'), ('Sara', 'Grubac'), ('Petra', 'Melounova'), ('Alexandra', 'Borg'), ('Alessandra', 'Amodeo'), ('Camilla', 'Littlewood'), ('Julieta Lara', 'Estable'), ('Jil Belen', 'Teichmann'), ('Sarah', 'Adegoke'), ('Dorien', 'Cuypers'), ('Julie', 'Byrne'), ('Nana', 'Kanayama'), ('Yagmur', 'Akdemir'), ('Katerina', 'Stewart'), ('Viktoriia', 'Fedorova'), ('Silvia', 'Gualtieri'), ('Maria Juliana', 'Labrador Morales'), ('Lisa', 'Friess'), ('Patrycja', 'Polanska'), ('Polina', 'Chala'), ('Ana Lena', 'Toto'), ('Jia Qi', 'Kang'), ('Iman', 'Qureshi'), ('Isabella', 'Bizzo'), ('Mariela', 'Haug'), ('Verena', 'Meliss'), ('Tamar', 'Kutubidze'), ('Maria', 'Kompalka'), ('Alena', 'Weiss'), ('Francesca', 'Di Lorenzo'), ('Momoko', 'Sonoda'), ('Mia', 'Horvit'), ('Silvia', 'Chinellato'), ('Irene', 'Burillo Escorihuela'), ('Sara', 'Kelly'), ('Vera', 'Ploner'), ('Marta', 'Dyba'), ('Sophia', 'Chow'), ('Michalina', 'Jedrzejczak'), ('Aleksandra', 'Vostrikova'), ('Dominika', 'Haldinova'), ('Christina', 'Rosca'), ('Ya Ting', 'Chang'), ('Alejandra', 'Gutierrez'), ('Caroline', 'Lampl'), ('Paula', 'Del Cueto Castillo'), ('Arina', 'Nozdracheva'), ('Elena', 'Van Der Sypt'), ('Federica', 'Sema'), ('Svetlana', 'Klyuchnikova'), ('Sabrina', 'Rodriguez'), ('Gyselle Ximena', 'Daza'), ('Anna', 'Brogan'), ('Anamarija', 'Stevanovic'), ('Camila Andrea', 'Velasquez Moreno'), ('Kristina', 'Schmiedlova'), ('Mayu', 'Okawa'), ('Chloe', 'Hughes'), ('Nina', 'Khmelnitckaia'), ('Elina', 'Joronen'), ('Karina', 'Traxler'), ('Jovana', 'Peric'), ('Olesya', 'Nesterovich'), ('Luisa', 'Stefani'), ('Lior', 'Ifergan'), ('Lisa', 'Hofbauer'), ('Laura', 'Pennanen'), ('Chenchen', 'Feng'), ('Ayan', 'Broomfield'), ('Ana Maria', 'Carrion Rodriguez'), ('Rida', 'Khalid'), ('Arina', 'Beliaeva'), ('Greetje', 'Minnen'), ('Sara Maria', 'Farzat'), ('Elisabeth', 'Lyukshinova'), ('Mateya', 'Radisavljevic'), ('Fatima', 'Bizhukova'), ('Anastasiya', 'Smirnova'), ('Maria Virginia', 'Bosch'), ('Margarita', 'Shmeleva'), ('Maria', 'Silva'), ('Karla', 'Portalatin'), ('Sansriti', 'Ranjan'), ('Laetitia', 'Charbonnet'), ('Klara', 'Alenas'), ('Mei', 'Date'), ('Emily', 'Smith'), ('Natividad', 'Lopez Diaz'), ('Marlies', 'Steiner'), ('Mahrukh', 'Kokni'), ('Maria', 'Mukai'), ('Neharika', 'Rama'), ('Thisuri', 'Molligoda'), ('Mojca', 'Mejak'), ('Sae', 'Haraguchi'), ('Ting Ya', 'Hsu'), ('Dana', 'Kremer'), ('Aleksandra', 'Kulesza'), ('Siri', 'Victorsson'), ('Verena', 'Hofer'), ('Tiffany', 'Mylonas'), ('Natsuho', 'Arakawa'), ('Beatrice', 'Torelli'), ('Natalia', 'Jelinkova'), ('Emerald', 'Able'), ('Chloe Michele', 'Ouellet Pizer'), ('Mireia', 'Polo'), ('Polina', 'Radeva'), ('Laura', 'Falceto Font'), ('Veronika', 'Vlkovska'), ('Kei', 'Kato'), ('Natalia', 'Belova'), ('Claudia Paulina', 'Lopez'), ('Chaoyi', 'Chen'), ('Jasmine Amber', 'Asghar'), ('Roberta Maria', 'Naicu'), ('Pimpitcha', 'Jattavapornvanit'), ('Manca', 'Pislak'), ('Margot', 'Decker'), ('Harmony', 'Tan'), ('Holly', 'Hutchinson'), ('Zoe', 'Doronjski'), ('Anne Kathrin', 'Hierl'), ('Maram', 'Selim'), ('Sandra', 'Jamrichova'), ('Maria', 'Gutierrez Carrasco'), ('Angelica Maria', 'Ochoa Martinez'), ('Ema', 'Gil Pires'), ('Eleanna', 'Koukouvitaki'), ('Bianca', 'Monaco'), ('Anna', 'Dollar'), ('Guljan', 'Muhammetkuliyeva'), ('Jessica', 'Hinojosa Gomez'), ('Madison', 'Bourguignon'), ('Veronika', 'Gardazari'), ('Paula', 'Goetz'), ('Emilia', 'Occhipinti'), ('Luiza', 'Irismetova'), ('Pragya', 'Sinha'), ('Kateryna', 'Riabtseva'), ('Viktoriya', 'Gogol'), ('Alina', 'Mekhtieva'), ('Riya', 'Bhatia'), ('Avital', 'Vaysbuch'), ('Marie', 'Leduc'), ('Vinciane', 'Remy'), ('Sara', 'Amini'), ('Tulin', 'Dagilmisgul'), ('Marialuisa', 'Zirilli'), ('Myriam', 'Enmer'), ('Diana', 'Demidova'), ('Victoria', 'Naef'), ('Luca', 'Nagymihaly'), ('Yifei', 'Yang'), ('Laura D', 'Arciniegas'), ('Maria', 'Tavares'), ('Margaux', 'Bovy'), ('Maria', 'Chun'), ('Dayana', 'Sedova'), ('Claudia', 'Papi'), ('Kyla', 'Jarrar'), ('Renata', 'Zarazua'), ('Naima', 'Karamoko'), ('Andrea', 'Tomassone'), ('Lesedi Sheya', 'Jacobs'), ('Giuliana', 'Bestetti'), ('Yuna', 'Ito'), ('Julie', 'Renson Miquel'), ('Su Yeon', 'Chun'), ('Iulia', 'Savescu'), ('Claire Yoonkee Choi', 'Spackman'), ('Emily', 'Arbuthnott'), ('Rouxanne', 'Janse Van Rensburg'), ('Sabrina', 'Faybyshev'), ('Rebecca', 'Weissmann'), ('Antonella', 'Martinetti'), ('Lusine', 'Avanesyan'), ('Irys', 'Ekani'), ('Alexandra', 'Heczey'), ('Sophia', 'Kryloff'), ('Mariana', 'Alvarez'), ('Lisa', 'Matviyenko'), ('Valentina', 'Kulikova'), ('Aleksandra', 'Buczynska'), ('Sofia Daniela', 'Duran Vinueza'), ('Mary Victoria', 'Cancini'), ('Fernanda', 'Contreras Gomez'), ('Ksenia', 'Pushkareva'), ('Claudia', 'Oravcova'), ('Paula', 'Comella Aguilo'), ('Tiffany', 'Huber'), ('Seung Hee', 'Han'), ('Alexandra', 'Neamtu'), ('Janine', 'Hemmes'), ('Kate', 'Cusick'), ('Kiana', 'Marshall'), ('Mai', 'Takano'), ('Kimberly', 'Mpukusa'), ('Naomi', 'Osaka'), ('Sabina', 'Latypova'), ('Jinxuan', 'Wang'), ('Andjela', 'Reljic'), ('Julia', 'Kapitanova'), ('Gabriela', 'Tenorio'), ('Carol', 'Lombardino Petrocinio'), ('Anna', 'Ozerova'), ('Luana', 'Daus'), ('Eunji', 'Lim'), ('Salima', 'Fendri'), ('Alisa', 'Rudenko'), ('Rebecca', 'Gustafson'), ('Elise', 'Van Heuvelen'), ('Rita', 'Atik'), ('Alejandra Josefina', 'Benavides Lopez'), ('Elina', 'Nepliy'), ('Patricia', 'Boentgen'), ('Gaia', 'Squarcialupi'), ('Camila', 'Tumosa'), ('Ji', 'Lee'), ('Carlotta', 'Cima'), ('Luciene', 'Benitez Boiero'), ('Mayar', 'Eltony'), ('Ananya', 'Jha'), ('Athalis Dimitra', 'Kratouni'), ('Daniella', 'Moreno Kaste'), ('Aoi', 'Ishino'), ('Meghan', 'Kelley'), ('Shreya', 'Swarup'), ('Mariia', 'Antoniuk'), ('Sarvinoz', 'Saidhujaeva'), ('Bess', 'Waldram'), ('Pragati', 'Natraj'), ('Oktavia', 'Ayu Dewi'), ('Geraldine', 'Ang'), ('Reshma', 'Ganapathy'), ('Michelle Li Sha', 'Khoo'), ('Karolayne', 'Alexandre Da Rosa'), ('Melissa', 'Sehovic'), ('Ida Seljevoll', 'Skancke'), ('Aline', 'Thommen'), ('Ekaterina', 'Manekina'), ('Nicole', 'Baloescu'), ('Anna', 'Collins'), ('Arevik', 'Tumanyan'), ('Sandra', 'Samir'), ('Mary Catherine', 'Haffey'), ('Greta', 'Ceccomori'), ('Charlotte', 'Wellem'), ('Daniella', 'Roldan'), ('Jahana', 'Bayramova'), ('Monica', 'Malinen'), ('Elena Gabriela', 'Ruse'), ('Aliona', 'Bolsova'), ('Mariana', 'Otero'), ('Erika', 'Hendsel'), ('Lili', 'Fekete'), ('Freya', 'Christie'), ('Ni Luh Sintha', 'Eka'), ('Vivian', 'Zlatanova'), ('Maryna', 'Veksler'), ('Alisa', 'Martinov'), ('Alice', 'Rame'), ('Oyku', 'Pekgenc'), ('Milana', 'Imamniyazova'), ('Kajsa', 'Rinaldo Persson'), ('Suyeon', 'Choi'), ('Vanessa', 'Valdez Casas'), ('Jemileth', 'Aguilar'), ('Jin Sil', 'Park'), ('Rebeca', 'Reyes'), ('Paula', 'Badosa'), ('Johanna', 'Silva'), ('Federica', 'Mordegan'), ('Victoria Ariadna', 'Beccio'), ('Aulia', 'Nur Srikandhi'), ('Tatijana', 'Sheikhan'), ('Nonna', 'Kurginyan'), ('Nazrin', 'Jafarova'), ('Maddie', 'Pothoff'), ('Maricielo', 'Torres Chihuan'), ('Plobrung', 'Plipuech'), ('Anna Lena', 'Linden'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Mone'), ('Ari', 'Matsumoto'), ('Xinyu', 'Gao'), ('Hera', 'Brynjarsdottir'), ('Pamela', 'Boyanov'), ('Valerie', 'Quiceno'), ('Anupreet', 'Bedi'), ('Holly', 'Horsfall'), ('Brienne', 'Minor'), ('Anna', 'Bogoslavets'), ('Lauren', 'Deegan'), ('Constanze', 'Stepan'), ('Assel', 'Jumamukhambetova'), ('Kateryna', 'Sliusar'), ('Qiu Yu', 'Ye'), ('Mila', 'Masic'), ('Tamara', 'Culibrk'), ('Emma', 'Buczko'), ('Magali', 'Kempen'), ('Anastasiya', 'Shoshyna'), ('Florencia', 'Garcia Vazquez'), ('Margita', 'Sunjic'), ('Anna', 'Iakovleva'), ('Srishti', 'Slaria'), ('Miljana', 'Ristic'), ('Kaitlyn', 'Mccarthy'), ('Martina', 'Capurro Taborda'), ('Candela', 'Bugnon'), ('Ayano', 'Minami'), ('Anna', 'Speri'), ('Ekaterina', 'Alay'), ('Nikoleta', 'Bulatovic'), ('Emilija', 'Dancetovic'), ('Minori', 'Natsuka'), ('Nadja', 'Manjon Mihalic'), ('Kristina', 'Parviainen'), ('Camilla', 'Abbate'), ('Sabina', 'Machalova'), ('Giulia', 'Sartori'), ('Emma', 'Roenholt'), ('Alexandra Daniela', 'Nicoara'), ('Paulina', 'Rotaeche'), ('Lana', 'Slavica'), ('Celia', 'Cervino Ruiz'), ('Karina', 'Kalkenova'), ('Magdalena', 'Frech'), ('Natalia', 'Amineva'), ('Paulina', 'Jastrzebska'), ('Lize Elfrida', 'Moolman'), ('Gabriella', 'Pollner'), ('Sabrina', 'Barkdull'), ('Jamie', 'Jillissen'), ('Naiktha', 'Bains'), ('Sara', 'Daavettila'), ('Julia', 'Fisch'), ('Klaudia', 'Wira'), ('Amalia', 'Beksi'), ('Anastasia', 'Rentouli'), ('Anna', 'Pribylova'), ('Mariana', 'Galben'), ('Guzal', 'Yusupova'), ('Lizette', 'Cabrera'), ('Jue', 'Wang'), ('Karolina', 'Novotna'), ('Vlada', 'Chernikova'), ('Ndindi Inziani', 'Mwaruka'), ('Katarzyna', 'Wysoczanska'), ('Keyla Manuela', 'Cifuentes Monsalve'), ('Tamara', 'Zidansek'), ('Tamara', 'Teufl'), ('Ana', 'Konjuh'), ('Valeria', 'Mantilla'), ('Alena', 'Mashtakova'), ('Lidija', 'Samardzic'), ('Ruken Dilara', 'Kizilay'), ('Kindha', 'Nacef'), ('Jule', 'Salzburg'), ('Shiori', 'Fukuda'), ('Eva Pauline', 'Payet'), ('Bhargavi', 'Nitin Mangudkar'), ('Catalina', 'Obrecht'), ('Cristina', 'Bucsa'), ('Mariam', 'Bolkvadze'), ('Andrada Ioana', 'Surdeanu'), ('Christina', 'Wolfgruber'), ('Habiba', 'Lasheen'), ('Karen', 'Alvarez'), ('Oyku', 'Boz'), ('En Pei', 'Huang'), ('Lejla', 'Colic'), ('Gabriela', 'Feitosa Rezende'), ('Petra', 'Granic'), ('Diana', 'Valverde'), ('Lucie', 'Prochazkova'), ('Zhanlan', 'Wei'), ('Aleyna', 'Buyun'), ('Alissa', 'Selivenko'), ('Valentina', 'Sottile'), ('Yuki', 'Ukai'), ('Mbalia', 'Bangoura'), ('Anastasia', 'Zarytska'), ('Julia', 'Payola'), ('Ghada', 'Alajeely'), ('Fanny', 'Bengtsson'), ('Apolline', 'Rassat'), ('Ekaterina', 'Zaitseva'), ('Simone', 'Alipieva'), ('Shilin', 'Xu'), ('Maia', 'Lumsden'), ('Adriana', 'Sosnovschi'), ('Yasmine', 'Ben Abdallah'), ('Alba', 'Cortina Pou'), ('Megan', 'Rogers'), ('Tereza', 'Polanska'), ('Rosabianca', 'Satta'), ('Phillis', 'Vanenburg'), ('Wijitbanjong', 'Pakkaro'), ('Sena', 'Sahin'), ('Martina', 'Pratesi'), ('Jiaqi', 'Yang'), ('Tatyana', 'Vialichka'), ('Zhangwenli', 'Yan'), ('Teresa', 'Zorrilla Medrano'), ('Daniela', 'Obando'), ('Nurin Nabilah', 'Roslan'), ('Maddison', 'Inglis'), ('Camila', 'Vargas Gomez'), ('Shuo', 'Feng'), ('Barbara', 'Belis'), ('Rikeetha', 'Pereira'), ('Pei Hsuan', 'Kuo'), ('Hristina', 'Cvetkovic'), ('Shohsiyat', 'Tuhtamatova'), ('Alessandra', 'Simonelli'), ('Do Hee', 'Bae'), ('Javiera', 'Alvarez'), ('Birte', 'Langenstein'), ('Margarita', 'Markaki'), ('Farah', 'Yasser Abd El Wahab'), ('Daniela', 'Morales Beckmann'), ('Valentina', 'Mokrova'), ('Shiran', 'Arol Wiegand'), ('Lina', 'Hohnhold'), ('Irene', 'Nunez Xifre'), ('Bermet', 'Talantkyzy'), ('Julia', 'Keranovic'), ('Marie', 'Van Aelst'), ('Akshara', 'Iska'), ('Barbora', 'Palcatova'), ('Saya', 'Usui'), ('Lila', 'Humaloja'), ('Sofya', 'Gulnova'), ('Yulia', 'Bryzgalova'), ('Juliana', 'Valero'), ('Raquel', 'Pedraza'), ('Radmila', 'Djordjevic'), ('Xeniya', 'Prokopchuk'), ('Dolores', 'Molina Portela'), ('Emma Christine', 'Higuchi'), ('Zala', 'Dovnik'), ('Marjorie', 'Antohi'), ('Ambre', 'Boccard'), ('Tamara', 'Kupkova'), ('Michelle', 'Fux'), ('Kaylah', 'Mcphee'), ('Constanza', 'Gorches'), ('Sara', 'Tomic'), ('Ksenia', 'Kuznetsova'), ('Alica', 'Rusova'), ('Sofia', 'Ragona'), ('Yana', 'Grechkina'), ('Iulia Maria', 'Ivascu'), ('Laura', 'Marti'), ('Aksiniya', 'Miakota'), ('Ena', 'Ovcina'), ('Seon Young', 'Um'), ('Aloise', 'Dorey'), ('Hana', 'Mraz'), ('Ekaterina', 'Grinevich'), ('Lucia', 'Montano'), ('Girisha', 'Arora'), ('Laura', 'Rizzi'), ('Selyn', 'Ozgur'), ('Maria Paula', 'Torres'), ('Elin', 'Hellberg'), ('Ena', 'Shibahara'), ('Abinikka', 'Renganathan'), ('Dominika', 'Hrabalova'), ('Ana Luiza', 'Farinha'), ('Ioana', 'Gheorghita'), ('Yelyzaveta', 'Aksonova'), ('Elena', 'Belenova'), ('Ghita', 'Benhadi'), ('Polina', 'Novikova'), ('Ioana Diana', 'Pietroiu'), ('Anastasija', 'Cobanovic'), ('Julia', 'Tozzi'), ('Yi', 'Yuan'), ('Talya', 'Onyer'), ('Rifanty', 'Kahfiani'), ('Katharina', 'Gerlach'), ('Anna', 'Kraus'), ('Karen Sofia', 'Romero'), ('Jasmina', 'Samardzic'), ('Imren', 'Kurt'), ('Tereza', 'Kolarova'), ('Yessmine', 'Zhir'), ('Anne Marie', 'Medcalf'), ('Katerina', 'Romanyuta'), ('Taylor', 'Russo'), ('Nina', 'Kruijer'), ('Bettina', 'Kuznini'), ('Souha', 'Chibout'), ('Hanna', 'Chang'), ('Viktoriya', 'Zheleva'), ('Makenna', 'Jones'), ('Serena', 'Nash'), ('Melany Solange', 'Krywoj'), ('Gyulnara', 'Nazarova'), ('Zeynep', 'Ates'), ('Seriana', 'Saltzen'), ('Jeannine', 'Hopfgartner'), ('Katka', 'Stach'), ('Karolina', 'Silwanowicz'), ('Jelena', 'Polovina'), ('Diana', 'Monsalve'), ('Laura', 'Maluniakova'), ('Buse', 'Cehreli'), ('Anne Sophie', 'Courteau'), ('Manuela', 'Huckfeldt'), ('Gabriella', 'Taylor'), ('Yuika', 'Sano'), ('Ani', 'Safaryan'), ('Yus Syazlin Nabila Binti', 'Yusri'), ('Cristiana Miruna', 'Tudor'), ('Duda', 'Ewa'), ('Sofia', 'Sualehe'), ('Bianca', 'Bostrom'), ('Aleksandra', 'Stakhanova'), ('Angelina', 'Skidanova'), ('Florence', 'Abbott'), ('Bar', 'Shimoni'), ('Alissia', 'Gleixner'), ('Agostina', 'Zamprogno'), ('Elizaveta', 'Sokolova'), ('Erica', 'Oosterhout'), ('Mayu', 'Iwai'), ('Rosario', 'Perez Salinas'), ('Jade', 'Rafalovicz'), ('Nandini', 'Gupta'), ('Ramu', 'Ueda'), ('Natalya', 'Malenko'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Nina', 'Marjanovic'), ('Jada', 'Hart'), ('Alisa', 'Solovieva'), ('Nida', 'Shahid Kamal'), ('Jente', 'Smit'), ('Pragati', 'Solankar'), ('Julia', 'Rosenquist'), ('Mariana', 'Oliveira'), ('Allison', 'Quammen'), ('Rafaella', 'Baquerizo'), ('Saranya', 'Nagpal'), ('Linnea', 'Bjork'), ('Alma', 'Garcia Valle'), ('Hanna', 'Wikberg'), ('Camila', 'Recalde'), ('Thanushree', 'Vale'), ('Renee', 'Ren'), ('Ylona Georgiana', 'Ghioroaie'), ('Karolina', 'Benackova'), ('Ha Eun', 'Lim'), ('Beatrice', 'Reda'), ('Barbora', 'Miklova'), ('Sandra', 'Anglesjo'), ('Zeynep', 'Saricam'), ('Valeria', 'Gorlats'), ('Angela', 'Kulikov'), ('Elisa', 'Elhadj'), ('Ghita', 'Idrissi Kaitouni'), ('Kimberley', 'Van Rijn'), ('Zina', 'Graves'), ('Rafaela', 'Rodrigues Dos Santos'), ('Josephine', 'Strandfors'), ('Sonia', 'Grzywocz'), ('Mayuka', 'Aikawa'), ('Caroline', 'Sautter'), ('Patricia', 'Eftenoiu'), ('Ekaterina', 'Kunina'), ('Tatiana', 'Eftenoiu'), ('Alessia', 'Dario'), ('Ana', 'Royo Marco'), ('Satori', 'Seki'), ('Angelica E', 'Karlsson Hantzis'), ('Alla', 'Safolova'), ('Nikolina', 'Jovic'), ('Grace', 'Janis'), ('Roos', 'Nederstigt'), ('Andrea', 'Nikic'), ('Elizabeth', 'Danailova'), ('Lingwei', 'Kong'), ('Sasa', 'Klanecek'), ('Sandra', 'Ortevall'), ('Darina', 'Mueller'), ('Anastasiya', 'Klymenko'), ('Vladislava', 'Kutuzova'), ('Alexandra', 'Lazarova'), ('Yulia', 'Sokolovskaya'), ('Haluka', 'Higurashi'), ('Ruth', 'Artaza Martin'), ('Sem', 'Wensveen'), ('Ayano', 'Shimizu'), ('Oliwia', 'Szymczuch'), ('Rita', 'Pedroso'), ('Anastasiya', 'Sukhorukova'), ('Jesica', 'Audina'), ('Zhuo Ma', 'Ge Rong'), ('Stephanie', 'Nemtsova'), ('Aleksandra', 'Draganova'), ('Andrea', 'Beneroso Lacaba'), ('Jone', 'Kruger'), ('Federica', 'Pulcino'), ('Mihaela', 'Ghioca'), ('Lusine', 'Chobanyan'), ('Marleen', 'Tilgner'), ('Katarina', 'Jokic'), ('Jessie', 'Aney'), ('Oana', 'Gavrila'), ('Emmanuelle', 'Salas'), ('Nadine', 'De Villiers'), ('Ana', 'Akhalkatsi'), ('Alexandra', 'Shchipakina'), ('Kseniya', 'Savenkava'), ('Amira', 'Handous'), ('Aleksandra', 'Pospelova'), ('Anastasiya', 'Mulder Syrovatskaia'), ('Diana', 'Chehoudi'), ('Lamis', 'Alhussein Abdel Aziz'), ('Lamyae', 'Dad'), ('Petia', 'Arshinkova'), ('Polina', 'Miroshnichenko'), ('Marina', 'Ivanova'), ('Sofie', 'Woon'), ('Ekaterina', 'Tretyak'), ('Celine', 'Schepers'), ('Andrina', 'Peer'), ('Alessandra', 'Mecchi De Oliveira Silva'), ('Shura', 'Poppe'), ('Nicole', 'Frenkel'), ('Juliet Jia Wen', 'Zhang'), ('Kimberly', 'Birrell'), ('Shir', 'Azran'), ('Janja', 'Kovacevic'), ('Erem', 'Akyurt'), ('Darya', 'Startseva'), ('Katarina', 'Kozarov'), ('Yasmine', 'Ansari'), ('Ema', 'Mulalic'), ('Aleksandra', 'Rojek'), ('Zi Yi', 'Wang'), ('Anna', 'Turco'), ('Amanda', 'Zapata'), ('Aryna', 'Sabalenka'), ('Emma', 'Alos Chiquillo'), ('Adna', 'Sofradzija'), ('Susanne', 'Boyden'), ('Reagan', 'Collins'), ('Naomi', 'Jackson'), ('Laura', 'Garcia Martinez'), ('Vlada', 'Filinskaya'), ('Daria', 'Kruzhkova'), ('Nanako', 'Ono'), ('Arisa', 'Abe'), ('Alejandra', 'Tamayo Gomez'), ('Anna', 'Ustinoff'), ('Priscilla', 'Hon'), ('Viktoria', 'Kuzmova'), ('Ines', 'Mesquita'), ('Tornado Alicia', 'Black'), ('Esther', 'Thebault'), ('Ceylin', 'Gunay'), ('Ahlam', 'Shawkat'), ('Arianne', 'De Winter'), ('Deniz', 'Paykoc'), ('Judith Maria', 'Barrios Rolon'), ('Lucrezia', 'Stefanini'), ('Beatriz Rodrigues', 'Bento'), ('Francisca', 'Vasquez Pongruber'), ('Xiuyuan', 'Li'), ('Juanita', 'Diaz'), ('Dorota', 'Szczygielska'), ('Anamarija', 'Zokic'), ('Maria', 'Suarez Alonso'), ('Anna', 'Fischer'), ('May', 'Kimhi'), ('Hanyu', 'Guo'), ('Juliette', 'Bastin'), ('Askin', 'Arslan'), ('Ghita', 'Lahjouji'), ('Nina', 'Nikitovic'), ('Helen Abigail', 'Altick'), ('Tatiana', 'Papakanellou'), ('Chihiro', 'Muramatsu'), ('Teodora Elena', 'Radu'), ('Marta', 'Canas Alvarez'), ('Malalasoa Jackinah', 'Rakotohasy'), ('Andrea', 'Garcia Fernandez'), ('Gloria', 'Ceschi'), ('Natsuki', 'Asakura'), ('Anna', 'Gabric'), ('Swara', 'Kulkarni'), ('Anjana', 'Suresh'), ('Lucia', 'Diaz Saez'), ('Michelle', 'Pits'), ('Gaya', 'Solomon'), ('Eri', 'Shimizu'), ('Belen', 'Calero Vega'), ('Nora', 'Szoke'), ('Saadia', 'Belhadj'), ('Linnea', 'Malmqvist'), ('Setia Indri', 'Harti'), ('Nicoli', 'Attili Pereira'), ('Tereza', 'Mihalikova'), ('Anastassia', 'Pantelic'), ('Eliska', 'Kropackova'), ('Qianting', 'Yan'), ('Lijia', 'Huang'), ('Lavanya', 'Khanuja'), ('Jaqueline Adina', 'Cristian'), ('Marija', 'Curnic'), ('Leyla', 'Azaeva'), ('Dafni', 'Demenega'), ('Sarah', 'Stoerbrauck'), ('Karine', 'Sarkisova'), ('Hernanda Melia', 'Cholis'), ('Florencia', 'Rossi'), ('Ksenia', 'Stashenkova'), ('Linda', 'Sevcikova'), ('Junjuti', 'Dorkkulab'), ('Elena', 'Antonova'), ('Marina', 'Antonova'), ('Sara', 'Kostic'), ('Elisa', 'Cordovani'), ('Katheryne Stephanie', 'Valencia Perez'), ('Brooke', 'Lashway'), ('Enni', 'Zander'), ('Cindy', 'Oest'), ('Ingrid', 'Neel'), ('Karman', 'Thandi'), ('Valentina', 'Mariotto'), ('Marija', 'Venta'), ('Tamijean', 'Fumagalli'), ('Faiza Munabari', 'Saskia'), ('Hana', 'Mortagy'), ('Arrum', 'Damarsari'), ('Melissa Ishuan', 'Ifidzhen'), ('Anna Maria', 'Kalavska'), ('Phonexay', 'Chitdara'), ('Melanie', 'Dveksler Celin'), ('Elisa', 'Lauri'), ('Ida', 'Jarlskog'), ('Hoyeon', 'Nor'), ('Michelle', 'Roth'), ('Gabriela', 'Yakalieva'), ('Jennifer', 'Ruetten'), ('Danna Valentina', 'Galeano'), ('Tereza', 'Koplova'), ('Sophia', 'Intert'), ('Anastasia', 'Khlestova'), ('Denise', 'Buberl'), ('Theodora', 'Soldatou'), ('Soha', 'Sadiq'), ('Bianca Elena', 'Mihailescu'), ('Katarzyna', 'Skrzypczynska'), ('Joanna', 'Skrzypczynska'), ('Elianne Magali', 'Matto Chaparro'), ('Costanza', 'Pera'), ('Cindy', 'Castille'), ('Angella', 'Raman'), ('Daria', 'Ponomareva'), ('Katerina', 'Brozova'), ('Victoria', 'Dimuzio'), ('Diana', 'Dehterevich'), ('Susan', 'Bandecchi'), ('Seoin', 'Choi'), ('Ana Maria Andreea', 'Ileana'), ('Shira', 'Goldberger'), ('Andjela', 'Sebrek'), ('Mia', 'Golubovic'), ('Maria Elena', 'Rojas Loaiza'), ('Anamarija', 'Spoljaric'), ('Alexa', 'Bortles'), ('Sofia', 'Booth'), ('Zaineb', 'El Houari'), ('Brenda Sarahi', 'Baez'), ('Jacara', 'Gillis'), ('Junsai', 'Wang'), ('Joana', 'Ferreira'), ('Hjordis Rosa', 'Gudmundsdottir'), ('Arlinda', 'Herforth'), ('Alexa', 'Graham'), ('Parris', 'Todd'), ('Olga', 'Esteve Mendez'), ('Giovanna', 'Ferreira Caputo'), ('Imogen', 'Magner'), ('Chiara', 'Pusceddu'), ('Nataliya', 'Pogribnyak'), ('Hada', 'Chang'), ('Areej', 'Fareh'), ('Andrea', 'Perez Lopez'), ('Lena', 'Babunski'), ('Giorgia', 'Testa'), ('Ioana', 'Toanchina'), ('Yuenu', 'Li'), ('Julia', 'Perez Wienese'), ('Fabiola Estefania', 'Cardenas Gutierrez'), ('Jana', 'Kuzovkova'), ('Lucia', 'Gutierrez'), ('Anna', 'Ramos Vinolas'), ('Aspasia', 'Avgeri'), ('Jaipet', 'Anontaweesil'), ('Sandra', 'Maletin'), ('Lenka', 'Antonijevic'), ('Marina', 'Alcaide Bakari'), ('Olla', 'Mourad'), ('Jovana', 'Knezevic'), ('Nina', 'Van Oost'), ('Hana', 'Sakamoto'), ('Adeliya', 'Zabirova'), ('Alexandra', 'Champion'), ('Medea', 'Petriashvili'), ('Rebecca', 'Van Orshaegen'), ('Marie', 'Bouzkova'), ('Sonja', 'Krtenova'), ('Vicky', 'Geurinckx'), ('Maria', 'Shishkina'), ('Raveena', 'Kingsley'), ('Chiraz', 'Bechri'), ('Andrea', 'Solano Jimenez'), ('Sehzade', 'Gur'), ('Marina', 'Olalla Abajo'), ('Mariya', 'Koloney'), ('Jessica', 'Bruehwiler'), ('Estela', 'Perez Somarriba'), ('Costanza', 'Federici'), ('Ksenia', 'Slavina'), ('Lara Isis', 'Teodoro De Oliveira'), ('Andreea', 'Cula'), ('Victoria', 'Slavina'), ('Bunyawi', 'Thamchaiwat'), ('Mirjam', 'Bjorklund'), ('Alba', 'Conejero Gutierrez'), ('Laia', 'Conejero Gutierrez'), ('Theo', 'Gravouil'), ('Carla', 'Soto Villalobos'), ('Veronika', 'Bencova'), ('Pancha', 'Aguilar Sepulveda Francisca Gisella'), ('Annabelle', 'Hageman'), ('Valerie Ann', 'Valencia Castillo'), ('Rosie', 'Cheng'), ('Caroline', 'Ilowska'), ('Sasha', 'Bollweg'), ('Milena', 'Achlamov'), ('Elena Madalina', 'Capraru'), ('Nicole', 'Gadient'), ('Alexandra', 'Filip'), ('Yasmyn', 'Gulman'), ('Sofia Haydee', 'Nicolini'), ('Maxine', 'Palmen'), ('Paiton', 'Wagner'), ('Eleni', 'Christofi'), ('Alexis', 'Nelson'), ('Alaina', 'Miller'), ('Ayaka', 'Narita'), ('Maria', 'Toran Ribes'), ('Nethmi Himashi', 'Waduge'), ('Natsuko', 'Yamada'), ('Giulia', 'Cereghetti'), ('Eugenia', 'Ganga'), ('Alexia', 'Coutino Castillo'), ('Maria', 'Figueroa'), ('Nina', 'Furmaniak'), ('Dalma', 'Galfi'), ('Ana Maria', 'Gavrilovici'), ('Eduarda', 'Ferreira'), ('Alice', 'Gillan'), ('Stefy Lorena', 'Varon Diaz'), ('Cassie', 'Chung'), ('Elvira', 'Edstrom'), ('Marina', 'Rodriguez Garcia'), ('Vivien', 'Teglas'), ('Arina', 'Petrova'), ('Ojasvinee', 'Singh'), ('Qianxin', 'Kong'), ('Barbora', 'Slucikova'), ('Daryna', 'Gukasyan'), ('Gabija', 'Druteikaite'), ('Martina', 'Zerulo'), ('Misaki', 'Matsuda'), ('Gozal', 'Ainitdinova'), ('Paola Valentina', 'Quintana Rojas'), ('Momoko', 'Kobori'), ('Lena', 'Rueffer'), ('Khim', 'Iglupas'), ('Itzi Janikuari', 'Torres Millan'), ('Valeriya', 'Pogrebnyak'), ('Sabina', 'Safarova'), ('Julia', 'Herlogsson'), ('Chiara', 'Lommer'), ('Nami', 'Otsuka'), ('Rosellina', 'Masala'), ('Sarah', 'Fernandez Ruiz'), ('Yu', 'Morishima'), ('Ju Eun', 'Heo'), ('Dalila', 'Pejkovic'), ('Eden', 'Richardson'), ('Kennedy', 'Wicker'), ('Ghazal', 'Pakbaten'), ('Dewi', 'Dijkman'), ('Elisa', 'Gugnali'), ('Serena', 'Gugnali'), ('Laura Mariana', 'Montalvo'), ('Caroline', 'Dolehide'), ('Nadia', 'Rawson'), ('Anastasia', 'Blyukhterova'), ('Ganeshi', 'Aniya'), ('Ayaka', 'Ozeki'), ('Laura', 'Cabrera Lafuente'), ('Anna', 'Blinkova'), ('Akari', 'Kakizawa'), ('Jana', 'Jais'), ('Shahar', 'Biran'), ('Silvija', 'Perosa'), ('Kumi', 'So'), ('Rimi', 'So'), ('Victoria', 'Wuilloud'), ('Nato', 'Shaburishvili'), ('Martina', 'Lo Pumo'), ('Clara Patricia', 'Rizea'), ('Marta Huqi', 'Gonzalez Encinas'), ('Milagros', 'Montero'), ('Jovana', 'Bogicevic'), ('Virginia', 'Ciccone'), ('Moni', 'Potrc'), ('Izumi', 'Asano'), ('Yuliana', 'Monroy'), ('Lourdes', 'Ramalle'), ('Emma', 'Lioi'), ('Alessia', 'Di Pietro'), ('Maria Veronica', 'Jimenez Coello'), ('Yana', 'Kochneva'), ('Laura Alejandra', 'Gutierrez Gomez'), ('Laura', 'Illanes'), ('Isabella', 'Gaban'), ('Maria', 'Turrillo'), ('Eleonora', 'Liga'), ('Erandi Xanat', 'Martinez Hernandez'), ('Katarzyna', 'Pitak'), ('Clarissa', 'Gai'), ('Renata', 'Ivandic'), ('Ioana', 'Minca'), ('Anna', 'Skabelka'), ('Milana', 'Gasymova'), ('Panna', 'Udvardy'), ('Vera', 'Lapko'), ('Caroline', 'Dunleavy'), ('Anamaria', 'Vladescu'), ('Olga', 'Fridman'), ('Anastasia', 'Smirnova'), ('Victoria', 'Smirnova'), ('Chelsea May', 'Samways'), ('Erika', 'Yakhimovich'), ('Luciana', 'Rabines'), ('Irina', 'Tuturina'), ('Jessica', 'Zeynel'), ('Mariana', 'Gonzalez Romero'), ('Blanca', 'Puig Caballero'), ('Ena', 'Babic'), ('Liron', 'Sasson'), ('Anna', 'Savchenko'), ('Camila', 'Romero'), ('Ziyi', 'Yang'), ('Rosie', 'Johanson'), ('Eva', 'Nyikos'), ('Glauka', 'Carvajal Vicente'), ('Ana Paula', 'Leal'), ('Berta', 'Acero Garcia'), ('Miriam Bianca', 'Bulgaru'), ('Vivian', 'Wolff'), ('Maria Alexandra', 'Giura'), ('Tessah', 'Andrianjafitrimo'), ('Irene', 'Lavino'), ('Alana', 'Lolaeva'), ('Ornella', 'Garavani'), ('Christina', 'Schoener'), ('Ana M', 'Becerra'), ('Meritxell', 'Perera Ros'), ('Nency', 'Chipan'), ('Elyse', 'Lavender'), ('Liza', 'Lebedzeva'), ('Aida', 'Arafa'), ('Lara', 'Escauriza'), ('Teodora', 'Sabljarevic'), ('Karla', 'De La Luz Montalvo'), ('Mariya', 'Taukumova'), ('Shamika', 'Dhar'), ('Anna', 'Kadagidze'), ('Michela', 'Xibilia'), ('Nicole', 'Petchey'), ('Laura', 'Rincon'), ('Darya', 'Possokhova'), ('Matea', 'Mihaljevic'), ('Alessia', 'Dauria'), ('Wanda', 'Rodriguez'), ('Valeriya', 'Zeleva'), ('Sara', 'Lizariturry'), ('Karina Kristina', 'Vyrlan'), ('Mia', 'Rabinowitz'), ('Jovana', 'Jankovic'), ('Laura', 'Fitzgerald'), ('Chiara', 'Merico'), ('Djasmine', 'Garnacho'), ('Louise Line', 'Odet'), ('Kristina Tina', 'Godec'), ('Lena', 'Ruppert'), ('Mary', 'Lewis'), ('Maheen', 'Dada'), ('Trisha', 'Sundaram'), ('Usue Maitane', 'Arconada'), ('Delaney', 'Nothaft'), ('Viktoria', 'Bardarova'), ('Jana', 'Lazarevic'), ('Tasha', 'Cacciato'), ('Hyojin', 'Kong'), ('Allison', 'Bojczuk'), ('Carolin', 'Nonnenmacher'), ('Subin', 'Park'), ('Anastasia', 'Tsyganova'), ('Nikola', 'Novotna'), ('Wl Joanne', 'Koh'), ('Lola', 'Asis Espuche'), ('Dorthea', 'Faa Hviding'), ('Nevena', 'Georgieva'), ('Karthiga', 'Thavarajasingam'), ('Delfina', 'Glorioso'), ('Bojana', 'Jovanovic'), ('Sissi', 'Kroustalaki'), ('Senay', 'Ince'), ('Ludmilla', 'Samsonova'), ('Livia', 'Kraus'), ('Fanny', 'Stollar'), ('Ziyin', 'Zhu'), ('Darya', 'Shevchenko'), ('Claudia', 'Hoste Ferrer'), ('Franziska Anna', 'Hotter'), ('Nina Rebecca', 'Hotter'), ('Sofia', 'Kenin'), ('Casandra', 'Metzer'), ('Angelica', 'Raggi'), ('Valentina', 'Dancenco'), ('Mariam', 'Bayatyan'), ('Sabrina', 'Bouheddi'), ('Defne', 'Basbakkal'), ('Florencia', 'Paez'), ('Maria Del Rosario', 'Vazquez'), ('Vivien', 'Klein'), ('Miriam', 'Siljic'), ('Kimberley', 'Gintrand'), ('Marija', 'Jovicic'), ('Jiaxue', 'Zang'), ('Elisa', 'Patta'), ('Marina', 'Cozac'), ('Tamara', 'Milosevic'), ('Arely Estefania', 'Vilchis Sanchez'), ('Marthe Eugenie', 'Sime'), ('Jessica', 'Crivelletto'), ('Katarzyna', 'Kubicz'), ('Rocio Macarena', 'Parodi'), ('Diletta', 'Paperini'), ('Wushuang', 'Zheng'), ('Sachi', 'Belwal'), ('Vanesa', 'Pappa'), ('Mir', 'Ambaye'), ('Hanna', 'Yedzelkina'), ('Olga', 'Zavarotnaya'), ('Anna', 'Kalinskaya'), ('Mei', 'Otsuka'), ('Daniela', 'Vukovic'), ('Medina', 'Sahinagic'), ('Prachi', 'Sinha'), ('Linda', 'Ohanyan'), ('Taylor', 'Bridges'), ('Maria Aurelia', 'Scotti'), ('Shubhi', 'Dwivedi'), ('Andreea Giorgiana', 'Tupan'), ('Wei', 'Tang'), ('Polina', 'Malykh'), ('Julia', 'Candiotto'), ('Dzenita', 'Zverotic'), ('Daniela', 'Cozzi'), ('Shiraz', 'Bronstein'), ('Nina', 'Alibalic'), ('Lucia', 'Bronzetti'), ('Monika', 'Pavlaskova'), ('Anna', 'Sedinkina'), ('Manel', 'Refaa'), ('Tamar', 'Shoshani'), ('Anastasia', 'Detiuc'), ('Michaela', 'Bayerlova'), ('Lola', 'Benedetti'), ('Martina', 'Fricova'), ('Magdalena', 'Radkova'), ('Vanshika', 'Sawhney'), ('Mira', 'Antonitsch'), ('Elodie', 'Leune'), ('Risa', 'Fukushige'), ('Lindsay', 'Song'), ('Adilya', 'Isabekova'), ('Jade', 'Lewis'), ('Meiting', 'Liu'), ('Hanna', 'Kryvatulava'), ('Phenomena', 'Radovcic'), ('Mari Cruz', 'Garcia Sanchez'), ('Hsiang Wen', 'Huang'), ('Hanna', 'Sokal'), ('Weronika Jasmina', 'Forys'), ('Aylen', 'Hubeaut'), ('Anastasia', 'Bursa'), ('Daniela', 'Ramirez'), ('Alvina', 'Lai'), ('Ema', 'Lazic'), ('Lauren', 'Dowling'), ('Malika', 'Auger Aliassime'), ('Xianlin', 'Zeng'), ('Yuseung', 'Suh'), ('Alicia', 'Herrero Linana'), ('Keren', 'Rozen'), ('Sean', 'Lodzki'), ('Gorana', 'Kadijevic'), ('Zhanelya', 'Turarbek'), ('Sihem', 'Sahli'), ('Maria', 'Naoum'), ('Kristina', 'Miletic'), ('Harsha Sai', 'Challa'), ('Monique', 'Belovukovic'), ('Ines', 'Ibbou'), ('Sofiya', 'Esterman'), ('Katherine', 'Sebov'), ('Viktoriia', 'Kalinina'), ('Alexandra', 'Sanford'), ('Janice', 'Shin'), ('Pei Ju', 'Chien'), ('Nicole', 'Bunea'), ('Zanya Manola', 'Sanchez'), ('Philippine', 'Picard'), ('Dominique', 'Schaefer'), ('Hristina', 'Djokic'), ('Monica', 'Cappelletti'), ('Kelia', 'Le Bihan'), ('Tamara', 'Arnold'), ('Nandini', 'Sharma'), ('Marta', 'Bettinelli'), ('Maya', 'Tahan'), ('Sara', 'Cvorovic'), ('Zhou', 'Mingjun'), ('Diana', 'Belalova'), ('Ekaterina', 'Trashchenko'), ('Wanyu', 'Tang'), ('Ares', 'Llobera Irun'), ('Arina', 'Taluenko'), ('Tatiana', 'Nikolaeva'), ('Vanessa', 'Wong'), ('Stanislava', 'Starostoyants'), ('Anastasia Evgenyevna', 'Nefedova'), ('Muazzez', 'Demirci'), ('Charlotte', 'Robillard Millette'), ('Inbar', 'Cohen'), ('Ekaterina', 'Kazionova'), ('Niditra', 'Rajmohan'), ('Tijana', 'Spasojevic'), ('Maria', 'Galiy'), ('Rocio', 'Safont Branchadell'), ('Alisa', 'Deen'), ('Carolin', 'Jung'), ('Inasse', 'Hamouti'), ('Kariann', 'Pierre Louis'), ('Radina', 'Rakic'), ('Siqi', 'Cao'), ('Luisa', 'Pelayo'), ('Schena', 'Benamar'), ('Chen', 'Wang'), ('Anna', 'Makarova'), ('Laura', 'Bente'), ('Vasavi', 'Ganesan'), ('Rukshika', 'Wijesooriya'), ('Jovana', 'Gvozdenovic'), ('Bojana', 'Vuksan'), ('Yufei', 'Long'), ('Milena', 'Amedieva'), ('Nadezhda', 'Sedysheva'), ('Karla', 'Contreras'), ('Maria', 'Soler Valverde'), ('Laylo', 'Bahodyrova'), ('Arianna Maria', 'Stagni Lailla'), ('Alejandra', 'Morales'), ('Hanna', 'Levina'), ('Sarah', 'Funedda'), ('Shauna', 'Casey'), ('Natalia', 'Garcia Molina'), ('Seira', 'Shimizu'), ('Maria', 'Toma'), ('Manuela Stephania', 'Cruz Rodriguez'), ('Georgie', 'Walker'), ('Catalina', 'Medici'), ('Yui', 'Chikaraishi'), ('Meredith G', 'Jones'), ('Katharina', 'Kukaras'), ('Sara', 'Ramirez'), ('Magdalena', 'Pantuckova'), ('Anastasiia', 'Gevel'), ('Jada', 'Robinson'), ('Lara', 'Salden'), ('Yu Tong', 'Tang'), ('Victoria', 'Walter'), ('Valentina', 'Gonzalez Ramirez'), ('Yi', 'Wang'), ('Kassandra', 'Davesne'), ('Gitte', 'Heynemans'), ('Napharat', 'Swangkaew'), ('Nika', 'Shytkouskaya'), ('Nadia', 'Justiniano'), ('Medhira', 'Samarasinghe'), ('Elena', 'De Santis'), ('Ingrid', 'Di Carlo'), ('Shrishti', 'Daas'), ('Camille', 'Verden Anderson'), ('Florencia', 'Devincenti'), ('Ramya', 'Natarajan'), ('Ksieniia', 'Rudenko'), ('Sofia', 'Johansson'), ('Le', 'Zhao'), ('Ashley', 'Kratzer'), ('Yulia', 'Almiron Solano'), ('Matilda', 'Lenngren'), ('Natalie', 'Kohoutkova'), ('Isabella', 'Montini'), ('Tzarina', 'Tuen Matthews'), ('Giana', 'Cormos'), ('Nastja', 'Rettich'), ('Lenka', 'Piskova'), ('Eimear', 'Maher'), ('Michaela', 'Haet'), ('Rosanna', 'Maffei'), ('Ioana', 'Guna'), ('Eimi', 'Friant'), ('Alina', 'Karazhova'), ('Lucie', 'Wargnier'), ('Mouna', 'Idlkadi'), ('Aanandita', 'Gupta'), ('Altea', 'Ricci'), ('Nitzan', 'Bruner'), ('Alexandra', 'Bozovic'), ('Alona', 'Kruglov'), ('Boba', 'Kotlica'), ('Aza', 'Petrova'), ('Sara', 'Gambogi'), ('Tamara', 'Bojanic'), ('Klara', 'Mrcela'), ('Yuval', 'Keren'), ('Momoka', 'Chimura'), ('Laila', 'Elnimr'), ('Daria', 'Zheludchenko'), ('Mika', 'Misgav'), ('Zeel', 'Desai'), ('Isha', 'Budwal'), ('Guiomar', 'Maristany Zuleta De Reales'), ('Alessandra', 'Traub'), ('Anna Lena', 'Neuwirth'), ('Marta', 'Magalhaes'), ('Nora Lima', 'Dahl'), ('Barbara', 'Huyskes'), ('Rebecca', 'Ehn'), ('Tomiris', 'Koshmukhanova'), ('Lorena', 'Marruffo'), ('Sidal', 'Ak'), ('Nermeen', 'Shawky'), ('Maria Vittoria', 'Viviani'), ('Olivia', 'Robert'), ('Dana Katherine', 'Santiago Benavides'), ('Maria', 'Mikhaylova'), ('Ciney', 'Bekker'), ('Catalina', 'Bloch'), ('Daniela Alejandra', 'La Fuente Strassburger'), ('Amelie', 'Boy'), ('Daria', 'Kuczer'), ('Victoria', 'Tournebize'), ('Adrienn', 'Zsitvay'), ('Bojana', 'Markovic'), ('Iesha', 'Shepherd'), ('Sofija', 'Zecevic'), ('Jiatian', 'Qi'), ('Hind', 'Abdelouahid'), ('Esther', 'Lopez Alcaraz'), ('Tina', 'Sojkova'), ('Paulina', 'Cota'), ('Megan', 'Davies'), ('Nao', 'Shimoji'), ('Marta', 'Paigina'), ('Isidora', 'Zivkovic'), ('Xiangruyi', 'Ji'), ('Xinyu', 'Jiang'), ('Sakura', 'Hondo'), ('Petra', 'Hule'), ('Marta', 'Oliveira'), ('Karolina', 'Szmit'), ('Ylena', 'In Albon'), ('Natasha', 'Irani'), ('Sangeeta', 'Roopan'), ('Miranda', 'Ramirez'), ('Madeline', 'Meredith'), ('Marcelle', 'Cirino'), ('Pauline', 'Dore'), ('Olivia', 'Rohrbacher'), ('Tara', 'Damnjanovic'), ('Meredith', 'Roberts'), ('Katarina', 'Sasaroga'), ('Camila', 'Millan Santacruz'), ('Steph', 'Booth'), ('Jiakang', 'Li'), ('Zoe', 'Richard'), ('Tinkara', 'Kovac'), ('Jia Qi', 'Yang'), ('Cecilia', 'Engback'), ('Shaline Doreen', 'Pipa'), ('Isabel', 'Iglesias Prieto'), ('Fernanda', 'Labrana'), ('Mar', 'Gendra Felip'), ('Anezka', 'Bartosova'), ('Lee', 'Barnard'), ('Zani', 'Barnard'), ('Birdem', 'Oz'), ('Maria Celeste', 'Lamagni'), ('Camilla', 'Ciaccia'), ('Florencia Natalia', 'Grieco'), ('Maria Jose', 'Zacarias'), ('Alexia', 'Carlone'), ('Andreea Amalia', 'Rosca'), ('Jo', 'Weisen'), ('Sofia', 'Gorovits'), ('Kylie', 'Mckenzie'), ('Polina', 'Golubovskaya'), ('Katie', 'Swan'), ('Anastasiya', 'Joyner'), ('Jenny', 'Duerst'), ('Anna', 'Ukolova'), ('Mixcoatl', 'Trabulse Garcia'), ('Tea', 'Jezidzic'), ('Eva Marie', 'Voracek'), ('Itza', 'Trabulse Garci'), ('Arlinda', 'Rushiti'), ('Emelie Luisa', 'Schwarte'), ('Valeriia', 'Bazhanova'), ('Tatiana', 'Pieri'), ('Mikaela', 'Molina Bugarija'), ('Carolina', 'Bulatovic'), ('Pranjala', 'Yadlapalli'), ('Aastha', 'Dargude'), ('Leia', 'Balkevarn'), ('Palina', 'Padabed'), ('Rachel', 'Zipfel'), ('Ludovica', 'Infantino'), ('Arianna', 'Capogrosso'), ('Ekaterina', 'Korzhova'), ('Victoria', 'Flores'), ('Paola', 'Exposito Diaz Delgad'), ('Milena', 'Avetisyan'), ('Anna', 'Slovakova'), ('Anna', 'Tonoyan'), ('Mina Adelin', 'Pedersen'), ('Yusta', 'Dorofeeva'), ('Mihaela', 'Kaftanova'), ('Snehal', 'Mane'), ('Alika', 'Ismailova'), ('Isolde', 'De Jong'), ('Silvia', 'Saccani'), ('Vivien', 'Abraham'), ('Catherine Cartan', 'Bellis'), ('Nicole', 'De O Crispino De Souza'), ('Mia', 'Mijatovic'), ('Mako', 'Ganaha'), ('Halla', 'Alajeely'), ('Francescamaria', 'Pannarale'), ('Serena', 'Buonaccorso'), ('Anastasia', 'Abramyan'), ('Alexandra', 'Parra'), ('Bronte', 'Murgett'), ('Victoria', 'Saldh'), ('Lalita', 'Devarakonda'), ('Olivia Alexandra', 'Placzek'), ('Nino', 'Memishishi'), ('Morgan', 'Coppoc'), ('Klara', 'Hajkova'), ('Kristina', 'Kislyak'), ('Ines', 'Milosevic'), ('Dea', 'Lako'), ('Tania Andrada', 'Mare'), ('Eden Sophie', 'Schlagenhauf'), ('Famke', 'Wilhelm'), ('Madison', 'Gallegos'), ('Anastasia', 'Ushakova'), ('Annalisa', 'Molino'), ('Evelyne Christelle Atticia', 'Tiron'), ('Rana', 'Essam'), ('Soomin', 'Kim'), ('Yarden', 'Akler'), ('Ai Qi', 'Chen'), ('Adrianna', 'Sosnowska'), ('Jana', 'Bojovic'), ('Flavia', 'Gutierrez'), ('Matea', 'Mamic'), ('Polina', 'Bakhmutkina'), ('Gerda', 'Zykute'), ('Dominique', 'Meyer'), ('Nicole Taylor', 'Pafundi'), ('Mahiro', 'Date'), ('Lucie', 'Devier'), ('Malin', 'Falk'), ('Nurseda', 'Akovalier'), ('Julita', 'Saner'), ('Lucelena', 'Hoyo'), ('Sydney', 'Van Alphen'), ('Jiaying', 'He'), ('Radia', 'Lalami'), ('Lixin', 'Wang'), ('Annick', 'Melgers'), ('Nidhi', 'Surapaneni'), ('Mathilde', 'Trigaux'), ('Giulia', 'Turconi'), ('Elisa Teodora', 'Sararu'), ('Ysabel', 'Gonzalez Rico'), ('Alexandra', 'Zaicenco'), ('Janina', 'Scheffbuch'), ('Alena', 'Kovaleva'), ('Katarina', 'Marinkovikj'), ('Sofia', 'Munera Sanchez'), ('Anusha', 'Kondaveeti'), ('Jitasha', 'Shastri M'), ('Nicole', 'Coopersmith'), ('Maria Jose', 'Portillo Ramirez'), ('Kelly', 'Chen'), ('Ellie Rose', 'Griffiths'), ('Selin GLseren', 'Simsek'), ('Claudia', 'Kieffer'), ('Kathleen', 'Biong Percegona'), ('Ryan', 'Peus'), ('Oumeima', 'Charrad'), ('Ema', 'Vasic'), ('Kimika', 'Sakata'), ('Lilya', 'Hadab'), ('Neta', 'Berman'), ('Alice', 'Di Matteo'), ('Andrea', 'Hernando Gutierrez'), ('Thai Sa Grana', 'Pedretti'), ('Mariana', 'Borges'), ('Anastasia', 'Gasanova'), ('Seone', 'Mendez'), ('Nadia', 'Van Heerden'), ('Anastasiya', 'Gorbacheva'), ('Johana', 'Markova'), ('Ginevra', 'Peiretti'), ('Stefani', 'Arsova'), ('Afroditi', 'Tzanopoulou'), ('Rina', 'Tateyama'), ('Meible', 'Chi'), ('Maria', 'Casas Blas'), ('Yuka', 'Hosoki'), ('Irina', 'Lapustina'), ('Fariza', 'Abdullaeva'), ('Habiba', 'Khaled Aly'), ('Georgina', 'Axon'), ('Wiktoria', 'Kulik'), ('Minette', 'Van Vreden'), ('Marcelina', 'Podlinska'), ('Evgeniya', 'Levashova'), ('Jodie Anna', 'Burrage'), ('Anastasia', 'Mikheeva'), ('Anastasia', 'Veselova'), ('Teresia', 'Londol'), ('Lourdes', 'Sprinckmoller'), ('Lucia', 'Natal Gomez'), ('Martina', 'Bokulic'), ('Marharyta', 'Smolyak'), ('Daria', 'Shelomentseva'), ('Andiyo', 'Inwang'), ('Adelaide', 'Maesfranckx'), ('Carmen', 'Schultheiss'), ('Vilma', 'Berglund'), ('Luna', 'Meers'), ('Andreea', 'Stanescu'), ('Francesca', 'Denti'), ('Carolina', 'Torrico'), ('Salma', 'El Garhi'), ('Zainab', 'Bendahhou'), ('Anna Soffia', 'Gronholm'), ('Izabela Gabriela', 'Novac'), ('Avital', 'Vulf'), ('Denisa', 'Pospisilova'), ('Agustina Belen', 'Diaz'), ('Ulyana', 'Grib'), ('Csenge', 'Furak'), ('Katarina', 'Ljujic'), ('Moira Valeria', 'Miranda'), ('Makenzie', 'Myers'), ('Ye Xin', 'Ma'), ('Yanni', 'Liu'), ('Sina', 'Zuger'), ('Adi', 'Spiegelman'), ('Angie', 'Laporal'), ('Irem', 'Kaftan'), ('Irma Elita', 'Evania'), ('Mei', 'Yamaguchi'), ('Alessandra', 'Maya Thompson'), ('Valentine', 'Bacher'), ('Riley', 'Mcquaid'), ('Taylor', 'Gruber'), ('Maria Paula', 'Uhrich'), ('Kamilla', 'Bolatova'), ('Aleksandra', 'Kasatkina'), ('Paulina Ela', 'Mihokova'), ('Sybella', 'Garvin'), ('Elena', 'Rybakina'), ('Aleksandra', 'Kulik'), ('Mara', 'Vasiliev'), ('Kintan Pratiwi', 'Anwar'), ('Kateryna', 'Popova'), ('Alexandra', 'Almborg'), ('Sol Maria', 'Terracina'), ('Carla', 'Hassaine'), ('Alina', 'Povidalo'), ('Tereza', 'Prochazkova'), ('Brooke', 'Winley'), ('Valeriya', 'Denisenko'), ('Franziska Marie', 'Ahrend'), ('Ellie', 'Tsimbilakis'), ('Mila', 'Hartig'), ('Astrid Wanja', 'Brune Olsen'), ('Noa', 'Lasry'), ('Nagomi', 'Higashitani'), ('Maryna', 'Chernyshova'), ('Sonia', 'Poveda Marsal'), ('Valeriya', 'Yushchenko'), ('Himani', 'Mor'), ('Isabel', 'Donaldson'), ('Anjelika', 'Vlasenkova'), ('Veronika', 'Koberlingova'), ('Erika', 'Botalieva'), ('Marketa', 'Vondrousova'), ('Maria Sol', 'Zeyen'), ('Shuyue', 'Ma'), ('Alisha', 'Reayer'), ('Alexandra', 'Belaya'), ('Tizia', 'Brocks'), ('Yesica', 'De Lucas'), ('Marion', 'Chatenet'), ('Anna Marija', 'Bukina'), ('Susanna', 'Giovanardi'), ('Nefisa', 'Berberovic'), ('Victoria', 'Rey'), ('Sofiya', 'Kuzina'), ('Martina', 'Kudelova'), ('Suzan', 'Lamens'), ('Arina', 'Amaning'), ('Federica', 'Bilardo'), ('Hazal', 'Karaaliler'), ('Sofia', 'Ayuso'), ('Emmanuelle', 'Girard'), ('Ipek', 'Oz'), ('Shelly', 'Krolitzky'), ('Mccartney', 'Kessler'), ('Ana', 'Biskic'), ('Malaika Alex', 'Fernandes'), ('Angela', 'Fita Boluda'), ('Franziska', 'Kommer'), ('Laura', 'Gil Lerin'), ('Romana', 'Tarajova'), ('Georgia Andreea', 'Craciun'), ('Anastazja', 'Rosnowska'), ('Fang Hsien', 'Wu'), ('Emma', 'Lene'), ('Julia', 'Saving'), ('Sandra', 'Azorin Vilella'), ('Yumi', 'Takaichi'), ('Cagla', 'Badem'), ('Claudia', 'Bartolome Ortiz'), ('Ecaterina', 'Ivasco'), ('Yelyzaveta', 'Rachenko'), ('Dominika', 'Paczena'), ('Chiara', 'Catini'), ('Dami', 'Lee'), ('Amanda', 'Meyer'), ('Maria', 'Mateas'), ('Sofia', 'Sewing'), ('Mikayla', 'Parks'), ('Zaklin', 'Bokan'), ('Celine', 'Kern'), ('Ana', 'Martinez Bencomo'), ('Luna', 'Milovanovic'), ('Michaela', 'Gordon'), ('Sadaf', 'Sadeghvaziri'), ('Lauryn', 'John Baptiste'), ('Jaeda', 'Daniel'), ('Rishika', 'Ravindran'), ('Kim', 'Fontana'), ('Somer', 'Dalla Bona'), ('Michelle', 'Janis'), ('Bianca', 'Vitale'), ('Sabina', 'Smirnova'), ('Vlada', 'Medvedcova'), ('Dakshata', 'Girishkumar Patel'), ('Daria', 'Orichkevitch'), ('Paola', 'Landin Lopez'), ('Pamela', 'Hernandez'), ('Anna', 'Bowtell'), ('Angeles', 'Moreno Barranquero'), ('Ginelle  Michelle', 'Samson'), ('Jiahe', 'Cai'), ('Mariella', 'Minetti'), ('Sandra', 'Bozinovic'), ('Rebeka', 'Masarova'), ('Natalija', 'Popovic'), ('Victoria', 'Emma'), ('Gaelle', 'Ratianarimanana'), ('Ivon', 'Mihaleva'), ('Selin', 'Karaer'), ('Caroline', 'Szabo'), ('Alina', 'Kislitskaya'), ('Sharmada', 'Iyer'), ('Diana', 'Bakuta'), ('Urska', 'Velec'), ('Jule', 'Niemeier'), ('Nastasia', 'Jedrychowski'), ('Jasmine', 'Boyd'), ('Lorena', 'Vano  Martin'), ('Lily', 'Ghodrati'), ('Poschanun', 'Warakulnukroh'), ('Leonor', 'Meliveo Saragusti'), ('Camilla', 'Priuli'), ('Elisa', 'Visentin'), ('Yuliya', 'Kim'), ('Sofija', 'Mandic'), ('Merel', 'Hoedt'), ('Frana', 'Ugarkovic'), ('Gabriella', 'Akopian'), ('Sabrina Mary', 'Woll'), ('Silvia', 'Bordes Caselles'), ('Eliza', 'Omirou'), ('Imren', 'Bilgic'), ('Malene', 'Helgo'), ('Vitoria', 'Okuyama'), ('Ines Belkis', 'Alimoussa'), ('Mai', 'Hontama'), ('Anna', 'Stefani'), ('Tatiana', 'Simova'), ('Emily', 'Appleton'), ('Katerina', 'Filip'), ('Neri', 'Cohen'), ('Defne', 'Olcay'), ('Eva', 'Guerrero Alvarez'), ('Vasilisa', 'Mikhaylova'), ('Caragh', 'Courtney'), ('Angela', 'Charles Alfred'), ('Magdalini', 'Adaloglou'), ('Lauren', 'Gish'), ('Inci', 'Ogut'), ('Noelia', 'Bouzo Zanotti'), ('Julieta', 'Albornoz'), ('Marta', 'Perez Mur'), ('Eva', 'Alexandrova'), ('Ebba', 'Rosberg'), ('Amina', 'Anshba'), ('Zhijie', 'Ma'), ('Lisa', 'Zang'), ('Pareen', 'Shivekar'), ('Daryna', 'Kovalenko'), ('Agnes Ornella', 'Biba'), ('Paula', 'Baranano'), ('Shivani', 'Manjanna'), ('Dilara', 'Spicer'), ('Andrea', 'Arratia Fernandez'), ('Zhima', 'Du'), ('Alexandra', 'Alegre Ferre'), ('Georgia', 'Gulin'), ('Teodora', 'Golubovic'), ('Adelina', 'Baravi'), ('Peyton', 'Pesavento'), ('Nina', 'Kolar'), ('Daniela', 'Flores Gerez'), ('Advaitas', 'Saravanan'), ('Jaimee', 'Fourlis'), ('Penelope', 'Abreu'), ('Donnaroza', 'Gouvernante'), ('Antje', 'Rubbrecht'), ('Mathilda', 'Vidgren'), ('Sofia', 'Carlsson'), ('Cameron', 'Morra'), ('Adriana', 'Marikova'), ('Lea', 'Boskovic'), ('Petra Maria', 'Kerdikova'), ('Katrina', 'Sammut'), ('Chelsea', 'Vanhoutte'), ('Martina', 'Girardi'), ('Satsuki', 'Takamura'), ('Maria', 'Viarkhusha'), ('Nafees Bano', 'Syed'), ('Mukadas', 'Yussupova'), ('Asli', 'Yucebilgin'), ('Maria Gabriela', 'Linares De Faria'), ('Viktoria', 'Surova'), ('Kayla', 'Day'), ('Alexandra', 'Dubrovina'), ('Katie', 'Lafrance'), ('Yunuen', 'Elizarraras Bahena'), ('Karolina', 'Hakala'), ('Teresa', 'Franco Dias'), ('Aleksandra', 'Kuznetsova'), ('Anastasia', 'Konstantinova'), ('Lily', 'Reynolds'), ('Madoka', 'Tominaga'), ('Timea', 'Pavlickova'), ('Jennifer', 'Luikham'), ('Tamara', 'Musulbes'), ('Nathalia', 'Wolf Gasparin'), ('Nikola', 'Neumannova'), ('Ajda', 'Bukovec'), ('Yulia', 'Shishova'), ('Milana', 'Lysova'), ('Polina', 'Nazarchuk'), ('Hanine', 'Boudjadi'), ('Deepshikha', 'Saw'), ('Monika', 'Kilnarova'), ('Zorica', 'Spasojevic'), ('Anna', 'Bright'), ('Zarema', 'Mekhtieva'), ('Angelica Maria', 'Vargas Saavedra'), ('Vicky Irma Margaretha', 'Oktaviana'), ('Salma', 'Ziouti'), ('Noramon', 'Tacharungroj'), ('Agustina', 'Rimoldi Godoy'), ('Dragana', 'Radisic'), ('Helene', 'Heiberg'), ('Putri Sanjungan', 'Insani'), ('Mouna', 'Bouzgarrou'), ('Ya Yun', 'Pai'), ('Lara', 'Schmidt'), ('Alana', 'Tuayeva'), ('Laura', 'Barona'), ('Berfu', 'Cengiz'), ('Komola', 'Umarova'), ('Tamara', 'Racine Beauchamp'), ('Sanja', 'Fabijancic'), ('Marta', 'Vicens Miquel'), ('Ioana', 'Bogdan'), ('Rebeka Margareta', 'Mertena'), ('Ashley', 'Lahey'), ('Haruna', 'Arakawa'), ('Jimena Paula', 'Garbino'), ('Alejandra', 'Garmendia'), ('Amelie Carolin', 'Kurpiers'), ('Zinovia', 'Vaneva'), ('Alara', 'Sener'), ('Zuzanna', 'Wilk'), ('Anasztazia', 'Fouraev'), ('Priyachanok', 'Sukkanha'), ('Nora', 'Ayala Serra'), ('Sofya', 'Dobronevskaya'), ('Anna', 'Ureke'), ('Angelina', 'Shakhraychuk'), ('Jennifer', 'Timotin'), ('Albertina', 'Giacomino'), ('Alina', 'Gazizova'), ('Margaux', 'Orange'), ('Alexandra', 'Tutecky'), ('Novela Rezha', 'Millenia Putri'), ('Gabriela Nicole', 'Tatarus'), ('Mihika', 'Yadav'), ('Naiara', 'Uriarte Morillas'), ('Lillian', 'Gabrielsen'), ('Kalpaka', 'Pradip'), ('Bhargavi', 'Kalaga'), ('Anais', 'Defossez'), ('Anastassiya', 'Sharapova'), ('Marie', 'Vicente'), ('River', 'Hart'), ('Jacqueline', 'Boepple'), ('Karin', 'Hiraoka'), ('Valentina', 'Giavazzi'), ('Maria', 'Tyrina'), ('Maria', 'Ryshchina'), ('Julie', 'Ball'), ('Anastasia', 'Golubeva'), ('Maria Jazmin', 'Amicuzi'), ('Aleksa', 'Cveticanin'), ('Zuleykha', 'Safarova'), ('Ekaterina', 'Vishnevskaya'), ('Lea', 'Romain'), ('Sophie', 'Gerits'), ('Tanit', 'Lopez Lopez'), ('Sofya', 'Zhuk'), ('Vered', 'Bert'), ('Ekaterina', 'Kurtukova'), ('Miku', 'Kajishita'), ('Matilda', 'Vainio'), ('Shakhnoza', 'Khatamova'), ('Klara', 'Silka'), ('Marija', 'Radosavovic'), ('Sofia', 'San Jose'), ('Helena', 'Jansen Figueras'), ('Laura', 'Cazacu'), ('Valeria Paulina', 'Humpierres Novikow'), ('Imperia', 'Martinez Mora'), ('Katerina', 'Krizova'), ('Marina', 'Bassols Ribera'), ('Greta Louise', 'Von Peschke'), ('Olivia', 'Peet'), ('Alessandra', 'Mazzola'), ('Valeriya', 'Deminova'), ('Laura', 'Rijkers'), ('Varvara', 'Kuksina'), ('Barbora', 'Kolackova'), ('Camila', 'Andrade'), ('Mi Zhuoma', 'You'), ('Yidi', 'Yang'), ('Kristina', 'Vasina'), ('Veronika', 'Pribylova'), ('Chiara', 'Giaquinta'), ('Renee', 'McBryde'), ('Elizaveta', 'Volodko'), ('Tingting', 'Pei'), ('Maria', 'Ribeiro'), ('Ekaterina', 'Davletova'), ('Linda', 'Puppendahl'), ('Veronika', 'Erjavec'), ('Emily', 'Seibold'), ('Gaia', 'Bandini'), ('Alejandra', 'Aguilar'), ('Irina', 'Cantos Siemers'), ('Elena', 'Griessner'), ('Muskaan', 'Ranjan'), ('Balsen', 'Kaya'), ('Teodora', 'Ristic'), ('Aylin', 'Abdioglu'), ('Alena', 'Yurchenko'), ('Perla', 'Nieuwboer'), ('Petra', 'Kucerova'), ('Marie', 'Mattel'), ('Vera', 'Markovic'), ('Carlotta', 'Romito'), ('Laura', 'Raimkhanova'), ('Sara', 'Raimkhanova'), ('Hortencia', 'Birnbaumer'), ('Simran', 'Kejriwal'), ('Meiqi', 'Guo'), ('Yinglak', 'Jittakoat'), ('Oceane', 'Mialon'), ('Lucie', 'Kankova'), ('Kaitlin', 'Staines'), ('Reka', 'Szalai'), ('Ana', 'Giraldi Requena'), ('Vivian', 'Glozman'), ('Lina', 'Glushko'), ('Emilie', 'Lindh Gallagher'), ('Margarita', 'Skryabina'), ('Karolina', 'Jaskiewicz'), ('Katarina', 'Kostic'), ('Tiffany', 'Lagarde'), ('Juliana', 'Castellanos Fernandez'), ('Ikram', 'Rassif'), ('Jovana', 'Vukovic'), ('Namu', 'Zeren'), ('Watsachol', 'Sawasdee'), ('Joleta', 'Budiman'), ('Shakhzoda', 'Asimova'), ('Hsin Yuan', 'Shih'), ('Alisiya', 'Soto'), ('Angela', 'Rinaldi'), ('Juliette', 'Bertagnol'), ('Chunxi', 'Xin'), ('Shoval', 'Fanani'), ('Derya', 'Yahe'), ('Eun Se', 'Jang'), ('Katyarina', 'Paulenka'), ('Stephanie Judith', 'Visscher'), ('Nina', 'Rudiukova'), ('Julia', 'Konishi Camargo Silva'), ('Isabella', 'Perez'), ('Sara', 'Urquizu'), ('Hannah', 'Mccolgan'), ('Summer', 'Yardley'), ('Alisa', 'Savina'), ('Sofia', 'Bezukladova'), ('Ellen', 'Ashley'), ('Karla', 'Kilic'), ('Ines', 'Salvador'), ('Yusra', 'Hegy'), ('Camila', 'Rebelo Felizzola'), ('Suzuka', 'Takoi'), ('Amanda', 'Citre'), ('Evaggelia', 'Kokkinaki'), ('Rayen', 'Turki'), ('Ece', 'Tan'), ('Evgenia', 'Kokkinaki'), ('Lucia', 'Marzal Martinez'), ('Evelin', 'Taise Baziloni Gouveia'), ('Lea', 'Dubois Rebiere'), ('Reka', 'Farbas'), ('Martina', 'Paladini Jennings'), ('Ulyana', 'Shirokova'), ('Katarina', 'Zavatska'), ('Lucia', 'De La Puerta Uribe'), ('Kaaviya', 'Balasubramanian'), ('Arina', 'Karbolina'), ('Olivia', 'Alfredsson'), ('Dainah', 'Cameron'), ('Julia', 'Rehberg'), ('Kristina', 'Sorokolet'), ('Alexis', 'Tensfeldt'), ('Amit', 'Miran'), ('Andreea', 'Prisacariu'), ('Abigail', 'Cazarez Gonzalez'), ('Laura', 'Prenant'), ('Maria Lourdes', 'Carle'), ('Anca', 'Craciun'), ('Mila', 'Mejic'), ('Alyssa', 'Mayo'), ('Svenja', 'Ochsner'), ('Natalia', 'Nikolopoulou'), ('Axana', 'Mareen'), ('Sofia', 'Ramirez'), ('Darya', 'Mukhina'), ('Baijing', 'Lin'), ('Yulia', 'Starodubtsewa'), ('Emma', 'Decoste'), ('Deniza', 'Marcinkevica'), ('Ilana', 'Tetruashvili'), ('Vaidehi', 'Chaudhari'), ('Basak', 'Akbas'), ('Anna', 'Titova'), ('Sofia Nami', 'Samavati'), ('Tejasvi', 'Kate'), ('Anastasia', 'Kulikova'), ('Yu', 'Shan'), ('Isabela', 'Campos Bifano'), ('Warona', 'Mdlulwa'), ('Natalia', 'Boltinskaya'), ('Emma', 'Brust'), ('Adelaida', 'Allakhverdiyeva'), ('Ainur', 'Suleimenova'), ('I Hsuan', 'Cho'), ('Ipek', 'Cevik'), ('Valeriya', 'Zhupanska'), ('Emna', 'Fahmia'), ('Gergana', 'Topalova'), ('Meiling', 'Wang'), ('Megan', 'Lombardi'), ('Wing Kiu Jacqueline', 'Lam'), ('Polina', 'Avdzhiyan'), ('Tamari', 'Sumbadze'), ('Maria Paula', 'Tobias'), ('Nell', 'Miller'), ('Charmaine Shi Yi', 'Seah'), ('Flaminia Maria', 'Valci'), ('Dariya', 'Detkovskaya'), ('Paula', 'Arias Manjon'), ('Jordan', 'Ortega Mendez'), ('Megan', 'Forster'), ('Pei Hsuan', 'Chen'), ('Ella', 'Husrefovic'), ('Nevena', 'Sokovic'), ('Aynur Cemre', 'Aka'), ('Cristina', 'Moll Alles'), ('Cherry', 'Kim'), ('Radka', 'Buzkova'), ('Mireille', 'Moreau'), ('Hili', 'Kronzon'), ('Ji Min', 'Park'), ('Anastasia', 'Kharitonova'), ('Nicole', 'Conard'), ('Nada', 'Dimovska'), ('Carla', 'Girbau Romero'), ('Marie Perla', 'Biansumba'), ('Denise Antonela', 'Stoica'), ('Magdalena', 'Santer'), ('Sri Sai Shivani', 'K'), ('Laura', 'Lopez Giese'), ('Sihem', 'Bellahouel'), ('Natalia', 'Pietras'), ('Julia', 'Khamula'), ('Paulina', 'Bednarczyk'), ('Sofia', 'Shaykis'), ('Arushi', 'Gupta'), ('Ana', 'Castillo'), ('Mijeong', 'Park'), ('Wing Sze', 'Yu'), ('Noa', 'Revivo'), ('Kolie', 'Allen'), ('Amparo Del Pino', 'Hernandez Alonso'), ('Molly', 'Helgesson'), ('Alicia Liliana', 'Rahem'), ('Prakriti', 'Banwani'), ('Patricia', 'Zeriu'), ('Alexandra', 'Pisareva'), ('Radhika', 'Yadav'), ('Elysia', 'Bolton'), ('Yanin', 'Wisitwarapron'), ('Adeline', 'Lardinois'), ('Zhibek', 'Kulambayeva'), ('Carlota', 'Molina Megias'), ('Ekaterina', 'Kholopenko'), ('Doga Selen', 'Takunyaci'), ('Yasmin', 'Mansouri'), ('Olga', 'Helmi'), ('Lenka', 'Stara'), ('Yuliya', 'Mazur'), ('Vasilisa', 'Polunova'), ('Kiara', 'Petrovicka'), ('Noya', 'Ohana'), ('Nastassia', 'Chamoun'), ('Erika Abigail', 'Gauto Martinez'), ('Ghizlane', 'El Amrani Tchaha'), ('Pauline', 'Demel'), ('Anastasia', 'Bovolskaya'), ('Serena', 'Dercole'), ('Leeloo', 'Obrul'), ('Sofie Bomark', 'Syversen'), ('Denisa Elena', 'Gheorghe'), ('Florencia', 'Massardo Brain'), ('Valentina', 'Likic'), ('Mariia', 'Skuba'), ('Kristina', 'Pukhaeva'), ('Kristina', 'Baran'), ('Annick', 'Verhaar'), ('Sofia', 'Bruno'), ('Sonja', 'Keranen'), ('Zehra Lara', 'Tekbas'), ('Lucia', 'Quiterio'), ('Alexandra', 'Hunter'), ('Isabelle', 'Boulais'), ('Emeline', 'Dartron'), ('Mileva', 'Cardenas Serna'), ('Eliza', 'Askarova'), ('Dilara Romy', 'Kubak'), ('Sofia', 'Blanco Andrade'), ('Alicia', 'Melosch'), ('Georgia', 'Drummy'), ('Francisca', 'Jorge'), ('Melis', 'Yasar'), ('Yuliya', 'Hatouka'), ('Emilia', 'Dejonckheere'), ('Ekaterina', 'Lushnikova'), ('Selma Stefania', 'Cadar'), ('Draginja', 'Vukovic'), ('Riddhi', 'Ramesh Sharma'), ('Jiawen', 'Li'), ('Ann Cathrin', 'Hummel'), ('Olesya', 'Pervushina'), ('Estella', 'Jaeger'), ('Maria Lota', 'Kaul'), ('Ida', 'Ferding'), ('Margo', 'Landmann'), ('Teodora', 'Mitrovic'), ('Priscila', 'Baptista'), ('Alyvia', 'Jones'), ('Anri', 'Nagata'), ('Gulsina', 'Khalimullina'), ('Zoe', 'Imes'), ('Laura Sofia', 'Rico Garcia'), ('Nikoleta', 'Antoniou Karademitrou'), ('Jessie Jiaxin', 'Gong'), ('Jayden', 'Nielsen'), ('Clara', 'Froget'), ('Destanee', 'Aiava'), ('Eunhye', 'Lee'), ('Alice', 'Robbe'), ('Aneta', 'Laboutkova'), ('Sofya', 'Golubovskaya'), ('Mayssa', 'Tebourbi'), ('Alisa', 'Axyanova'), ('Katerina', 'Tsygourova'), ('Iva', 'Krivic'), ('Louise', 'Wittouck'), ('Andrijana', 'Stoilkovic'), ('Han Byeol', 'Lee'), ('Maria', 'Oliver Sanchez'), ('Dayana', 'Yastremska'), ('Wanning', 'Zhu'), ('Lisa Marie', 'Lausecker'), ('Lana', 'Kentchiashvili'), ('Francisca Emilia', 'Vergara Jofre'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Tiphanie', 'Fiquet'), ('Yang', 'Lee'), ('Noa', 'Liauw A Fong'), ('Lungile', 'Ntuli'), ('Isabella', 'Tcherkes Zade'), ('Chanel', 'Janssen'), ('Mei Xu', 'Wu'), ('Aneta', 'Kladivova'), ('Ellie', 'Douglas'), ('Tatiana', 'Terwindt'), ('Maileen', 'Nuudi'), ('Yasmine', 'Wagner'), ('Maja', 'Issler'), ('Anna', 'Khudoley'), ('Claire', 'Liu'), ('Danica', 'Malan'), ('Alisa', 'Grachova'), ('Xenia', 'De Luna'), ('Ali', 'Collins'), ('Elena', 'Malygina'), ('Daria', 'Solovyeva'), ('Francesca', 'Gaida'), ('Jia', 'Ren'), ('Mara', 'Vidal'), ('Ekaterina', 'Shalimova'), ('Julia', 'Iglesias'), ('Anna Maria', 'Jovanovic'), ('Nadja', 'Ramskogler'), ('Lucia', 'Cortez Llorca'), ('Marina', 'Benito'), ('Julieanne', 'Bou'), ('Ye Jin', 'Kim'), ('Haruna', 'Sakamoto'), ('Maria', 'Manilova'), ('Oxi', 'Gravitas Putri'), ('Polina', 'Altukhova'), ('Nicole', 'Nadel'), ('Avital', 'Kandelis'), ('Ambre', 'Feder'), ('Ariana', 'Chan Baratau'), ('Svetlana', 'Iansitova'), ('Justine', 'Pysson'), ('Sophie', 'Muntean'), ('Dariya', 'Sovich'), ('Bianca', 'Andreescu'), ('Gabriela Ana Maria', 'Davidescu'), ('Gabriella', 'Mujan'), ('Sanjeevani', 'Patil'), ('Weronika', 'Falkowska'), ('Anja', 'Gal'), ('Giulia', 'Peoni'), ('Neli', 'Sunjic'), ('Mamiko', 'Harada'), ('Camille', 'Corenthy'), ('Mercedes', 'Aristegui'), ('Camilla', 'Ceppellini'), ('Nuria', 'Brancaccio'), ('Rosa', 'Vicens Mas'), ('Ann', 'Li'), ('Elizaveta', 'Avdonina'), ('Vasiliki', 'Karvouni'), ('Daniela', 'Baez Friedrich'), ('Maria Jose', 'Reynaldo'), ('Sara', 'Gvozdenovic'), ('Ana Paula', 'Melilo'), ('Azul Agustina', 'Pedemonti'), ('Yuki', 'Ando'), ('Yasemin Ada', 'Boru'), ('Angelina', 'Fedorova'), ('Elizabeth', 'Popova'), ('Salma', 'Abdel Rahim'), ('Ruoyu', 'Chen'), ('Maria Jose', 'Hernandez Magro Quiroz'), ('Jimena', 'Rodriguez Benito'), ('Loretto', 'Villalba Rubio'), ('Anna', 'Loughlan'), ('Taysia', 'Rogers'), ('Shelly', 'Bereznyak'), ('Deborah', 'Raia'), ('Vanessa Olimpia', 'Rauta'), ('Zara', 'Lennon'), ('Maria Victoria', 'Negoita'), ('Domenika', 'Turkovic'), ('Kamilla', 'Kokeladze'), ('Silvia Paulina', 'Vilchis Sanchez'), ('Viktoria', 'Glotova'), ('Enola', 'Chiesa'), ('Mariona', 'Perez Noguera'), ('Luminita', 'Tutunaru'), ('Aurora', 'Ciavarelli'), ('Judith', 'Van Kessel'), ('Dalia', 'Ahmed'), ('Maria', 'Marnellou'), ('Paula', 'Veyhle'), ('Costanza', 'Traversi'), ('Samanta', 'Villegas'), ('Olga', 'Terletska'), ('Maria', 'Pereyra Sellart'), ('Tal', 'Zinn'), ('Jodie Annie', 'Lawrence Taylor'), ('Dyane Estefania', 'Barcena Del Bosque'), ('Ana', 'Makatsaria'), ('Aino', 'Alkio'), ('Elinor', 'Storkaas'), ('Nikoletta', 'Muller'), ('Dalila', 'Said'), ('Meriem', 'Turki'), ('Irem', 'Soylu'), ('Adriana', 'Senkarova'), ('Gabriel', 'Karatantcheva'), ('Ayumi', 'Koshiishi'), ('Kathleen', 'Kanev'), ('Yashu', 'Yang'), ('Lizi', 'Morgoshia'), ('Valentina', 'Cvackova'), ('Natalie', 'Slezakova'), ('Therese', 'Ekdahl'), ('Yuxin', 'Zhang'), ('Emily', 'Welker'), ('Emmanouela', 'Antonakis'), ('Leonarda', 'Horvat'), ('Anda', 'Karanusic'), ('Sabhyata', 'Nihalani'), ('Varvara', 'Gracheva'), ('Bianca', 'Bevione'), ('Yasmine', 'Bengebara'), ('Kristina', 'Novak'), ('Ana', 'Fernandez Villa'), ('Hei Ching Claudia', 'Ng'), ('Caitlin', 'Ward'), ('Bhavya', 'Ramineni'), ('Renata', 'Lombera'), ('Nicole', 'Mossmer'), ('Elizaveta', 'Zaritscaya'), ('Franziska', 'Sziedat'), ('Tatiana', 'Makarova'), ('Juliette', 'Colard'), ('Taylor', 'Johnson'), ('Benedetta', 'Ivaldi'), ('Catherine', 'Roche'), ('Ramona Eva', 'Chivu'), ('Malkia', 'Menguene'), ('Fadona Titalyana', 'Kusumawati'), ('Kalliopi', 'Gkouskou'), ('Hanna', 'Tarlouskaya'), ('Daniela', 'Vismane'), ('Eliz', 'Maloney'), ('Lara', 'Panfilov'), ('Rita Maria', 'Bentes De Oliveira Pinto'), ('Mikaela', 'Konstantinova'), ('Susan', 'Salinas'), ('Nicole', 'Knickerbocker'), ('Diana Maria', 'Mihail'), ('Thea Sund', 'Jacobsen'), ('Chelsea', 'Kung'), ('Giulia', 'Spicacci'), ('Danel', 'Ashirova'), ('Cristina', 'Torres Sanchez'), ('Gabriella', 'Da Silva Fick'), ('Paula Andrea', 'Coronado'), ('Chengyiyi', 'Yuan'), ('Christina', 'Berchtold'), ('Fidana', 'Khalilzada'), ('Giulia', 'La Rocca'), ('Simone', 'Simas'), ('Sura', 'Assadova'), ('Salma', 'Ewing'), ('Katia Monserrat', 'De La Garza Valdez'), ('Ana', 'Stefanovic'), ('Suhana Sofia', 'Mohd Adam Das'), ('Prarisa', 'Rachdanone'), ('Arabella', 'Koller'), ('Danai', 'Petroula'), ('Kisa', 'Yoshioka'), ('Julia', 'Oczachowska'), ('Adela', 'Joldic'), ('Ana', 'Lantigua De La Nuez'), ('Eleonora', 'Molinaro'), ('Alexandra', 'Marina'), ('Giulia', 'Carbonaro'), ('Elene', 'Mchedlidze'), ('Carson', 'Branstine'), ('Qianhui', 'Tang'), ('Andreea', 'Craciun'), ('Arielle', 'Nealy'), ('Anastasia', 'Iamachkine'), ('Mihaela Lorena', 'Marculescu'), ('Anna', 'Solovyeva'), ('Klaudia', 'Fedosenkova'), ('Jessica', 'Bruyns'), ('Itxaso', 'Blanco Fernandez De Leceta'), ('Keyi', 'Zhou'), ('Fiona', 'Ganz'), ('Elizabet', 'Hamaliy'), ('Lana', 'Sipek'), ('Zorana', 'Samardzic'), ('Francesca', 'Jones'), ('Ivana', 'Popovic'), ('Adele Diana', 'Biba'), ('Olivia', 'Sonnekus Williams'), ('Maria', 'Oreshkina'), ('Barbara', 'Quagliardi'), ('Shevita', 'Aulana'), ('Wai Yiu', 'Tsang'), ('Ilaria', 'Sposetti'), ('Thitirat', 'Kanaphuet'), ('Liubov', 'Demidova'), ('Dina', 'Chayka'), ('Tamara', 'Malesevic'), ('Sofya', 'Lansere'), ('Julia', 'Vulpio'), ('Kanyalak', 'Boonyarat'), ('Milica', 'Vujovic'), ('En Shuo', 'Liang'), ('Antonia', 'Balzert'), ('Andrea Agostina', 'Farulla Di Palma'), ('Karolina', 'Berankova'), ('Adi', 'Gavish'), ('Nasty', 'Surkova'), ('Kanna', 'Nishida'), ('Aurora', 'Urso'), ('Abla', 'El Kadri'), ('Zeynep', 'Cakirer'), ('Manuela', 'Hernandez'), ('Pamela', 'Cohen'), ('Lisa', 'Mays'), ('Maria', 'SOLNYSHKINA'), ('Victoria', 'Schnell Jacobsen'), ('Tiana', 'Windbuchler'), ('Marcella', 'Cruz'), ('Milana', 'Semenova'), ('Alexandra', 'Viktorovitch'), ('Diae', 'El Jardi'), ('Paulina', 'Engback'), ('Nicha', 'Jitmanee'), ('Fran', 'Booth'), ('Sara', 'Yadav'), ('Ludovica', 'Fusco'), ('Leonie', 'Kung'), ('Victoria', 'Mikhaylova'), ('Deeksha', 'Manju Prasad'), ('Ania', 'Hertel'), ('Aurora', 'Zantedeschi'), ('Taisia', 'Polyarush'), ('Stephanie', 'Belovukovic'), ('Oleksandra', 'Andrieieva'), ('Sofia', 'Voll'), ('Chiara', 'Fermi'), ('Viktoriia', 'Dema'), ('Marily', 'Canellopoulos'), ('Mila', 'Saric'), ('Evangeline', 'Du Toit'), ('Tuana', 'Oz'), ('Yubarani', 'Banerjee'), ('Syeda', 'Gulras Begum'), ('Dagmar', 'Zdrubecka'), ('Solomiya', 'Rohovets'), ('Maria', 'Fernandez Zaragoza'), ('Polina', 'Goloputova'), ('Angel', 'Macleod'), ('Joanne', 'Zuger'), ('Akanksha A', 'Bhan'), ('Lledo', 'Tena Guzman'), ('Anhzelika', 'Isaeva'), ('Elina', 'Sharipova'), ('Alexandra Maria', 'Staiculescu'), ('Lisa', 'Piccinetti'), ('Kaja', 'Juvan'), ('Celine', 'Fritsch'), ('Lena', 'Greiner'), ('Marianthi', 'Tsesmetzi'), ('Emiliana', 'Arango'), ('Tamara', 'Barad Itzhaki'), ('Sarra', 'Ata'), ('Shou Na', 'Mu'), ('Alicia', 'Alegre'), ('Marina', 'Davtyan'), ('Shalimar', 'Talbi'), ('Katherine', 'Fleischman'), ('Brindtha', 'Ramasamy'), ('Alice', 'Viglianisi'), ('Anna', 'TSELYKOVSKAYA'), ('Jennifer Rosa', 'Dourado'), ('Jacquline', 'Nylander Altelius'), ('Ryeong Gyeong', 'Park'), ('Ekaterina', 'Grib'), ('Simona', 'Waltert'), ('Elisabeth', 'Chantraine'), ('Sing Le', 'Fan Chiang'), ('Svetlana', 'Bubnova'), ('Dalayna', 'Hewitt'), ('Mariya', 'Ponomareva'), ('Ayumi', 'Miyamoto'), ('Zejda', 'Veljacic'), ('Nikolina', 'Dzunov'), ('Maren', 'Nordklev'), ('Sofya', 'Treshcheva'), ('Anabel', 'Aran Torrente'), ('Zhuoma', 'Ni Ma'), ('Adrienn', 'Horvath'), ('Alise', 'Cernecka'), ('Priscilla', 'Baron Zichar'), ('Xiaoxi', 'Zhao'), ('Eleftheria', 'Gkogkou'), ('Takalani', 'Molaoa'), ('Alexandera', 'Inozemtseva'), ('Ekaterina', 'Ovcharenko'), ('Alycia', 'Parks'), ('Oleksandra', 'Balaba'), ('Andreea', 'Velcea'), ('Irene', 'Garceran'), ('Ebru Zeynep', 'Yazgan'), ('Selin', 'Ovunc'), ('Vitalia', 'Stamat'), ('Lucianna', 'Piedra'), ('Stephanie', 'Bertschmann'), ('Chloe', 'Cirotte'), ('Yasmeen', 'Ghaoui'), ('Azaliya', 'Badegyeva'), ('Saara', 'Kunakunova'), ('Samantha', 'Nanere'), ('Aleksandra', 'Efremova'), ('Carmen Roxana', 'Manu'), ('Vicky', 'Van De Peer'), ('Maria Ignacia', 'Yapur Lopez'), ('Nicole', 'Khirin'), ('Timea', 'Visontai'), ('Ares', 'Teixido Garcia'), ('Maria Aran', 'Teixido Garcia'), ('Evgeniya', 'Burdina'), ('Emma Erin', 'Kiernan'), ('Ellie', 'Murphy'), ('Maayan', 'Shtern'), ('Laetitia', 'Pulchartova'), ('Manon', 'Leonard'), ('Ines', 'Benito'), ('Kseniya', 'Yersh'), ('Oona', 'Orpana'), ('Abigail', 'Desiatnikov'), ('Zeynep', 'Ay'), ('Gal', 'Shemesh'), ('Martina', 'Biagianti'), ('Olga', 'Danilovic'), ('Rozalina', 'Youseva'), ('Shir', 'Bakshi'), ('Sarah', 'Heckel'), ('Carmen', 'Aizpurua Bernabe'), ('Adva', 'Dabah'), ('Rebeca', 'C Silva'), ('Alice', 'Tubello'), ('Elena', 'Milovanovic'), ('Angie Carolina', 'Yepes Medina'), ('Christina', 'Baer'), ('Heden', 'Ly'), ('Nerea', 'Guerra Santana'), ('Yuzuka', 'Shimizu'), ('Anna', 'Kubareva'), ('Daria', 'Rakitskaya'), ('Sara', 'Neves'), ('Raffaela', 'Alhach'), ('Katherine', 'Lyman'), ('Marta', 'Gonzalez Ballbe'), ('Iariniaina', 'Tsantaniony'), ('Yuki', 'Naito'), ('Mariana', 'Vargas Carrascal'), ('Catarina Castro', 'Cerqueira'), ('Lavinia', 'Lancellotti'), ('Lina', 'Sachica'), ('Anja', 'Draskovic'), ('Yaroslava', 'Gadiatska'), ('Elisabeth', 'Andryukhova'), ('Celine', 'El Ghali'), ('Shani', 'Dubinchik'), ('Carolina', 'Cerowska'), ('Honami', 'Sodeyama'), ('Victoria', 'Allen'), ('Oleksandra', 'Gorchanyuk'), ('Vivien', 'Sandberg'), ('Hurricane Tyra', 'Black'), ('Ayana', 'Noguchi'), ('Marthina Diyani', 'Schwencke'), ('Oumaima', 'Aziz'), ('Zoe', 'Hitt'), ('Gaini', 'Ibrasheva'), ('Maria Florencia', 'Urrutia'), ('Viktoria', 'Morvayova'), ('Abigail', 'Forbes'), ('Lynda', 'Benkaddour'), ('Valeriya', 'Olyanovskaya'), ('Nina', 'Olyanovskaya'), ('Ting Pei', 'Chang'), ('Sivan', 'Raizman'), ('Andei', 'Fukushige'), ('Elena', 'Jamshidi'), ('Valentina Andrea', 'Vasquez Pongruber'), ('Paula', 'Joukanen'), ('Nesrine', 'Troubia'), ('Ksenija', 'Tmusic'), ('Caijsa Wilda', 'Hennemann'), ('Valentina', 'Gaggini'), ('Valentina', 'Ryser'), ('Djihane', 'Tefani'), ('Adrienn', 'Nagy'), ('Clara', 'Burel'), ('Avril', 'Look'), ('Margaryta', 'Bilokin'), ('Xiyu', 'Wang'), ('Lizaveta', 'Artsiomenka'), ('Iulia Bianca', 'Ilinca'), ('Anastasia', 'Potapova'), ('Andrea', 'Cetkovic'), ('Amine', 'Dik'), ('Rut', 'Galindo'), ('Kristin', 'Younes'), ('Marilyn', 'Shekhter'), ('Taylor', 'Dean'), ('Sabina', 'Dadaciu'), ('Alexia', 'Witthaus Vine'), ('Elena', 'Di Battista'), ('Lina', 'Shokry'), ('Luiza', 'Fullana'), ('Sofia', 'Epur'), ('Ya Hsin', 'Lee'), ('Nazli Nader', 'Redha'), ('Amina', 'Lasheen'), ('Lulu', 'Radovcic'), ('Nikol', 'Dobrilova'), ('Nicole', 'Bueno Sandoval'), ('Alice', 'Amendola'), ('Alesya', 'Yakubovich'), ('Azradeniz', 'Comlek'), ('Ekin', 'Ercetin'), ('Sada', 'Nahimana'), ('Andjela', 'Skrobonja'), ('Natalia', 'Roca Ward'), ('Giorgia', 'Di Muzio'), ('Hyeran', 'Yun'), ('Aleksandra', 'Pitak'), ('Liisa', 'Vehvilainen'), ('Sherry', 'Sherry Ayad Abd Elmalek Wassef'), ('Yi Tsen', 'Cho'), ('Maria', 'Pages Mere'), ('Riva', 'Hondiashvili'), ('Anita', 'Hutellier'), ('Tamara', 'Cherkassova'), ('Reka', 'Zadori'), ('Valentina', 'Del Marco'), ('Jillian', 'Taggart'), ('Camille', 'Kirket'), ('Yasmine', 'Mansouri'), ('Kristin', 'Yordanova'), ('Anna', 'Novikova'), ('Emma', 'Navarro'), ('Elizabeth', 'Mandlik'), ('Noor', 'Omara'), ('Anamaria', 'Kiszner Luca'), ('Buket', 'Dogan'), ('Nicole Marlene', 'Sanjon'), ('Rachida', 'Berjane'), ('Laia', 'Conde Monfort'), ('Karolina', 'Kubanova'), ('Loudmilla', 'Bencheikh'), ('Anne', 'Knuettel'), ('Iga', 'Swiatek'), ('Alexandra', 'Vagramov'), ('Manar', 'Charrouf'), ('Ana', 'Shanidze'), ('Anastasiya', 'Zaharova'), ('Anna', 'Laguza'), ('Iveta', 'Daujotaite'), ('Ruxandra', 'Schech'), ('Martyna', 'Habrych'), ('Kristina', 'Milenkovic'), ('Salma', 'Abdelbaset'), ('Mariia', 'Bergen'), ('Ferdaous', 'Bahri'), ('Shauna', 'Heffernan'), ('Zoe', 'Bourbotte'), ('Emma', 'Nurgazieva'), ('Xinyu', 'Cai'), ('Zeynep', 'Erman'), ('Sara', 'El Ghazouly'), ('Isabel', 'Adrover Gallego'), ('Antonia', 'Schmidt'), ('Feriel', 'Mahbouli'), ('Burcak', 'Ekin Yildiztekin'), ('Mahak', 'Jain'), ('Oana Smaranda', 'Corneanu'), ('Benedetta', 'Prato'), ('Adelina', 'Doguzova'), ('Funa', 'Kozaki'), ('Anand Dharana', 'Mudaliar'), ('Sophia', 'Edwards'), ('Anna', 'Siskova'), ('Katarina', 'Trickovic'), ('Myriam', 'Gheziel'), ('Camila Magali', 'Romero'), ('Isabella', 'Harvison'), ('Stefania', 'Rogozinska Dzik'), ('Alexia', 'Alvarez Gerochristodoulou'), ('Arina', 'Solomatina'), ('Elizaveta', 'Koklina'), ('Melody', 'Todorova'), ('Vlada', 'Koval'), ('Kexuan', 'Zhou'), ('Elizabeth', 'Scotty'), ('Lana', 'Stefanovic'), ('Giuliana', 'Liga'), ('Maram Mohamed', 'Sharif'), ('Nikola', 'Breckova'), ('Zoziya', 'Kardava'), ('Katarina Duic', 'Plumtree'), ('Eliza', 'Eglit'), ('Joanna', 'Garland'), ('Ksenia', 'Domnina'), ('Alexandra Diana', 'Braga'), ('Dorra', 'Roumani'), ('Sophia', 'Kermet'), ('Angela', 'Diez Plagaro'), ('Nadja', 'Bay Christians'), ('Nesrine', 'Korso Feciane'), ('Lauren', 'Cooper'), ('Aisha', 'Kukushkina'), ('Alexandra', 'Anttila'), ('Mariami', 'Akhalaia'), ('Mana', 'Kawamura'), ('Aida', 'Garcia Mendez'), ('Tanysha', 'Dissanayake'), ('Laura', 'Ashley'), ('Anika', 'Yarlagadda'), ('Caroline', 'Furlaneto'), ('Mylene', 'Halemai'), ('Moyuka', 'Uchijima'), ('Gemma', 'Heath'), ('Andreea Elena', 'Iordachi'), ('Milana', 'Maslenkova'), ('Zeynep Naz', 'Ozturk'), ('Nicolle Andrea', 'Gomez Romero'), ('Anna', 'Baranovski'), ('Sai Dedeepya', 'Yeddula'), ('Carolina', 'Velazquez'), ('Alisa', 'Yakimakho'), ('Diana', 'Khodan'), ('Layne', 'Sleeth'), ('Thasaporn', 'Naklo'), ('Yasmina', 'Karimjanova'), ('Leana', 'Atlan'), ('Laure Line', 'Glaude'), ('Fanni', 'Gecsek'), ('Natthapat', 'Piwbangruk'), ('Kamilla', 'Rakhimova'), ('Ana Luiza', 'Cruz'), ('Chloe', 'Beck'), ('Amanda', 'Anisimova'), ('Vladlena', 'Samenkova'), ('Lara', 'Biter'), ('Alexa', 'Ryngler'), ('Koral', 'Koldobski'), ('Najah', 'Dawson'), ('Milica', 'Bojic'), ('Alessia Beatrice', 'Ciuca'), ('Alexandra', 'Ferreira Da Silva'), ('Vlada', 'Zvereva'), ('Nikol', 'Docheva'), ('Barbara', 'Dessolis'), ('Lucia', 'Garrigues Melendez'), ('Xin Yu', 'Wang'), ('Sanyukta', 'Gawande'), ('Lilly Elida', 'Haseth'), ('Jesse', 'Hollins'), ('Valerie', 'Litzell'), ('Peyton', 'Stearns'), ('Anastasiya', 'Belogrivceva'), ('Maja', 'Makoric'), ('Lorena', 'Alves Castellanos'), ('Maja', 'Chwalinska'), ('Ivana', 'Loncar Antic'), ('Shale', 'Bouchard'), ('Mey', 'Ayari'), ('Yekaterina', 'Dmitrichenko'), ('Dana', 'Ferreyra'), ('Assel', 'Tuzelbekova'), ('Pilar', 'Astigarraga Harper'), ('Nikki', 'Redelijk'), ('Polina', 'Lushnikova'), ('Laura', 'Masic'), ('Nour', 'Damergi'), ('Dolavee', 'Tumthong'), ('Cristina', 'Mayorova Bakhtina'), ('Havana', 'Dauncey'), ('Daniella', 'Medvedeva'), ('Ingrid Carolina', 'Millan'), ('Ilay', 'Yoruk'), ('Nuria', 'Garrido Femenias'), ('Mariam', 'Dalakishvili'), ('Anastasiya', 'Poplavska'), ('Sarah', 'Mar'), ('Isabella', 'Bozicevic'), ('Mumtoza', 'Mamadaliyeva'), ('Gozde', 'Turhan'), ('Zoi', 'Meers'), ('Caty', 'Mcnally'), ('Selina', 'Atay'), ('Jazmin', 'Ortenzi'), ('Mihaela', 'Djakovic'), ('Alessia', 'Tagliente'), ('Jiangxue', 'Han'), ('Adithya', 'Karunaratne'), ('Xue', 'Cao'), ('Valeriya', 'Rozenkova'), ('Mariam Ashraf', 'Mohamed Mostafa'), ('Imani', 'Graham'), ('Maria Camila', 'Osorio Serrano'), ('Jasmin', 'Bruni'), ('Saara', 'Orav'), ('Katie', 'Volynets'), ('Anna', 'Kalabukhova'), ('Tuana', 'Tinaztepe'), ('Alexandra', 'Vecic'), ('Ran', 'Miyachi'), ('Angelina', 'Melki'), ('Sevil', 'Yuldasheva'), ('Alexandra', 'Silna'), ('Shavit', 'Kimchi'), ('Eva', 'Lys'), ('Giulia', 'Morlet'), ('Zeynep  Sena', 'Sarioglan'), ('Nina', 'Nikprelevic'), ('Anastasia', 'Zakharova'), ('Lotta', 'Heiskanen'), ('Fabiana', 'Marmiroli'), ('Sumin', 'Kim'), ('Matilde', 'Mariani'), ('Judith', 'Perello Saavedra'), ('Dayeon', 'Back'), ('Kristyna', 'Lavickova'), ('Ange Oby', 'Kajuru'), ('Caterina', 'Greco'), ('Luisa', 'Meyer Auf Der Heide'), ('Maria Ines', 'Fonte'), ('Manni', 'Zhang'), ('Sara', 'Ziodato'), ('Gaia', 'Morganti'), ('Jana', 'Knaab'), ('Elisa Andrea', 'Camerano'), ('Chloe', 'Compson'), ('Odul', 'Okur'), ('Ludmila', 'Kareisova'), ('Ana Maria', 'Gonzalez Ruiz'), ('Ana Maria', 'Zamfir'), ('Andrea', 'Sauco Roque'), ('Valentina', 'Shleyn'), ('Carol', 'Plakk'), ('Lina', 'Sfar'), ('Peppi', 'Ramstedt'), ('Tara', 'Gancev'), ('Anna', 'Zhang'), ('Maria', 'Petrovic'), ('Emilie', 'Elde'), ('Renon', 'Mano'), ('Katriin', 'Saar'), ('Hong Yi Cody', 'Wong'), ('Irawan', 'Deewajee'), ('Maelys', 'Bougrat'), ('Lorena Maria', 'Danaila'), ('Daniela', 'Schekaiban'), ('Jessica', 'Plazas'), ('Ella', 'Haavisto'), ('Supapitch', 'Kuearum'), ('Isabella', 'Nunez'), ('Anda', 'Ghinga'), ('Marina', 'Delgado Valero'), ('Himari', 'Sato'), ('Monika', 'Popovic'), ('Saki', 'Imamura'), ('Whitney', 'Osuigwe'), ('Helene', 'Pellicano'), ('Miku', 'Yamamoto'), ('Olivia', 'Gadecki'), ('Zeynep', 'Sonmez'), ('Ksenia', 'Brich'), ('Wing Ka', 'Lin'), ('Dakota', 'Fordham'), ('Betina', 'Tokac'), ('Chantal', 'Sauvant'), ('Leila', 'Koster'), ('Emma', 'Eerola'), ('Carlota', 'Martin Santana'), ('Megan', 'Basson'), ('Naomi', 'Cheong'), ('Lizette', 'Reding'), ('Lauren', 'Stein'), ('Momoko', 'Nishio'), ('Hedda', 'Gurholt'), ('Ana', 'Geller'), ('Anastasia', 'Petrova'), ('Mina', 'Hodzic'), ('Fiona', 'Arrese Mata'), ('Angela', 'Juarez Blanco'), ('Muslima', 'Akhunova'), ('Ariana', 'Arseneault'), ('Angelina', 'Wirges'), ('Berna', 'Yahe'), ('Giulia', 'Tedesco'), ('Jihane', 'Megdiche'), ('Avelina', 'Sayfetdinova'), ('Marta', 'Kostyuk'), ('Sohyun', 'Park'), ('Leonor', 'Oliveira'), ('Mananchaya', 'Sawangkaew'), ('Lola', 'Marandel'), ('Emilia', 'Salo'), ('Denisa', 'Hindova'), ('Jovana', 'Trickovic'), ('Lian', 'Tran'), ('Federica', 'Trevisan'), ('Marketa', 'Panackova'), ('Zoe', 'Kruger'), ('Mariana', 'Zuluaga Robledo'), ('Lunda', 'Kumhom'), ('Marta', 'Cuevas Guerrero'), ('Nasiba', 'Espolova'), ('Mai Napatt', 'Nirundorn'), ('Elena', 'Trencheva'), ('Miyuka', 'Kimoto'), ('Diane', 'Parry'), ('Leylah Annie', 'Fernandez'), ('Alexa', 'Noel'), ('Romana', 'Cisovska'), ('Dami', 'Edibson Messiah'), ('Aunchisa', 'Chanta'), ('Elina', 'Avanesyan'), ('Doga', 'Turkmen'), ('Sophie', 'Abrams'), ('Viktoriya', 'Kanapatskaya'), ('Lisa', 'Kung'), ('Natcharee', 'Teerachodjiranon'), ('Salma', 'Djoubri'), ('Nelly', 'Mezan'), ('Beyda', 'Baykal'), ('Rebeka', 'Kern'), ('Hania', 'Abouelsaad'), ('Punnin', 'Kovapitukted'), ('Milana', 'Zhabrailova'), ('Jimin', 'Kwon'), ('Ryoko', 'Ikeda'), ('Paulina Ailin', 'Sainz'), ('Yuna', 'Saito'), ('Yeon Woo', 'Ku'), ('Sapfo', 'Sakellaridi'), ('Alice', 'Gubertini'), ('Noa', 'Krznaric'), ('Sheena Jade', 'Masuda Karrasch'), ('Maddalena', 'Giordano'), ('Fernanda', 'Castillo Huerta'), ('Dorothy', 'Whitely'), ('Kay', 'Williams'), ('Eva', 'De Jong'), ('Valerie', 'Caulley'), ('L', 'Griffiths'), ('Sandra', 'Hole'), ('Beryl', 'Jenkins'), ('Loris', 'Butterfield'), ('Geri', 'Shepard'), ('Marilyn', 'Tesch'), ('Helen', 'Sheedy'), ('S', 'Washbourne'), ('S', 'Stephen'), ('Lexie', 'Kenny'), ('Lynette', 'Mansfield'), ('Janine', 'Whyte'), ('Helen', 'Oconnor'), ('Joan', 'Johnson'), ('Patricia', 'Edwards'), ('Heather', 'Mckechnie'), ('Ann', 'Jenkins'), ('Caroline', 'Cooper'), ('Kaye', 'Dening'), ('Kerry', 'Wilkinson'), ('Alison', 'Mckenzie'), ('Sue', 'Hastings'), ('Margaret', 'Starr'), ('E', 'Staples'), ('Yveline', 'Boy'), ('Janine', 'Murdoch'), ('D', 'Brennan'), ('Frances', 'Luff'), ('Helen', 'Kayser'), ('H', 'Rush'), ('Caroline', 'Langsford'), ('Sally', 'Irvine'), ('Sharon', 'Thomson'), ('Teresa', 'Van Haren'), ('Sandra', 'Walsham'), ('Judy', 'Harris'), ('L', 'Cameron'), ('Cheryl', 'Norquay'), ('Mandy', 'Morgan'), ('Norma', 'Eastburn'), ('Susan', 'Alexander'), ('Janet', 'Fallis'), ('Helen', 'Taylor'), ('Anne', 'Coleman'), ('Kati', 'Athorne'), ('Diane', 'James'), ('Robyn', 'Knobel'), ('Patricia', 'Billing'), ('Brenda', 'Dart'), ('Maureen', 'Pratt'), ('Patricia', 'King'), ('Kathy', 'Walker'), ('Helen', 'Young'), ('Moira', 'Whitely'), ('Leslie', 'Walker'), ('Marion', 'Proisy'), ('Joan', 'Walker'), ('Helen', 'Crozier'), ('Isabelle', 'Larsson'), ('Frances', 'Candy'), ('Jd', 'Griffiths'), ('Anneloes', 'Schothurst'), ('Sally', 'Arnott'), ('Gail', 'Williams'), ('Miki', 'Yokobori'), ('Chris', 'Cerato'), ('Vivicca', 'Andersson'), ('Gwen', 'Stirton'), ('Ai', 'Iida'), ('Lois', 'Raymond'), ('Julie', 'Staines'), ('Cheree', 'Walker'), ('Kerry', 'Neill'), ('Merrilyn', 'Robinson'), ('Julie', 'Hanrahan'), ('Karen', 'Gulley'), ('Pamela', 'Bailey'), ('Michelle', 'Pekovitch'), ('Sharon', 'Pinchbeck'), ('Jitka', 'Volavkova'), ('Paola', 'Palacios'), ('Anne Marie', 'Studer'), ('Kora', 'Schediwy'), ('Marion', 'Cristiani'), ('Aline', 'Nenot'), ('Gillian', 'Dove'), ('Ann', 'Phillips Moore'), ('Nicole', 'Niox Chateau'), ('Eugenia', 'Isopaitis'), ('Ilse', 'Buding'), ('Chantal', 'Langanay'), ('Janine', 'Mauroy Toffier'), ('Michelle', 'Rodriguez'), ('Dionissia', 'Asteri'), ('Francesca', 'Gordigiani'), ('Margarita', 'Zuleta'), ('Erzsebet', 'Polgar'), ('Yaeko', 'Matsuda'), ('Tiiu', 'Kivi'), ('Sharon', 'Van Brandis'), ('Becky', 'Vest'), ('Joan', 'Koudelka'), ('Aleksandra', 'Ivanova'), ('Marina', 'Chuvirina'), ('Carmen', 'Ibarra'), ('Alison', 'Mcmillan'), ('Sylvie', 'Rual'), ('Mimi', 'Wheeler'), ('Pixie', 'Lamm'), ('Margaret', 'Lee'), ('Pauline', 'Roberts'), ('Wendy', 'Hall'), ('Victoria', 'Rogers'), ('Maria Teresa', 'Riedl'), ('Marion', 'Boundy'), ('Susan', 'Northen'), ('Anita', 'Van Deventer'), ('Chikako', 'Murakami'), ('Lisa', 'Fleming'), ('Elena', 'Granaturova'), ('Martina', 'Walsh'), ('Elizabeth', 'Gordon'), ('Shawna', 'Martin'), ('Vija', 'Vuskalns'), ('Farel', 'Footman'), ('Peggy', 'Moore'), ('Tish', 'Adams'), ('Jade', 'Schiffman'), ('Carole', 'Herrick'), ('Emilie', 'Fisher'), ('Diane', 'Matzner'), ('Mary', 'Lowdon'), ('Ann', 'Moore'), ('Tina', 'Lyman'), ('Maricaye', 'Christenson'), ('Raymonde', 'Jones'), ('Carol', 'Hunter'), ('Carol', 'Aucamp'), ('Emilie', 'Burrer'), ('Pam', 'Farmer'), ('Shari', 'Barman'), ('Marcy', 'Okeefe'), ('Sally', 'Moore'), ('Lucy', 'Gordon'), ('Xenia', 'Anastasiados'), ('Judith', 'Mercade'), ('Ana', 'Aubone'), ('Iris', 'Thompson'), ('Ingrid', 'Jonge'), ('Nancy', 'Harris'), ('Maria', 'Muntanola'), ('Birthe', 'Glatzel'), ('Rosemary', 'Eden'), ('Patricia', 'Gomez'), ('Laura', 'Giussani'), ('Kathy', 'Barton'), ('Kathleen', 'Carey'), ('Keiko', 'Morimoto'), ('Suzie', 'Holm'), ('Lili', 'Bell'), ('Susana', 'Rojas'), ('Jane', 'Holdren'), ('Darlene', 'Williamson'), ('Janthe', 'Cunningham'), ('Sherry', 'Hull'), ('Edie', 'Carell'), ('Robin', 'Boss'), ('Annalisa', 'Pesce'), ('Clare', 'Schmoyer'), ('Marsha', 'Bladel'), ('Karen', 'Denman'), ('Stephanie', 'Hales'), ('Glynis', 'Oconnor'), ('Allegra', 'Cesare'), ('Kuniyo', 'Tsukamoto'), ('Natalya', 'Borodina'), ('Yoko', 'Mitsuko'), ('Rie', 'Nakazaka'), ('Barbara', 'Hambridge'), ('Maree', 'Booth'), ('Susan', 'Kreymborg'), ('Helen', 'Middleton'), ('Helen', 'Luscombe'), ('Jenny', 'Combs'), ('Jackie', 'Monsour'), ('Jackie', 'Pinto'), ('G', 'Wilson'), ('Julie', 'Peters'), ('Kathy', 'Mantle'), ('Kerrie', 'Byrne'), ('Gwen', 'Warnock'), ('Petra', 'Tesarova'), ('Alison', 'De Vries'), ('Gina', 'Fogarty'), ('Jennifer', 'Fenwick'), ('J', 'Tobin'), ('Miyoko', 'Sugawara'), ('Diane', 'Eastburn'), ('Donna', 'Kelly'), ('Sue', 'Chancellor'), ('Amanda', 'Pryor'), ('Rosalyn', 'Mccann'), ('Eri', 'Murata'), ('M', 'Berta'), ('V', 'Von Demleaux'), ('S', 'Matthews'), ('C', 'Crawford'), ('K', 'Leslie'), ('Wendy', 'Pearson'), ('J', 'Carey'), ('Helen', 'Rice'), ('Evelyn', 'Lim'), ('M', 'Earl'), ('C', 'Mcquaide'), ('S', 'Middleton'), ('G', 'Thacker'), ('G', 'Ayre'), ('Michele', 'Mizen'), ('Stephanie', 'Bardsley'), ('Jacqueline', 'Berson'), ('Marie Christine', 'Brochard'), ('Kumarani', 'Ranga Rao'), ('T', 'Novaco'), ('Maria', 'Hollingsworth'), ('Christiane', 'Sarrazin'), ('J', 'Turner'), ('Chantal', 'Puget'), ('Susanne', 'Korpas'), ('Andrea', 'Menezes'), ('J', 'Ray'), ('Huguette', 'Barat'), ('D', 'Jainer'), ('K', 'Bluhm'), ('Martine', 'Le Rays'), ('B', 'Dalzell'), ('J', 'James'), ('R', 'Witeker'), ('L', 'Rios De Almeida'), ('Meiko', 'Miyashita'), ('Patricia', 'Rime'), ('Elisabeth', 'Du Fresne Girard'), ('Catherine', 'De Lorme'), ('Cristina', 'Ribeiro Britto'), ('Martine', 'Cazaux'), ('N', 'Marman'), ('Soraya', 'Guellas'), ('Saadia', 'Mezdel'), ('E', 'Kogl'), ('Satoyo', 'Funaki'), ('F', 'Dawson'), ('Natalie', 'Scaramanga'), ('Agnes', 'Figueras'), ('Elizabeth', 'Dinopoulos'), ('Dominique', 'Oustric'), ('Carla', 'Mei'), ('Catherine', 'Chevalier'), ('A', 'Belladonna'), ('D', 'Maccloskey'), ('Helen', 'Liebenberg'), ('Martine', 'Jodin'), ('Pascale', 'Bonneteau'), ('', 'Marine'), ('Catherine', 'Alzate'), ('Ayi', 'Sutarno'), ('Cecilia', 'Barbat'), ('M', 'Mesek'), ('Wendy', 'Maccloskey'), ('Diana', 'Flickier'), ('Marion', 'Foldina'), ('Anne Marie', 'Casado'), ('Anne', 'Fritz'), ('Jeske', 'Van Erven'), ('Sabine', 'Mueller'), ('Kim', 'Seddon'), ('Ellen', 'Walliser'), ('Maria', 'Mendez'), ('Ann', 'Garbay'), ('Carole', 'Luccarelli'), ('Lorrayne', 'Gracie'), ('Susan', 'Leach'), ('Tonia', 'Bayley'), ('A', 'Schroeder'), ('Maria', 'Fernandez'), ('Karen', 'Kennington'), ('Karen', 'Dawson'), ('Jenny', 'Gardiner'), ('Lisa', 'Kearney'), ('Kathy', 'Mueller'), ('Pascale', 'Bernateau'), ('Judith', 'Principe'), ('Becky', 'Bell'), ('Connie', 'Yowell'), ('Lori', 'Miller'), ('Lisa', 'Bublitz'), ('Suzanne', 'Jarell'), ('Merrilee', 'Keller'), ('Hee Jeong', 'Baek'), ('Chris', 'Gillis'), ('Karen', 'Frawley'), ('Xiaojing', 'Lu'), ('Natalia', 'Vizhunova'), ('Florinda', 'Videa'), ('Solma', 'Norovz Najeri'), ('Joelie', 'Brousseaud'), ('Geraldine', 'Rimes'), ('Charlotte', 'Sikorra'), ('Joy', 'Rodrigues'), ('Maria Carmen', 'Gaso'), ('Gabriela', 'Delgado'), ('D', 'ESPINAL'), ('Y', 'FARID'), ('S', 'BACCAR'), ('Veronica', 'Osogo Nabwire'), ('Gladys', 'Imperial'), ('Marisa', 'Sanchez'), ('Stefania', 'Sernaglia'), ('Paula', 'Alvarez'), ('Cleopatra', 'Lopez'), ('Monika', 'Hassmann'), ('Jacqueline', 'Morales'), ('Alice', 'Alexandri'), ('Silvia', 'Gubler'), ('Norma', 'Baylon'), ('Lea', 'Degen'), ('Eleanor', 'Mcfadden'), ('Klara', 'Bardoczy'), ('Sonja', 'Fetz'), ('Xantippe', 'Vassiliadou'), ('Ping Sr', 'Wang'), ('Parvin', 'Afshar'), ('Sadigheh', 'Akbari'), ('Elza', 'Bellens'), ('Ulla', 'Pontoppidan'), ('Alice', 'Wavre'), ('Janine', 'Bourgnon'), ('Rosario', 'Briones'), ('Liu Shang', 'Ku'), ('Antonia', 'Prado'), ('Maureen', 'Schwartz'), ('Marketa', 'Prochova'), ('Nenni', 'Delmestre'), ('Narayanee', 'Gopal'), ('Deepika', 'Krishnappa'), ('Praveeni', 'Srinivasan'), ('Simona', 'Borisova'), ('Corin', 'De Waal'), ('Eva', 'Kolarovska'), ('Loveth', 'Donatus'), ('Nina', 'Kolar'), ('Aanu', 'Ayegbusi'), ('Christie', 'Nwankwo'), ('Fabienne', 'Schmidt'), ('Delisha', 'Guttikonda'), ('Haley', 'Giavara'), ('Claudia Cecilia', 'Rosas Garcia'), ('Jenna', 'Friedel'), ('Hoda', 'Habib'), ('Paulina', 'Bakaite'), ('Karolina', 'Kowall'), ('Maia', 'Sosa'), ('Haina', 'Franco'), ('G', 'NILAND'), ('M', 'POOS'), ('Analisa', 'Miro'), ('Van', 'Nguyen Ai Ngoc'), ('Kaoru', 'Okamoto'), ('Helen', 'Fraser'), ('Robin', 'Lesh'), ('S', 'Goot'), ('Jennifer', 'Nelson'), ('Sei Rei', 'Cho'), ('Robyn', 'Davis'), ('Christine', 'King'), ('Barbara', 'Murphy'), ('Sharon', 'Oconnor'), ('J', 'Lin'), ('Pamela', 'Southcombe'), ('Bernadette', 'Heavey'), ('Patricia', 'Ahern'), ('Michelle', 'Arnott'), ('Jennifer', 'Glynn'), ('Mary', 'Liddle'), ('Judy', 'Forbes'), ('Cheryl', 'Germaine'), ('Suzanne', 'Lundgren'), ('Jenny', 'Burrows'), ('Wendy', 'Moore'), ('Beatrice', 'Abbas'), ('Maud', 'Galtier'), ('Dominique', 'Burel'), ('Eleanora', 'Dumitrescu'), ('Ekaterina', 'Rosianu'), ('Jean', 'Knight'), ('Valerie', 'Forbes'), ('Barbara', 'Walsh'), ('Wendy', 'Slaughter'), ('Jan', 'Morton'), ('Mary', 'Mcanally'), ('Mary', 'Johnson'), ('Claire', 'Chapman'), ('', 'Brown'), ('Barbara', 'Lemberg'), ('Denise', 'Taylor'), ('Revonne', 'Du Toit'), ('Rayleen', 'Henningson'), ('Leanne', 'Palmisano'), ('Maureen', 'Rankine'), ('Hiroko', 'Sato'), ('Meg', 'Boyle'), ('B', 'Rupp'), ('Tanya', 'Kovachka'), ('Wendy', 'Pattenden'), ('Nancy', 'Killingsworth'), ('Keiko', 'Hayashi'), ('Stephanie', 'Meier'), ('Karen', 'Hueffman'), ('', 'Mckinney'), ('Ann', 'Gorneva Krulevitz'), ('', 'Munsell'), ('Michaela', 'Masur'), ('Jill', 'Patterson'), ('Sheila', 'Ohlsson'), ('Aura', 'Gheorge'), ('Barbel', 'Wohlfahrt'), ('Jennifer', 'Rothschild'), ('Akiko', 'Ueda'), ('Ellen', 'Drieberger'), ('Lynn', 'Rolley'), ('I', 'Norman'), ('Alexandra', 'Boutellier'), ('', 'Raimo'), ('Aschara', 'Moranon'), ('', 'Yoivera'), ('G', 'Read'), ('Kiki', 'Reuter'), ('Cathy', 'Canuti'), ('', 'Stafford'), ('Emmy', 'Ho'), ('', 'Gratton'), ('Claudette', 'Laliberte'), ('Daniela', 'Russino'), ('Marine', 'Jacquet'), ('Ting', 'Wang'), ('Lisa', 'Barg'), ('Chisa', 'Packard'), ('Lindsay', 'Lee'), ('Virginia', 'Brown'), ('Anne Sophie', 'Bruner'), ('Anje', 'Lauber'), ('M', 'Mcgrath'), ('Christine', 'Moroe'), ('Kyung Yee', 'Chang'), ('Noemi', 'Minzberg'), ('Skywalkie', 'Raimrova'), ('Marta', 'Rozas'), ('Monica', 'Jimenez'), ('Nowlenn', 'Peltier'), ('Anne', 'Walrick'), ('Makiko', 'Inekaku'), ('Grace', 'Summerside'), ('Elena', 'Ravnlanska'), ('Katja', 'Nossik'), ('Dina', 'Jovanovic'), ('Robertina', 'Marcu'), ('Inna', 'Brioukhovets'), ('Machiko', 'Fujiwara'), ('Cindy', 'Hill'), ('Yanet', 'Yanez'), ('Melanie', 'Tu'), ('Keri', 'Preng'), ('Katherine', 'Zordani'), ('Marina', 'Komatsu'), ('Yasmeen', 'Parviz'), ('Anastasia', 'Sukhotina'), ('Hei Ching Claudia', 'Ng'), ('Nina', 'Knez'), ('Katsiaryna', 'Skachkova'), ('Natasha', 'Subhash'), ('Addison', 'Brown'), ('Safiya', 'Carrington'), ('Alisia Stephanie', 'Manolescu'), ('Venia', 'Yeung'), ('Andrea', 'Gerhardt'), ('Dionissia', 'Kotsia'), ('Lise', 'Hahn Evers'), ('Lena', 'Dvornik'), ('Carmencita', 'De La Rosa'), ('Margaret', 'Burns'), ('Mary', 'Marechal'), ('Deanne', 'Bell'), ('Meenal', 'Maharwal'), ('Farah', 'Khalil'), ('Anastasiia', 'Chesnokova'), ('Lidya', 'Yargovan'), ('Isabella', 'Caballero'), ('Paola', 'Cortez Vargas'), ('Liria', 'Loria Pereyra'), ('Daria', 'Lukyanova'), ('Shufaa Changawa', 'Ruwa'), ('Katarina', 'Karanja'), ('Paige Wanjiku', 'Mbugua'), ('Polina', 'Smolskaya'), ('Idoia', 'Huerta Gallardo'), ('Paulina', 'Mecho Hernandez'), ('Shani', 'Gatterer'), ('Oluchukwu Jennifer', 'Ibeto'), ('Nour', 'Dib'), ('Viktoriya', 'Petrenko'), ('Daria', 'Nazarkina'), ('Anastasiya', 'Khrustaleva'), ('Yasmine', 'Khiri'), ('Ghita', 'Courdi'), ('Hind', 'Semlali'), ('Michele', 'Zmau')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name FROM players ORDER BY birth_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?' in SQLite? I currently have 'SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'', which outputs [('Hobart',), ('Warren',), ('Jarvis',), ('Delaney',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?' in SQLite? I currently have 'select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'', which outputs [('Jarvis',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each professional's first name and description of the treatment they have performed?' in SQLite? I currently have 'SELECT P.first_name, TT.treatment_type_description FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code', which outputs [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each professional's first name and description of the treatment they have performed?' in SQLite? I currently have 'SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code', which outputs [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of cars with a greater accelerate than the one with the most horsepower?' in SQLite? I currently have 'SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data))', which outputs [(39,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers that have more than one songs?' in SQLite? I currently have 'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING count(*) > 1', which outputs [('Christy Walton',), ('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which continent is Anguilla in?' in SQLite? I currently have 'SELECT Continent FROM country WHERE Name = 'Anguilla'', which outputs [('North America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of nations that speak both English and French.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'', which outputs [('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which Asian countries have a population that is larger than any country in Africa?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')', which outputs [('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \\\"Africa\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airlines are from USA?' in SQLite? I currently have 'SELECT COUNT(*) FROM airlines WHERE Country = 'USA'', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights', which outputs [(1200,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cartoons did each director create?' in SQLite? I currently have 'SELECT COUNT(*) ,  Directed_by FROM Cartoon GROUP BY Directed_by', which outputs [(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names for everybody enrolled in a Bachelors program?' in SQLite? I currently have 'SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first, middle, and last names for everybody enrolled in a Bachelors program?' in SQLite? I currently have 'SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'', which outputs [('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the states where both owners and professionals live.' in SQLite? I currently have 'SELECT state FROM Owners INTERSECT SELECT state FROM Professionals', which outputs [('Indiana',), ('Mississippi',), ('Wisconsin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of carsw ith over 6 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6', which outputs [(108,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of each continent and how many car makers are there in each one?' in SQLite? I currently have 'SELECT T1.Continent, COUNT(T3.Id)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  JOIN car_makers AS T3 ON T2.CountryId = T3.Country  GROUP BY T1.Continent', which outputs [('america', 4), ('asia', 7), ('europe', 11)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum capacity and the average of all stadiums ?' in SQLite? I currently have 'SELECT MAX(Capacity), AVG(Capacity) FROM stadium', which outputs [(52500, 10621.666666666666)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(capacity), average from stadium\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum capacity and the average of all stadiums ?' in SQLite? I currently have 'select max(capacity), average from stadium', which outputs [(52500, 730)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(capacity), average from stadium\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the semester when both Master students and Bachelor students got enrolled in.' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Master') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelor')', which outputs [('fall 2018',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the semester when both Master students and Bachelor students got enrolled in.' in SQLite? I currently have 'SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'', which outputs [(13,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many professionals have performed any treatment to dogs?' in SQLite? I currently have 'SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT professional_id) FROM Treatments\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries speak both English and Dutch?' in SQLite? I currently have 'SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T1', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the program id and the summary of the degree that has the most students enrolled?' in SQLite? I currently have 'SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name HAVING COUNT(*) = (     SELECT MAX(counted)     FROM (         SELECT COUNT(*) AS counted         FROM Student_Enrolment         GROUP BY degree_program_id     ) AS subquery )', which outputs [(9, 'Bachelor')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and number of templates for each.' in SQLite? I currently have 'SELECT T1.Template_Type_Code, count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code', which outputs [('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many total tours were there for each ranking date?' in SQLite? I currently have 'SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date', which outputs [(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30), (19901210, 30), (19901217, 30), (19901224, 30), (19901231, 30), (19910101, 29), (19910107, 30), (19910114, 30), (19910121, 30), (19910128, 30), (19910204, 30), (19910211, 30), (19910218, 30), (19910225, 30), (19910304, 30), (19910311, 29), (19910318, 29), (19910325, 29), (19910401, 29), (19910408, 29), (19910415, 29), (19910422, 29), (19910429, 29), (19910506, 29), (19910513, 29), (19910520, 29), (19910527, 29), (19910603, 29), (19910610, 29), (19910617, 29), (19910624, 29), (19910701, 29), (19910708, 30), (19910715, 29), (19910722, 29), (19910729, 29), (19910805, 29), (19910812, 29), (19910819, 29), (19910826, 30), (19910902, 30), (19910909, 30), (19910916, 30), (19910923, 30), (19910930, 30), (19911007, 31), (19911014, 31), (19911021, 31), (19911028, 31), (19911104, 44), (19911111, 44), (19911118, 44), (19911125, 44), (19911202, 31), (19911209, 44), (19911216, 45), (19911223, 45), (19911230, 45), (19920101, 44), (19920106, 45), (19920113, 45), (19920120, 45), (19920127, 45), (19920203, 45), (19920210, 29), (19920217, 45), (19920224, 45), (19920302, 45), (19920309, 45), (19920316, 45), (19920323, 45), (19920330, 45), (19920406, 45), (19920413, 45), (19920420, 45), (19920427, 45), (19920504, 45), (19920511, 45), (19920518, 45), (19920525, 45), (19920601, 45), (19920608, 45), (19920615, 45), (19920622, 45), (19920629, 45), (19920706, 45), (19920713, 46), (19920720, 46), (19920727, 45), (19920803, 73), (19920810, 73), (19920817, 73), (19920824, 119), (19920831, 90), (19920907, 90), (19920914, 90), (19920921, 90), (19920928, 90), (19921005, 62), (19921012, 62), (19921019, 62), (19921026, 62), (19921102, 62), (19921109, 62), (19921116, 62), (19921123, 62), (19921130, 62), (19921207, 62), (19921214, 62), (19921221, 62), (19921228, 45), (19930101, 44), (19930104, 45), (19930111, 45), (19930118, 45), (19930125, 45), (19930201, 45), (19930208, 32), (19930215, 45), (19930222, 45), (19930301, 45), (19930308, 45), (19930315, 45), (19930322, 45), (19930329, 45), (19930405, 45), (19930412, 62), (19930419, 62), (19930426, 62), (19930503, 62), (19930510, 62), (19930517, 44), (19930524, 44), (19930531, 44), (19930607, 44), (19930614, 44), (19930621, 44), (19930628, 44), (19930705, 62), (19930712, 62), (19930719, 62), (19930726, 62), (19930802, 43), (19930809, 43), (19930816, 43), (19930823, 43), (19930830, 43), (19930906, 43), (19930913, 43), (19930920, 76), (19930927, 75), (19931004, 58), (19931011, 58), (19931018, 58), (19931025, 58), (19931101, 58), (19931108, 58), (19931115, 75), (19931122, 75), (19931129, 75), (19931206, 75), (19931213, 75), (19931220, 75), (19931227, 75), (19940101, 73), (19940103, 75), (19940110, 75), (19940117, 75), (19940124, 75), (19940131, 62), (19940207, 63), (19940214, 63), (19940221, 63), (19940228, 62), (19940307, 62), (19940314, 62), (19940321, 62), (19940328, 61), (19940404, 62), (19940411, 61), (19940418, 44), (19940425, 57), (19940502, 57), (19940509, 57), (19940516, 57), (19940523, 57), (19940530, 57), (19940606, 65), (19940613, 65), (19940620, 65), (19940627, 65), (19940704, 67), (19940711, 67), (19940718, 60), (19940725, 60), (19940801, 60), (19940808, 60), (19940815, 60), (19940822, 60), (19940829, 60), (19940905, 60), (19940912, 68), (19940919, 68), (19940926, 69), (19941003, 69), (19941010, 69), (19941017, 69), (19941024, 59), (19941031, 59), (19941107, 69), (19941114, 69), (19941121, 69), (19941128, 69), (19941205, 69), (19941212, 69), (19941219, 69), (19941226, 69), (19950101, 69), (19950102, 69), (19950109, 69), (19950116, 69), (19950123, 69), (19950130, 69), (19950206, 69), (19950213, 69), (19950220, 69), (19950227, 69), (19950306, 69), (19950313, 69), (19950320, 69), (19950327, 69), (19950403, 69), (19950410, 69), (19950417, 69), (19950424, 69), (19950501, 69), (19950508, 69), (19950515, 69), (19950522, 69), (19950529, 69), (19950605, 69), (19950612, 96), (19950619, 96), (19950626, 96), (19950703, 96), (19950710, 97), (19950717, 118), (19950724, 118), (19950731, 118), (19950807, 118), (19950814, 118), (19950821, 131), (19950828, 131), (19950904, 131), (19950911, 131), (19950918, 131), (19950925, 131), (19951002, 131), (19951009, 131), (19951016, 131), (19951023, 131), (19951030, 131), (19951106, 131), (19951113, 138), (19951120, 138), (19951127, 138), (19951204, 138), (19951211, 138), (19951218, 138), (19951225, 138), (19960101, 138), (19960108, 125), (19960115, 125), (19960122, 125), (19960129, 125), (19960205, 125), (19960212, 125), (19960219, 125), (19960226, 147), (19960304, 147), (19960311, 147), (19960318, 147), (19960325, 147), (19960401, 147), (19960408, 147), (19960415, 147), (19960422, 147), (19960429, 147), (19960506, 147), (19960513, 147), (19960520, 147), (19960527, 147), (19960603, 147), (19960610, 147), (19960617, 147), (19960624, 147), (19960701, 147), (19960708, 171), (19960715, 171), (19960722, 171), (19960729, 171), (19960805, 171), (19960812, 171), (19960819, 171), (19960826, 171), (19960902, 171), (19960909, 194), (19960916, 172), (19960923, 172), (19960930, 172), (19961007, 172), (19961014, 175), (19961021, 175), (19961028, 191), (19961104, 191), (19961111, 213), (19961118, 213), (19961125, 213), (19961202, 213), (19961209, 213), (19961216, 213), (19961223, 185), (19961230, 185), (19970101, 185), (19970106, 185), (19970113, 185), (19970120, 185), (19970127, 209), (19970203, 209), (19970210, 209), (19970217, 209), (19970224, 223), (19970303, 223), (19970310, 223), (19970317, 223), (19970324, 223), (19970331, 223), (19970407, 223), (19970414, 225), (19970421, 225), (19970428, 225), (19970505, 225), (19970512, 225), (19970519, 225), (19970526, 225), (19970602, 225), (19970609, 225), (19970616, 225), (19970623, 225), (19970630, 225), (19970707, 164), (19970714, 257), (19970721, 257), (19970728, 257), (19970804, 273), (19970811, 273), (19970818, 273), (19970825, 273), (19970901, 273), (19970908, 273), (19970915, 273), (19970922, 273), (19970929, 273), (19971006, 273), (19971013, 299), (19971020, 314), (19971027, 314), (19971103, 337), (19971110, 337), (19971117, 363), (19971124, 363), (19971201, 363), (19971208, 394), (19971215, 394), (19971222, 394), (19971229, 394), (19980101, 394), (19980105, 394), (19980112, 394), (19980119, 394), (19980126, 394), (19980202, 394), (19980209, 394), (19980216, 394), (19980223, 394), (19980302, 394), (19980309, 394), (19980316, 394), (19980323, 394), (19980330, 426), (19980406, 426), (19980413, 459), (19980420, 459), (19980427, 459), (19980504, 459), (19980511, 459), (19980518, 459), (19980525, 459), (19980601, 459), (19980608, 543), (19980615, 569), (19980622, 590), (19980629, 590), (19980706, 633), (19980713, 633), (19980720, 633), (19980727, 634), (19980803, 634), (19980810, 634), (19980817, 631), (19980824, 631), (19980831, 660), (19980907, 660), (19980914, 663), (19980921, 663), (19980928, 683), (19981005, 688), (19981012, 688), (19981019, 696), (19981026, 693), (19981102, 693), (19981109, 692), (19981116, 692), (19981123, 692), (19981130, 709), (19981207, 703), (19981214, 703), (19981221, 703), (19981228, 703), (19990101, 703), (19990104, 722), (19990111, 722), (19990118, 722), (19990125, 722), (19990201, 728), (19990208, 723), (19990215, 723), (19990222, 723), (19990301, 723), (19990308, 723), (19990315, 728), (19990322, 728), (19990329, 728), (19990405, 728), (19990412, 728), (19990419, 728), (19990426, 752), (19990503, 761), (19990510, 761), (19990517, 777), (19990524, 777), (19990531, 777), (19990607, 804), (19990614, 804), (19990621, 804), (19990628, 804), (19990705, 804), (19990712, 829), (19990719, 829), (19990726, 829), (19990802, 829), (19990809, 870), (19990816, 873), (19990823, 853), (19990830, 861), (19990906, 861), (19990913, 879), (19990920, 879), (19990927, 899), (19991004, 927), (19991011, 941), (19991018, 964), (19991025, 941), (19991101, 941), (19991108, 941), (19991115, 941), (19991122, 941), (19991129, 966), (19991206, 966), (19991213, 989), (19991220, 989), (19991227, 989), (20000101, 989), (20000103, 989), (20000110, 989), (20000117, 989), (20000124, 989), (20000131, 1013), (20000207, 1038), (20000214, 1038), (20000221, 1038), (20000228, 1038), (20000306, 1065), (20000313, 1065), (20000320, 1065), (20000327, 1065), (20000403, 1065), (20000410, 1093), (20000417, 1093), (20000424, 1093), (20000501, 1122), (20000508, 1122), (20000515, 1106), (20000522, 1106), (20000529, 1106), (20000605, 1106), (20000612, 1160), (20000619, 1160), (20000626, 1188), (20000703, 1188), (20000710, 1204), (20000717, 1205), (20000724, 1212), (20000731, 1276), (20000807, 1276), (20000814, 1224), (20000821, 1224), (20000828, 1224), (20000904, 1224), (20000911, 1241), (20000918, 1265), (20000925, 1231), (20001002, 1223), (20001009, 1232), (20001016, 1253), (20001023, 1245), (20001030, 1247), (20001106, 1173), (20001113, 964), (20001120, 961), (20001127, 961), (20001204, 961), (20001211, 964), (20001218, 964), (20001225, 964), (20010101, 964), (20010108, 964), (20010115, 964), (20010122, 964), (20010129, 977), (20010205, 977), (20010212, 1004), (20010219, 1027), (20010226, 1027), (20010305, 1027), (20010312, 1027), (20010319, 1101), (20010326, 1101), (20010402, 914), (20010409, 930), (20010416, 952), (20010423, 961), (20010430, 988), (20010507, 1011), (20010514, 1011), (20010521, 1029), (20010528, 1067), (20010604, 1067), (20010611, 1094), (20010618, 1094), (20010625, 1073), (20010702, 1073), (20010709, 1113), (20010716, 1135), (20010723, 1149), (20010730, 1149), (20010806, 1175), (20010813, 1175), (20010820, 1175), (20010827, 1201), (20010903, 1201), (20010910, 1228), (20010917, 1231), (20010924, 1263), (20011001, 1287), (20011008, 1267), (20011015, 1288), (20011022, 1291), (20011029, 1312), (20011105, 1312), (20011112, 1412), (20011119, 1412), (20011126, 1437), (20011203, 1437), (20011210, 1437), (20011217, 1430), (20011224, 1430), (20011231, 1430), (20020101, 1430), (20020107, 1430), (20020114, 1430), (20020121, 1430), (20020128, 1430), (20020204, 1422), (20020211, 1422), (20020218, 1422), (20020225, 1424), (20020304, 1424), (20020311, 1424), (20020318, 1448), (20020325, 1448), (20020401, 1573), (20020408, 1574), (20020415, 1574), (20020422, 1574), (20020429, 1577), (20020506, 1730), (20020513, 1577), (20020520, 1577), (20020527, 1577), (20020603, 1577), (20020610, 1783), (20020617, 1803), (20020624, 1783), (20020701, 1783), (20020708, 1834), (20020715, 1835), (20020722, 1828), (20020729, 1853), (20020805, 1853), (20020812, 1925), (20020819, 1915), (20020826, 2111), (20020902, 2111), (20020909, 2451), (20020916, 2457), (20020923, 2462), (20020930, 2496), (20021007, 2526), (20021014, 2520), (20021021, 2505), (20021028, 2505), (20021104, 2498), (20021111, 2497), (20021118, 2497), (20021125, 2497), (20021202, 2497), (20021209, 2497), (20021216, 2497), (20021223, 2497), (20021230, 2497), (20030101, 2497), (20030106, 2497), (20030113, 2497), (20030120, 2497), (20030127, 2497), (20030203, 2517), (20030210, 2507), (20030217, 2490), (20030224, 2528), (20030303, 2549), (20030310, 2549), (20030317, 2571), (20030324, 2571), (20030331, 2614), (20030407, 2587), (20030414, 2587), (20030421, 2608), (20030428, 2719), (20030505, 2652), (20030512, 2671), (20030519, 2728), (20030526, 1860), (20030602, 2728), (20030609, 2753), (20030616, 2753), (20030623, 2731), (20030630, 2731), (20030707, 2730), (20030714, 2755), (20030721, 2759), (20030728, 2777), (20030804, 2732), (20030811, 2734), (20030818, 2755), (20030825, 2801), (20030901, 2801), (20030908, 2798), (20030915, 2847), (20030922, 2862), (20030929, 2930), (20031006, 2961), (20031013, 2966), (20031020, 3035), (20031027, 3020), (20031103, 3038), (20031110, 3052), (20031117, 3065), (20031124, 3092), (20031201, 3120), (20031208, 3190), (20031215, 3211), (20031222, 3211), (20031229, 3214), (20040101, 3214), (20040105, 3206), (20040112, 3206), (20040119, 3206), (20040126, 3206), (20040202, 3257), (20040209, 3265), (20040216, 3282), (20040223, 3282), (20040301, 3279), (20040308, 3286), (20040315, 3286), (20040322, 3286), (20040329, 3286), (20040405, 3277), (20040412, 3286), (20040419, 1489), (20040426, 3379), (20040503, 2613), (20040510, 1187), (20040517, 2361), (20040524, 2955), (20040531, 2535), (20040607, 3433), (20040614, 3456), (20040621, 3492), (20040628, 3492), (20040705, 3498), (20040712, 3516), (20040719, 3587), (20040726, 3592), (20040802, 3592), (20040809, 3645), (20040816, 3647), (20040823, 3661), (20040830, 3705), (20040906, 3705), (20040913, 3785), (20040920, 3831), (20040927, 3913), (20041004, 3957), (20041011, 3986), (20041018, 3987), (20041025, 3968), (20041101, 4011), (20041108, 4071), (20041115, 4124), (20041122, 4145), (20041129, 4147), (20041206, 4160), (20041213, 4160), (20041220, 4160), (20041227, 4160), (20050101, 4160), (20050103, 4160), (20050110, 4160), (20050117, 4160), (20050124, 4160), (20050131, 4198), (20050207, 4198), (20050214, 4211), (20050221, 4286), (20050228, 4286), (20050307, 4313), (20050314, 4313), (20050321, 4333), (20050328, 4333), (20050404, 4362), (20050411, 4371), (20050418, 4379), (20050425, 4379), (20050502, 4379), (20050509, 4470), (20050516, 4489), (20050523, 4522), (20050530, 4522), (20050606, 4682), (20050613, 4705), (20050620, 4727), (20050627, 4727), (20050704, 4792), (20050711, 4816), (20050718, 4847), (20050725, 4859), (20050801, 4926), (20050808, 4982), (20050815, 5020), (20050822, 5090), (20050829, 5100), (20050905, 5100), (20050912, 5187), (20050919, 5173), (20050926, 5175), (20051003, 5215), (20051010, 5249), (20051017, 5237), (20051024, 5257), (20051031, 5331), (20051107, 5362), (20051114, 5357), (20051121, 5391), (20051128, 5401), (20051205, 5452), (20051212, 5452), (20051219, 5452), (20051226, 5452), (20060101, 5452), (20060102, 5452), (20060109, 5452), (20060116, 5452), (20060123, 5452), (20060130, 5441), (20060206, 5425), (20060213, 5441), (20060220, 5478), (20060227, 5528), (20060306, 5548), (20060313, 5548), (20060320, 5559), (20060327, 5559), (20060403, 5626), (20060410, 5626), (20060417, 5644), (20060424, 5658), (20060501, 5656), (20060508, 5654), (20060515, 5683), (20060522, 5721), (20060529, 5798), (20060605, 5798), (20060612, 5862), (20060619, 5897), (20060626, 5944), (20060703, 5944), (20060710, 5983), (20060717, 6026), (20060724, 6065), (20060731, 6133), (20060807, 6151), (20060814, 6226), (20060821, 6289), (20060828, 6284), (20060904, 6284), (20060911, 6304), (20060918, 6347), (20060925, 6376), (20061002, 6436), (20061009, 6520), (20061016, 6629), (20061023, 6730), (20061030, 6808), (20061106, 6816), (20061113, 6807), (20061120, 6893), (20061127, 6896), (20061204, 6931), (20061211, 6953), (20061218, 6953), (20061225, 6953), (20070101, 6953), (20070108, 6926), (20070115, 6926), (20070122, 6926), (20070129, 6925), (20070205, 6925), (20070212, 6930), (20070219, 6942), (20070226, 6988), (20070305, 7017), (20070312, 7017), (20070319, 7058), (20070326, 7058), (20070402, 7139), (20070409, 7175), (20070416, 7197), (20070423, 7197), (20070430, 7197), (20070507, 7233), (20070514, 7317), (20070521, 7341), (20070528, 7365), (20070604, 7365), (20070611, 7448), (20070618, 7448), (20070625, 7473), (20070702, 7473), (20070709, 7495), (20070716, 7478), (20070723, 7470), (20070730, 7528), (20070806, 7522), (20070813, 7527), (20070820, 7503), (20070827, 7504), (20070903, 7504), (20070910, 7602), (20070917, 7643), (20070924, 7686), (20071001, 7697), (20071008, 7707), (20071015, 7687), (20071022, 7638), (20071029, 7711), (20071105, 7677), (20071112, 7664), (20071119, 7666), (20071126, 7674), (20071203, 7650), (20071210, 7659), (20071217, 7659), (20071224, 7682), (20071231, 7682), (20080101, 7682), (20080107, 7682), (20080114, 7711), (20080121, 7711), (20080128, 7691), (20080204, 7716), (20080211, 7743), (20080218, 7742), (20080225, 7731), (20080303, 7761), (20080310, 7790), (20080317, 7790), (20080324, 7832), (20080331, 7832), (20080407, 7873), (20080414, 7889), (20080421, 7917), (20080428, 7917), (20080505, 7929), (20080512, 8002), (20080519, 8022), (20080526, 8090), (20080602, 8090), (20080609, 8030), (20080616, 7970), (20080623, 7966), (20080630, 7966), (20080707, 8089), (20080714, 8113), (20080721, 8235), (20080728, 8280), (20080804, 8325), (20080811, 8372), (20080818, 8387), (20080825, 8417), (20080901, 8417), (20080908, 8527), (20080915, 8639), (20080922, 8690), (20080929, 8731), (20081006, 8762), (20081013, 8794), (20081020, 8836), (20081027, 8898), (20081103, 8956), (20081110, 8996), (20081117, 9003), (20081124, 9019), (20081201, 9050), (20081208, 9076), (20081215, 9077), (20081222, 9070), (20081229, 9070), (20090101, 9070), (20090105, 9064), (20090112, 9064), (20090119, 9064), (20090126, 9064), (20090202, 9087), (20090209, 9087), (20090216, 9059), (20090223, 9063), (20090302, 9063), (20090309, 9053), (20090316, 9053), (20090323, 9057), (20090330, 9057), (20090406, 9066), (20090413, 9121), (20090420, 9110), (20090427, 9111), (20090504, 9094), (20090511, 9143), (20090518, 9140), (20090525, 9153), (20090601, 9153), (20090608, 9203), (20090615, 9239), (20090622, 9255), (20090629, 9255), (20090706, 9310), (20090713, 9376), (20090720, 9474), (20090727, 9589), (20090803, 9611), (20090810, 9598), (20090817, 9642), (20090824, 9682), (20090831, 9682), (20090907, 9682), (20090914, 9808), (20090921, 9856), (20090928, 9918), (20091005, 9929), (20091012, 9925), (20091019, 10003), (20091026, 10025), (20091102, 10061), (20091109, 10116), (20091116, 10137), (20091123, 10204), (20091130, 10238), (20091207, 10221), (20091214, 10272), (20091221, 10272), (20091228, 10318), (20100101, 10318), (20100104, 10318), (20100111, 10320), (20100118, 10329), (20100125, 10329), (20100201, 10373), (20100208, 10372), (20100215, 10389), (20100222, 10404), (20100301, 10430), (20100308, 10442), (20100315, 10442), (20100322, 10412), (20100329, 10412), (20100405, 10481), (20100412, 10515), (20100419, 10543), (20100426, 10580), (20100503, 10590), (20100510, 10576), (20100517, 10593), (20100524, 10634), (20100531, 10634), (20100607, 10613), (20100614, 10630), (20100621, 10634), (20100628, 10634), (20100705, 10685), (20100712, 10726), (20100719, 10756), (20100726, 10817), (20100802, 10835), (20100809, 10937), (20100816, 10999), (20100823, 11026), (20100830, 11125), (20100906, 11125), (20100913, 11256), (20100920, 11290), (20100927, 11339), (20101004, 11460), (20101011, 11566), (20101018, 11594), (20101025, 11617), (20101101, 11687), (20101108, 11735), (20101115, 11814), (20101122, 11845), (20101129, 11877), (20101206, 11888), (20101213, 11907), (20101220, 11913), (20101227, 11904), (20110101, 11904), (20110103, 12060), (20110110, 12067), (20110117, 12094), (20110124, 12094), (20110131, 12143), (20110207, 12181), (20110214, 12204), (20110221, 12201), (20110228, 12254), (20110307, 12267), (20110314, 12267), (20110321, 12303), (20110328, 12303), (20110404, 12343), (20110411, 12398), (20110418, 12434), (20110425, 12422), (20110502, 12438), (20110509, 12482), (20110516, 12467), (20110523, 12522), (20110530, 12522), (20110606, 12659), (20110613, 12682), (20110620, 12686), (20110627, 12686), (20110704, 12867), (20110711, 12895), (20110718, 12927), (20110725, 13006), (20110801, 12999), (20110808, 13081), (20110815, 13129), (20110822, 13140), (20110829, 13174), (20110905, 13174), (20110912, 13299), (20110919, 13342), (20110926, 13382), (20111003, 13372), (20111010, 13382), (20111017, 13411), (20111024, 13443), (20111031, 13465), (20111107, 13443), (20111114, 13482), (20111121, 13518), (20111128, 13517), (20111205, 13542), (20111212, 13536), (20111219, 13565), (20111226, 13603), (20120101, 13603), (20120102, 13610), (20120109, 13628), (20120116, 13618), (20120123, 13618), (20120130, 13667), (20120206, 13666), (20120213, 13674), (20120220, 13719), (20120227, 13788), (20120305, 13791), (20120312, 13791), (20120319, 13818), (20120326, 13818), (20120402, 13881), (20120409, 13902), (20120416, 13938), (20120423, 13964), (20120430, 13983), (20120507, 14016), (20120514, 14015), (20120521, 14034), (20120528, 14087), (20120604, 14087), (20120611, 14072), (20120618, 14138), (20120625, 14172), (20120702, 14172), (20120709, 14180), (20120716, 14223), (20120723, 14250), (20120730, 14264), (20120806, 14286), (20120813, 14331), (20120820, 14361), (20120827, 14389), (20120903, 14389), (20120910, 14389), (20120917, 14402), (20120924, 14438), (20121001, 14472), (20121008, 14480), (20121015, 14513), (20121022, 14525), (20121029, 14547), (20121105, 14585), (20121112, 14621), (20121119, 14624), (20121126, 14612), (20121203, 14610), (20121210, 14639), (20121217, 14633), (20121224, 14649), (20121231, 13949), (20130101, 14648), (20130107, 13966), (20130114, 14667), (20130121, 14667), (20130128, 14667), (20130204, 14652), (20130211, 14651), (20130218, 14649), (20130225, 14554), (20130304, 14695), (20130311, 14727), (20130318, 13048), (20130401, 6790), (20130408, 14591), (20130415, 14449), (20130422, 14451), (20130429, 14462), (20130506, 14487), (20130513, 14516), (20130520, 14531), (20130527, 14545), (20130603, 14545), (20130610, 14553), (20130617, 14569), (20130624, 14650), (20130708, 14651), (20130715, 14689), (20130722, 14751), (20130729, 14766), (20130805, 14679), (20130812, 14599), (20130819, 14740), (20130826, 14714), (20130902, 14796), (20130909, 14820), (20130916, 14866), (20130923, 14878), (20130930, 14885), (20131007, 15028), (20131014, 15072), (20131021, 15025), (20131028, 15071), (20131104, 15098), (20131111, 15101), (20131118, 15151), (20131125, 15337), (20131202, 15334), (20131209, 15512), (20131216, 15540), (20131223, 15701), (20131230, 15708), (20140106, 15703), (20140113, 15637), (20140120, 8585), (20140127, 15646), (20140203, 15632), (20140210, 15637), (20140217, 8565), (20140224, 15659), (20150302, 15557), (20150406, 15578), (20150413, 15545), (20150420, 15568), (20150427, 15475), (20150511, 15710), (20150518, 15623), (20150525, 15741), (20150608, 15741), (20150622, 15810), (20150803, 15761), (20150810, 15776), (20150824, 15908), (20150831, 16184), (20150914, 15832), (20150921, 15800), (20151005, 16178), (20151012, 16191), (20151019, 16138), (20151102, 16293), (20160111, 4812), (20160118, 16518), (20160201, 16629), (20160208, 16586), (20160215, 16529), (20160222, 16454), (20160229, 16515), (20160307, 16517), (20160411, 16446), (20160418, 16454), (20160425, 16489), (20160502, 16388), (20160509, 16374), (20160523, 16351), (20160606, 16361), (20160620, 16314), (20160627, 16293), (20160815, 16325), (20160919, 16316), (20160926, 16305), (20161010, 16233), (20161031, 16349), (20161107, 16364), (20161114, 16249), (20161121, 16345), (20161128, 16294), (20161205, 16336), (20161212, 16387), (20170102, 16372), (20170109, 16406), (20170116, 16379), (20170213, 16305), (20170220, 16207), (20170306, 16111), (20170320, 16230), (20170417, 16270), (20170424, 16226), (20170501, 16303), (20170508, 16124), (20170515, 16204), (20170522, 16290), (20170529, 16649), (20170612, 16157), (20170619, 16189), (20170626, 16184), (20170703, 16597), (20170717, 15983), (20170724, 16138), (20170731, 16145), (20170807, 16147), (20170814, 16268), (20170821, 16279), (20170828, 16301), (20170911, 16161)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many total tours were there for each ranking date?' in SQLite? I currently have 'SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date', which outputs [(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203), (30, 19901210), (30, 19901217), (30, 19901224), (30, 19901231), (29, 19910101), (30, 19910107), (30, 19910114), (30, 19910121), (30, 19910128), (30, 19910204), (30, 19910211), (30, 19910218), (30, 19910225), (30, 19910304), (29, 19910311), (29, 19910318), (29, 19910325), (29, 19910401), (29, 19910408), (29, 19910415), (29, 19910422), (29, 19910429), (29, 19910506), (29, 19910513), (29, 19910520), (29, 19910527), (29, 19910603), (29, 19910610), (29, 19910617), (29, 19910624), (29, 19910701), (30, 19910708), (29, 19910715), (29, 19910722), (29, 19910729), (29, 19910805), (29, 19910812), (29, 19910819), (30, 19910826), (30, 19910902), (30, 19910909), (30, 19910916), (30, 19910923), (30, 19910930), (31, 19911007), (31, 19911014), (31, 19911021), (31, 19911028), (44, 19911104), (44, 19911111), (44, 19911118), (44, 19911125), (31, 19911202), (44, 19911209), (45, 19911216), (45, 19911223), (45, 19911230), (44, 19920101), (45, 19920106), (45, 19920113), (45, 19920120), (45, 19920127), (45, 19920203), (29, 19920210), (45, 19920217), (45, 19920224), (45, 19920302), (45, 19920309), (45, 19920316), (45, 19920323), (45, 19920330), (45, 19920406), (45, 19920413), (45, 19920420), (45, 19920427), (45, 19920504), (45, 19920511), (45, 19920518), (45, 19920525), (45, 19920601), (45, 19920608), (45, 19920615), (45, 19920622), (45, 19920629), (45, 19920706), (46, 19920713), (46, 19920720), (45, 19920727), (73, 19920803), (73, 19920810), (73, 19920817), (119, 19920824), (90, 19920831), (90, 19920907), (90, 19920914), (90, 19920921), (90, 19920928), (62, 19921005), (62, 19921012), (62, 19921019), (62, 19921026), (62, 19921102), (62, 19921109), (62, 19921116), (62, 19921123), (62, 19921130), (62, 19921207), (62, 19921214), (62, 19921221), (45, 19921228), (44, 19930101), (45, 19930104), (45, 19930111), (45, 19930118), (45, 19930125), (45, 19930201), (32, 19930208), (45, 19930215), (45, 19930222), (45, 19930301), (45, 19930308), (45, 19930315), (45, 19930322), (45, 19930329), (45, 19930405), (62, 19930412), (62, 19930419), (62, 19930426), (62, 19930503), (62, 19930510), (44, 19930517), (44, 19930524), (44, 19930531), (44, 19930607), (44, 19930614), (44, 19930621), (44, 19930628), (62, 19930705), (62, 19930712), (62, 19930719), (62, 19930726), (43, 19930802), (43, 19930809), (43, 19930816), (43, 19930823), (43, 19930830), (43, 19930906), (43, 19930913), (76, 19930920), (75, 19930927), (58, 19931004), (58, 19931011), (58, 19931018), (58, 19931025), (58, 19931101), (58, 19931108), (75, 19931115), (75, 19931122), (75, 19931129), (75, 19931206), (75, 19931213), (75, 19931220), (75, 19931227), (73, 19940101), (75, 19940103), (75, 19940110), (75, 19940117), (75, 19940124), (62, 19940131), (63, 19940207), (63, 19940214), (63, 19940221), (62, 19940228), (62, 19940307), (62, 19940314), (62, 19940321), (61, 19940328), (62, 19940404), (61, 19940411), (44, 19940418), (57, 19940425), (57, 19940502), (57, 19940509), (57, 19940516), (57, 19940523), (57, 19940530), (65, 19940606), (65, 19940613), (65, 19940620), (65, 19940627), (67, 19940704), (67, 19940711), (60, 19940718), (60, 19940725), (60, 19940801), (60, 19940808), (60, 19940815), (60, 19940822), (60, 19940829), (60, 19940905), (68, 19940912), (68, 19940919), (69, 19940926), (69, 19941003), (69, 19941010), (69, 19941017), (59, 19941024), (59, 19941031), (69, 19941107), (69, 19941114), (69, 19941121), (69, 19941128), (69, 19941205), (69, 19941212), (69, 19941219), (69, 19941226), (69, 19950101), (69, 19950102), (69, 19950109), (69, 19950116), (69, 19950123), (69, 19950130), (69, 19950206), (69, 19950213), (69, 19950220), (69, 19950227), (69, 19950306), (69, 19950313), (69, 19950320), (69, 19950327), (69, 19950403), (69, 19950410), (69, 19950417), (69, 19950424), (69, 19950501), (69, 19950508), (69, 19950515), (69, 19950522), (69, 19950529), (69, 19950605), (96, 19950612), (96, 19950619), (96, 19950626), (96, 19950703), (97, 19950710), (118, 19950717), (118, 19950724), (118, 19950731), (118, 19950807), (118, 19950814), (131, 19950821), (131, 19950828), (131, 19950904), (131, 19950911), (131, 19950918), (131, 19950925), (131, 19951002), (131, 19951009), (131, 19951016), (131, 19951023), (131, 19951030), (131, 19951106), (138, 19951113), (138, 19951120), (138, 19951127), (138, 19951204), (138, 19951211), (138, 19951218), (138, 19951225), (138, 19960101), (125, 19960108), (125, 19960115), (125, 19960122), (125, 19960129), (125, 19960205), (125, 19960212), (125, 19960219), (147, 19960226), (147, 19960304), (147, 19960311), (147, 19960318), (147, 19960325), (147, 19960401), (147, 19960408), (147, 19960415), (147, 19960422), (147, 19960429), (147, 19960506), (147, 19960513), (147, 19960520), (147, 19960527), (147, 19960603), (147, 19960610), (147, 19960617), (147, 19960624), (147, 19960701), (171, 19960708), (171, 19960715), (171, 19960722), (171, 19960729), (171, 19960805), (171, 19960812), (171, 19960819), (171, 19960826), (171, 19960902), (194, 19960909), (172, 19960916), (172, 19960923), (172, 19960930), (172, 19961007), (175, 19961014), (175, 19961021), (191, 19961028), (191, 19961104), (213, 19961111), (213, 19961118), (213, 19961125), (213, 19961202), (213, 19961209), (213, 19961216), (185, 19961223), (185, 19961230), (185, 19970101), (185, 19970106), (185, 19970113), (185, 19970120), (209, 19970127), (209, 19970203), (209, 19970210), (209, 19970217), (223, 19970224), (223, 19970303), (223, 19970310), (223, 19970317), (223, 19970324), (223, 19970331), (223, 19970407), (225, 19970414), (225, 19970421), (225, 19970428), (225, 19970505), (225, 19970512), (225, 19970519), (225, 19970526), (225, 19970602), (225, 19970609), (225, 19970616), (225, 19970623), (225, 19970630), (164, 19970707), (257, 19970714), (257, 19970721), (257, 19970728), (273, 19970804), (273, 19970811), (273, 19970818), (273, 19970825), (273, 19970901), (273, 19970908), (273, 19970915), (273, 19970922), (273, 19970929), (273, 19971006), (299, 19971013), (314, 19971020), (314, 19971027), (337, 19971103), (337, 19971110), (363, 19971117), (363, 19971124), (363, 19971201), (394, 19971208), (394, 19971215), (394, 19971222), (394, 19971229), (394, 19980101), (394, 19980105), (394, 19980112), (394, 19980119), (394, 19980126), (394, 19980202), (394, 19980209), (394, 19980216), (394, 19980223), (394, 19980302), (394, 19980309), (394, 19980316), (394, 19980323), (426, 19980330), (426, 19980406), (459, 19980413), (459, 19980420), (459, 19980427), (459, 19980504), (459, 19980511), (459, 19980518), (459, 19980525), (459, 19980601), (543, 19980608), (569, 19980615), (590, 19980622), (590, 19980629), (633, 19980706), (633, 19980713), (633, 19980720), (634, 19980727), (634, 19980803), (634, 19980810), (631, 19980817), (631, 19980824), (660, 19980831), (660, 19980907), (663, 19980914), (663, 19980921), (683, 19980928), (688, 19981005), (688, 19981012), (696, 19981019), (693, 19981026), (693, 19981102), (692, 19981109), (692, 19981116), (692, 19981123), (709, 19981130), (703, 19981207), (703, 19981214), (703, 19981221), (703, 19981228), (703, 19990101), (722, 19990104), (722, 19990111), (722, 19990118), (722, 19990125), (728, 19990201), (723, 19990208), (723, 19990215), (723, 19990222), (723, 19990301), (723, 19990308), (728, 19990315), (728, 19990322), (728, 19990329), (728, 19990405), (728, 19990412), (728, 19990419), (752, 19990426), (761, 19990503), (761, 19990510), (777, 19990517), (777, 19990524), (777, 19990531), (804, 19990607), (804, 19990614), (804, 19990621), (804, 19990628), (804, 19990705), (829, 19990712), (829, 19990719), (829, 19990726), (829, 19990802), (870, 19990809), (873, 19990816), (853, 19990823), (861, 19990830), (861, 19990906), (879, 19990913), (879, 19990920), (899, 19990927), (927, 19991004), (941, 19991011), (964, 19991018), (941, 19991025), (941, 19991101), (941, 19991108), (941, 19991115), (941, 19991122), (966, 19991129), (966, 19991206), (989, 19991213), (989, 19991220), (989, 19991227), (989, 20000101), (989, 20000103), (989, 20000110), (989, 20000117), (989, 20000124), (1013, 20000131), (1038, 20000207), (1038, 20000214), (1038, 20000221), (1038, 20000228), (1065, 20000306), (1065, 20000313), (1065, 20000320), (1065, 20000327), (1065, 20000403), (1093, 20000410), (1093, 20000417), (1093, 20000424), (1122, 20000501), (1122, 20000508), (1106, 20000515), (1106, 20000522), (1106, 20000529), (1106, 20000605), (1160, 20000612), (1160, 20000619), (1188, 20000626), (1188, 20000703), (1204, 20000710), (1205, 20000717), (1212, 20000724), (1276, 20000731), (1276, 20000807), (1224, 20000814), (1224, 20000821), (1224, 20000828), (1224, 20000904), (1241, 20000911), (1265, 20000918), (1231, 20000925), (1223, 20001002), (1232, 20001009), (1253, 20001016), (1245, 20001023), (1247, 20001030), (1173, 20001106), (964, 20001113), (961, 20001120), (961, 20001127), (961, 20001204), (964, 20001211), (964, 20001218), (964, 20001225), (964, 20010101), (964, 20010108), (964, 20010115), (964, 20010122), (977, 20010129), (977, 20010205), (1004, 20010212), (1027, 20010219), (1027, 20010226), (1027, 20010305), (1027, 20010312), (1101, 20010319), (1101, 20010326), (914, 20010402), (930, 20010409), (952, 20010416), (961, 20010423), (988, 20010430), (1011, 20010507), (1011, 20010514), (1029, 20010521), (1067, 20010528), (1067, 20010604), (1094, 20010611), (1094, 20010618), (1073, 20010625), (1073, 20010702), (1113, 20010709), (1135, 20010716), (1149, 20010723), (1149, 20010730), (1175, 20010806), (1175, 20010813), (1175, 20010820), (1201, 20010827), (1201, 20010903), (1228, 20010910), (1231, 20010917), (1263, 20010924), (1287, 20011001), (1267, 20011008), (1288, 20011015), (1291, 20011022), (1312, 20011029), (1312, 20011105), (1412, 20011112), (1412, 20011119), (1437, 20011126), (1437, 20011203), (1437, 20011210), (1430, 20011217), (1430, 20011224), (1430, 20011231), (1430, 20020101), (1430, 20020107), (1430, 20020114), (1430, 20020121), (1430, 20020128), (1422, 20020204), (1422, 20020211), (1422, 20020218), (1424, 20020225), (1424, 20020304), (1424, 20020311), (1448, 20020318), (1448, 20020325), (1573, 20020401), (1574, 20020408), (1574, 20020415), (1574, 20020422), (1577, 20020429), (1730, 20020506), (1577, 20020513), (1577, 20020520), (1577, 20020527), (1577, 20020603), (1783, 20020610), (1803, 20020617), (1783, 20020624), (1783, 20020701), (1834, 20020708), (1835, 20020715), (1828, 20020722), (1853, 20020729), (1853, 20020805), (1925, 20020812), (1915, 20020819), (2111, 20020826), (2111, 20020902), (2451, 20020909), (2457, 20020916), (2462, 20020923), (2496, 20020930), (2526, 20021007), (2520, 20021014), (2505, 20021021), (2505, 20021028), (2498, 20021104), (2497, 20021111), (2497, 20021118), (2497, 20021125), (2497, 20021202), (2497, 20021209), (2497, 20021216), (2497, 20021223), (2497, 20021230), (2497, 20030101), (2497, 20030106), (2497, 20030113), (2497, 20030120), (2497, 20030127), (2517, 20030203), (2507, 20030210), (2490, 20030217), (2528, 20030224), (2549, 20030303), (2549, 20030310), (2571, 20030317), (2571, 20030324), (2614, 20030331), (2587, 20030407), (2587, 20030414), (2608, 20030421), (2719, 20030428), (2652, 20030505), (2671, 20030512), (2728, 20030519), (1860, 20030526), (2728, 20030602), (2753, 20030609), (2753, 20030616), (2731, 20030623), (2731, 20030630), (2730, 20030707), (2755, 20030714), (2759, 20030721), (2777, 20030728), (2732, 20030804), (2734, 20030811), (2755, 20030818), (2801, 20030825), (2801, 20030901), (2798, 20030908), (2847, 20030915), (2862, 20030922), (2930, 20030929), (2961, 20031006), (2966, 20031013), (3035, 20031020), (3020, 20031027), (3038, 20031103), (3052, 20031110), (3065, 20031117), (3092, 20031124), (3120, 20031201), (3190, 20031208), (3211, 20031215), (3211, 20031222), (3214, 20031229), (3214, 20040101), (3206, 20040105), (3206, 20040112), (3206, 20040119), (3206, 20040126), (3257, 20040202), (3265, 20040209), (3282, 20040216), (3282, 20040223), (3279, 20040301), (3286, 20040308), (3286, 20040315), (3286, 20040322), (3286, 20040329), (3277, 20040405), (3286, 20040412), (1489, 20040419), (3379, 20040426), (2613, 20040503), (1187, 20040510), (2361, 20040517), (2955, 20040524), (2535, 20040531), (3433, 20040607), (3456, 20040614), (3492, 20040621), (3492, 20040628), (3498, 20040705), (3516, 20040712), (3587, 20040719), (3592, 20040726), (3592, 20040802), (3645, 20040809), (3647, 20040816), (3661, 20040823), (3705, 20040830), (3705, 20040906), (3785, 20040913), (3831, 20040920), (3913, 20040927), (3957, 20041004), (3986, 20041011), (3987, 20041018), (3968, 20041025), (4011, 20041101), (4071, 20041108), (4124, 20041115), (4145, 20041122), (4147, 20041129), (4160, 20041206), (4160, 20041213), (4160, 20041220), (4160, 20041227), (4160, 20050101), (4160, 20050103), (4160, 20050110), (4160, 20050117), (4160, 20050124), (4198, 20050131), (4198, 20050207), (4211, 20050214), (4286, 20050221), (4286, 20050228), (4313, 20050307), (4313, 20050314), (4333, 20050321), (4333, 20050328), (4362, 20050404), (4371, 20050411), (4379, 20050418), (4379, 20050425), (4379, 20050502), (4470, 20050509), (4489, 20050516), (4522, 20050523), (4522, 20050530), (4682, 20050606), (4705, 20050613), (4727, 20050620), (4727, 20050627), (4792, 20050704), (4816, 20050711), (4847, 20050718), (4859, 20050725), (4926, 20050801), (4982, 20050808), (5020, 20050815), (5090, 20050822), (5100, 20050829), (5100, 20050905), (5187, 20050912), (5173, 20050919), (5175, 20050926), (5215, 20051003), (5249, 20051010), (5237, 20051017), (5257, 20051024), (5331, 20051031), (5362, 20051107), (5357, 20051114), (5391, 20051121), (5401, 20051128), (5452, 20051205), (5452, 20051212), (5452, 20051219), (5452, 20051226), (5452, 20060101), (5452, 20060102), (5452, 20060109), (5452, 20060116), (5452, 20060123), (5441, 20060130), (5425, 20060206), (5441, 20060213), (5478, 20060220), (5528, 20060227), (5548, 20060306), (5548, 20060313), (5559, 20060320), (5559, 20060327), (5626, 20060403), (5626, 20060410), (5644, 20060417), (5658, 20060424), (5656, 20060501), (5654, 20060508), (5683, 20060515), (5721, 20060522), (5798, 20060529), (5798, 20060605), (5862, 20060612), (5897, 20060619), (5944, 20060626), (5944, 20060703), (5983, 20060710), (6026, 20060717), (6065, 20060724), (6133, 20060731), (6151, 20060807), (6226, 20060814), (6289, 20060821), (6284, 20060828), (6284, 20060904), (6304, 20060911), (6347, 20060918), (6376, 20060925), (6436, 20061002), (6520, 20061009), (6629, 20061016), (6730, 20061023), (6808, 20061030), (6816, 20061106), (6807, 20061113), (6893, 20061120), (6896, 20061127), (6931, 20061204), (6953, 20061211), (6953, 20061218), (6953, 20061225), (6953, 20070101), (6926, 20070108), (6926, 20070115), (6926, 20070122), (6925, 20070129), (6925, 20070205), (6930, 20070212), (6942, 20070219), (6988, 20070226), (7017, 20070305), (7017, 20070312), (7058, 20070319), (7058, 20070326), (7139, 20070402), (7175, 20070409), (7197, 20070416), (7197, 20070423), (7197, 20070430), (7233, 20070507), (7317, 20070514), (7341, 20070521), (7365, 20070528), (7365, 20070604), (7448, 20070611), (7448, 20070618), (7473, 20070625), (7473, 20070702), (7495, 20070709), (7478, 20070716), (7470, 20070723), (7528, 20070730), (7522, 20070806), (7527, 20070813), (7503, 20070820), (7504, 20070827), (7504, 20070903), (7602, 20070910), (7643, 20070917), (7686, 20070924), (7697, 20071001), (7707, 20071008), (7687, 20071015), (7638, 20071022), (7711, 20071029), (7677, 20071105), (7664, 20071112), (7666, 20071119), (7674, 20071126), (7650, 20071203), (7659, 20071210), (7659, 20071217), (7682, 20071224), (7682, 20071231), (7682, 20080101), (7682, 20080107), (7711, 20080114), (7711, 20080121), (7691, 20080128), (7716, 20080204), (7743, 20080211), (7742, 20080218), (7731, 20080225), (7761, 20080303), (7790, 20080310), (7790, 20080317), (7832, 20080324), (7832, 20080331), (7873, 20080407), (7889, 20080414), (7917, 20080421), (7917, 20080428), (7929, 20080505), (8002, 20080512), (8022, 20080519), (8090, 20080526), (8090, 20080602), (8030, 20080609), (7970, 20080616), (7966, 20080623), (7966, 20080630), (8089, 20080707), (8113, 20080714), (8235, 20080721), (8280, 20080728), (8325, 20080804), (8372, 20080811), (8387, 20080818), (8417, 20080825), (8417, 20080901), (8527, 20080908), (8639, 20080915), (8690, 20080922), (8731, 20080929), (8762, 20081006), (8794, 20081013), (8836, 20081020), (8898, 20081027), (8956, 20081103), (8996, 20081110), (9003, 20081117), (9019, 20081124), (9050, 20081201), (9076, 20081208), (9077, 20081215), (9070, 20081222), (9070, 20081229), (9070, 20090101), (9064, 20090105), (9064, 20090112), (9064, 20090119), (9064, 20090126), (9087, 20090202), (9087, 20090209), (9059, 20090216), (9063, 20090223), (9063, 20090302), (9053, 20090309), (9053, 20090316), (9057, 20090323), (9057, 20090330), (9066, 20090406), (9121, 20090413), (9110, 20090420), (9111, 20090427), (9094, 20090504), (9143, 20090511), (9140, 20090518), (9153, 20090525), (9153, 20090601), (9203, 20090608), (9239, 20090615), (9255, 20090622), (9255, 20090629), (9310, 20090706), (9376, 20090713), (9474, 20090720), (9589, 20090727), (9611, 20090803), (9598, 20090810), (9642, 20090817), (9682, 20090824), (9682, 20090831), (9682, 20090907), (9808, 20090914), (9856, 20090921), (9918, 20090928), (9929, 20091005), (9925, 20091012), (10003, 20091019), (10025, 20091026), (10061, 20091102), (10116, 20091109), (10137, 20091116), (10204, 20091123), (10238, 20091130), (10221, 20091207), (10272, 20091214), (10272, 20091221), (10318, 20091228), (10318, 20100101), (10318, 20100104), (10320, 20100111), (10329, 20100118), (10329, 20100125), (10373, 20100201), (10372, 20100208), (10389, 20100215), (10404, 20100222), (10430, 20100301), (10442, 20100308), (10442, 20100315), (10412, 20100322), (10412, 20100329), (10481, 20100405), (10515, 20100412), (10543, 20100419), (10580, 20100426), (10590, 20100503), (10576, 20100510), (10593, 20100517), (10634, 20100524), (10634, 20100531), (10613, 20100607), (10630, 20100614), (10634, 20100621), (10634, 20100628), (10685, 20100705), (10726, 20100712), (10756, 20100719), (10817, 20100726), (10835, 20100802), (10937, 20100809), (10999, 20100816), (11026, 20100823), (11125, 20100830), (11125, 20100906), (11256, 20100913), (11290, 20100920), (11339, 20100927), (11460, 20101004), (11566, 20101011), (11594, 20101018), (11617, 20101025), (11687, 20101101), (11735, 20101108), (11814, 20101115), (11845, 20101122), (11877, 20101129), (11888, 20101206), (11907, 20101213), (11913, 20101220), (11904, 20101227), (11904, 20110101), (12060, 20110103), (12067, 20110110), (12094, 20110117), (12094, 20110124), (12143, 20110131), (12181, 20110207), (12204, 20110214), (12201, 20110221), (12254, 20110228), (12267, 20110307), (12267, 20110314), (12303, 20110321), (12303, 20110328), (12343, 20110404), (12398, 20110411), (12434, 20110418), (12422, 20110425), (12438, 20110502), (12482, 20110509), (12467, 20110516), (12522, 20110523), (12522, 20110530), (12659, 20110606), (12682, 20110613), (12686, 20110620), (12686, 20110627), (12867, 20110704), (12895, 20110711), (12927, 20110718), (13006, 20110725), (12999, 20110801), (13081, 20110808), (13129, 20110815), (13140, 20110822), (13174, 20110829), (13174, 20110905), (13299, 20110912), (13342, 20110919), (13382, 20110926), (13372, 20111003), (13382, 20111010), (13411, 20111017), (13443, 20111024), (13465, 20111031), (13443, 20111107), (13482, 20111114), (13518, 20111121), (13517, 20111128), (13542, 20111205), (13536, 20111212), (13565, 20111219), (13603, 20111226), (13603, 20120101), (13610, 20120102), (13628, 20120109), (13618, 20120116), (13618, 20120123), (13667, 20120130), (13666, 20120206), (13674, 20120213), (13719, 20120220), (13788, 20120227), (13791, 20120305), (13791, 20120312), (13818, 20120319), (13818, 20120326), (13881, 20120402), (13902, 20120409), (13938, 20120416), (13964, 20120423), (13983, 20120430), (14016, 20120507), (14015, 20120514), (14034, 20120521), (14087, 20120528), (14087, 20120604), (14072, 20120611), (14138, 20120618), (14172, 20120625), (14172, 20120702), (14180, 20120709), (14223, 20120716), (14250, 20120723), (14264, 20120730), (14286, 20120806), (14331, 20120813), (14361, 20120820), (14389, 20120827), (14389, 20120903), (14389, 20120910), (14402, 20120917), (14438, 20120924), (14472, 20121001), (14480, 20121008), (14513, 20121015), (14525, 20121022), (14547, 20121029), (14585, 20121105), (14621, 20121112), (14624, 20121119), (14612, 20121126), (14610, 20121203), (14639, 20121210), (14633, 20121217), (14649, 20121224), (13949, 20121231), (14648, 20130101), (13966, 20130107), (14667, 20130114), (14667, 20130121), (14667, 20130128), (14652, 20130204), (14651, 20130211), (14649, 20130218), (14554, 20130225), (14695, 20130304), (14727, 20130311), (13048, 20130318), (6790, 20130401), (14591, 20130408), (14449, 20130415), (14451, 20130422), (14462, 20130429), (14487, 20130506), (14516, 20130513), (14531, 20130520), (14545, 20130527), (14545, 20130603), (14553, 20130610), (14569, 20130617), (14650, 20130624), (14651, 20130708), (14689, 20130715), (14751, 20130722), (14766, 20130729), (14679, 20130805), (14599, 20130812), (14740, 20130819), (14714, 20130826), (14796, 20130902), (14820, 20130909), (14866, 20130916), (14878, 20130923), (14885, 20130930), (15028, 20131007), (15072, 20131014), (15025, 20131021), (15071, 20131028), (15098, 20131104), (15101, 20131111), (15151, 20131118), (15337, 20131125), (15334, 20131202), (15512, 20131209), (15540, 20131216), (15701, 20131223), (15708, 20131230), (15703, 20140106), (15637, 20140113), (8585, 20140120), (15646, 20140127), (15632, 20140203), (15637, 20140210), (8565, 20140217), (15659, 20140224), (15557, 20150302), (15578, 20150406), (15545, 20150413), (15568, 20150420), (15475, 20150427), (15710, 20150511), (15623, 20150518), (15741, 20150525), (15741, 20150608), (15810, 20150622), (15761, 20150803), (15776, 20150810), (15908, 20150824), (16184, 20150831), (15832, 20150914), (15800, 20150921), (16178, 20151005), (16191, 20151012), (16138, 20151019), (16293, 20151102), (4812, 20160111), (16518, 20160118), (16629, 20160201), (16586, 20160208), (16529, 20160215), (16454, 20160222), (16515, 20160229), (16517, 20160307), (16446, 20160411), (16454, 20160418), (16489, 20160425), (16388, 20160502), (16374, 20160509), (16351, 20160523), (16361, 20160606), (16314, 20160620), (16293, 20160627), (16325, 20160815), (16316, 20160919), (16305, 20160926), (16233, 20161010), (16349, 20161031), (16364, 20161107), (16249, 20161114), (16345, 20161121), (16294, 20161128), (16336, 20161205), (16387, 20161212), (16372, 20170102), (16406, 20170109), (16379, 20170116), (16305, 20170213), (16207, 20170220), (16111, 20170306), (16230, 20170320), (16270, 20170417), (16226, 20170424), (16303, 20170501), (16124, 20170508), (16204, 20170515), (16290, 20170522), (16649, 20170529), (16157, 20170612), (16189, 20170619), (16184, 20170626), (16597, 20170703), (15983, 20170717), (16138, 20170724), (16145, 20170731), (16147, 20170807), (16268, 20170814), (16279, 20170821), (16301, 20170828), (16161, 20170911)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different ids and names of the battles that lost any 'Brig' type shipes?' in SQLite? I currently have 'SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'', which outputs [(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the cost of each treatment and the corresponding treatment type description.' in SQLite? I currently have 'SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code', which outputs [(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the number of courses they teach.' in SQLite? I currently have 'SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name', which outputs [('Gustaaf Deloor', 1), ('Vicente Carretero', 1), ('Kearsley Brown', 1), ('Anne Walker', 2), ('Lucy Wong', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of teachers and the number of courses they teach.' in SQLite? I currently have 'SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name', which outputs [('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which African countries have a smaller population than that of any country in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')', which outputs [('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \\\"Asia\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many models does each car maker produce? List maker full name, id and the number.' in SQLite? I currently have 'SELECT T2.FullName, T2.Id, COUNT(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName, T2.Id', which outputs [('American Motor Company', 1, 1), ('BMW', 3, 1), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Daimler Benz', 13, 2), ('Fiat', 9, 1), ('Ford Motor Company', 5, 3), ('General Motors', 4, 5), ('Honda', 11, 1), ('Hyundai', 23, 1), ('Kia Motors', 22, 1), ('Mazda', 12, 1), ('Nissan Motors', 8, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volkswagen', 2, 2), ('Volvo', 21, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many models does each car maker produce? List maker full name, id and the number.' in SQLite? I currently have 'SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;', which outputs [('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first name and birth date of all players from the country with code USA.' in SQLite? I currently have 'SELECT first_name, birth_date FROM players WHERE country_code = 'USA'', which outputs [('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123), ('Jane', 19530810), ('Marita', 19560219), ('Susie', 19570916), ('Mary', 19500721), ('Mary', 19540907), ('Mary', 19570312), ('Carrie', 19550822), ('Ruta', 19551118), ('Mareen', 19600815), ('Robin', 19560413), ('Caroline', 19601104), ('Emilse', 19571219), ('Kay', 19570925), ('Zenda', 19591212), ('Betty Ann', 19500226), ('Jeanne', 19591207), ('Linda', 19610605), ('Julie', 19620205), ('Stacy', 19590405), ('Dana', 19591126), ('Roberta', 19581103), ('Joyce', 19580503), ('Andrea', 19550406), ('Trey', 19591127), ('Jenny', 19650419), ('Leigh Anne', 19640108), ('Joanne', 19541030), ('Michelle', 19670627), ('Nancy', 19580418), ('Felicia', 19611231), ('Jean', 19581025), ('Barbi', 19640914), ('Amy', 19650405), ('Jill', 19600623), ('Ginny', 19661115), ('Grace', 19680416), ('Melissa', 19690624), ('Debbie', 19670809), ('Eileen', 19661201), ('Maeve', 19641116), ('Kathleen', 19610905), ('Niurka', 19690419), ('Cecilia', 19630628), ('Kristin', 19590827), ('Kate', 19630111), ('Liezel', 19760821), ('Mashona', 19760531), ('Stephanie', 19460308), ('Marilyn', 19480308), ('Mimi', ''), ('Alice', 19421122), ('Pixie', ''), ('Betty', 19250415), ('Nadine', 19441026), ('Victoria', ''), ('Stephanie', 19500703), ('Carole', 19430624), ('Gail', 19510421), ('Patricia', 19400101), ('Eliza', 19530102), ('Patricia', 19450828), ('Sandy', 19560501), ('Tam', 19520127), ('Wendy', 19520430), ('Kathy', 19461218), ('Lisa', ''), ('Judy', 19490816), ('Roberta', 19560702), ('Mary', 19450925), ('Aleida', 19550616), ('Erin', 19550720), ('Stephanie', 19560325), ('Karen', 19421211), ('Sheila', 19580222), ('Susie', 19620329), ('Micki', 19601129), ('Heather', 19610712), ('Jane', 19620121), ('Diane', 19611105), ('Shawna', ''), ('Tammy', 19651012), ('Tracy', 19791006), ('Allison', 19801114), ('Ansley', 19820105), ('Dawn', 19760529), ('Kristen', 19840628), ('Vija', ''), ('Farel', ''), ('Connie', 19510521), ('Marjorie', 19510503), ('Peggy', ''), ('Tish', ''), ('Jade', ''), ('Carole', ''), ('Emilie', ''), ('Diane', ''), ('Mary', ''), ('Ann', ''), ('Tina', ''), ('Maricaye', ''), ('Roylee', 19490526), ('Nancy', 19330421), ('Louise', 19470321), ('Mimi', 19390818), ('Raymonde', ''), ('Carol', ''), ('Joyce', 19420223), ('Pat', 19340819), ('Jane', 19510220), ('Darlene', 19360106), ('Pam', 19501025), ('Carol', ''), ('Emilie', ''), ('Margaret', 19500413), ('Pam', ''), ('Susan', 19531113), ('Shari', ''), ('Sue', 19540603), ('Jeanne', 19350721), ('Kathy', 19521219), ('Gertrude', 19230908), ('Judy', 19430402), ('Brenda', 19540211), ('Patricia', 19580516), ('Marcy', ''), ('Sally', ''), ('Lynne', 19580328), ('Margaret', 19530105), ('Renee', 19340819), ('Carol', 19501022), ('Chris', 19561026), ('Kelly', 19620418), ('Lisa', 19590305), ('Lucy', ''), ('Jody', 19560704), ('Phyllis', 19570326), ('Linda', 19631106), ('Karen', 19640323), ('Eleni', 19671023), ('Lisa', 19680718), ('Sandra', 19690903), ('Shannan', 19700519), ('Julie', 19760424), ('Nicole', 19760203), ('Angela', 19720404), ('Keri', 19740501), ('Jacqueline', 19801126), ('Laura', 19810512), ('Jean', 19740607), ('Melissa', 19820606), ('Amber', 19840706), ('Sarah', 19811106), ('Ashley', 19850502), ('Bethanie', 19850323), ('Allison', 19860410), ('Bea', 19801128), ('Alexandra', 19850902), ('Carly', 19861126), ('Theresa', 19850310), ('Gabriela', 19800607), ('Shenay', 19840706), ('Angela', 19840927), ('Kelly', 19830318), ('Teryn', 19781212), ('Abigail', 19810712), ('Jessica', 19871110), ('Jamea', 19860907), ('Mary', 19881218), ('Tiffany', 19800314), ('Alexa', 19890910), ('Vania', 19890303), ('Ahsha', 19850321), ('Lauren', 19891001), ('Varvara', 19860521), ('Madison', 19900403), ('Audra', 19860421), ('Ashley', 19890620), ('Julie', 19790104), ('Melanie', 19910923), ('Kristie', 19920615), ('Gail', 19910605), ('Asia', 19910404), ('Coco', 19911206), ('Christina', 19920511), ('Mallory', 19900718), ('Lauren', 19910110), ('Hilary', 19881117), ('Sloane', 19930320), ('Alison', 19900703), ('Jamie', 19900108), ('Chelsey', 19900829), ('Beatrice', 19920406), ('Shelby', 19921013), ('Irina', 19900504), ('Lauren', 19931009), ('Madison', 19950217), ('Nicole', 19740801), ('Michelle', 19731228), ('Akiko', 19720214), ('Joy', 19621006), ('Caryn', 19711005), ('Luanne', 19721228), ('Julie', 19720510), ('Rachel Ann', 19721119), ('Judy', 19620511), ('Noelle', 19701218), ('Alysia', 19710131), ('Laura', 19670517), ('Amanda', 19780620), ('Julie', 19721007), ('Ann', 19670822), ('Melissa', 19720621), ('Jan', 19531223), ('Mary', 19620121), ('Sylvia', 19640127), ('Gail', 19470116), ('Diedre', 19711011), ('Caroline', 19651129), ('Kerry', 19501002), ('Kathy', 19670904), ('Stella', 19690309), ('Karen', 19680705), ('Cynthia', 19580614), ('Marlie', 19501120), ('Rona', 19690708), ('Kylie', 19610519), ('Helena', 19610201), ('Cheryl', 19640503), ('Jennifer', 19690715), ('Elizabeth', 19660406), ('Anne', 19660205), ('Alix', 19721022), ('Erica', 19690716), ('Stephanie', 19700424), ('Jill', 19671011), ('Jane', 19630123), ('Kathy', ''), ('Jean', 19700510), ('Ann', 19651028), ('Kirsten', 19690327), ('Wendy', 19600327), ('Nicole', 19610906), ('Vicki', 19570325), ('Mary Ann', 19560424), ('Christine', 19680118), ('Jennifer', 19600326), ('Julie', 19570621), ('Penny', 19550826), ('Cathy', 19580310), ('June', 19630619), ('Pam', 19750701), ('Stephanie', 19791023), ('Jane', ''), ('Gretchen', 19650626), ('Jane', 19660324), ('Holyn', 19731012), ('Kristi', 19690910), ('Linley', 19620501), ('Shelby', 19500626), ('Andrea', 19700128), ('Kathy', 19591224), ('Danielle', 19700322), ('Carol', 19610705), ('Jean', 19550606), ('Lori', 19650330), ('Edie', ''), ('Robin', ''), ('Kerri', 19681001), ('Lisa', 19700324), ('Mary', 19660508), ('Carol', 19591113), ('Katie', 19750429), ('Michele', 19660606), ('Shannon', 19670527), ('Gina', 19490515), ('Clare', ''), ('Cathleen', 19570316), ('Janice', 19510522), ('Betsy', 19540503), ('Lucia', 19601022), ('Wendy', 19680715), ('Allyson', 19631007), ('Debbie', 19620722), ('Marsha', ''), ('Linda', 19690503), ('Page', 19740622), ('Heather', 19711011), ('Gigi', 19701007), ('Marilda', 19650222), ('Christine', 19720714), ('Cynthia Ann', 19521114), ('Jenny', 19710226), ('Shelley', 19650421), ('Jackie', 19640104), ('Stephanie', ''), ('Michelle', 19610116), ('Genevieve', 19630819), ('Glynis', ''), ('Ann', 19520526), ('Allegra', ''), ('Cricket', 19610507), ('Bunny', 19460729), ('Holly Ann', 19701218), ('Amy', 19721112), ('Kathy', 19631005), ('Monique', 19841006), ('Erica', 19721128), ('Susan', 19651125), ('Rita', 19601018), ('Nina', 19610207), ('Donna', 19591005), ('Cissie', 19600108), ('Nancy', 19640804), ('Erika', 19631007), ('Cristina', 19770210), ('Terri', 19680118), ('Patty', 19730928), ('Katrina', 19681104), ('Katrina', 19800530), ('Anne', 19810420), ('Cory Ann', 19850122), ('Nicole', 19861103), ('Diana', 19790704), ('Tanner', 19840803), ('Shadisha', 19850712), ('Leslie', 19870525), ('Neha', 19860206), ('Megan', 19850719), ('Elizabeth', 19880603), ('Jewel', 19810910), ('Lindsey', 19851118), ('Raquel', 19821208), ('Brittany', 19910919), ('Kirsten', 19880814), ('Chieh Yu', 19920114), ('Alexis', 19830331), ('Amanda', 19861204), ('Catherine', 19940409), ('Tetiana', 19840904), ('Julia', 19910909), ('Alexandra', 19880214), ('Zoe Gwen', 19930921), ('Julia', 19890323), ('Jessica', 19940224), ('Grace', 19940506), ('Chi Chi', 19920705), ('Nicole', 19930303), ('Mallory', 19910128), ('Jennifer', 19860922), ('Samantha', 19950218), ('Victoria', 19951130), ('Maria', 19891126), ('Anne', 19850828), ('Megan', 19850311), ('Lena', 19881115), ('Katie', 19830503), ('Courtney B', 19920325), ('Kimberly', 19890509), ('Jacqueline', 19910830), ('Ester', 19930704), ('Eleanor', 19880626), ('Yasmin', 19880504), ('Anne Liz', 19960526), ('Alessondra', 19900906), ('Ryann', 19960723), ('Lucie', 19720406), ('Kelly S', 19730905), ('Kristina', 19790811), ('Wendy', 19750131), ('Julie', 19751016), ('Aurandrea', 19791121), ('Brandis', 19800213), ('Megan', 19781224), ('Alyssa', 19821119), ('Jennifer', 19780807), ('Jennifer', 19840217), ('Candice', 19820331), ('Michelle', 19780119), ('Kristy', 19790517), ('Andrea', 19881006), ('Lauren', 19800829), ('Iris', 19850613), ('Jennifer', 19810718), ('Ali', 19870923), ('Nicole', 19851124), ('Kaysie', 19800411), ('Krystina', 19880510), ('Riza', 19860210), ('Sarah', 19810627), ('Megan', 19830326), ('Story', 19830502), ('Christina', 19801127), ('Stacia', 19850921), ('Kaitlyn', 19920113), ('Chloe', 19900201), ('Amanda', 19870902), ('Kelcy', 19890411), ('June', 19950619), ('Krista', 19940914), ('Adria', 19791221), ('Susie', 19721210), ('Kori', 19731101), ('Elizabeth', 19770823), ('Agnes', 19800801), ('Courtenay', 19770227), ('Dee Dee', 19790211), ('Aurora', 19741107), ('Keirsten', 19730917), ('Ingrid', 19730602), ('Stephanie', 19761207), ('Sara', 19770113), ('Lori', 19810731), ('Milangela', 19811209), ('Brooke', 19790101), ('Lauren', 19820521), ('Amanda', 19780119), ('Kelley', 19850922), ('Meredith', 19720604), ('Jackie', 19840111), ('Megan', 19780427), ('Amanda', 19811126), ('Cammy', 19701225), ('Ditta', 19751226), ('Jennifer', 19731228), ('Krissy', 19791211), ('Annica', 19780902), ('Tory', 19850618), ('Whitney', 19860123), ('Sarah', 19801121), ('Jessyca', 19800826), ('Beau', 19800626), ('Katrina', 19880707), ('Stephanie', 19790129), ('Jennifer', 19881123), ('Jessica', 19871124), ('Sarah', 19880209), ('Kim Anh', 19831004), ('Ellah', 19881122), ('Lauren', 19820914), ('Link', 19861125), ('Aleke', 19820427), ('Kendra', 19831118), ('Arpi', 19830612), ('Erin', 19900328), ('Tiffany', 19820909), ('Robin', 19830621), ('Kristi', 19851222), ('Jennifer Lee', 19870227), ('Veronica Ruo Qi', 19891110), ('Danielle', 19910328), ('Shilpa', 19840412), ('Elizabeth', 19880526), ('Megan', 19870701), ('Melissa', 19880408), ('Lauren', 19890522), ('Alana', 19851031), ('Riley', 19901114), ('Kristen', 19880323), ('Mami', 19790715), ('Kit', 19810726), ('Stacey', 19910718), ('Elizabeth', 19810315), ('Nina', 19890707), ('Nadja', 19900607), ('Erica', 19901127), ('Jenna', 19851126), ('Tiya', 19860611), ('Natalie', 19850322), ('Courtney', 19820929), ('Kristy', 19900108), ('Susanna', 19831103), ('Alexa', 19901117), ('Aeriel', 19900928), ('Maureen', 19820528), ('Allie', 19910420), ('Sanaz', 19880621), ('Lauren', 19760912), ('Alexis', 19840927), ('Libby', 19940124), ('Lauren', 19930723), ('Michaela', 19880722), ('Tori', 19871124), ('Gabrielle', 19930227), ('Danielle Rose', 19931213), ('Tarakaa', 19860811), ('Danielle', 19910528), ('Ellen', 19931008), ('Brooke', 19920408), ('Mccall', 19900315), ('Macall', 19860205), ('Megan', 19880705), ('Nicole', 19930729), ('Alexandra', 19911130), ('Elizabeth', 19860524), ('Jade', 19921028), ('Brie', 19890507), ('Jan', 19950301), ('Simone', 19891230), ('Elizabeth', 19860731), ('Gabrielle Faith', 19961223), ('Sachia', 19950511), ('Taylor', 19960416), ('Lindsey', 19900104), ('Alexandra', 19950630), ('Alexandra', 19910213), ('Robin', 19930412), ('Brianna', 19940219), ('Olivia', 19960122), ('Whitney', 19860811), ('Emily J', 19910615), ('Caroline B', 19941031), ('Chalena', 19950818), ('Elizabeth Anita Alexandria', 19960806), ('Breanna Alexa Bachini', 19930521), ('Mary', 19950817), ('Betsy', 19600427), ('Eve', 19621028), ('Janet', 19670405), ('Jaime', 19611001), ('Angel', 19610830), ('Donna', 19550626), ('Valerie', 19540813), ('Lucinda', 19520717), ('J', ''), ('J', ''), ('D', ''), ('K', ''), ('B', ''), ('J', ''), ('R', ''), ('N', ''), ('E', ''), ('F', ''), ('Caroline', 19560622), ('D', ''), ('Wendy', ''), ('Nancy', 19530830), ('Susan', 19570107), ('Gretchen', 19560201), ('Anne', ''), ('Holly', 19690811), ('Margaret', 19601012), ('Clare', 19671008), ('Kathy', 19641104), ('Rita', 19660512), ('Marlene', 19810731), ('Linda', 19570701), ('Beverly', 19530124), ('Ann', 19551013), ('Robin', 19540923), ('A', ''), ('Maria', ''), ('Karen', ''), ('Karen', ''), ('Jenny', ''), ('Lisa', ''), ('Kathy', ''), ('Maria', 19600424), ('Judith', ''), ('Becky', ''), ('Connie', ''), ('Lori', ''), ('Joni', 19651125), ('Lisa', ''), ('Suzanne', ''), ('Shandra', 19680519), ('Merrilee', ''), ('Jennifer', 19660615), ('Chris', ''), ('Trisha', 19690203), ('Stephanie', 19690818), ('Sonya', 19670825), ('Susan', 19710412), ('Tanya', 19690302), ('Tonya', 19690821), ('Kara', 19730105), ('Melissa', 19740402), ('Victoria', 19761230), ('Trina', 19821230), ('Kristine', 19720623), ('Martha', 19691215), ('Candice', 19800207), ('Cindy', 19790422), ('Elizabeth', 19740824), ('Valerie', 19731228), ('Tracey', 19710129), ('Diana', 19680410), ('Alice', 19770830), ('Allison', 19660804), ('Vickie', 19710827), ('Stacey', 19750105), ('Marissa', 19780613), ('Susanna', 19720303), ('Rebecca', 19721119), ('Ashley', 19720408), ('Varalee', 19760502), ('Stephanie', 19770408), ('Elizabeth', 19631112), ('Bridget', 19740207), ('Leslie', 19720209), ('Traci', 19780805), ('Alison', 19741125), ('Amy', 19681007), ('Vanessa', 19760513), ('Laura', 19720426), ('Anna', 19761021), ('Betsy', 19751127), ('Kristen', 19781002), ('Mugette', 19810424), ('Tu', 19780208), ('Irene', 19790612), ('Jennifer', 19720416), ('Diana', 19751029), ('Jody', 19711122), ('Samantha', 19890509), ('Tristen Z', 19940501), ('Rachel', 19920719), ('Ashley', 19871106), ('Alexandra', 19920223), ('Natalie', 19910801), ('Lindsay', 19880226), ('Amelia', 19920802), ('Caroline', 19930313), ('Camila', 19950929), ('Josie', 19951105), ('Skylar Alexandra', 19940424), ('Brooke', 19960212), ('Alexandra', 19910413), ('Daniella', 19971105), ('Hayley', 19950517), ('Jody', 19780930), ('Ella', 19760917), ('Emily Ann', 19820328), ('Jacquelyn', 19801117), ('Lesley', 19781011), ('Kristen', 19770518), ('Cara', 19720421), ('Zuzanna', 19800403), ('Katie', 19800911), ('Marilyn', 19740114), ('Lena', 19830510), ('Brandi', 19770612), ('Andrea', 19780204), ('Sara', 19801022), ('Hillary', 19820417), ('Mariel', 19800220), ('Whitney', 19800508), ('Darian', 19790615), ('Alexandra', 19820310), ('Prim', 19810115), ('Janet', 19800628), ('Rachel', 19690211), ('Lindsay', 19821207), ('Kirsty', 19780517), ('Raluca Daniela', 19830717), ('Mindy', 19720322), ('Erin', 19830419), ('Mary Carlisle', 19780716), ('Erin', 19800116), ('Keiko', 19800429), ('Maiko', 19820623), ('Paige', 19740714), ('Janet', 19790529), ('Briana', 19781221), ('Stacey', 19721219), ('Kristin', 19720204), ('Julia', 19810518), ('Rochelle', 19800430), ('Selin', 19780706), ('Jennifer', 19730117), ('Luana', 19821205), ('Whitney', 19850811), ('Paloma', 19720823), ('Tumeka', 19761226), ('Maria', 19830319), ('Hyacinth', 19610809), ('Eva', 19840706), ('Kara', 19790920), ('Katie', 19841110), ('Melissa', 19840613), ('Emmy', 19870722), ('Alexandria', 19860310), ('Shari', 19641103), ('Michelle', 19791212), ('Alexandra', 19841228), ('Nicole', 19860203), ('Monica', 19851212), ('Caitlin', 19850517), ('Lia', 19800922), ('Michelle', 19870304), ('Sybil', 19770106), ('Jodi', 19810822), ('Liberty', 19870409), ('Mimi', 19841030), ('Melissa', 19861211), ('Jessi', 19870221), ('Courtney', 19880501), ('Chrissie', 19870902), ('Yvette', 19880612), ('Audra', 19830331), ('Leila', 19860206), ('Tamara', 19790924), ('Rebekah', 19791012), ('Sabita', 19840927), ('Shannon', 19870109), ('Courtney', 19851011), ('Polina', 19860408), ('Anamika', 19890413), ('Jie', 19871101), ('Georgette', 19840709), ('Christy', 19871212), ('Suzanne', 19880117), ('Courtney', 19900327), ('Cammie', 19871122), ('Nelly', 19901113), ('Veronica', 19870514), ('Keilly', 19900505), ('Kate', 19831111), ('Reka', 19890708), ('Bianca', 19890514), ('Thien Trang', 19910918), ('Pamela', 19910101), ('Morgan', 19920220), ('Julianna', 19850107), ('Subbadharmi', 19890708), ('Stephanie', 19930216), ('Kelsey', 19910408), ('Alexandra', 19870719), ('Amanda', 19880314), ('Chelsea', 19891211), ('Anna', 19840821), ('Jill M', 19910313), ('Kady', 19860317), ('Phoebe', 19880520), ('Emily', 19921201), ('Christian', 19840913), ('Keri', 19891225), ('Sabrina', 19860112), ('Nataly', 19900913), ('Maria', 19920619), ('Noel', 19930203), ('April', 19920508), ('Ellie', 19930808), ('Stephanie', 19901027), ('Nicole', 19911031), ('Anna', 19940308), ('Veronika', 19900920), ('Annie', 19930330), ('Kyle', 19940405), ('Chanelle', 19940119), ('Yawna', 19860801), ('Hilary', 19910513), ('Ivana', 19861108), ('Gira', 19860829), ('Claire', 19891129), ('Erin', 19880609), ('Caitlin', 19880219), ('Alexandra', 19850703), ('Jennifer', 19950412), ('Kimberly', 19961015), ('Natalie', 19891102), ('Elizaveta Anna', 19930831), ('Veronica M', 19911207), ('Karina', 19950706), ('Sylvia', 19860904), ('Sherry', 19950208), ('Katrine Isabel', 19960315), ('Denise', 19950417), ('Courtney', 19940325), ('Christina', 19960529), ('Noelle', 19881205), ('Lauren', 19950517), ('Breaunna', 19941222), ('Nicole', 19941230), ('Meredith', 19970521), ('Nadia', 19950114), ('Jackie', 19710922), ('Antoinette', 19850107), ('Kathleen', 19740511), ('Kylene', 19790725), ('Dana', 19730725), ('Audra', 19720605), ('Tracee', 19731009), ('Amie', 19800517), ('Jennifer', 19811128), ('Lashawnn', 19740602), ('Jacqueline', 19820209), ('Jennifer', 19770119), ('Kristy', 19741230), ('Susan', 19741201), ('Bridget', 19761018), ('Amy', 19690628), ('Sandra', 19750116), ('Khristen', 19750803), ('Stefanie', 19810322), ('Barrie', 19730724), ('Kate', 19820415), ('Amy', 19731107), ('Anne', 19780520), ('Lauren', 19740830), ('Dewonder', 19590127), ('Kendra', 19790828), ('Jamie', 19801106), ('Jennifer', 19750823), ('Audrey', 19850430), ('Marjorie', 19750503), ('Katie', 19770527), ('Aimee', 19820110), ('Megan', 19810519), ('April', 19781129), ('Maren', 19791106), ('Sarah', 19780514), ('Marie Ange', 19780114), ('Dina', 19680406), ('Margaret', 19760707), ('Mary Beth', 19760329), ('Patricia', 19841020), ('Ashley', 19821229), ('Kathryn', 19790225), ('Leslie', 19810718), ('Becky', 19640801), ('Julie', 19811223), ('Danielle', 19781110), ('Terri', 19650402), ('Amy', 19681215), ('Douglas', 19840522), ('Sara', 19850621), ('Karla', 19770318), ('Kristin', 19841130), ('Kristin', 19810705), ('Bonnie', 19850503), ('Natalie', 19830401), ('Jennifer', 19830702), ('Claire', 19700527), ('Lauren', 19780316), ('Alison', 19791129), ('Laura', 19710624), ('Katia', 19810816), ('Kara', 19771202), ('Violette', 19790927), ('Lisa', 19740221), ('Evonne', 19740923), ('Mandy', 19790312), ('Jessica', 19800415), ('Emily', 19811119), ('Callie', 19770711), ('Maggie', 19750529), ('Elina', 19820521), ('Terry Ann', 19740428), ('Kimberly', 19790725), ('Bettina', 19820718), ('Lindsay', 19800519), ('Johanna', 19750518), ('Amy', 19790124), ('Meiling', 19791112), ('Jennifer', 19781020), ('Vania', 19810428), ('Megan', 19831014), ('Lindsey', 19800201), ('Megan', 19820411), ('Angela', 19840329), ('Megan', 19840920), ('Nicolette', 19831108), ('Anita', 19860219), ('Alessandra', 19870112), ('Aradhana', 19820709), ('Tiffany', 19831228), ('Macey', 19830224), ('Kelcy', 19861225), ('Caylan', 19820701), ('Stephanie', 19820923), ('Jan', 19580317), ('Kate', 19830530), ('Karen', 19671205), ('Sarah Jane', 19820802), ('Catrina', 19840913), ('Bethany', 19821129), ('Lindsay', 19820811), ('Kathleen', 19820917), ('Amy', 19810415), ('Emilia', 19820204), ('Colleen', 19790212), ('Ashlee', 19850522), ('Saras', 19830726), ('Brittany', 19850420), ('Laila', 19810805), ('Natalie', 19851103), ('Celena', 19790130), ('Marine', 19780929), ('Cara', 19730424), ('Loni', 19810928), ('Christyn', 19850210), ('Cassy', 19850802), ('Manisha', 19770513), ('Jennifer', 19811121), ('Michelle', 19801002), ('Brook', 19851231), ('Samantha', 19840807), ('Stephanie', 19870411), ('Courtney', 19820502), ('Melissa', 19840112), ('Kristin', 19790227), ('Adriana', 19780902), ('Christine', 19831216), ('Julie', 19840521), ('Cristina', 19860826), ('Nadia', 19850209), ('Amanda', 19821020), ('Camelia', 19860406), ('Emily', 19850201), ('Danielle', 19840717), ('Rochelle', 19800627), ('Brianna', 19851215), ('Zena', 19880717), ('Adina', 19870619), ('Lauren', 19880204), ('Lauren', 19870928), ('Meg', 19870811), ('Ristine', 19850116), ('Jennifer', 19841115), ('Lindsey', 19860101), ('Lindsay', 19880524), ('Gloriann', 19840228), ('Patricia', 19740119), ('Kelly', 19820223), ('Amanda', 19870813), ('Elizabeth', 19860128), ('Whitney', 19851225), ('Laura', 19850506), ('Masha', 19840211), ('Karina', 19880811), ('Erin', 19850113), ('Randi', 19870211), ('Kewa', 19860701), ('Hala', 19850809), ('Dasha', 19870606), ('Suzanna', 19861013), ('Colleen', 19880209), ('Blair', 19830904), ('Simone', 19881010), ('Jessica', 19870304), ('Austin', 19860601), ('Preethi', 19850629), ('Christala', 19890709), ('Krista', 19900423), ('Marie', 19830721), ('Ashley', 19861113), ('Latrell', 19891212), ('Sheryl', 19850920), ('Amanda', 19850319), ('Blakeley', 19841114), ('Ashley', 19870917), ('Whitney', 19890109), ('Marlene', 19880329), ('Melissa', 19860801), ('Alex', 19870117), ('Jessica', 19811223), ('Megan', 19890204), ('Jacqueline', 19830608), ('Melody', 19830708), ('Sarah', 19910314), ('Marie', 19910614), ('Daron', 19851128), ('Amy', 19790324), ('Dina', 19871014), ('Mia', 19910312), ('Valerie', 19851231), ('Amanda', 19880523), ('Connor', 19870922), ('Elizabeth', 19920114), ('Brittany', 19870208), ('Kristen A', 19880325), ('Julie', 19880331), ('Sarah', 19880129), ('Emily', 19890724), ('Christine', 19871225), ('Amanda', 19850511), ('Nicole', 19880620), ('Laurianne', 19881018), ('Pamela', 19901124), ('Miya', 19871114), ('Rachel', 19830708), ('Joanna', 19891009), ('Lynn', 19791216), ('Claire', 19871108), ('Paola', 19920827), ('Lauren', 19890512), ('Erin Carol', 19930506), ('Cameron', 19881224), ('Julie', 19870627), ('Stefanie', 19890130), ('Hannah', 19910812), ('Katherine', 19860305), ('Olivia', 19880423), ('Christina', 19880426), ('Christina', 19881212), ('Cierra', 19910927), ('Milena', 19850506), ('Christin J', 19870731), ('Stephanie', 19900327), ('Kaysara', 19910623), ('Nina', 19900115), ('Deirdre', 19901205), ('Kristin', 19841024), ('Jacqueline', 19900913), ('Stephany', 19900609), ('Erica', 19900702), ('Julia', 19910916), ('Grace', 19891211), ('C C', 19911009), ('Sarah', 19910422), ('Marianne', 19850906), ('Monica', 19920622), ('Kate', 19920109), ('Amanda Marie', 19860106), ('Alexa', 19900824), ('Denise', 19890731), ('Molly', 19890525), ('Nelo', 19920705), ('Farwa', 19891101), ('Millie', 19641005), ('Brooke Lindsey', 19940622), ('Lilly F', 19911101), ('Brynn', 19910801), ('Karina', 19831112), ('Tracy', 19740827), ('Desiree', 19931110), ('Rachael', 19910427), ('Alrissa', 19920724), ('Amanda', 19870317), ('Olivia', 19910711), ('Caryssa L', 19920413), ('Monica', 19930108), ('Joelle', 19910606), ('Malika', 19910709), ('Theresa', 19930607), ('Mary Anne', 19920215), ('Morocco', 19921107), ('Mara', 19920222), ('Alejandra Maria', 19950228), ('Catherine', 19880430), ('Kate', 19901106), ('Abigail', 19900209), ('Sabrina', 19930224), ('Heatherm', 19890925), ('Stephanie', 19940511), ('Leighann', 19931204), ('Lauren', 19880816), ('Kayla', 19920921), ('Kir', 19891031), ('Skylar', 19930914), ('Julia', 19931207), ('Meghan', 19930621), ('Nida', 19911029), ('Lauren', 19880905), ('Kelly K', 19910531), ('Alyssa Grace', 19950215), ('Mary', 19911122), ('Madeleine', 19920319), ('Rachel', 19840302), ('Alex', 19911229), ('Kyra', 19960510), ('Suzy', 19940830), ('Remeice', 19891112), ('Kate', 19940201), ('Courtney', 19891015), ('Molly', 19930810), ('Stephanie', 19940131), ('Alexandra M', 19870719), ('Aleksandra', 19960409), ('Erin', 19880709), ('Jessica', 19930428), ('Spencer', 19950125), ('Anik', 19910405), ('Simone', 19920717), ('Emma', 19930623), ('Melissa', 19921004), ('Tina', 19950427), ('Julia', 19940613), ('Rachael', 19931209), ('Shelby', 19930114), ('Epiphany B', 19921217), ('Kaitlin', 19921215), ('Mariana', 19950927), ('Hannah', 19951103), ('Casey', 19910613), ('Deborah', 19940514), ('Jessica', 19931117), ('Kelsey', 19940821), ('Samantha', 19930126), ('Blair', 19940814), ('Martha V', 19900628), ('Amanda', 19930322), ('Sarah', 19920729), ('Emily', 19931112), ('Jamie', 19950308), ('Kelly', 19770505), ('Quinn', 19941110), ('Sophia', 19930330), ('Sierra A', 19900816), ('Mckenzie', 19940107), ('Stacey', 19900117), ('Courtney', 19910226), ('Rosalia', 19900208), ('Sydney', 19950207), ('Mia', 19950406), ('Erin Kane', 19960512), ('Laura', 19841119), ('Eva', 19921222), ('Elizabeth', 19940706), ('Sarah', 19930713), ('Elyse', 19870910), ('Sabrina', 19920912), ('Julia', 19890114), ('Gabriella', 19951208), ('Tanya', 19930914), ('Nyla', 19960730), ('Louisa', 19960516), ('Zina', 19980402), ('Tornado Alicia', 19980512), ('Madison', 19970919), ('Rima', 19951116), ('Kourtney J', 19940907), ('Natasha', 19940823), ('Erin', 19901230), ('Rachel May', 19941113), ('Jillian', 19941210), ('Caroline', 19960315), ('Dominique', 19870203), ('Trelsie', 19890707), ('Angela', 19950604), ('Nicole', 19980429), ('Kim', 19951027), ('Emina', 19930330), ('Lynda', 19921123), ('Joanna Mary', 19930201), ('Caroline', 19960103), ('Julia', 19940403), ('Callie', 19910904), ('Maxine', 19910710), ('Katie', 19921211), ('Emma Christine', 19980201), ('Johnnise', 19960510), ('Katerina', 19970717), ('Jessica', 19970105), ('Marjorie', 19880420), ('Maci', 19931007), ('Kaitlyn', 19971204), ('Jacqueline', 19941203), ('Charity', 19870711), ('Parris', 19980708), ('Jamie', 19930819), ('Miriam Ruth', 19940724), ('Elizabeth', 19910118), ('Amanda', 19860130), ('Lindsay', 19780708), ('Erica', 19860327), ('Dina', 19711211), ('Robyn', 19850111), ('Anita', 19810402), ('Casey', 19840501), ('Emily', 19850224), ('Jamie', 19880415), ('Brittany', 19880627), ('Elizabeth', 19550921), ('Carolyn', 19900415), ('Cassandra', 19891211), ('Prissy', 19910807), ('Kristin', 19830420), ('Diamond', 19901226), ('Celia', 19860527), ('Tiffany', 19891126), ('Jennifer', 19890531), ('Komal', 19930108), ('Roxanne', 19890826), ('Mandy', 19810914), ('Amanda', 19800324), ('Alissa', 19671209), ('Kay', 19570927), ('Jane', 19661222), ('Tracie', 19610116), ('Elizabeth', 19630811), ('Cinda', 19710410), ('Tracy', 19611021), ('Dena', 19650928), ('Hemel', 19660108), ('Karen', 19630803), ('Reka', 19670612), ('Vincenza', 19660820), ('Lisa', 19640803), ('Lynn', 19661018), ('Jill', 19731226), ('Julie', 19710609), ('Kilmeny', 19660218), ('Kay', 19690131), ('Debbie', 19651129), ('Anne Marie', 19660720), ('Leslie', 19660908), ('Lisa', 19630604), ('Lisa', 19611106), ('Tory', 19660712), ('Kylie', 19700509), ('Anya', 19690220), ('Jennifer', 19670106), ('Diana', 19721007), ('Betsy', 19671127), ('Katrina', 19671129), ('Karen', 19701102), ('Susan', 19710206), ('Sherri', 19730118), ('Tonya', 19691110), ('Julie', 19680817), ('Susan', 19710206), ('Jamie', 19691029), ('Alita', 19630112), ('Tara', 19681223), ('Erika', 19720516), ('Kellie', 19670601), ('Happy', 19680605), ('Angie', 19710323), ('Bonnie', 19770412), ('Farley', 19741212), ('Tunecia', 19701023), ('Roseann', 19710227), ('Allison', 19710927), ('Hillery', 19610619), ('La Shawnn', 19740206), ('Sylvia', 19610419), ('Kathy', 19741105), ('Zuzanna', 19790726), ('Cassi', 19850902), ('Lejla', 19870206), ('Danielle', 19820120), ('Geneva', 19871225), ('Katie', 19891023), ('Katie', 19881216), ('Brittany', 19940406), ('Allie', 19950630), ('Sofia', 19981114), ('Mia', 19970723), ('Ty Ana', 19970313), ('Karina Kristina', 19981021), ('Jessica', 19890916), ('Trisha', 19981027), ('Ashley', 19881017), ('Tina', 19920831), ('Tatijana', 19971116), ('Taylor L', 19950117), ('Alexa', 19980707), ('Emerald', 19970905), ('Marie', 19970611), ('Alexandra', 19950224), ('Aleah', 19910923), ('Sarah', 19941219), ('Usue Maitane', 19981028), ('Ellie', 19970710), ('Maia A', 19960921), ('Raquel', 19980128), ('Peggy', 19951110), ('Rebecca', 19971004), ('Camila', 19961125), ('Karyn', 19940912), ('Ayla', 19960715), ('Rasheeda', 19950630), ('Amy', 19941028), ('Ariana', 19960126), ('Luisa', 19951005), ('Mary', 19910802), ('Kristi', 19900427), ('Ronit', 19931203), ('Julia Christine', 19921027), ('Kristina N', 19910125), ('Macie', 19941023), ('Jessica', 19950102), ('Rhiann', 19940622), ('Frances', 19940222), ('Kelly', 19960221), ('Hanna', 19980225), ('Natalie', 19960508), ('Dasha', 19961011), ('Elizabeth', 19910218), ('Brianna', 19951012), ('Kristin', 19951122), ('Kristina', 19951204), ('Maddie', 19971117), ('Raveena', 19980723), ('Daniella', 19971027), ('Laura', 19970305), ('Idia', 19930922), ('Chloe Michele', 19970905), ('Morgan', 19941219), ('Nikki', 19960418), ('Sianna', 19900804), ('Nicole', 19990508), ('Mercedes', 19970525), ('Lourdes', 19990531), ('Adi', 19951213), ('Anna', 19971103), ('Alexandra', 19980719), ('Katarina', 19960704), ('Michaela', 19990726), ('Ena', 19980212), ('Catherine Cartan', 19990408), ('Hadley', 19960311), ('Madison', 19960402), ('Jaeda', 19990728), ('Jeannez', 19960707), ('Erica', 19980316), ('Jessie', 19980419), ('Andie K', 19970107), ('Alexandria', 19960511), ('Gabriella', 19960709), ('Kelly', 19990509), ('Terri', 19960723), ('Angel', 19850125), ('Maria', 19970506), ('Alexis', 19980809), ('Rianna', 19960903), ('Megen', 19960709), ('Caroline', 19980905), ('Sophie', 19970528), ('Nicole', 19960504), ('Jacqueline', 19970531), ('Jessica', 19970709), ('Adriana', 19890308), ('Kylie', 19970606), ('Yuki Kristina', 19950819), ('Lexi', 19950525), ('Caroline', 19970726), ('Ingrid', 19980616), ('Alexandra', 19970301), ('Nada', 20000308), ('Alexis', 19950606), ('Felicity', 19970313), ('Tory', 19930105), ('Aimee', 19940907), ('Alli', 19961203), ('Claudia', 19961206), ('Brooke', 19951010), ('Marina', 19981123), ('Zoe Adeline', 19941217), ('Jessica', 19970605), ('Ashley', 19920829), ('Valerie', 19971122), ('Ashley', 19990208), ('Brittany', 19920303), ('Olivia', 19940623), ('Taylor', 19950731), ('Alexis', 19950724), ('Sara', 19971217), ('Lindsay', 19930107), ('Liza', 19950317), ('Jayci', 20000517), ('Marina', 19920314), ('Sydney', 19990430), ('Alyza', 19951122), ('Sophia', 19920113), ('Riley', 19990615), ('Delaney', 19981028), ('Jane', 19961112), ('Valerie Ann', 19980801), ('Carolyn', 19970524), ('Maegan', 19950416), ('Tamara', 19971129), ('Mary', 19981025), ('Victoria', 19990401), ('Kennedy', 19970521), ('Amy', 19970120), ('Makenna', 19980226), ('Stephanie', 19980415), ('Nicole Taylor', 19990426), ('Claire', 20000525), ('Jada', 19990129), ('Sara', 19970723), ('Hannah', 19960923), ('Sophia', 19971005), ('Akiko', 19930913), ('Karina', 19970808), ('Haley', 19910403), ('Paige', 19970222), ('Kayla', 19990928), ('Carson', 20000909), ('Amanda', 19940813), ('Maria', 19990721), ('Kylie', 19990321), ('Luciana', 19981001), ('Zoe', 20010308), ('Sachi', 19981129), ('Audrey', 19951029), ('Anna', 19970319), ('Abigail', 20010122), ('Cameron', 19990920), ('Katelyn', 19921211), ('Katharine', 19961019), ('Elyse', 19981014), ('Mimi', 19930430), ('Bess', 19971029), ('Ines Karmen', 19970615), ('Taylor', 19990615), ('Kristen', 19970407), ('Sabrina', 19971003), ('Desirae', 19940111), ('Sarah', 19960418), ('Rachel', 19961108), ('Victoria', 19990807), ('Nini', 19950909), ('Francesca', 19970722), ('Makenzie', 19990610), ('Chiara', 19980826), ('Melissa', 19930602), ('Morgan', 19990416), ('Jerricka', 19950116), ('Eva', 19961102), ('Miranda', 19990307), ('Teresia', 19990529), ('Julia', 19971217), ('Malkia', 20000808), ('Lorraine M', 19930615), ('Carol', 19960218), ('Jocelyn', 19900526), ('Roosh', 19920321), ('Alexa', 19980703), ('Alyvia', 20000503), ('Katie', 19990929), ('Meible', 19990519), ('Elizabeth', 20010712), ('Emma', 20010518), ('Arianna', 19950206), ('Kiah', 19950117), ('Alyssa', 20000210), ('Stephanie', 19880402), ('Sofia', 19990722), ('Sarah', 19930814), ('Melan', 19970406), ('Alexandra', 19990105), ('Dilara', 19990911), ('Hurricane Tyra', 20010302), ('Taylor', 19980222), ('Nami', 19980827), ('Marcella', 20001012), ('Sophia', 20010630), ('Delisha', ''), ('Haley', ''), ('Jenna', ''), ('Nikita', 19931021), ('Hoda', ''), ('Meredith', 19990310), ('Morgan', 19950317), ('Kirsten', 19940508), ('Maya', 19940527), ('Kat', 19930215), ('Alexandra', 19930215), ('Meghan', 19971028), ('Salma', 20000828), ('Madeline', 19990307), ('Lindsay', 19981217), ('Alexa', 20010908), ('Mary Catherine', 19971104), ('Cheyenne', 19960326), ('Neri', 19990902), ('Jesse', 20011004), ('Ann', 20000626), ('Natalia', 19930929), ('Whitney', 20020417), ('Christina', 19970725), ('Sofia', 19980703), ('Nicole', 20000805), ('Kenadi', 19970313), ('Paiton', 19980808), ('Shannon', 19950915), ('Elysia', 20000324), ('Ashley', 19991026), ('Alexis', 19970314), ('Caty', 20011120), ('Isabella', 20010706), ('Elizabeth', 20010519), ('Anna', 20020306), ('Dakota', 20020508), ('Janice', 19990105), ('Amanda', 20010831), ('Jada', 19980319), ('Hind', 19990228), ('Mikaela', 19890801), ('Micheline', 19970428), ('Kendal', 19940106), ('Anna', 19991008), ('Mia', 19981021), ('Chloe', 20010830), ('Abigail', 20010310), ('Ryan', 19990510), ('Maia', ''), ('Jana', 19941110), ('Shale', 20011015), ('Helen Abigail', 19980520), ('Kariann', 19990116), ('Kennedy', 19980903), ('Caroline', 19980929), ('Allison', 19981031), ('Melissa', 19970624), ('Ellyse', 19961109), ('Charleen', 19410918), ('Doris', 19250620), ('Patricia', 19370601), ('Pauline', 19190806), ('Helen', 19290507), ('Mary', ''), ('Althea', 19270825), ('Carrie', 19571026), ('Cathy', 19510822), ('Karen', 19570408), ('', ''), ('Barbara', ''), ('Susan', 19611219), ('Jan', 19630609), ('Diane', 19650626), ('Carol', 19620605), ('Leanne', ''), ('Shelley', 19631120), ('Maureen', ''), ('Lorrie', 19601015), ('Tiffany', 19600417), ('Sarah', 19741010), ('Meg', ''), ('Wendy', ''), ('Lynn', 19660819), ('Heidi', 19640507), ('Jacqueline', 19620329), ('Sheri', 19690629), ('Diane', 19710121), ('Angela', 19641211), ('Nancy', ''), ('Liz', 19640423), ('Jamie', 19630530), ('', ''), ('Laura', 19681210), ('Jill', ''), ('Courtney', 19560622), ('Tiffany', 19810121), ('Kristen', 19810501), ('Wendy', 19681001), ('Sheila', ''), ('Heidi', 19601007), ('Julie', 19610523), ('Deborah', 19701129), ('Jennifer', ''), ('Cindy', 19591207), ('Lynn', ''), ('I', ''), ('Lisa', 19600808), ('Jill', 19540907), ('Aschara', ''), ('Heidi', 19720713), ('Julie', 19710609), ('', ''), ('G', ''), ('Stephanie', 19661010), ('Lucy', 19540402), ('Cathy', ''), ('', ''), ('Emmy', ''), ('', ''), ('Claudette', ''), ('Lisa', ''), ('Lynn', 19631114), ('Lindsay', ''), ('Lisa', 19630218), ('Virginia', ''), ('Lloyd', 19451208), ('Suzanne', 19750612), ('Caren', 19611110), ('Allegra', 19720113), ('Molly', 19630215), ('Lori', 19600112), ('Lindsay', 19780417), ('Adrienne', 19680903), ('Quynh', 19710627), ('Kari', 19810120), ('Lisa', 19590212), ('Christa', 19790115), ('Kelly', 19770505), ('Massoumeh', 19770803), ('Louise', 19500119), ('Jayne', 19741006), ('Christine', ''), ('Kim', 19780329), ('Lani', 19600808), ('Julie', 19690425), ('Ruth Ann', 19700506), ('Lauren', 19830423), ('Tasha', 19760223), ('Kealy', 19801030), ('Courtney', 19721230), ('Julie Ann', 19750618), ('Nicole', 19741001), ('Ashlee', 19801005), ('Kelly', 19751106), ('Alexandra', 19790210), ('Mary', 19730912), ('Lisa', 19660204), ('Monty', 19650506), ('Julie Anne', 19800911), ('Lorrie', 19651203), ('Kendra', 19760621), ('Chris', 19610706), ('Christine', 19850303), ('Rankin', 19840126), ('Julia', 19850721), ('Sabaea', 19811125), ('Nicole', 19750602), ('Joyce', 19800628), ('Sarah', 19820410), ('Jean Marie', 19651109), ('Stacey', 19720110), ('Varita', 19820702), ('Shera', 19780910), ('Trisha', 19710617), ('Suzanne', 19680921), ('Lisa', 19801119), ('Martha', 19551005), ('Kandiss', 19770221), ('Brooke', 19780413), ('Cristina', 19750825), ('Jasmine', 19810102), ('Kathleen', 19830125), ('Melissa', 19770524), ('Michelle', 19731114), ('April', 19831011), ('Olivia', 19810310), ('Melissa', 19650221), ('Cami', 19720314), ('Marissa', 19780318), ('Kristin', 19720204), ('Christi', 19610509), ('Cindy', ''), ('Ashley', 19830506), ('Leigh', 19831014), ('Natalia', 19831110), ('Nikhila', 19850208), ('Rachel', 19820916), ('Alison', 19850118), ('Cameron', 19830328), ('Gretchen', 19820304), ('Cackie', 19661107), ('Stephanie', 19650104), ('Miriam', 19850925), ('Nicole', 19880219), ('Lilivette', 19800225), ('Jonni', 19791203), ('Amanda', 19850102), ('Weyli', 19800722), ('Helene', 19841215), ('Amanda', 19841101), ('Nicole', 19870615), ('Stefani', 19841215), ('Laura', 19860217), ('Tifanie', 19880920), ('Mary', 19651124), ('Katherine', 19730414), ('Monica', 19800204), ('Nicole', 19850105), ('Shanna', 19750428), ('Jane', 19890926), ('Estelle', 19890503), ('Maria', 19820204), ('Jessica', 19860812), ('Renata', 19650224), ('Laura', 19830408), ('Lindsey', 19840313), ('Christy', 19850925), ('Timberly', 19831209), ('Brooke', 19850423), ('Kelli Elizabeth', 19940409), ('Melanie', ''), ('Whitney P', 19930625), ('Sydni', 19880612), ('Jasmine Nicole', 19930826), ('Alexandra', 19920812), ('Amber', 19870605), ('Kelsey', 19920610), ('Alex', 19920225), ('Ashley M', 19940304), ('Lauren', 19940828), ('Stacia', 19930914), ('Alexandria', 19900111), ('Rozel Asuncion', 19950616), ('Bolan', 19890908), ('Annie', 19920829), ('Eva', 19941007), ('Whitney', 19900909), ('Hanna', 19911107), ('Mandy', 19910501), ('Gia', 19900614), ('Brooke', 19951105), ('Lisa', 19680519), ('Alexandra M', 19930120), ('Sonya Sheeran', 19940816), ('Shinann', 19900608), ('Nicolette', 19950824), ('Rebecca', 19921125), ('Ashley', 19960430), ('Savannah', 19950115), ('Margaret', 19570423), ('Carlee', 19950724), ('Sarah', 19850718), ('Caroline', 19840926), ('Alexia', 19940421), ('Micaela', 19890311), ('Tina', 19810116), ('Manon Cristina', 19941224), ('Hailey M', 19930127), ('Tiffany', 19911216), ('Devan', 19940528), ('Courtenay', 19770227), ('Christine', 19931110), ('Emily', 19900517), ('Leyla', 19930423), ('Alexis', 19880722), ('Di Andrea', 19950730), ('Jandayia', 19960303), ('Margarita', 19950317), ('Olivia', 19941211), ('Caitlin', 19910905), ('Kara', 19910629), ('Paloma', 19890313), ('Susie', 19491114), ('Emily', 19861118), ('Abbie', 19951121), ('Alanna', 19950107), ('Siobhan', 19871110), ('Kayla Symone', 19960110), ('Margie', 19901106), ('Jamie', 19820521), ('Adria', 19791221), ('Lynn', 19941106), ('Nadege', 19960527), ('Lauren', 19941203), ('Tiffany', 19881204), ('Sarah', 19880907), ('Victoria', 19941214), ('Natalia', 19950325), ('Alexandra', 19931013), ('Montana', 19970219), ('Samantha Rose', 19940410), ('Angela', 19980331), ('Samantha', 19950527), ('Elizabeth', 19890419), ('Sarah', 19941121), ('Gabriela', 19950418), ('Tina', 19911222), ('Mia', 19920116), ('Stephanie', 19920831), ('Kennan', 19960317), ('Madison', 19930602), ('Whitney', 19910815), ('Sarah', 19960925), ('Brooke', 19980614), ('Jessie Lynn', 19951228), ('Brittany', 19941212), ('Kylie', 19870826), ('Erin', 19861102), ('Lindsay', 19821118), ('Jessica', 19801107), ('Yuliya', 19860609), ('Kathryn', 19831129), ('Lyndsey', 19820509), ('Tiana', 19841014), ('Keri', 19870310), ('Sarah', 19871201), ('Alyssa', 19841006), ('Rachel', 19870205), ('Angelina', 19521229), ('Amy', 19540720), ('Bernadette', 19821015), ('Tarrin', 19820423), ('Christine', 19670817), ('Christian', 19870108), ('Emily', 19820728), ('Kelly', 19700330), ('Courtney', 19900729), ('Taylor', 19900818), ('Carissa', 19900507), ('Heather', 19810210), ('Georgiana', 19880624), ('Michelle', 19910127), ('Brintney', 19871008), ('Chisako', 19870720), ('Kristen', 19890819), ('Jessica', 19910223), ('Susie', 19700212), ('Ashley', 19830410), ('Megan', 19890818), ('Larraine', 19910713), ('Courtney', 19920503), ('Tiffany', 19860519), ('Olga', 19880819), ('Shauna', 19900424), ('Canna', 19860515), ('Jennifer', 19890525), ('Keri', ''), ('Lauren', 19890922), ('Whitney', 19880108), ('Caitlyn', 19891220), ('Stephanie', 19890627), ('Jacqueline', 19910905), ('Natalia Maria', 19880414), ('Katie', 19921222), ('Stephanie', 19880527), ('Kirsten', 19810703), ('Taylor', 19881121), ('Rebecca', 19880627), ('Maggie', 19881230), ('Arianna', 19910421), ('Katrina', 19860415), ('Jennifer', 19851029), ('Amber', 19920313), ('Kali A', 19880211), ('Merritt', 19890702), ('Whitney', 19860409), ('Jovana', 19900831), ('Daisy', 19841010), ('Danice', 19801001), ('Dana', 19870713), ('Kellie', 19871004), ('Magdalena', 19880701), ('Alison', 19900425), ('Myke', 19610608), ('Isadora', 19920421), ('Kelly', 19900622), ('Kristina', 19890516), ('Lindsey', 19930106), ('Emily Theresa', 19901123), ('Lauren', 19900423), ('Jenna', 19931127), ('Elizabeth', 19831216), ('Kelly', 19891215), ('Chelsea', 19880701), ('Sabrina', 19930104), ('Jamila', 19920114), ('Tracy', 19860926), ('Whitney', 19870831), ('Margaret', 19910927), ('Alexandra', 19920422), ('Mikayla', 19880525), ('Hailee', 19880530), ('Maureen', 19900314), ('Catherine R', 19910609), ('Erin', 19900530), ('Maryam', 19930203), ('Shabnam', 19910726), ('Caitlyn', 19931013), ('Chelsea', 19850919), ('Ashley', 19820703), ('Christina', 19890331), ('Chanel', 19930618), ('Amanda', 19890125), ('Alexandra', 19891129), ('Monica', 19901123), ('Lauren', 19890811), ('Jacquelyn', 19870304), ('Jacquelynn', 19890111), ('Courtney M', 19880916), ('Courtney', 19820114), ('Kristen', 19820114), ('Cameron', 19881217), ('Caroline', 19900110), ('Susanne', 19750213), ('Sarah', 19920801), ('Niltooli', 19900411), ('Victoria', 19891231), ('Hiromi', 19900510), ('Rachel', 19900209), ('Sena', 19970605), ('Christi', 19960204), ('Tatum', 19970428), ('Madeline', 19940911), ('Julia', 19890628), ('Kelly', 19941021), ('Jasmine Janelle', 19920519), ('Maria', 19950924), ('Monet', 19960106), ('Cordelia Currey', 19930607), ('Millie', 19911004), ('Madison', 19941227), ('Zaina', 19970519), ('Katelyn', 19870608), ('Amanda', 19961028), ('Anna Kate', 19941011), ('Tamijean', 19980616), ('Victoria', 19961202), ('Christiana', 19951116), ('Angie', 19750716), ('Kerry', 19680528), ('Anna', 19960128), ('Sabrina', 19920113), ('Brienne', 19971125), ('Sarah', 19960513), ('Stephanie J', 19960305), ('Alexus', 19970206), ('Alexandra', 19990630), ('Chloe', 19900921), ('Megan', 19960122), ('Erin', 19941226), ('Sydney', 19950909), ('Katherine', ''), ('Lauren', 19990905), ('Teresa', 19941010), ('Alix', 19950718), ('Alaina', 19980809), ('Cassie', 19950201), ('Morgan', 19940208), ('Kenna', 19930918), ('Kelli', 19931202), ('Lauren', 19940618), ('Katrina', 19920314), ('Taylor', 19921208), ('Sara Catherine', 19970130), ('Tamara', 19850418), ('Mckenna Alexandra', 19970303), ('Caroline', 19990809), ('Hada', 19980710), ('Lauren', 19970108), ('Jacara', 19980704), ('Ndindi Inziani', 19971224), ('Susanne', 19980505), ('Bianca', 19960804), ('Caitlin', 19960406), ('Iesha', 19911109), ('Chelsie Marie', 19920321), ('Aurora', 19921204), ('Alexandra', 19950811), ('Karolina', 19990305), ('Skylar', 19950616), ('Jillian', 20010513), ('Gabrielle', 19960114), ('Gabriella', 19971216), ('Allison', 19980324), ('Madeline', 19970403), ('Darya', 19981019), ('Seriana', 19980227), ('Erin', 19960312), ('Katherine', 20001206), ('Vivian', 20000111), ('Stephanie M', 19931110), ('Sabrina', 19971216), ('Kate', 19971013), ('Emma', 20000212), ('Lauren', 20010728), ('Kayla', 19930220), ('Khume', 19961023), ('Christiana', 19970614), ('Candace Olivia', 19800101), ('Alycia', 20001231), ('Mikayla', 19990722), ('Tiffany', 19971009), ('Sanyukta', 20010928), ('Karly', 19850115), ('Emma', 19940624), ('Arielle', 20000910), ('Marjorie', 19980202), ('Anastasiya', 19990324), ('Natasha', ''), ('Addison', ''), ('Mbalia', 19980107), ('Safiya', ''), ('Taylor', 20010406), ('Natasha', 19920609), ('Katherine', 20010213), ('Madison', 19961215), ('Omolola', 19840818), ('Reagan', 19980505), ('Katelyn', 19960909), ('Sophie', 20021031), ('Gabrielle', 19920202), ('Taylor', 19981203), ('Andrea', 19940728), ('Annie', 19870905), ('Olivia', 19990308), ('Imani', 20011220), ('Lauren', 20020523), ('Taylor', 20000807), ('Nicole', 20000304), ('Jane', 19881118), ('Chelsea', 20000819), ('Peyton', 19990915), ('Ellie', 20000523), ('Jane', 19931227), ('Anna', 20010815), ('Rosalyn', 19930622), ('Madison', 19990419), ('Sophia', 20010718), ('Jasmine', 19990813), ('Theresa', 19701102), ('Spirit', 19941027), ('Najah', 20010909), ('Sharmada', 19990810), ('Nicole', 20000812), ('Nina', 20020117), ('Alexa', 20020906), ('Naomi', 20020516), ('Sabina', 20010406), ('Katie', 20011231), ('Nikki', 20011019), ('Mccartney', 19990708), ('Tricia', 19920706), ('Peyton', 20011008), ('Anika', 20010807), ('Dalayna', 20001216), ('Kolie', 20000317), ('Cassie', 19960225), ('Anna', 20020102), ('Monica', 19950419), ('Taysia', 20000708), ('Kathleen', 19940728), ('Amanda', 19990718), ('Jimena', 20000707), ('Cassidy', 19950510), ('Brittany', 19950405)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the last name of the student who has a cat that is age 3.' in SQLite? I currently have 'SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3', which outputs [('Smith',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the lowest grade of students who do not have any friends?' in SQLite? I currently have 'SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is spoken by the largest number of countries?' in SQLite? I currently have 'SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1', which outputs [('English',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which region is the city Kabul located in?' in SQLite? I currently have 'SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'', which outputs [('Southern and Central Asia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \\\"Kabul\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum number of final tables made among poker players with earnings less than 200000?' in SQLite? I currently have 'SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000', which outputs [(26.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.' in SQLite? I currently have 'SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC', which outputs [('Fernando Gago', 6), ('Gonzalo Higuaín ', 8), ('Guti Midfielder', 5)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of poker players who have earnings above 300000.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000', which outputs [('Aleksey Ostapenko',), ('Maksim Botin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers and the total sales of their songs.' in SQLite? I currently have 'SELECT T1.Name, sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name', which outputs [('Liliane Bettencourt', 1646407.0), ('Christy Walton', 651421.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Gina Rinehart', 292000.0), ('Susanne Klatten', 261000.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers and the total sales of their songs.' in SQLite? I currently have 'SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name', which outputs [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name, population and expected life length of asian country with the largest area?' in SQLite? I currently have 'SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1', which outputs [('China', 1277558000, 71.4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the city with the largest population that uses English.' in SQLite? I currently have 'SELECT Name FROM city WHERE Population = (SELECT max(Population) FROM city WHERE CountryCode IN (SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English'))', which outputs [('New York',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" ORDER BY T1.Population DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the city with the largest population that uses English.' in SQLite? I currently have 'SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1', which outputs [('New York', 8008278)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" ORDER BY T1.Population DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are each owner's first name and their dogs's name?' in SQLite? I currently have 'SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id', which outputs [('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name of the conductor that has conducted the most number of orchestras.' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1', which outputs [('Michael Tilson Thomas',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different template type codes?' in SQLite? I currently have 'SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types', which outputs [('AD',), ('BK',), ('CV',), ('PP',), ('PPT',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different template type codes?' in SQLite? I currently have 'SELECT DISTINCT template_type_code FROM Templates', which outputs [('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first, middle, and last name of the first student to register?' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1', which outputs [('Timmothy', 'Anna', 'Ward')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many paragraphs in total?' in SQLite? I currently have 'SELECT COUNT(*) FROM Paragraphs', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Paragraphs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the id and weight of all pets whose age is older than 1.' in SQLite? I currently have 'SELECT PetID, weight FROM Pets WHERE pet_age > 1', which outputs [(2001, 12.0), (2002, 13.4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT petid ,  weight FROM pets WHERE pet_age  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the zip code for Port Chelsea?' in SQLite? I currently have 'SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'', which outputs [('148',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many courses in total are listed?' in SQLite? I currently have 'SELECT COUNT(*) FROM Courses', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of documents that use templates with the code BK?' in SQLite? I currently have 'SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'', which outputs [('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \\\"BK\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city has most number of arriving flights?' in SQLite? I currently have 'SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.' in SQLite? I currently have 'SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'', which outputs [('Employee', '6915 Oberbrunner Point Suite 491\\nGleasonville, LA ', 'West Heidi', 'Indiana')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'In 1980, how many cars were made?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Year = 1980', which outputs [(29,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is total bonus given in all evaluations?' in SQLite? I currently have 'SELECT SUM(Bonus) FROM evaluation', which outputs [(19500.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the stadiums without any concerts?' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)', which outputs [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of makers of care in France?' in SQLite? I currently have 'SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of makers of care in France?' in SQLite? I currently have 'SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first and second line for all addresses?' in SQLite? I currently have 'SELECT line_1, line_2 FROM Addresses', which outputs [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.' in SQLite? I currently have 'SELECT T2.owner_id, T3.last_name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id JOIN Owners AS T3 ON T2.owner_id = T3.owner_id GROUP BY T2.owner_id, T3.last_name ORDER BY COUNT(*) DESC LIMIT 1', which outputs [(14, 'Funk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show titles of songs and names of singers.' in SQLite? I currently have 'SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID', which outputs [(\"Do They Know It's Christmas\", 'Liliane Bettencourt'), (\"F**k It (I Don't Want You Back)\", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?' in SQLite? I currently have 'SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id HAVING count(DISTINCT T2.Model) >= 2 AND count(T3.Make) > 3', which outputs [(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?' in SQLite? I currently have 'SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;', which outputs [(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?' in SQLite? I currently have 'SELECT T1.MakeId, T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders < 4', which outputs [(79, 'mazda'), (119, 'mazda'), (251, 'mazda')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?' in SQLite? I currently have 'select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;', which outputs [(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and descriptions.' in SQLite? I currently have 'SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types', which outputs [('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_code ,  template_type_description FROM Ref_template_types\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id of the document with the fewest paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1', which outputs [(3, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the id of the document with the fewest paragraphs.' in SQLite? I currently have 'SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the count of singers?' in SQLite? I currently have 'SELECT COUNT(*) FROM singer', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which owner owns the most dogs? List the owner id, first name and last name.' in SQLite? I currently have 'SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN (SELECT owner_id, count(*) as dog_count FROM Dogs GROUP BY owner_id) AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.dog_count DESC LIMIT 1', which outputs [(14, 'Rachelle', 'Funk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of friends of the high school student Kyle.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle'))', which outputs [('Jordan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show me all grades that have at least 4 students.' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4', which outputs [(9,), (10,), (11,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many airports do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM airports', which outputs [(100,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRPORTS\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average horsepower for all cars produced before 1980 ?' in SQLite? I currently have 'SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980', which outputs [(111.13291139240506,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(horsepower) from cars_data where year  <  1980;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of tournaments that have more than 10 matches?' in SQLite? I currently have 'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10', which outputs [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the number of high schoolers for each grade.' in SQLite? I currently have 'SELECT COUNT(*) ,  grade FROM Highschooler GROUP BY grade', which outputs [(4, 9), (4, 10), (4, 11), (4, 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the number of high schoolers for each grade.' in SQLite? I currently have 'SELECT grade ,  count(*) FROM Highschooler GROUP BY grade', which outputs [(9, 4), (10, 4), (11, 4), (12, 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights arriving in Aberdeen.' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of the dogs who have gone through any treatments?' in SQLite? I currently have 'SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)', which outputs [(5.111111111111111,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total amount of bonus given in all the evaluations.' in SQLite? I currently have 'SELECT sum(Bonus) FROM evaluation', which outputs [(19500.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(bonus) FROM evaluation\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the birth year and citizenship of singers?' in SQLite? I currently have 'SELECT Birth_Year, Citizenship FROM singer', which outputs [(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Birth_Year ,  Citizenship FROM singer\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high school students and their corresponding number of friends.' in SQLite? I currently have 'SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', which outputs [('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the abbreviation of the airilne has the fewest flights and what country is it in?' in SQLite? I currently have 'SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)', which outputs [('UAL', 'USA'), ('USAir', 'USA'), ('Delta', 'USA'), ('Southwest', 'USA'), ('American', 'USA'), ('Northwest', 'USA'), ('Continental', 'USA'), ('JetBlue', 'USA'), ('Frontier', 'USA'), ('AirTran', 'USA'), ('Allegiant', 'USA'), ('Virgin', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the abbreviation of the airilne has the fewest flights and what country is it in?' in SQLite? I currently have 'SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1', which outputs [('AirTran', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the package option of the tv channel that do not have any cartoon directed by Ben Jones.' in SQLite? I currently have 'SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')', which outputs [('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the name and theme for all concerts and the number of singers in each concert.' in SQLite? I currently have 'SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme', which outputs [('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of continents?' in SQLite? I currently have 'SELECT COUNT(*) FROM continents', which outputs [(5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the number of concerts that occurred in the stadium with the largest capacity ?' in SQLite? I currently have 'SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all template type codes and the number of documents using each type.' in SQLite? I currently have 'SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code', which outputs [('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the major and age of students who do not have a cat pet.' in SQLite? I currently have 'SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')', which outputs [(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the distinct breed type and size type combinations for dogs.' in SQLite? I currently have 'SELECT DISTINCT T1.breed_name, T2.size_description FROM Dogs AS T3 JOIN Breeds AS T1 ON T3.breed_code = T1.breed_code JOIN Sizes AS T2 ON T3.size_code = T2.size_code', which outputs [('Eskimo', 'Large'), ('Bulldog', 'Large'), ('Bulldog', 'Medium'), ('Husky', 'Medium'), ('Eskimo', 'Small'), ('Husky', 'Small'), ('Eskimo', 'Medium')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the distinct breed type and size type combinations for dogs.' in SQLite? I currently have 'SELECT DISTINCT breed_code ,  size_code FROM dogs', which outputs [('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT breed_code ,  size_code FROM dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the airport name for airport 'AKO'?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode = 'AKO'', which outputs [('Colorado Plains Regional Airport ',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \\\"AKO\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of players.' in SQLite? I currently have 'SELECT COUNT(*) FROM players', which outputs [(20662,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?' in SQLite? I currently have 'SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000', which outputs [(480753000, 1344763.7222222222)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?' in SQLite? I currently have 'select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000', which outputs [(None, None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select sum(population) ,  avg(surfacearea) from country where continent  =  \\\"north america\\\" and surfacearea  >  3000\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each hometown, how many teachers are there?' in SQLite? I currently have 'SELECT COUNT(Teacher_ID), Hometown FROM teacher GROUP BY Hometown', which outputs [(1, 'Blackrod Urban District'), (1, 'Bolton County Borough'), (1, 'Farnworth Municipal Borough'), (1, 'Horwich Urban District'), (1, 'Kearsley Urban District'), (1, 'Little Lever Urban District'), (1, 'Turton Urban District')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each hometown, how many teachers are there?' in SQLite? I currently have 'SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown', which outputs [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average GNP and total population in all nations whose government is US territory?' in SQLite? I currently have 'SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'', which outputs [(None, None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average GNP and total population in all nations whose government is US territory?' in SQLite? I currently have 'SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"', which outputs [(510.3333333333333, 329000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \\\"US Territory\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many documents do we have?' in SQLite? I currently have 'SELECT COUNT(*) FROM Documents', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average weight for each pet type.' in SQLite? I currently have 'SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType', which outputs [('cat', 12.0), ('dog', 11.350000000000001)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average weight for each pet type.' in SQLite? I currently have 'SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype', which outputs [(12.0, 'cat'), (11.350000000000001, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show different hometown of teachers and the number of teachers from each hometown.' in SQLite? I currently have 'SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown', which outputs [('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What's the name of the course with most number of enrollments?' in SQLite? I currently have 'SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1', which outputs [('rs',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all the student details in reversed lexicographical order.' in SQLite? I currently have 'SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC', which outputs [(3, 9, 5, 'Warren', 'Violet', 'Gleichner', '07661787471', 'johns.unique@example.net', '3', '2007-08-29 23:25:41', '2007-03-31 09:53:19', 'facilis'), (1, 10, 15, 'Timmothy', 'Anna', 'Ward', '(096)889-8954x524', 'erwin.zboncak@example.com', '965', '1971-02-05 07:28:23', '1971-05-17 19:28:49', 'quia'), (6, 6, 3, 'Stanford', 'Mona', 'Rogahn', '436.613.7683', 'skassulke@example.net', '248', '1997-03-20 16:47:25', '2016-04-09 12:27:04', 'qui'), (9, 2, 15, 'Reva', 'Golda', 'Osinski', '(507)365-8405', \"qo'kon@example.com\", '39', '2017-01-04 08:10:25', '1990-09-01 05:03:27', 'nesciunt'), (12, 14, 9, 'Orrin', 'Neal', 'Kemmer', '(982)153-1469x1733', 'beth42@example.org', '6274274', '2005-12-15 08:42:10', '2006-08-04 17:26:49', 'non'), (5, 9, 9, 'Milton', 'Vaughn', 'Christiansen', '171-642-5684', 'lhartmann@example.org', '', '1973-05-19 19:12:46', '2007-11-28 12:50:21', 'laborum'), (14, 12, 11, 'Jordy', 'Osborne', 'Rempel', '(605)919-3594x3661', 'gracie29@example.com', '34458427', '2004-12-24 12:36:46', '1999-08-24 00:07:10', 'et'), (15, 2, 9, 'Jett', 'Alberta', 'Jaskolski', '877.549.9067x8723', 'mya88@example.org', '156', '1982-06-19 13:15:18', '1982-06-11 00:25:39', 'omnis'), (4, 7, 11, 'Jarvis', 'Aaliyah', 'Carroll', '09700166582', 'jillian26@example.net', '141072406', '2014-03-28 05:48:23', '2007-08-02 04:12:58', 'atque'), (2, 12, 5, 'Hobart', 'Lorenz', 'Balistreri', '1-009-710-5151', 'swift.kolby@example.com', '304246', '1976-10-26 02:33:06', '2013-10-05 17:41:28', 'autem'), (10, 15, 14, 'Helga', 'Cleve', 'Mohr', '677.401.9382', 'nya.lesch@example.net', '43', '2009-09-25 00:14:25', '2017-07-09 21:38:43', 'rerum'), (11, 14, 4, 'Gregg', 'Mossie', 'Schuppe', '(462)246-7921', 'nbruen@example.org', '494', '1989-05-24 23:31:29', '1975-10-09 00:49:27', 'omnis'), (7, 15, 3, 'Frida', 'Aisha', 'Huel', '1-879-796-8987x164', 'baumbach.lucious@example.org', '668', '2018-03-13 09:56:22', '1997-11-16 08:54:33', 'dolorum'), (13, 9, 8, 'Deon', 'Brooklyn', 'Weimann', '(213)445-0399x85208', 'jhuel@example.com', '68095', '1986-02-24 21:12:23', '2014-05-30 23:32:02', 'assumenda'), (8, 1, 5, 'Delaney', 'Judd', 'Ankunding', '03174364122', 'dell43@example.net', '402', '1982-02-14 08:46:35', '2004-12-08 05:29:11', 'voluptatem')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT other_student_details FROM Students ORDER BY other_student_details DESC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all the student details in reversed lexicographical order.' in SQLite? I currently have 'SELECT other_student_details FROM Students ORDER BY other_student_details DESC', which outputs [('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT other_student_details FROM Students ORDER BY other_student_details DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.' in SQLite? I currently have 'SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1', which outputs [(6, 'Stanford', 'Mona', 'Rogahn', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.' in SQLite? I currently have 'SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1', which outputs [(7, 'Frida', 'Aisha', 'Huel', 3, 7)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many friends does the high school student Kyle have?' in SQLite? I currently have 'SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of the dogs who have gone through a treatment?' in SQLite? I currently have 'SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', which outputs [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of the dogs who have gone through a treatment?' in SQLite? I currently have 'SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id', which outputs [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many high schoolers are in each grade?' in SQLite? I currently have 'SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade', which outputs [(9, 4), (10, 4), (11, 4), (12, 4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of poker players ordered by the final tables made in ascending order.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC', which outputs [('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many 'United Airlines' flights depart from Airport 'AHD'?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the program which most number of students are enrolled in. List both the id and the summary.' in SQLite? I currently have 'SELECT T1.degree_program_id, T2.degree_summary_name, count(T1.student_id) as num_students FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T2.degree_summary_name ORDER BY num_students DESC LIMIT 1', which outputs [(9, 'Bachelor', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the program which most number of students are enrolled in. List both the id and the summary.' in SQLite? I currently have 'SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1', which outputs [(9, 'Bachelor')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the years in which orchestras that have given more than one performance are founded.' in SQLite? I currently have 'SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and grades for each high schooler?' in SQLite? I currently have 'SELECT name, grade FROM Highschooler', which outputs [('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  grade FROM Highschooler\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.' in SQLite? I currently have 'SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'', which outputs [('Sky Radio',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the money rank of the poker player with the greatest height.' in SQLite? I currently have 'SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people)', which outputs [(68.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the number of likes that the high schooler named Kyle has.' in SQLite? I currently have 'SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id and name of the museum visited most times?' in SQLite? I currently have 'SELECT T1.Museum_ID, T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID, T1.Name HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM visit         GROUP BY Museum_ID     ) AS T3 )', which outputs [(2, 'Capital Plaza Museum'), (4, 'Willow Grande Museum')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id and name of the museum visited most times?' in SQLite? I currently have 'SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1', which outputs [(2, 'Capital Plaza Museum')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the contestant numbers and names of the contestants who had at least two votes?' in SQLite? I currently have 'SELECT T2.contestant_number, T2.contestant_name  FROM CONTESTANTS AS T2  WHERE T2.contestant_number IN (     SELECT T1.contestant_number      FROM VOTES AS T1      GROUP BY T1.contestant_number      HAVING count(*) >= 2 )', which outputs [(3, 'Kelly Clauss')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average edispl for all volvos?' in SQLite? I currently have 'SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'volvo'', which outputs [(133.5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights fly from Aberdeen to Ashley?' in SQLite? I currently have 'SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \\\"Ashley\\\" AND T3.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are 3 most highly rated episodes in the TV series table and what were those ratings?' in SQLite? I currently have 'SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3', which outputs [('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the grade that has the greatest number of high schoolers.' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of high schoolers in grades 9 or 10.' in SQLite? I currently have 'SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have likes, and numbers of likes for each.' in SQLite? I currently have 'SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name', which outputs [('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the total surface area covered by countries in Asia or Europe.' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'', which outputs [(54930138.9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the singer with the largest net worth?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1', which outputs [('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of the contestants whose names contain the substring 'Al' .' in SQLite? I currently have 'SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'', which outputs [('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select contestant_name from contestants where contestant_name like \\\"%al%\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total surface area of the continents Asia and Europe?' in SQLite? I currently have 'SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'', which outputs [(54930138.9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \\\"Asia\\\" OR Continent  =  \\\"Europe\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the arriving date and the departing date of the dogs that received a treatment.' in SQLite? I currently have 'SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id', which outputs [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the arriving date and the departing date of the dogs that received a treatment.' in SQLite? I currently have 'SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id', which outputs [('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the region and population of Angola?' in SQLite? I currently have 'SELECT Region, Population FROM country WHERE Name = 'Angola'', which outputs [('Central Africa', 12878000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the region and population of Angola?' in SQLite? I currently have 'SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"', which outputs [(12878000, 'Central Africa')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  Region FROM country WHERE Name  =  \\\"Angola\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have a flight with source airport AHD?' in SQLite? I currently have 'SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \\\"AHD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For the countries founded before 1930, what is the total number of distinct official languages?' in SQLite? I currently have 'SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T1.IndepYear < 1930', which outputs [(40,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the type and weight of the youngest pet.' in SQLite? I currently have 'SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)', which outputs [('dog', 9.3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium name and capacity with most number of concerts in year 2014 or after.' in SQLite? I currently have 'SELECT T2.Name, T2.Capacity FROM (SELECT T1.Stadium_ID, COUNT(T1.concert_ID) as num_concerts FROM concert AS T1 WHERE T1.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY num_concerts DESC LIMIT 1) AS T3 JOIN stadium AS T2 ON T3.Stadium_ID = T2.Stadium_ID', which outputs [('Somerset Park', 11998)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many teachers are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM teacher', which outputs [(7,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM teacher\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of United Airlines flights arriving in ASY Airport.' in SQLite? I currently have 'SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \\\"United Airlines\\\" AND T2.DestAirport  =  \\\"ASY\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different forms of governments are there in Africa?' in SQLite? I currently have 'SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries in europe have at least 3 car manufacturers?' in SQLite? I currently have 'SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN continents AS T3 ON T1.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T1.CountryName HAVING count(*)  >=  3', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries in europe have at least 3 car manufacturers?' in SQLite? I currently have 'SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;', which outputs [('france',), ('germany',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the template type descriptions for template type code \"AD\".' in SQLite? I currently have 'SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'', which outputs [('Advertisement',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \\\"AD\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the accelerate of the car make amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the accelerate of the car make amc hornet sportabout (sw)?' in SQLite? I currently have 'SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';', which outputs [(13.5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For all of the 4 cylinder cars, which model has the most horsepower?' in SQLite? I currently have 'SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1', which outputs [('ford',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.' in SQLite? I currently have 'SELECT Dogs.name, Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'', which outputs [('Bessie', 'Melisa')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.' in SQLite? I currently have 'SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'', which outputs [('Melisa', 'Bessie')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from City Aberdeen?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average rank for winners in all matches?' in SQLite? I currently have 'SELECT AVG(winner_rank) FROM matches', which outputs [(13.715827338129497,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(winner_rank) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with at least 2 courses listed?' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id, T1.transcript_date  HAVING count(*) >= 2', which outputs [(5, '2013-06-30 13:01:40'), (6, '2010-12-13 10:55:15'), (8, '1975-05-06 12:04:47'), (15, '1998-11-22 12:18:29')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with at least 2 courses listed?' in SQLite? I currently have 'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2', which outputs [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Sort all the shops by number products in descending order, and return the name, location and district of each shop.' in SQLite? I currently have 'SELECT Name, Location, District FROM shop ORDER BY Number_products DESC', which outputs [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the name of the high school student with the most friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(T2.friend_id) DESC LIMIT 1', which outputs [('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'list all cartoon titles and their directors ordered by their air date' in SQLite? I currently have 'SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date', which outputs [('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the feature type name of feature AirCon?' in SQLite? I currently have 'SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'', which outputs [('Amenity, eg Pool.',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \\\"AirCon\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors, sorted descending by the number of years they have worked?' in SQLite? I currently have 'SELECT Name FROM conductor ORDER BY Year_of_Work DESC', which outputs [('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM conductor ORDER BY Year_of_Work DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and id of courses having at most 2 sections?' in SQLite? I currently have 'SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) <= 2', which outputs [(1, 'ds'), (2, 'math'), (4, 'en'), (5, 'fr'), (6, 'la'), (7, 'cal'), (8, 'nlp'), (9, 'dl'), (10, 'ml'), (12, 'db'), (14, 'pl')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and id of courses having at most 2 sections?' in SQLite? I currently have 'SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2', which outputs [('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of employees hired in each shop; show the shop name as well.' in SQLite? I currently have 'SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name', which outputs [(2, 'FC Haka'), (1, 'HJK'), (1, 'FC Inter'), (1, 'FF Jaro'), (1, 'FC KooTeePee'), (1, 'FC Lahti')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of employees hired in each shop; show the shop name as well.' in SQLite? I currently have 'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name', which outputs [(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average ranking for each player and their first name.' in SQLite? I currently have 'SELECT avg(T1.ranking), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name, T1.player_id', which outputs [(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (322.00815217391306, 'Abigail'), (1203.9285714285713, 'Abigail'), (605.425925925926, 'Abigail'), (915.0, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (361.5919540229885, 'Adriana'), (1048.4444444444443, 'Adriana'), (738.4942528735633, 'Adriana'), (1064.7826086956522, 'Adriana'), (1200.4117647058824, 'Adrienn'), (1229.8461538461538, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (218.52747252747253, 'Agnes'), (501.8861283643892, 'Agnes'), (544.9512195121952, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (565.3363914373089, 'Agustina'), (1075.2736842105264, 'Agustina'), (1182.5, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (841.9686520376175, 'Ai'), (998.4620689655172, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (230.80138169257341, 'Aiko'), (774.046875, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (466.9746434231379, 'Akiko'), (504.54647887323944, 'Akiko'), (1275.8235294117646, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1116.6883116883116, 'Alejandra'), (1041.6666666666667, 'Alejandra'), (1003.1176470588235, 'Alejandra'), (257.66568483063327, 'Aleksandra'), (215.03548387096774, 'Aleksandra'), (1028.6904761904761, 'Aleksandra'), (1097.741573033708, 'Aleksandra'), (1209.625, 'Aleksandra'), (1210.764705882353, 'Aleksandra'), (1018.3636363636364, 'Aleksandra'), (835.16, 'Aleksandra'), (962.4629629629629, 'Aleksandra'), (747.5342465753424, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (714.1326530612245, 'Alena'), (1160.6857142857143, 'Alena'), (1070.6666666666667, 'Alena'), (1274.9444444444443, 'Alena'), (1123.4864864864865, 'Alessandra'), (1036.8349056603774, 'Alessia'), (961.4230769230769, 'Alessia'), (1134.12, 'Alessia'), (1184.5217391304348, 'Alessia'), (1224.0, 'Alessia'), (1145.1641791044776, 'Alessondra'), (278.57538994800694, 'Alexa'), (489.4848484848485, 'Alexa'), (1033.6486486486488, 'Alexa'), (704.0958904109589, 'Alexa'), (971.0909090909091, 'Alexa'), (281.5547667342799, 'Alexandra'), (274.33022388059703, 'Alexandra'), (367.9034941763727, 'Alexandra'), (502.8416149068323, 'Alexandra'), (435.7653846153846, 'Alexandra'), (806.576, 'Alexandra'), (761.5461254612546, 'Alexandra'), (616.9638989169675, 'Alexandra'), (928.4886363636364, 'Alexandra'), (994.2234636871508, 'Alexandra'), (580.3488372093024, 'Alexandra'), (981.0702247191011, 'Alexandra'), (860.8079470198676, 'Alexandra'), (1025.8503937007874, 'Alexandra'), (1373.3673469387754, 'Alexandra'), (628.2191780821918, 'Alexandra'), (992.4444444444445, 'Alexandra'), (801.0, 'Alexandra'), (1178.888888888889, 'Alexandra'), (1123.3461538461538, 'Alexandra'), (660.4509803921569, 'Alexandra'), (1050.9130434782608, 'Alexandra'), (1225.6206896551723, 'Alexandra'), (945.625, 'Alexandria'), (694.5176470588235, 'Alexia'), (1255.421052631579, 'Alexia'), (589.8897637795276, 'Alexis'), (1207.8333333333333, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (625.4850948509485, 'Alice'), (911.6255506607929, 'Alice'), (757.4059040590406, 'Alice'), (651.2678571428571, 'Alice'), (853.2352941176471, 'Alice'), (536.8039215686274, 'Alice'), (1014.060606060606, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1076.1882352941177, 'Alicia'), (1132.94, 'Alicia'), (1161.421052631579, 'Alicia'), (855.813627254509, 'Alicja'), (1060.0184049079755, 'Alina'), (893.7272727272727, 'Alina'), (783.5474452554745, 'Alina'), (854.8849557522124, 'Alina'), (1235.909090909091, 'Alina'), (1206.9, 'Alina'), (1273.6842105263158, 'Alina'), (611.35, 'Aliona'), (266.65635738831617, 'Alisa'), (933.8396226415094, 'Alisa'), (1130.1267605633802, 'Alisa'), (1240.2727272727273, 'Alisa'), (1212.0, 'Alisa'), (263.70631067961165, 'Alison'), (277.85227272727275, 'Alison'), (579.0348162475822, 'Alison'), (822.3459915611814, 'Alix'), (150.6958762886598, 'Alize'), (412.9482288828338, 'Alize'), (217.85922330097088, 'Alla'), (616.5055555555556, 'Allie'), (338.2395833333333, 'Allie'), (1157.8, 'Almudena'), (1175.0625, 'Alona'), (801.0, 'Alona'), (1037.3055555555557, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (775.6847826086956, 'Amanda'), (684.5194444444444, 'Amanda'), (496.64941176470586, 'Amanda'), (1068.35, 'Amanda'), (474.4166666666667, 'Amanda'), (597.5297297297298, 'Amandine'), (876.4279069767442, 'Amandine'), (1011.3666666666667, 'Amelie'), (1187.0, 'Amina'), (670.2222222222222, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (605.6197916666666, 'Amy'), (1084.030303030303, 'Amy'), (908.546875, 'Amy'), (460.8932038834951, 'An Sophie'), (54.12816188870152, 'Ana'), (293.9810495626822, 'Ana'), (556.0942028985507, 'Ana'), (509.5892857142857, 'Ana'), (534.9107142857143, 'Ana'), (878.8, 'Ana'), (1066.1382978723404, 'Ana'), (276.82481751824815, 'Ana'), (1203.1698113207547, 'Ana'), (1151.3333333333333, 'Ana'), (1097.1025641025642, 'Ana'), (1026.6842105263158, 'Ana'), (1224.0, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1112.0245398773006, 'Ana Paula'), (684.6578947368421, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (447.1293900184843, 'Anais'), (1010.2222222222222, 'Anais'), (859.3059701492538, 'Anamika'), (215.67872340425532, 'Anastasia'), (248.8754098360656, 'Anastasia'), (117.10590631364562, 'Anastasia'), (321.59166666666664, 'Anastasia'), (460.7960687960688, 'Anastasia'), (669.2153392330383, 'Anastasia'), (768.875, 'Anastasia'), (660.0541871921182, 'Anastasia'), (1015.6833333333333, 'Anastasia'), (843.5766871165645, 'Anastasia'), (661.2774193548387, 'Anastasia'), (430.17808219178085, 'Anastasia'), (710.9433962264151, 'Anastasia'), (1173.9333333333334, 'Anastasia'), (524.7534246575342, 'Anastasia'), (1149.640625, 'Anastasia'), (976.054794520548, 'Anastasia'), (851.3, 'Anastasia'), (996.76, 'Anastasia'), (337.23809523809524, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (192.35827664399093, 'Anastasija'), (1144.7142857142858, 'Anastasija'), (1020.3069306930693, 'Anastasiya'), (407.95652173913044, 'Anastasiya'), (814.1554054054054, 'Anastasiya'), (1092.3584905660377, 'Anastasiya'), (834.7169811320755, 'Anastasiya'), (899.5407407407407, 'Anastasiya'), (394.16, 'Anastasiya'), (1002.2307692307693, 'Anastasiya'), (600.95, 'Anastasiya'), (1098.4347826086957, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (176.82479338842975, 'Andrea'), (270.69384615384615, 'Andrea'), (496.8243243243243, 'Andrea'), (553.5460122699386, 'Andrea'), (640.0540540540541, 'Andrea'), (408.486301369863, 'Andrea'), (1093.313725490196, 'Andrea'), (759.2765957446809, 'Andrea'), (1039.448275862069, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (833.8493150684932, 'Andreea'), (1145.8085106382978, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1149.9705882352941, 'Aneta'), (1224.0, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1116.2571428571428, 'Angela'), (1177.2222222222222, 'Angela'), (637.6573705179283, 'Angelica'), (1240.3181818181818, 'Angelica'), (1089.1603773584907, 'Angeliki'), (677.4700193423598, 'Angelina'), (1230.5625, 'Angelina'), (830.6666666666666, 'Angelina'), (1229.6521739130435, 'Angelina'), (967.4772727272727, 'Angelina'), (140.94803149606298, 'Angelique'), (434.77777777777777, 'Angelique'), (853.6762589928057, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (574.4025641025642, 'Ani'), (977.9270833333334, 'Ani'), (620.7623762376238, 'Ani'), (1054.5243902439024, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (185.06484641638227, 'Anna'), (239.51930501930502, 'Anna'), (360.4993234100135, 'Anna'), (626.9345372460497, 'Anna'), (531.44921875, 'Anna'), (528.8242894056848, 'Anna'), (928.7887323943662, 'Anna'), (589.570652173913, 'Anna'), (726.5689655172414, 'Anna'), (542.1207729468599, 'Anna'), (761.9615384615385, 'Anna'), (755.8634146341464, 'Anna'), (588.4468085106383, 'Anna'), (1177.15625, 'Anna'), (1201.08, 'Anna'), (1264.2727272727273, 'Anna'), (823.74, 'Anna'), (784.5217391304348, 'Anna'), (1052.1333333333334, 'Anna'), (1084.9577464788733, 'Anna'), (1098.5135135135135, 'Anna'), (1062.509090909091, 'Anna'), (485.23809523809524, 'Anna'), (1027.6986301369864, 'Anna'), (1032.157894736842, 'Anna'), (435.0281690140845, 'Anna'), (947.0714285714286, 'Anna'), (1024.904761904762, 'Anna'), (319.4736842105263, 'Anna'), (1110.9333333333334, 'Anna'), (1112.7368421052631, 'Anna'), (1136.2857142857142, 'Anna'), (1228.5454545454545, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (168.40409683426444, 'Anna Lena'), (287.06635071090045, 'Anna Lena'), (1057.1584158415842, 'Anna Maria'), (1069.063492063492, 'Anna Maria'), (1141.45, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (220.68534906588005, 'Anne'), (205.10836762688615, 'Anne'), (365.46034816247584, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (1032.224358974359, 'Anouk'), (911.0778443113772, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (268.76683937823833, 'Arantxa'), (179.59712230215828, 'Arantxa'), (1134.896551724138, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (344.75, 'Arina'), (988.8534031413612, 'Arina'), (1098.1323529411766, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (453.49585062240664, 'Ashley'), (1036.9322033898304, 'Ashley'), (960.984, 'Ashley'), (698.9076923076923, 'Ashley'), (460.9, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (576.5012531328321, 'Audrey'), (647.8557692307693, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (191.73745173745175, 'Ayumi'), (579.3763919821827, 'Ayumi'), (1036.3666666666666, 'Ayumi'), (1047.7575757575758, 'Ayumi'), (556.2303370786517, 'Azra'), (697.5, 'Barbara'), (460.1609195402299, 'Barbara'), (817.0503144654089, 'Barbara'), (704.8923766816143, 'Barbara'), (1014.9026548672566, 'Barbara'), (734.2, 'Barbara'), (1193.433962264151, 'Barbara'), (895.763440860215, 'Barbara'), (102.04657933042212, 'Barbora'), (482.9059405940594, 'Barbora'), (444.9727272727273, 'Barbora'), (927.2641509433962, 'Barbora'), (587.9803278688524, 'Basak'), (1235.0555555555557, 'Basak'), (676.8051118210863, 'Beatrice'), (762.469512195122, 'Beatrice'), (743.3013698630137, 'Beatrice'), (1029.9769230769232, 'Beatrice'), (945.1636363636363, 'Beatrice'), (463.1709741550696, 'Beatriz'), (1128.4444444444443, 'Beatriz'), (413.5833333333333, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (499.7090909090909, 'Belinda'), (932.1125, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet'), (541.273631840796, 'Bernarda'), (834.1005025125628, 'Bernice'), (1005.75, 'Berta'), (146.59709379128137, 'Bethanie'), (1229.5714285714287, 'Betina'), (878.0138888888889, 'Bhuvana'), (411.2672955974843, 'Bianca'), (788.8869565217391, 'Bianca'), (892.3639575971731, 'Bianca'), (561.1369863013699, 'Bianca'), (408.7096774193548, 'Bianca'), (696.952380952381, 'Bianka'), (550.1941544885177, 'Bibiane'), (912.71875, 'Blair'), (904.6538461538462, 'Blanca'), (1196.8064516129032, 'Blessing'), (1251.673076923077, 'Blessing'), (1254.6341463414635, 'Boba'), (177.8061797752809, 'Bojana'), (513.439024390244, 'Bojana'), (737.0410958904109, 'Bojana'), (857.6111111111111, 'Bojana'), (834.2066115702479, 'Borislava'), (992.4222222222222, 'Boyan'), (970.9846153846154, 'Brandy'), (872.0930232558139, 'Breaunna'), (128.8655462184874, 'Brenda'), (827.4954954954954, 'Brenda'), (854.3170731707318, 'Brianna'), (917.0, 'Brienne'), (1126.3333333333333, 'Brindtha'), (647.5205479452055, 'Britt'), (938.6777777777778, 'Brittany'), (1151.4137931034484, 'Brittany'), (711.3770491803278, 'Brooke'), (1160.1458333333333, 'Brooke'), (952.5619834710744, 'Brynn'), (555.3384615384615, 'Bunyawi'), (1140.981981981982, 'Busra'), (311.87854251012146, 'Cagla'), (652.5196078431372, 'Caitlin'), (1237.090909090909, 'Caitlin'), (803.7139479905437, 'Camelia Elena'), (1192.1818181818182, 'Cameron'), (647.9409090909091, 'Camila'), (316.69181034482756, 'Camila'), (916.7307692307693, 'Camila'), (703.7586206896551, 'Camila'), (1201.25, 'Camila'), (1212.5263157894738, 'Camila'), (997.8333333333334, 'Camila'), (1192.3783783783783, 'Camila Vital'), (845.3106382978723, 'Camilla'), (661.2465753424658, 'Camilla'), (1029.8, 'Camille'), (1214.341463414634, 'Camille'), (236.07412398921832, 'Cara'), (416.3666666666667, 'Carina'), (155.3848797250859, 'Carla'), (630.7457627118644, 'Carla'), (597.8743169398907, 'Carla'), (1015.8947368421053, 'Carla'), (810.7826086956521, 'Carla'), (1236.7777777777778, 'Carlota'), (1121.4414414414414, 'Carlotta'), (1200.0, 'Carlotta'), (318.69978858350953, 'Carly'), (876.66472303207, 'Carmen'), (947.5849056603773, 'Carmen'), (927.5833333333334, 'Carmen'), (842.1553398058253, 'Carmen Raluca'), (564.1434426229508, 'Carol'), (592.2685714285715, 'Carolin'), (1160.111111111111, 'Carolin'), (812.9764150943396, 'Carolina'), (622.8725868725869, 'Carolina'), (546.5490196078431, 'Carolina'), (883.1845238095239, 'Carolina'), (857.370786516854, 'Carolina'), (799.0650406504066, 'Carolina Meligeni Rodrigues'), (50.034274193548384, 'Caroline'), (217.325, 'Caroline'), (831.92, 'Caroline'), (816.65625, 'Caroline'), (868.6283185840708, 'Caroline'), (575.8761904761905, 'Caroline'), (1242.0, 'Caroline'), (553.5762711864406, 'Caroline'), (1105.313725490196, 'Caroline'), (1231.904761904762, 'Caroline'), (1161.5675675675675, 'Caroline B'), (1197.578947368421, 'Carolyn'), (1020.6, 'Carson'), (242.36818181818182, 'Casey'), (1046.134328358209, 'Casey'), (260.55779427359494, 'Catalina'), (417.07086614173227, 'Catalina'), (969.9928571428571, 'Catherine'), (918.6078431372549, 'Catherine'), (959.6216216216217, 'Catherine'), (134.21917808219177, 'Catherine Cartan'), (744.0, 'Caty'), (692.07299270073, 'Cecilia'), (999.125, 'Cecilia'), (1237.34375, 'Cecilia'), (1141.842105263158, 'Cecilie Lundgaard'), (619.094512195122, 'Celine'), (821.992277992278, 'Celine'), (1123.3855421686746, 'Cemre'), (650.1367521367522, 'Chalena'), (343.2835365853659, 'Chanel'), (195.57309941520467, 'Chanelle'), (587.027027027027, 'Chanelle'), (575.4626436781609, 'Chang'), (1281.8461538461538, 'Chanikarn'), (609.90625, 'Chantal'), (1128.030303030303, 'Chantelle'), (1232.8, 'Chaoyi'), (766.4794520547945, 'Charlene'), (1129.861111111111, 'Charlotte'), (1207.0, 'Charlotte'), (958.1869158878504, 'Charlotte'), (824.1891891891892, 'Charlotte'), (1178.4166666666667, 'Charlotte'), (676.013698630137, 'Charlotte'), (593.9759036144578, 'Chayenne'), (1132.0, 'Chelsea'), (719.3061224489796, 'Chelsey'), (524.7444668008048, 'Chen'), (789.2857142857143, 'Chengyiyi'), (464.1367781155015, 'Chi Chi'), (1039.3902439024391, 'Chi Fan'), (950.8813559322034, 'Chia Hsien'), (359.3764705882353, 'Chia Jung'), (437.73858921161826, 'Chiaki'), (874.2444444444444, 'Chiara'), (1183.7407407407406, 'Chiara'), (1212.0, 'Chiara'), (1154.0980392156862, 'Chiara'), (1173.4186046511627, 'Chiara'), (826.9069767441861, 'Chiara'), (1028.4310344827586, 'Chiara'), (533.9586374695864, 'Chieh Yu'), (870.6453488372093, 'Chihiro'), (864.5165289256198, 'Chihiro'), (695.4794520547945, 'Chihiro'), (385.2651515151515, 'Chin Wei'), (615.2230215827338, 'Chinami'), (583.530303030303, 'Ching Wen'), (749.3582089552239, 'Chiraz'), (874.8181818181819, 'Chisa'), (675.2445414847161, 'Chloe'), (1112.1458333333333, 'Chompoothip'), (1112.875, 'Christie'), (228.9607390300231, 'Christina'), (706.2669683257918, 'Christina'), (874.1980198019802, 'Christina'), (841.4051724137931, 'Christine'), (692.390625, 'Chun Mei'), (986.3944099378882, 'Chun Yan'), (607.5764705882353, 'Cindy'), (1059.030303030303, 'Cindy'), (406.7672131147541, 'Claire'), (476.3121693121693, 'Claire'), (581.8194444444445, 'Claire'), (1218.2857142857142, 'Clara'), (1075.0, 'Clara'), (661.1353965183753, 'Claudia'), (1055.3680981595091, 'Claudia'), (1131.0384615384614, 'Claudia'), (1175.2058823529412, 'Claudia'), (1148.5142857142857, 'Claudia'), (1057.923076923077, 'Claudia'), (967.2978723404256, 'Claudia Antonia'), (996.2574257425742, 'Claudia Gianina'), (383.6413199426112, 'Claudine'), (823.6306306306307, 'Clelia'), (875.9772727272727, 'Clemence'), (964.1224489795918, 'Clementina Eugenia'), (620.4120171673819, 'Clothilde'), (270.5896860986547, 'Coco'), (1165.093023255814, 'Colomba'), (390.0, 'Conny'), (570.2723004694835, 'Constance'), (835.1132075471698, 'Constanza'), (1245.3333333333333, 'Constanze'), (832.7818181818182, 'Corina'), (356.8219696969697, 'Corinna'), (757.2253521126761, 'Cornelia'), (406.5511363636364, 'Cory Ann'), (1039.9928057553957, 'Costanza'), (1153.3333333333333, 'Costanza'), (554.5376344086021, 'Cristiana'), (395.9633333333333, 'Cristina'), (837.1969696969697, 'Cristina'), (598.08, 'Cristina'), (709.8819444444445, 'Cristina'), (820.3085106382979, 'Cristina'), (1147.4583333333333, 'Cristina'), (439.5747863247863, 'Cristina Andreea'), (720.6428571428571, 'Cristina Madalina'), (894.8397790055249, 'Csilla'), (977.5013927576601, 'Csilla'), (998.7722772277227, 'Cynthia'), (1010.3333333333334, 'Da Hye'), (920.1276595744681, 'Dabin'), (1159.1818181818182, 'Dagmara'), (720.7490039840637, 'Daiana'), (1181.4736842105262, 'Dajana'), (801.6933333333334, 'Dalia'), (424.83561643835617, 'Dalila'), (876.6444444444444, 'Dalila'), (1096.972972972973, 'Dalila'), (279.16438356164383, 'Dalma'), (1493.0, 'Damilola'), (1242.0, 'Damini'), (1198.3333333333333, 'Damira'), (994.4769230769231, 'Dan Ni'), (874.3333333333334, 'Dana'), (724.0, 'Dana'), (977.4539007092199, 'Daneika'), (380.609375, 'Danica'), (52.9563679245283, 'Daniela'), (519.1768707482993, 'Daniela'), (911.4528301886793, 'Daniela'), (1146.5454545454545, 'Daniela'), (1111.2, 'Daniela'), (1000.0769230769231, 'Daniela'), (1000.1896551724138, 'Daniela'), (1183.4285714285713, 'Daniela'), (1181.3684210526317, 'Daniela'), (1024.888888888889, 'Daniela'), (625.4092920353983, 'Daniella'), (1062.3, 'Daniella'), (643.331983805668, 'Danielle'), (893.4137168141593, 'Danielle'), (353.4719101123595, 'Danielle'), (946.1477272727273, 'Danielle'), (434.68, 'Danielle Rose'), (1107.0919540229886, 'Danijela'), (302.83268482490274, 'Danka'), (1226.5454545454545, 'Daphne'), (314.1638795986622, 'Daria'), (579.6666666666666, 'Daria'), (712.054347826087, 'Daria'), (1108.2295081967213, 'Daria'), (782.2476190476191, 'Daria'), (1025.0, 'Daria'), (859.4912280701755, 'Daria'), (1186.6296296296296, 'Daria'), (1178.2068965517242, 'Daria'), (464.95631067961165, 'Darija'), (1133.9636363636364, 'Dariya'), (1090.0, 'Dariya'), (422.06724137931036, 'Darya'), (708.9009900990098, 'Darya'), (1119.6931818181818, 'Darya'), (1117.0222222222221, 'Darya'), (105.02597402597402, 'Darya'), (722.6986301369863, 'Dasha'), (576.4307692307692, 'Dayana'), (550.9545454545455, 'Dea'), (650.7578947368421, 'Deborah'), (741.02, 'Deborah'), (1219.448275862069, 'Deborah'), (1115.0851063829787, 'Deeon'), (850.3064516129032, 'Dejana'), (684.156862745098, 'Dejana'), (983.4174757281553, 'Demi'), (419.1633466135458, 'Denisa'), (956.2231404958678, 'Denise'), (941.5221238938053, 'Denise'), (1160.3125, 'Denise Antonela'), (494.2918287937743, 'Deniz'), (1220.1818181818182, 'Deniz'), (1123.6486486486488, 'Deria'), (863.7826086956521, 'Desirae'), (1032.2666666666667, 'Desiree'), (665.686684073107, 'Despina'), (746.0962962962963, 'Despoina'), (483.77464788732397, 'Destanee'), (1154.2857142857142, 'Dewi'), (615.1506849315068, 'Dhruthi'), (736.1650485436893, 'Di'), (383.7832512315271, 'Dia'), (472.8539007092199, 'Diana'), (550.6178707224335, 'Diana'), (454.04788732394366, 'Diana'), (963.0, 'Diana'), (915.0235849056604, 'Diana'), (798.7529411764706, 'Diana'), (781.0616113744076, 'Diana'), (1026.5037593984962, 'Diana'), (1142.1315789473683, 'Diana'), (1217.7142857142858, 'Diana'), (1205.7692307692307, 'Diana Maria'), (809.697247706422, 'Dianne'), (669.2982456140351, 'Dijana'), (1248.2, 'Dilara'), (1094.4583333333333, 'Dina'), (268.05945945945945, 'Dinah'), (1234.6176470588234, 'Doga Selen'), (803.8666666666667, 'Domenica'), (104.85343228200371, 'Dominika'), (1009.7674418604652, 'Dominika'), (1248.9166666666667, 'Dominique'), (979.3589743589744, 'Dominique'), (1131.6333333333334, 'Donika'), (223.50900900900902, 'Donna'), (1196.56, 'Dorien'), (520.9397993311037, 'Doroteja'), (913.7272727272727, 'Draginja'), (910.3070175438596, 'Dunja'), (977.1011235955057, 'Dunja'), (1073.1752577319587, 'Ebony'), (1153.2553191489362, 'Eden'), (945.7478260869565, 'Eden'), (1243.3333333333333, 'Eden'), (211.67325428194994, 'Edina'), (656.2851711026616, 'Eduarda'), (842.7045454545455, 'Eetee'), (1214.857142857143, 'Ege'), (200.24960753532181, 'Ekaterina'), (128.51776649746193, 'Ekaterina'), (351.4223385689354, 'Ekaterina'), (374.29928315412184, 'Ekaterina'), (541.26953125, 'Ekaterina'), (1035.1683673469388, 'Ekaterina'), (1120.7931034482758, 'Ekaterina'), (1085.9857142857143, 'Ekaterina'), (1103.125, 'Ekaterina'), (975.6143790849674, 'Ekaterina'), (423.656050955414, 'Ekaterina'), (1241.8, 'Ekaterina'), (1014.2592592592592, 'Ekaterina'), (866.0357142857143, 'Ekaterina'), (1137.2, 'Ekaterina'), (708.8813559322034, 'Ekaterina'), (1260.6363636363637, 'Ekaterina'), (1257.5238095238096, 'Ekaterina'), (553.9434782608696, 'Ekaterine'), (1221.7931034482758, 'Elaine'), (1067.7619047619048, 'Eleanor'), (1057.3870967741937, 'Eleanor'), (263.2128174123337, 'Elena'), (237.35254691689008, 'Elena'), (110.90505359877488, 'Elena'), (517.8571428571429, 'Elena'), (1101.55, 'Elena'), (1041.1176470588234, 'Elena'), (1106.5, 'Elena'), (829.0, 'Elena'), (1116.5, 'Elena'), (632.6888888888889, 'Elena'), (1151.6666666666667, 'Elena'), (392.44444444444446, 'Elena Gabriela'), (686.6470588235294, 'Elena Teodora'), (189.36174863387978, 'Eleni'), (742.5714285714286, 'Eleni'), (1069.25, 'Eleni'), (950.0277777777778, 'Eleonora'), (1160.5238095238096, 'Eleonore'), (1028.2884615384614, 'Eleonore'), (876.1730769230769, 'Eliessa'), (203.95604395604394, 'Elina'), (1116.5652173913043, 'Elina'), (1164.0, 'Elina'), (914.2566371681415, 'Elisabeth'), (749.4285714285714, 'Elisabeth'), (1211.2424242424242, 'Elisabeth'), (334.7118644067797, 'Elise'), (418.39748953974896, 'Elitsa'), (579.5214723926381, 'Elixane'), (978.2708333333334, 'Eliza'), (1154.2714285714285, 'Elizabeta'), (1140.1973684210527, 'Elizabeth'), (685.5346534653465, 'Elizabeth'), (623.0714285714286, 'Elizabeth'), (1242.6666666666667, 'Elizabeth'), (1249.0, 'Elizabeth'), (1006.2982456140351, 'Elizabeth Anita Alexandria'), (468.5403225806452, 'Elizaveta'), (416.8855421686747, 'Elizaveta'), (1180.12, 'Elizaveta'), (981.9814814814815, 'Elizaveta Anna'), (1036.406976744186, 'Elke'), (906.75, 'Elke'), (1151.021505376344, 'Ella'), (1223.9, 'Ella'), (754.8923076923077, 'Ellen'), (715.0604026845638, 'Ellen'), (806.7682926829268, 'Ellen'), (479.0652173913044, 'Ellie'), (1047.0, 'Ellie'), (1211.2333333333333, 'Elodie'), (652.1984732824427, 'Elyne'), (734.71, 'Ema'), (946.2142857142857, 'Ema'), (803.3813229571984, 'Ema'), (1234.2692307692307, 'Ema'), (672.730407523511, 'Emelyn'), (770.8472222222222, 'Emi'), (1232.0, 'Emilia'), (1165.945205479452, 'Emiliana'), (732.8888888888889, 'Emiliana'), (705.4716981132076, 'Emilie'), (1209.625, 'Emilija'), (1092.2771084337348, 'Emiliya'), (457.0421511627907, 'Emily'), (1137.5128205128206, 'Emily'), (773.5352112676056, 'Emily'), (822.6792452830189, 'Emily'), (1099.6756756756756, 'Emily'), (1041.948717948718, 'Emily J'), (682.0972222222222, 'Emina'), (412.71140939597313, 'Emma'), (1184.625, 'Emma'), (784.240174672489, 'Emma'), (819.7254901960785, 'Emma'), (1215.698113207547, 'Emma'), (1071.59375, 'Emma'), (1122.5384615384614, 'Emma'), (1193.3529411764705, 'Emma Christine'), (1184.7692307692307, 'Emmanuelle'), (864.0645161290323, 'Emmanuelle'), (909.8205128205128, 'Emmanuelle'), (1229.7333333333333, 'En Pei'), (1006.0392156862745, 'Ena'), (931.7777777777778, 'Ena'), (321.23595505617976, 'Eri'), (788.0384615384615, 'Erica'), (397.3320537428023, 'Erika'), (397.39929328621906, 'Erika'), (792.7021696252466, 'Erika'), (1108.8, 'Erika'), (821.4102564102565, 'Erika'), (1146.8823529411766, 'Erika'), (760.3974358974359, 'Erin'), (1106.3275862068965, 'Erin'), (733.1351351351351, 'Erina'), (1218.5652173913043, 'Esen'), (966.0540540540541, 'Estela'), (571.8520084566596, 'Estelle'), (714.7387387387388, 'Estelle'), (950.9090909090909, 'Ester'), (347.34943639291464, 'Estrella'), (781.3218390804598, 'Etsuko'), (911.7241379310345, 'Eudice Wong'), (1157.5, 'Eugenia'), (421.3669467787115, 'Eugenie'), (1125.5483870967741, 'Eugenie'), (620.6746411483253, 'Eugeniya'), (235.0951008645533, 'Eva'), (380.8822463768116, 'Eva'), (460.72909698996654, 'Eva'), (735.4837209302326, 'Eva'), (1134.9772727272727, 'Eva'), (1064.5657894736842, 'Eva'), (1063.9213483146068, 'Eva'), (961.8630136986301, 'Eva'), (1133.25, 'Eva'), (852.1194029850747, 'Eva'), (1162.1698113207547, 'Eva'), (1168.2857142857142, 'Eva'), (1083.8333333333333, 'Eva Marie'), (1023.8690476190476, 'Eveliina'), (471.5439093484419, 'Evelyn'), (414.66339869281046, 'Evgenia'), (258.0659340659341, 'Evgeniya'), (912.5755395683453, 'Evgeniya'), (1221.904761904762, 'Evgeniya'), (830.875, 'Evgeniya'), (612.0185185185185, 'Fang Ying'), (406.9281767955801, 'Fangzhou'), (707.972972972973, 'Fanny'), (428.5068493150685, 'Fanny'), (1106.3076923076924, 'Farah'), (673.7509157509157, 'Fatima'), (1070.9463414634147, 'Fatimah'), (648.2984054669704, 'Fatma'), (1015.5, 'Fatyha'), (626.0774647887324, 'Federica'), (637.367139959432, 'Federica'), (894.3545706371191, 'Federica'), (799.6744186046511, 'Federica'), (969.0845070422536, 'Federica'), (874.3333333333334, 'Federica'), (1204.7272727272727, 'Federica Joe'), (632.03, 'Fernanda'), (1243.875, 'Fernanda'), (1187.0384615384614, 'Ferny'), (1041.7790697674418, 'Fiona'), (908.4414414414415, 'Fiona'), (531.6888888888889, 'Fiona'), (1142.5882352941176, 'Fiona'), (158.83442265795208, 'Flavia'), (933.0194552529183, 'Flavia'), (1086.0625, 'Flavia'), (364.22522522522524, 'Florencia'), (941.3030303030303, 'Florencia'), (999.2, 'Frances'), (117.2057942057942, 'Francesca'), (798.2897959183673, 'Francesca'), (776.0992907801418, 'Francesca'), (891.8471337579617, 'Francesca'), (877.6940639269407, 'Francesca'), (1060.8163265306123, 'Francesca'), (1117.75, 'Francesca'), (954.444976076555, 'Francesca'), (1031.2119205298013, 'Francesca'), (1147.8461538461538, 'Francesca'), (533.8709677419355, 'Francesca'), (1121.0, 'Francesca'), (903.1666666666666, 'Francisca'), (437.05298013245033, 'Francoise'), (915.9846153846154, 'Franziska'), (1223.25, 'Franziska'), (1244.3333333333333, 'Frederikke'), (544.1627906976744, 'Freya'), (465.2834890965732, 'Gabriela'), (580.905701754386, 'Gabriela'), (891.4626865671642, 'Gabriela'), (923.6264591439689, 'Gabriela'), (517.7974137931035, 'Gabriela'), (1087.6161616161617, 'Gabriela'), (1150.0, 'Gabriela'), (1000.4246575342465, 'Gabriela'), (856.4285714285714, 'Gabriela'), (699.9121621621622, 'Gabriela'), (1003.4827586206897, 'Gabriela'), (994.0612244897959, 'Gabriela Nicole'), (988.0208333333334, 'Gabriella'), (557.6849315068494, 'Gabriella'), (1027.5454545454545, 'Gabriella'), (985.7211538461538, 'Gabrielle Faith'), (1028.9708737864078, 'Gaelle'), (1085.6, 'Gaelle'), (759.5352697095435, 'Gaia'), (526.2644836272041, 'Gail'), (185.0057224606581, 'Galina'), (449.05308219178085, 'Galina'), (628.8181818181819, 'Ganna'), (573.6335078534031, 'Ganna'), (229.3774193548387, 'Garbine'), (1152.142857142857, 'Gebriela'), (772.2857142857143, 'Genevieve'), (533.5940594059406, 'Georgia'), (763.1014492753624, 'Georgia Andreea'), (1153.9166666666667, 'Georgiana'), (314.4109589041096, 'Georgina'), (1249.4285714285713, 'Georgina'), (1150.6607142857142, 'Ghislaine'), (813.1351351351351, 'Giada'), (567.8518518518518, 'Gioia'), (843.6716417910447, 'Giorgia'), (997.28, 'Giorgia'), (1129.4333333333334, 'Giorgia'), (1226.5, 'Giorgie'), (1197.0, 'Giovanna'), (576.740350877193, 'Giulia'), (527.75, 'Giulia'), (1105.4458598726114, 'Giulia'), (766.5333333333333, 'Giulia'), (797.895652173913, 'Giulia'), (1153.275, 'Giulia'), (897.0818181818182, 'Giulia'), (986.8349514563107, 'Giulia'), (1208.3125, 'Giulia'), (1173.2631578947369, 'Giulia'), (584.359375, 'Giuliana'), (794.7118644067797, 'Gloria'), (716.3150684931506, 'Gozal'), (389.61876832844575, 'Grace'), (1238.892857142857, 'Grace'), (783.8288043478261, 'Gracia'), (547.277108433735, 'Greetje'), (274.5718623481781, 'Greta'), (1252.608695652174, 'Greta'), (790.8422535211267, 'Guadalupe'), (806.4901960784314, 'Guadalupe'), (1027.0, 'Guillermina'), (957.9512195121952, 'Guiomar'), (1168.3396226415093, 'Gulben'), (1196.0, 'Gulchekhra'), (1236.6153846153845, 'Gulnaz'), (995.4074074074074, 'Guzal'), (1087.6216216216217, 'Gyulnara'), (1051.623188405797, 'Habiba'), (844.3856812933026, 'Hae Sung'), (1179.4153846153847, 'Haine'), (1083.407894736842, 'Hana'), (1212.0, 'Hana'), (1233.0625, 'Hana'), (1115.7714285714285, 'Hanna'), (587.2, 'Hanna'), (543.968253968254, 'Hanyu'), (680.1050228310502, 'Hao Chen'), (1153.936507936508, 'Hao Ching'), (574.8723404255319, 'Harmony'), (694.341935483871, 'Harriet'), (774.6837606837607, 'Haruka'), (512.1515151515151, 'Haruna'), (914.5321100917431, 'Hayley'), (1214.7692307692307, 'Hazal'), (167.50632911392404, 'Heather'), (417.44323483670297, 'Heidi'), (1162.3125, 'Helen'), (912.234375, 'Helen'), (682.3052631578947, 'Helene'), (920.8333333333334, 'Helene'), (1095.1176470588234, 'Hikari'), (673.6635071090047, 'Hilda'), (1219.0, 'Himari'), (534.890243902439, 'Hiroko'), (860.8104265402843, 'Hirono'), (925.9865771812081, 'Ho Ching'), (1185.75, 'Hollie'), (914.8607594936709, 'Hongrui'), (1251.1333333333334, 'Hortencia'), (1107.7142857142858, 'Hsin Yuan'), (726.1737089201878, 'Hua Chen'), (1118.904761904762, 'Huijie'), (888.0055096418732, 'Hulya'), (1020.28125, 'Hye Min'), (1069.3208955223881, 'Hyojung'), (729.0671936758894, 'Hyun Hui'), (1038.6911764705883, 'I Hsuan'), (1085.581818181818, 'Iana'), (962.5, 'Ida'), (1232.2, 'Idia'), (705.5625, 'Iga'), (1135.5, 'Ilay'), (868.2191780821918, 'Ilka'), (452.625, 'Ilona'), (847.0941176470589, 'Ilze'), (845.375, 'Imane Maelle'), (1165.5573770491803, 'Ina'), (1069.0925925925926, 'Inci'), (954.046875, 'India'), (627.7027027027027, 'Indire'), (485.9559748427673, 'Indy'), (919.6147540983607, 'Ineke'), (546.3460559796438, 'Ines'), (1196.3461538461538, 'Ines'), (749.6309523809524, 'Ines'), (974.8732394366198, 'Ines'), (1154.0857142857142, 'Ines'), (1039.0, 'Inger'), (853.2375, 'Ingrid'), (670.931506849315, 'Ingrid'), (869.3571428571429, 'Ingrid Alexandra'), (748.6622691292876, 'Ingrid Esperanza'), (1192.5454545454545, 'Intissar'), (957.8421052631579, 'Ioana'), (1080.0555555555557, 'Ioana'), (876.3333333333334, 'Ioana'), (1070.878787878788, 'Ioana'), (482.43243243243245, 'Ioana Diana'), (646.0441176470588, 'Ioana Loredana'), (799.0552486187845, 'Ionela Andreea'), (655.8983666061706, 'Ipek'), (598.1783783783784, 'Ipek'), (976.7878787878788, 'Ipek'), (288.74423480083857, 'Irena'), (579.2153846153847, 'Irene'), (358.4449244060475, 'Irina'), (445.6770072992701, 'Irina'), (522.2766666666666, 'Irina'), (273.65966386554624, 'Irina'), (669.6590909090909, 'Irina'), (1082.0, 'Irina'), (1227.8, 'Irina'), (1137.75, 'Irina'), (285.84388185654007, 'Irina Camelia'), (578.1381578947369, 'Irina Maria'), (866.1075949367089, 'Iris'), (419.9982269503546, 'Iryna'), (993.2272727272727, 'Iryna'), (747.6422018348624, 'Iryna'), (724.9178743961353, 'Isabel'), (1114.99375, 'Isabela'), (523.5121293800539, 'Isabella'), (386.4824902723735, 'Isabella'), (701.0719696969697, 'Isabella'), (1227.0, 'Isabella'), (1166.8, 'Isabella'), (725.5555555555555, 'Isabelle'), (884.6296296296297, 'Isabelle'), (1170.9411764705883, 'Iulia Maria'), (782.2297297297297, 'Iva'), (692.2707182320441, 'Iva'), (297.1693989071038, 'Ivana'), (929.7837837837837, 'Ivana'), (473.54, 'Ivana'), (1225.9166666666667, 'Ivana'), (871.109375, 'Ivania'), (1079.05, 'Ivanka'), (117.95684523809524, 'Iveta'), (1136.8535031847134, 'Ivette'), (872.0, 'Ivone'), (591.3809523809524, 'Ivonne'), (545.6203966005666, 'Jacqueline'), (691.6936936936937, 'Jacqueline'), (1033.34, 'Jacqueline'), (909.2, 'Jada'), (674.0, 'Jade'), (700.3270142180095, 'Jade'), (934.6125, 'Jade'), (1120.590909090909, 'Jade'), (760.4920634920635, 'Jaeda'), (562.8450704225352, 'Jaimee'), (1243.875, 'Jaimy Gayle'), (1037.5274725274726, 'Jainy'), (381.56892230576443, 'Jamie'), (455.56410256410254, 'Jamie'), (1247.3333333333333, 'Jamilya'), (592.5990783410139, 'Jan'), (178.44725111441306, 'Jana'), (262.31929824561405, 'Jana'), (568.4027149321267, 'Jana'), (846.9828767123288, 'Jana'), (353.3222222222222, 'Jana'), (1034.3392857142858, 'Jana'), (240.5306603773585, 'Janette'), (699.7864583333334, 'Janina'), (1262.5416666666667, 'Janja'), (861.5102040816327, 'Janneke'), (748.7238095238096, 'Jaqueline Adina'), (1121.767857142857, 'Jara'), (149.46360759493672, 'Jarmila'), (445.3071553228621, 'Jasmin'), (751.9386281588447, 'Jasmin'), (1094.5833333333333, 'Jasmin'), (969.8666666666667, 'Jasmin'), (513.1592689295039, 'Jasmina'), (782.965811965812, 'Jasmina'), (437.86915887850466, 'Jasmine'), (1117.64, 'Jasmine Amber'), (1070.5648854961833, 'Jawairiah'), (1035.46, 'Jazmin'), (983.1290322580645, 'Jazzamay'), (767.7730496453901, 'Jeannine'), (183.76478318002628, 'Jelena'), (64.19160104986877, 'Jelena'), (449.3012939001848, 'Jelena'), (718.2207792207793, 'Jelena'), (1046.944, 'Jelena'), (1025.25, 'Jelena'), (460.47904191616766, 'Jelena'), (1010.1142857142858, 'Jelena'), (1139.418181818182, 'Jelena'), (477.20512820512823, 'Jennifer'), (916.4569536423841, 'Jennifer'), (326.64102564102564, 'Jennifer'), (861.2063492063492, 'Jennifer'), (902.1470588235294, 'Jenny'), (501.5860215053763, 'Jesika'), (441.5659229208925, 'Jessica'), (386.18394648829434, 'Jessica'), (776.3333333333334, 'Jessica'), (904.7658227848101, 'Jessica'), (1089.9884393063585, 'Jessica'), (583.9622641509434, 'Jessica'), (797.6951219512196, 'Jessica'), (863.9344262295082, 'Jessica'), (1003.0540540540541, 'Jessica'), (457.1111111111111, 'Jessica'), (1208.7142857142858, 'Jessica'), (820.6849315068494, 'Jessica'), (930.1315789473684, 'Jessica'), (818.2043795620438, 'Jessika'), (967.6708860759494, 'Jessy'), (781.4336734693877, 'Ji Hee'), (1027.3658536585365, 'Ji Hee'), (833.5061082024433, 'Ji Young'), (1169.6923076923076, 'Jia'), (682.961038961039, 'Jia Jing'), (529.7777777777778, 'Jia Qi'), (794.4931506849315, 'Jiahui'), (1230.6, 'Jiakang'), (1232.032258064516, 'Jiatian'), (578.5, 'Jiaxi'), (1161.0, 'Jiaxue'), (114.05571428571429, 'Jie'), (501.0619469026549, 'Jil Belen'), (1116.4190476190477, 'Jil Nora'), (121.9579326923077, 'Jill'), (721.14, 'Jillian'), (1267.0, 'Jin'), (492.8915187376726, 'Jin A'), (1035.6470588235295, 'Jin Ju'), (369.1620469083156, 'Jing Jing'), (803.9454545454546, 'Joana'), (910.6521739130435, 'Joana'), (931.025641025641, 'Joanna'), (1227.8, 'Joanne'), (925.4230769230769, 'Jodie Anna'), (1111.8333333333333, 'Johana'), (261.31778929188255, 'Johanna'), (256.5040431266846, 'Johanna'), (1011.1739130434783, 'Johanna'), (1022.6198347107438, 'Jordana'), (924.9325842696629, 'Josepha'), (684.4892086330935, 'Josephine'), (993.2105263157895, 'Josie'), (553.87, 'Jovana'), (1157.1538461538462, 'Jovana'), (812.6, 'Ju Eun'), (1224.0, 'Judith'), (1243.904761904762, 'Jule'), (188.6425855513308, 'Julia'), (543.4917012448133, 'Julia'), (404.706390328152, 'Julia'), (405.8921568627451, 'Julia'), (448.98591549295776, 'Julia'), (742.8611111111111, 'Julia'), (771.8067885117493, 'Julia'), (692.8122605363984, 'Julia'), (832.207100591716, 'Julia'), (787.3385416666666, 'Julia'), (783.424, 'Julia'), (661.8320610687023, 'Julia'), (1170.6774193548388, 'Julia'), (1049.0833333333333, 'Julia'), (739.8951048951049, 'Julia'), (386.24657534246575, 'Julia'), (603.5777777777778, 'Julia'), (418.26027397260276, 'Julia'), (943.6666666666666, 'Julia'), (1047.1666666666667, 'Julia'), (1083.05, 'Julia'), (1064.0, 'Julia'), (1024.6666666666667, 'Julia Mansano'), (1110.0816326530612, 'Juliana'), (1175.7666666666667, 'Juliana Rocha'), (284.07964601769913, 'Julie'), (1121.4102564102564, 'Julie'), (745.4150943396227, 'Julie'), (1164.6818181818182, 'Julie'), (1075.6031746031747, 'Julie'), (707.1467889908257, 'Julieta Lara'), (1019.9411764705883, 'Julita'), (732.1666666666666, 'Julyette Maria Josephine'), (1189.0, 'June'), (262.30884808013354, 'Junri'), (1212.9166666666667, 'Justina'), (443.1351888667992, 'Justine'), (996.6626506024096, 'Justine'), (585.8517745302714, 'Justyna'), (1055.020202020202, 'Kady'), (272.08855291576674, 'Kai Chen'), (522.6561403508772, 'Kai Lin'), (127.06775067750678, 'Kaia'), (901.3333333333334, 'Kaitlin'), (705.1531531531532, 'Kaitlyn'), (891.3095238095239, 'Kaitlyn'), (633.5454545454545, 'Kaja'), (661.9589041095891, 'Kajsa'), (568.2547169811321, 'Kamila'), (1162.8301886792453, 'Kamilla'), (765.1395348837209, 'Kamonwan'), (924.2782608695652, 'Kana'), (635.346516007533, 'Kanae'), (1105.3125, 'Kanako'), (799.9940828402367, 'Kanami'), (962.8536585365854, 'Kanika'), (871.0790513833992, 'Kaori'), (674.4780600461894, 'Karen'), (675.4691943127962, 'Karen'), (1068.9166666666667, 'Kariann'), (252.99188311688312, 'Karin'), (649.9320388349514, 'Karin'), (739.3035714285714, 'Karin'), (1194.591836734694, 'Karin'), (882.3758865248227, 'Karina'), (869.4357976653697, 'Karina'), (1246.3636363636363, 'Karina'), (696.9606060606061, 'Karina Ildor'), (1062.795918367347, 'Karina Kristina'), (868.8904109589041, 'Karine'), (1001.0679611650486, 'Karis'), (807.616, 'Karla'), (652.917808219178, 'Karman'), (928.3333333333334, 'Karola Patricia'), (1077.8095238095239, 'Karolayne'), (344.97713097713097, 'Karolina'), (406.56919642857144, 'Karolina'), (625.8927038626609, 'Karolina'), (790.4990925589836, 'Karolina'), (1034.92, 'Karolina'), (1151.59375, 'Karolina'), (819.18, 'Karolina'), (1047.0243902439024, 'Karolina'), (340.82191780821915, 'Karolina'), (1235.8461538461538, 'Karolina'), (1277.1875, 'Karolina'), (938.375, 'Karolina'), (873.6229508196722, 'Karoline'), (903.5769230769231, 'Karyn'), (927.0350877192982, 'Kassandra'), (331.93949394939494, 'Katalin'), (196.02280912364947, 'Katarina'), (1099.1985815602836, 'Katarina'), (920.1794871794872, 'Katarina'), (1059.4054054054054, 'Katarina'), (520.968253968254, 'Katarina'), (396.4295302013423, 'Katarzyna'), (493.671826625387, 'Katarzyna'), (1045.344827586207, 'Katarzyna'), (1117.7142857142858, 'Kate'), (205.56581986143186, 'Katerina'), (646.5019083969465, 'Katerina'), (582.2656546489563, 'Katerina'), (1072.3333333333333, 'Katerina'), (291.7972027972028, 'Katerina'), (555.9921875, 'Katerina'), (184.2012012012012, 'Kateryna'), (344.7721518987342, 'Kateryna'), (852.3478260869565, 'Kateryna'), (866.1971830985915, 'Kateryna'), (1088.6, 'Kateryna'), (590.3914893617022, 'Katharina'), (949.5916666666667, 'Katharina'), (782.1232876712329, 'Katharina'), (673.986301369863, 'Katharina'), (434.52054794520546, 'Katharina'), (882.1071428571429, 'Katharine'), (859.8135593220339, 'Katherine'), (924.3037037037037, 'Katherine'), (653.4305555555555, 'Katherine'), (910.396694214876, 'Katherine Gabriela'), (415.7, 'Kathinka'), (291.4792817679558, 'Kathrin'), (627.6082004555809, 'Katie'), (555.3473684210526, 'Katie'), (868.8571428571429, 'Katie'), (498.1111111111111, 'Katie'), (1111.08, 'Katrine Isabel'), (492.6608695652174, 'Katy'), (1050.7, 'Katya'), (1010.1818181818181, 'Katyarina'), (1101.55, 'Kayla'), (418.6031746031746, 'Kayla'), (1163.3478260869565, 'Kaylah'), (772.2402912621359, 'Kazusa'), (1003.1212121212121, 'Kei'), (1114.9433962264152, 'Kelia'), (803.2569832402235, 'Kelly'), (813.1428571428571, 'Kelly'), (312.7584269662921, 'Kelly S'), (1012.325, 'Kelsey'), (807.7222222222222, 'Kennedy'), (643.422641509434, 'Keren'), (1018.6534653465346, 'Keri'), (1020.4271844660194, 'Kerstin'), (1087.972972972973, 'Khristina'), (926.5274261603375, 'Khristina'), (1164.090909090909, 'Ki Ryang'), (287.71625344352617, 'Kiki'), (613.8346774193549, 'Kim'), (1221.6470588235295, 'Kim'), (1224.8823529411766, 'Kim'), (762.4081632653061, 'Kim Alice'), (1077.1702127659576, 'Kimberley'), (776.6428571428571, 'Kimberley'), (618.6923076923077, 'Kimberly'), (1097.219512195122, 'Kimika'), (95.03465982028241, 'Kimiko'), (606.1467576791808, 'Kinnie'), (178.02928257686676, 'Kirsten'), (1084.4173913043478, 'Kirsten'), (1035.0384615384614, 'Kirsten Andrea'), (576.9, 'Klaartje'), (137.5751708428246, 'Klara'), (944.5289256198347, 'Klara'), (780.7905027932961, 'Klaudia'), (826.0238095238095, 'Komola'), (567.0507399577167, 'Korina'), (844.7460317460317, 'Kotomi'), (522.984693877551, 'Krista'), (445.18918918918916, 'Kristie'), (167.9602510460251, 'Kristina'), (263.1496062992126, 'Kristina'), (300.7413043478261, 'Kristina'), (1016.5903614457832, 'Kristina'), (501.8493150684931, 'Kristina'), (1218.0740740740741, 'Kristina'), (1169.3725490196077, 'Kristina'), (995.0, 'Kristina'), (1060.5633802816901, 'Kristina N'), (837.7730496453901, 'Kristy'), (389.73932584269664, 'Kristyna'), (1077.4736842105262, 'Kristyna'), (229.89227166276348, 'Ksenia'), (447.35916824196596, 'Ksenia'), (423.12334801762114, 'Ksenia'), (527.0520547945206, 'Ksenia'), (622.453744493392, 'Ksenia'), (851.2647058823529, 'Ksenia'), (1046.2075471698113, 'Ksenia'), (1108.2222222222222, 'Ksenia'), (1136.24, 'Ksenia'), (990.6, 'Kseniia'), (975.6271186440678, 'Ksenija'), (488.76107382550333, 'Kumiko'), (165.96132596685084, 'Kurumi'), (159.62397820163488, 'Kveta'), (1070.0377358490566, 'Kwan Yau'), (887.502487562189, 'Kyle'), (798.3181818181819, 'Kylie'), (348.54794520547944, 'Kyoka'), (263.821608040201, 'Kyra'), (727.8778280542987, 'Kyra'), (1143.2608695652175, 'Kyra'), (533.433770014556, 'Kyung Mi'), (677.4458598726114, 'Laetitia'), (996.8148148148148, 'Laili'), (1062.3666666666666, 'Lamis'), (284.14021164021165, 'Lara'), (731.8966666666666, 'Lara'), (920.5872093023256, 'Lara'), (1180.5, 'Lara'), (1221.5, 'Lara'), (1104.076923076923, 'Lara'), (1054.9019607843138, 'Larikah'), (231.16949152542372, 'Laura'), (242.01152737752162, 'Laura'), (396.82570162481534, 'Laura'), (481.1577909270217, 'Laura'), (733.6889763779527, 'Laura'), (662.4254385964912, 'Laura'), (1022.2115384615385, 'Laura'), (901.8187919463087, 'Laura'), (1089.6666666666667, 'Laura'), (1003.8620689655172, 'Laura'), (1129.7818181818182, 'Laura'), (937.5555555555555, 'Laura'), (1035.7567567567567, 'Laura'), (947.6756756756756, 'Laura'), (1231.7, 'Laura'), (910.5714285714286, 'Laura D'), (516.1982942430703, 'Laura Ioana'), (1198.1538461538462, 'Laura Sofia'), (420.47591522157995, 'Lauren'), (615.8323699421966, 'Lauren'), (208.0751879699248, 'Lauren'), (848.126582278481, 'Lauren'), (1198.909090909091, 'Lauren'), (1242.3478260869565, 'Lauren'), (1107.0882352941176, 'Lauryn'), (612.736, 'Lavinia'), (1226.076923076923, 'Laylo'), (1184.0, 'Layne'), (837.0, 'Lea'), (833.2105263157895, 'Lea'), (950.2093023255813, 'Lea'), (1179.6216216216217, 'Leah'), (908.156862745098, 'Lee'), (500.8991354466859, 'Lena'), (1153.6666666666667, 'Lena'), (938.4, 'Lena'), (859.5757575757576, 'Lena'), (657.8934169278997, 'Lena Marie'), (391.9670781893004, 'Lenka'), (430.4562937062937, 'Lenka'), (378.54046997389037, 'Lenka'), (767.4705882352941, 'Lenka'), (894.1379310344828, 'Lenka'), (773.5666666666667, 'Leolia'), (825.972972972973, 'Leonie'), (887.4545454545455, 'Lesedi Sheya'), (205.17590361445784, 'Lesia'), (514.7174515235457, 'Lesley'), (1180.5454545454545, 'Leslie'), (481.3229166666667, 'Leticia'), (1072.4, 'Leticia Garcia'), (1030.5, 'Leylah Annie'), (988.7425149700599, 'Li'), (387.87113402061857, 'Liana Gabriela'), (899.9150326797386, 'Libby'), (1035.327868852459, 'Libi'), (1147.8529411764705, 'Lidia'), (797.2128378378378, 'Lidziya'), (284.8326771653543, 'Liezel'), (567.9464544138929, 'Liga'), (722.5087719298245, 'Lilla'), (497.42124542124543, 'Lin'), (847.7010869565217, 'Lina'), (371.00802568218296, 'Lina'), (1186.3684210526317, 'Lina'), (1020.8352941176471, 'Lina'), (607.5721393034826, 'Lina'), (1153.5833333333333, 'Lina'), (916.4411764705883, 'Linda'), (907.8590604026846, 'Linda'), (1232.2, 'Linda'), (275.6055900621118, 'Lindsay'), (986.82, 'Lindsey'), (418.81925343811395, 'Ling'), (1184.7222222222222, 'Liniques'), (959.6981132075472, 'Linnea'), (101.55520833333334, 'Lisa'), (459.5925925925926, 'Lisa'), (538.9791271347249, 'Lisa'), (1106.1351351351352, 'Lisa'), (1150.15, 'Lisa'), (758.609756097561, 'Lisa'), (909.9589041095891, 'Lisa'), (758.06, 'Lisa Maria'), (989.175925925926, 'Lisa Marie'), (1015.0512820512821, 'Lisa Marie'), (673.6507936507936, 'Lisanne'), (887.2875, 'Liubov'), (1179.875, 'Livia'), (870.9007633587786, 'Liz Tatiane'), (1120.5652173913043, 'Lizaveta'), (666.1496062992126, 'Lizette'), (1231.2727272727273, 'Lorenza'), (972.75, 'Lorraine M'), (661.2633928571429, 'Lou'), (1209.625, 'Lou'), (1220.0, 'Loudmilla'), (380.5308641975309, 'Louisa'), (1019.520325203252, 'Louise'), (1095.060606060606, 'Louise'), (1208.5128205128206, 'Louise'), (188.06095041322314, 'Lourdes'), (907.3557312252965, 'Lu'), (859.8644067796611, 'Luca'), (757.5247524752475, 'Lucia'), (1072.9156626506024, 'Lucia'), (788.8130841121496, 'Lucia'), (901.7966101694915, 'Lucia'), (1144.4, 'Lucia'), (1122.3333333333333, 'Lucia'), (1117.2702702702702, 'Lucia'), (1169.6923076923076, 'Lucia'), (880.0536779324055, 'Luciana'), (1243.875, 'Luciana'), (63.76451612903226, 'Lucie'), (169.75233644859813, 'Lucie'), (774.558521560575, 'Lucie'), (1219.093023255814, 'Lucie'), (845.986301369863, 'Lucrezia'), (756.3141592920354, 'Lucy'), (846.2727272727273, 'Ludmila'), (787.5416666666666, 'Ludmilla'), (1112.9183673469388, 'Luisa'), (911.8913043478261, 'Luisa'), (820.59375, 'Luisa Marie'), (284.22813688212926, 'Luksika'), (1098.2888888888888, 'Lulu'), (1139.0, 'Luna'), (974.2702702702703, 'Lusine'), (1190.0629921259842, 'Lutfiye'), (982.6666666666666, 'Lyann'), (920.6734693877551, 'Lynn'), (1034.3684210526317, 'Lynn'), (382.82479784366575, 'Lyudmyla'), (607.3360995850622, 'Macall'), (692.1515151515151, 'Macarena'), (324.63613231552165, 'Madalina'), (748.0, 'Maddison'), (1028.0365853658536, 'Madeleine'), (1217.469387755102, 'Madeline'), (1203.5, 'Madina'), (268.11610486891385, 'Madison'), (219.54063604240284, 'Madison'), (1074.8536585365853, 'Madison'), (958.0955414012739, 'Madrie'), (787.0, 'Maegan'), (1139.7, 'Mafalda'), (1173.75, 'Maftuna'), (734.0, 'Magali'), (1036.1214953271028, 'Magalie'), (300.3974358974359, 'Magda'), (188.7824561403509, 'Magdalena'), (571.8631346578367, 'Magdalena'), (1231.421052631579, 'Magdalena'), (586.9224137931035, 'Magdalena'), (1223.9016393442623, 'Magdalena'), (581.3275862068965, 'Magdalena'), (1092.7621951219512, 'Magy'), (875.0, 'Mahak'), (1007.15, 'Mahitha'), (550.2509960159363, 'Mai'), (945.8666666666667, 'Mai'), (957.7058823529412, 'Mai'), (721.4571428571429, 'Mai'), (745.433962264151, 'Maia'), (1206.6666666666667, 'Maia A'), (438.4245810055866, 'Maiko'), (1152.888888888889, 'Maileen'), (410.8463541666667, 'Mailen'), (1190.6363636363637, 'Maja'), (717.1388888888889, 'Maja'), (784.8009049773756, 'Makiho'), (516.6615384615385, 'Makoto'), (999.15625, 'Malene'), (1004.7428571428571, 'Malika'), (825.039603960396, 'Malin'), (1031.5342465753424, 'Mallaurie'), (143.48235294117646, 'Mallory'), (947.3333333333334, 'Malou'), (1153.590909090909, 'Mami'), (1202.2692307692307, 'Man Ying Maggie'), (689.891129032258, 'Mana'), (1230.6, 'Mananchaya'), (838.1780821917808, 'Manca'), (299.5691176470588, 'Mandy'), (787.2551020408164, 'Mandy'), (897.0974358974358, 'Manisha'), (537.3451776649746, 'Manon'), (973.3541666666666, 'Manon'), (1181.3548387096773, 'Manya'), (908.3962264150944, 'Mara'), (496.35593220338984, 'Marcela'), (1174.1489361702127, 'Marcela'), (1178.1724137931035, 'Marcela'), (1143.7957746478874, 'Marcela Guimaraes'), (1247.3636363636363, 'Marcelina'), (657.0171919770773, 'Marcella'), (325.5912596401028, 'Margalita'), (987.6739130434783, 'Margarida'), (371.1981566820277, 'Margarita'), (734.7166666666667, 'Margarita'), (779.5217391304348, 'Margarita'), (1154.0, 'Margaux'), (1144.4594594594594, 'Margaux'), (874.0, 'Margaux'), (1231.421052631579, 'Margaux'), (925.1666666666666, 'Margot'), (549.7671232876712, 'Margot'), (1238.7777777777778, 'Margot'), (483.27852998065765, 'Mari'), (685.5, 'Mari'), (42.25396825396825, 'Maria'), (85.55817610062893, 'Maria'), (461.9377990430622, 'Maria'), (351.9477756286267, 'Maria'), (680.1504424778761, 'Maria'), (501.8732943469786, 'Maria'), (393.4439834024896, 'Maria'), (664.4128440366973, 'Maria'), (1220.904761904762, 'Maria'), (1116.7941176470588, 'Maria'), (498.3878504672897, 'Maria'), (881.1304347826087, 'Maria'), (1048.2156862745098, 'Maria'), (504.45054945054943, 'Maria'), (905.6805555555555, 'Maria'), (1080.3076923076924, 'Maria'), (1178.9, 'Maria'), (1047.0, 'Maria'), (993.375, 'Maria'), (835.2926829268292, 'Maria'), (1078.25, 'Maria'), (1190.0833333333333, 'Maria Agustina'), (1072.9591836734694, 'Maria Andrea'), (1188.5277777777778, 'Maria Camila'), (861.5050505050505, 'Maria Constanza De Las Mercedes'), (1119.4897959183672, 'Maria Del Rosario'), (194.2392065344224, 'Maria Elena'), (373.0431137724551, 'Maria Fernanda'), (447.0668058455115, 'Maria Fernanda'), (877.6076923076923, 'Maria Fernanda'), (1170.1830985915492, 'Maria Jesus'), (486.6092544987147, 'Maria Joao'), (256.4249699879952, 'Maria Jose'), (817.8518518518518, 'Maria Jose'), (918.0769230769231, 'Maria Lourdes'), (1047.98224852071, 'Maria Paulina'), (359.81081081081084, 'Maria Teresa'), (662.1182795698925, 'Mariam'), (260.6950998185118, 'Mariana'), (1211.258064516129, 'Mariana'), (760.0, 'Mariana'), (926.6914285714286, 'Mariana'), (868.2702702702703, 'Mariana'), (637.9914893617022, 'Marianna'), (1027.8082191780823, 'Marianna'), (993.175925925926, 'Marianne'), (1085.4242424242425, 'Mariaryeni'), (916.5714285714286, 'Marie'), (518.2080536912752, 'Marie'), (512.1145833333334, 'Marie'), (939.6129032258065, 'Marie'), (938.0645161290323, 'Marie'), (300.56296296296296, 'Marie Eve'), (1148.9166666666667, 'Mariia'), (521.0897009966777, 'Marija'), (1241.8, 'Marija'), (1215.0, 'Marijana'), (172.7581818181818, 'Marina'), (513.1254019292604, 'Marina'), (510.5781990521327, 'Marina'), (604.295652173913, 'Marina'), (711.544, 'Marina'), (1116.394366197183, 'Marina'), (964.1477272727273, 'Marina'), (1029.6296296296296, 'Marina'), (1010.5454545454545, 'Marina'), (774.5654761904761, 'Marine'), (105.36299435028249, 'Marion'), (819.0524017467249, 'Marion'), (1163.0, 'Mariona'), (1067.3413173652696, 'Marisa'), (281.871335504886, 'Mariya'), (353.44444444444446, 'Marketa'), (946.8934426229508, 'Marlies'), (783.1711711711712, 'Marrit'), (187.96103896103895, 'Marta'), (504.7244897959184, 'Marta'), (798.5882352941177, 'Marta'), (1112.4528301886792, 'Marta'), (1045.0588235294117, 'Marta'), (454.7945205479452, 'Marta'), (1151.1818181818182, 'Marta'), (536.0, 'Marta'), (851.1224489795918, 'Marta Huqi'), (1056.0588235294117, 'Martha'), (575.696335078534, 'Martina'), (1000.8086419753087, 'Martina'), (696.7325301204819, 'Martina'), (317.94520547945206, 'Martina'), (694.8266129032259, 'Martina'), (629.4468085106383, 'Martina'), (716.4880636604775, 'Martina'), (831.9251700680272, 'Martina'), (1082.9313725490197, 'Martina'), (820.1656050955414, 'Martina'), (986.3452380952381, 'Martina'), (1035.6969696969697, 'Martina'), (783.9285714285714, 'Martina'), (779.1060606060606, 'Martina'), (1042.4137931034484, 'Martina'), (1174.7142857142858, 'Martina'), (869.1666666666666, 'Mary'), (1188.7096774193549, 'Mary Ann'), (276.67868852459014, 'Maryna'), (735.0285714285715, 'Maryna'), (263.1043307086614, 'Masa'), (951.2911392405064, 'Masa'), (225.54984894259817, 'Mathilde'), (963.45, 'Mathilde'), (1083.6575342465753, 'Mathilde'), (1107.5166666666667, 'Mathilde'), (799.1875, 'Matilda'), (1013.4761904761905, 'Maud'), (1070.21875, 'Maureen'), (1121.0869565217392, 'Maurien'), (973.8717948717949, 'Maxine'), (1084.0294117647059, 'May'), (704.4129930394431, 'Maya'), (682.8406862745098, 'Maya'), (1179.5555555555557, 'Maya'), (1165.5714285714287, 'Maya'), (711.1785714285714, 'Mayar'), (1252.5357142857142, 'Mayar'), (407.029702970297, 'Mayo'), (619.9064748201439, 'Mayya'), (622.6036585365854, 'Megan'), (1142.4782608695652, 'Megan'), (1025.0, 'Megumi'), (1031.6, 'Mei Xu'), (812.85, 'Meiling'), (1029.1666666666667, 'Meiqi'), (385.1445182724253, 'Melanie'), (223.3237885462555, 'Melanie'), (440.77246653919696, 'Melanie'), (597.8504672897196, 'Melanie'), (1039.8333333333333, 'Melany Solange'), (1017.2560553633218, 'Melina'), (169.13578500707214, 'Melinda'), (520.0968992248062, 'Melis'), (1097.171875, 'Melis'), (993.1351351351351, 'Melisa'), (1154.093023255814, 'Melissa'), (1104.357142857143, 'Melissa Ishuan'), (1035.95, 'Meng Ning'), (1213.2142857142858, 'Mercedes'), (900.75, 'Merel'), (1182.9107142857142, 'Meritxell'), (337.5292682926829, 'Mervana'), (554.3953934740883, 'Mi'), (1071.3076923076924, 'Mi Jeong'), (992.7225433526012, 'Mi Rae'), (999.375, 'Mi Zhuoma'), (987.504761904762, 'Mia Nicole'), (1332.0737704918033, 'Micaela'), (511.1923076923077, 'Michaela'), (425.4343434343434, 'Michaela'), (983.0747126436781, 'Michaela'), (930.5444444444445, 'Michaela'), (667.082191780822, 'Michaela'), (754.8378378378378, 'Michaela'), (882.2424242424242, 'Michaela'), (185.3469387755102, 'Michaella'), (1228.9285714285713, 'Michela'), (946.8846153846154, 'Michele Alexandra'), (168.98067632850243, 'Michelle'), (989.4, 'Michelle'), (852.36, 'Michelle'), (718.047619047619, 'Michika'), (376.7356115107914, 'Mihaela'), (1223.4, 'Mihaela Lorena'), (523.2788844621514, 'Miharu'), (1064.142857142857, 'Mihika'), (1110.4411764705883, 'Mihoki'), (586.2250489236791, 'Miki'), (1201.16, 'Mila'), (1234.2857142857142, 'Milagros'), (626.441935483871, 'Milana'), (1114.4074074074074, 'Milena'), (1221.904761904762, 'Milica'), (866.0693069306931, 'Min'), (819.8425531914894, 'Min Hwa'), (1238.0625, 'Minami'), (788.2622950819672, 'Mira'), (721.1643835616438, 'Mirabelle'), (1169.4864864864865, 'Miranda'), (1015.6524822695036, 'Miriam'), (564.547619047619, 'Miriam'), (628.075, 'Miriam Bianca'), (950.6263736263736, 'Miriana'), (843.6428571428571, 'Mirjam'), (186.76587795765877, 'Mirjana'), (466.3361111111111, 'Misa'), (1001.8085106382979, 'Misa'), (208.95263157894738, 'Misaki'), (1121.04, 'Mitsumi'), (447.93283582089555, 'Miyabi'), (594.9036697247707, 'Miyu'), (593.1506849315068, 'Mizuno'), (998.1320754716982, 'Molly'), (1210.7777777777778, 'Molly'), (772.6981132075472, 'Momoko'), (273.57517899761336, 'Mona'), (205.06020558002936, 'Monica'), (222.481884057971, 'Monica'), (1209.5, 'Monika'), (893.7413793103449, 'Monika'), (363.6527293844367, 'Monique'), (726.3315789473684, 'Monique'), (940.5479452054794, 'Monique'), (541.952380952381, 'Montserrat'), (812.2753623188406, 'Morgane'), (1105.3214285714287, 'Morgane'), (1243.4, 'Moulika'), (1258.5, 'Mouna'), (1198.25, 'Moyuka'), (1227.0, 'Muazzez'), (1186.9444444444443, 'Muge'), (485.40168539325845, 'Myrtille'), (82.13112391930835, 'Na'), (608.7791798107255, 'Na Lae'), (573.5197368421053, 'Na Ri'), (868.6521739130435, 'Nadezda'), (61.8536866359447, 'Nadia'), (702.8116438356165, 'Nadia'), (861.640625, 'Nadia'), (500.37654320987656, 'Nadia'), (933.3885350318471, 'Nadia'), (515.4014423076923, 'Nadiya'), (833.5096525096525, 'Nadiya'), (631.8181818181819, 'Nadja'), (828.0675675675676, 'Nagi'), (767.4963503649635, 'Naiktha'), (930.7027027027027, 'Naima'), (878.6666666666666, 'Nam Yeon'), (890.4455445544554, 'Nan Nan'), (542.7168141592921, 'Nanuli'), (313.45625, 'Nao'), (1180.3828125, 'Naoko'), (582.2777777777778, 'Naomi'), (381.3239130434783, 'Naomi'), (769.8858695652174, 'Naomi'), (390.5, 'Naomi'), (1104.5714285714287, 'Naomi'), (929.4388489208633, 'Napatsakorn'), (1138.9166666666667, 'Nastassia'), (554.5290322580645, 'Nastassja'), (593.1772853185596, 'Nastja'), (589.568306010929, 'Natalia'), (600.1, 'Natalia'), (1137.2954545454545, 'Natalia'), (749.6095717884131, 'Natalia'), (1405.2424242424242, 'Natalia'), (852.420731707317, 'Natalia'), (833.9051724137931, 'Natalia'), (414.9479166666667, 'Natalia'), (1159.1458333333333, 'Natalia'), (1135.0, 'Natalia'), (394.5745222929936, 'Natalie'), (582.6028368794326, 'Natalie'), (889.5686274509804, 'Natalie'), (733.1492537313433, 'Natalie'), (999.3636363636364, 'Natalie'), (1172.3720930232557, 'Natalie'), (1128.3934426229507, 'Natalie'), (1062.0188679245282, 'Natalie'), (591.7393162393163, 'Natalija'), (812.4642857142857, 'Natalija'), (1247.909090909091, 'Nataliya'), (666.2853403141361, 'Natasa'), (847.62, 'Natasha'), (1207.75, 'Natasha'), (925.0068728522336, 'Natasha'), (1047.6377952755906, 'Natasha'), (707.7594936708861, 'Natasha'), (871.4054054054054, 'Natasha'), (566.4943396226415, 'Natela'), (962.0188679245283, 'Natella'), (543.031185031185, 'Nathalia'), (617.4615384615385, 'Nathaly'), (929.6928104575163, 'Natia'), (490.70992366412213, 'Natsumi'), (974.3428571428572, 'Natsumi'), (1177.622641509434, 'Nattawadee'), (1087.3823529411766, 'Naz'), (825.7291666666666, 'Nazari'), (708.8378378378378, 'Neda'), (930.0, 'Neda'), (1164.107142857143, 'Nelise'), (1069.15, 'Nermeen'), (1031.0, 'Nevena'), (515.3191489361702, 'Nicha'), (843.9007633587786, 'Nicky'), (649.751256281407, 'Nicola'), (864.8258426966293, 'Nicola'), (852.8411214953271, 'Nicola'), (153.08190476190475, 'Nicole'), (417.51063829787233, 'Nicole'), (653.0375, 'Nicole'), (408.45185185185187, 'Nicole'), (608.3569131832797, 'Nicole'), (679.4014084507043, 'Nicole'), (960.8412698412699, 'Nicole'), (978.0188679245283, 'Nicole'), (539.8356164383562, 'Nicole'), (884.4117647058823, 'Nicole'), (1088.6315789473683, 'Nicole'), (1132.0, 'Nicole'), (618.8135593220339, 'Nicole'), (1222.5135135135135, 'Nicole'), (1180.7272727272727, 'Nicole'), (485.46875, 'Nicoleta Catalina'), (778.1648648648649, 'Nicolette'), (762.1578947368421, 'Nidhi'), (376.7617554858934, 'Nigina'), (825.7028571428572, 'Nika'), (1145.642857142857, 'Nika'), (1134.3055555555557, 'Nika'), (1174.0, 'Nikita'), (1017.3134328358209, 'Nikki'), (1054.0813953488373, 'Nikol'), (485.7513966480447, 'Nikola'), (614.3153526970955, 'Nikola'), (797.2966101694915, 'Nikola'), (1075.5029239766081, 'Nikola'), (1237.2666666666667, 'Nikola'), (1182.1944444444443, 'Nikola'), (1236.142857142857, 'Nikola'), (250.36305732484075, 'Nina'), (1181.1190476190477, 'Nina'), (626.2072368421053, 'Nina'), (1121.9622641509434, 'Nina'), (225.57534246575344, 'Nina'), (838.5604395604396, 'Nina'), (688.2054794520548, 'Nina'), (1039.7272727272727, 'Nina'), (690.1022727272727, 'Nina'), (788.4166666666666, 'Nina'), (1220.3823529411766, 'Nina'), (1229.5714285714287, 'Nina'), (1124.1666666666667, 'Nina Isabella'), (841.0514705882352, 'Nives'), (965.5343511450382, 'Noel'), (1054.6531791907514, 'Noelia'), (1036.6031746031747, 'Noelia'), (883.7787610619469, 'Noelle'), (1167.2758620689656, 'Nonna'), (374.93926247288505, 'Noppawan'), (921.6216216216217, 'Nora'), (1202.2, 'Nour'), (1038.7702702702702, 'Nour'), (936.3392857142857, 'Nozomi'), (436.66881028938906, 'Nudnida'), (537.577922077922, 'Nungnadda'), (228.1888198757764, 'Nuria'), (713.6415094339623, 'Nuria'), (1168.2307692307693, 'Oana'), (927.0909090909091, 'Oana'), (686.3047619047619, 'Oana Georgeta'), (911.1595744680851, 'Oceane'), (553.8112244897959, 'Oceane'), (839.4923664122138, 'Ofri'), (533.9652351738241, 'Oksana'), (660.8924731182796, 'Ola'), (1397.5, 'Olawaseun'), (1112.75, 'Olaya'), (1070.409691629956, 'Oleksandra'), (601.169014084507, 'Oleksandra'), (1012.4782608695652, 'Oleksandra'), (1360.6666666666667, 'Olena'), (1113.1515151515152, 'Olena'), (501.44444444444446, 'Olesya'), (205.99685534591194, 'Olga'), (295.493487698987, 'Olga'), (208.31903945111492, 'Olga'), (525.3591954022988, 'Olga'), (614.2371794871794, 'Olga'), (592.1270903010034, 'Olga'), (668.3825136612022, 'Olga'), (589.388, 'Olga'), (994.2792207792207, 'Olga'), (426.958904109589, 'Olga'), (710.5862068965517, 'Olga'), (359.037527593819, 'Olivia'), (637.563829787234, 'Olivia'), (1149.3870967741937, 'Olivia'), (1006.5128205128206, 'Oliwia'), (435.1470588235294, 'Ons'), (978.7321428571429, 'Ornella'), (866.0454545454545, 'Oyku'), (1156.28125, 'Paige Mary'), (989.1904761904761, 'Pamela'), (683.1081081081081, 'Panna'), (132.12638580931264, 'Paola'), (1099.625, 'Parris'), (863.5507246376811, 'Patcharin'), (324.9109848484849, 'Patricia'), (563.7251461988304, 'Patricia'), (1155.4489795918366, 'Patricia'), (1226.3164556962026, 'Patricia'), (1105.537037037037, 'Patricia'), (985.0350877192982, 'Patricia'), (403.935, 'Patricia Maria'), (601.0849673202614, 'Patrycja'), (982.4150943396227, 'Patrycja'), (385.8135593220339, 'Patty'), (374.0572207084469, 'Paula'), (432.7289972899729, 'Paula'), (1070.8273381294964, 'Paula'), (976.5729166666666, 'Paula'), (406.53846153846155, 'Paula'), (1119.7272727272727, 'Paula'), (1122.6190476190477, 'Paula'), (1175.909090909091, 'Paula Andrea'), (868.7624113475177, 'Paula Catalina'), (508.4679802955665, 'Paula Cristina'), (1022.5, 'Paulina'), (1011.5109489051094, 'Paulina'), (1195.9473684210527, 'Paulina'), (173.570987654321, 'Pauline'), (793.5889570552147, 'Pauline'), (915.5892857142857, 'Pavla'), (514.586319218241, 'Peangtarn'), (755.5813953488372, 'Peggy'), (673.9809523809524, 'Pei Chi'), (1106.5, 'Pei Hsuan'), (1061.3076923076924, 'Pei Ju'), (465.24962852897477, 'Pemra'), (619.4154929577464, 'Pernilla'), (710.3972602739726, 'Petia'), (221.0070521861777, 'Petra'), (75.06681034482759, 'Petra'), (188.66216216216216, 'Petra'), (360.89268292682925, 'Petra'), (764.9778393351801, 'Petra'), (905.1104294478528, 'Petra'), (607.7978723404256, 'Petra'), (796.97, 'Petra'), (1203.0, 'Petra'), (1152.5555555555557, 'Petra'), (1221.6363636363637, 'Petra'), (1211.0, 'Phenomena'), (826.6486486486486, 'Phillis'), (729.6136363636364, 'Pia'), (766.21875, 'Pia'), (668.2581196581197, 'Piia'), (740.5879828326181, 'Pilar'), (1041.0740740740741, 'Pippa'), (937.7945205479452, 'Plobrung'), (440.11052631578946, 'Polina'), (541.8262295081968, 'Polina'), (620.6008771929825, 'Polina'), (1004.5175438596491, 'Polina'), (504.54545454545456, 'Polina'), (1212.0, 'Polina'), (1073.5, 'Polina'), (954.6, 'Polina'), (1064.1025641025642, 'Polina'), (1089.12, 'Polina'), (173.26180257510728, 'Polona'), (833.6775, 'Polona'), (729.1047904191616, 'Poojashree'), (795.4736842105264, 'Pranjala'), (653.5070422535211, 'Prarthana G'), (740.5361842105264, 'Prerna'), (1132.0, 'Priscila'), (1137.2424242424242, 'Priscila'), (668.9642857142857, 'Priscilla'), (678.396694214876, 'Priscilla'), (383.4714587737844, 'Qiang'), (826.1388888888889, 'Qianhui'), (943.421052631579, 'Qianqian'), (705.8493150684932, 'Qiu Yu'), (883.2352941176471, 'Quinn'), (633.9770491803279, 'Quirine'), (859.2706766917294, 'Rachael'), (1147.8526315789475, 'Rachel'), (955.7833333333333, 'Radina'), (1121.2432432432433, 'Rafaela'), (1176.5, 'Ralina'), (304.4619771863118, 'Raluca'), (672.2258064516129, 'Raluca Elena'), (539.6164383561644, 'Raluca Georgiana'), (1010.4545454545455, 'Ramu'), (1121.8846153846155, 'Ramya'), (557.2607003891051, 'Ran'), (917.6060606060606, 'Ran'), (1117.6666666666667, 'Rana'), (578.120792079208, 'Raquel'), (1065.0882352941176, 'Raquel'), (1089.2100840336134, 'Rashmi'), (1021.6504854368932, 'Ratnika'), (487.6268656716418, 'Raveena'), (1145.4333333333334, 'Rebeca'), (414.0690690690691, 'Rebecca'), (511.37888198757764, 'Rebecca'), (1192.6632653061224, 'Rebecca'), (563.75, 'Rebecca'), (842.0806451612904, 'Rebeka'), (461.7291666666667, 'Rebeka'), (289.60283687943263, 'Regina'), (1019.0, 'Reina'), (323.1388101983003, 'Reka Luca'), (494.6111111111111, 'Remi'), (251.02574002574002, 'Renata'), (485.2386363636364, 'Renata'), (669.448275862069, 'Ria'), (638.6666666666666, 'Rianna'), (246.19871794871796, 'Richel'), (290.0614657210402, 'Rika'), (495.22641509433964, 'Riko'), (1125.0363636363636, 'Rio'), (317.2361809045226, 'Risa'), (1086.25, 'Risa'), (741.123595505618, 'Risa'), (775.7269624573379, 'Rishika'), (1115.6666666666667, 'Rita'), (1002.7659574468086, 'Rita'), (651.4246575342465, 'Riya'), (150.96681415929203, 'Roberta'), (431.19607843137254, 'Robin'), (1054.606896551724, 'Robyn'), (762.0532150776053, 'Rocio'), (1216.138888888889, 'Rocio'), (402.49931972789113, 'Romana'), (669.8542372881356, 'Romana Caroline'), (283.63246554364474, 'Romina'), (758.1714285714286, 'Romy'), (1125.5471698113208, 'Rona'), (427.0, 'Ronit'), (1072.857142857143, 'Ronke'), (1168.2857142857142, 'Roosh'), (965.0, 'Rosa'), (1059.73, 'Rosalia'), (1018.328947368421, 'Rosalie'), (1143.0, 'Rosalie'), (984.1714285714286, 'Rosie'), (479.51738241308794, 'Roxane'), (1209.625, 'Rui'), (573.8729603729604, 'Rushmi'), (808.5096774193548, 'Rutuja'), (1069.0379746835442, 'Ryann'), (1117.88, 'Saana'), (982.7397260273973, 'Sabastiani'), (376.1625, 'Sabina'), (773.2608695652174, 'Sabina'), (895.1770334928229, 'Sabina'), (1161.3384615384616, 'Sabina'), (1057.837837837838, 'Sabina'), (1184.6666666666667, 'Sabina Elena'), (203.5871080139373, 'Sabine'), (1025.6526315789474, 'Sabrina'), (1115.8979591836735, 'Sabrina'), (879.2727272727273, 'Sabrina'), (551.3582089552239, 'Sabrina'), (1180.421052631579, 'Sabrina'), (340.2890442890443, 'Sacha'), (400.8093385214008, 'Sachia'), (368.26881720430106, 'Sachie'), (665.8219178082192, 'Sadafmoh'), (998.5238095238095, 'Sai Samhitha'), (297.39032258064515, 'Saisai'), (832.9585365853659, 'Sakiko'), (529.583908045977, 'Sally'), (1249.3333333333333, 'Salma'), (1195.7333333333333, 'Salma'), (116.44005102040816, 'Samantha'), (699.2705882352941, 'Samantha'), (424.93981481481484, 'Samantha'), (1040.40625, 'Samantha'), (1052.38, 'Samantha'), (1012.2051282051282, 'Samantha'), (932.8940397350993, 'Samira'), (1105.171875, 'Sanae'), (703.1372549019608, 'Sanaz'), (294.9404958677686, 'Sandra'), (793.5132075471698, 'Sandra'), (494.09510086455333, 'Sandra'), (551.0725593667546, 'Sandra'), (510.56216216216217, 'Sandra'), (925.6860465116279, 'Sandra'), (1092.165137614679, 'Sandra'), (489.4657534246575, 'Sandra'), (1226.25, 'Sandra'), (838.4905660377359, 'Sandra'), (1222.5862068965516, 'Sandra'), (1103.658536585366, 'Sandra'), (1251.6, 'Sandra'), (1028.9565217391305, 'Sandy'), (857.9508196721312, 'Sang Hee'), (177.22695035460993, 'Sania'), (197.24117647058824, 'Sara'), (1037.076923076923, 'Sara'), (464.9339622641509, 'Sara'), (1050.9178082191781, 'Sara'), (1016.6752136752136, 'Sara'), (1052.1315789473683, 'Sara'), (891.0576923076923, 'Sara'), (1217.851851851852, 'Sara'), (570.8888888888889, 'Sara'), (616.7735849056604, 'Sara'), (988.6666666666666, 'Sara'), (1205.4, 'Sara'), (417.0098765432099, 'Sarah'), (367.33684210526314, 'Sarah'), (1013.655737704918, 'Sarah'), (1286.48, 'Sarah'), (1116.9423076923076, 'Sarah'), (869.3846153846154, 'Sarah'), (875.9277108433735, 'Sarah Beth'), (743.6062176165804, 'Sarah Rebecca'), (1139.2340425531916, 'Sarahi'), (1191.6470588235295, 'Sarai Delfina'), (840.0776699029126, 'Saray'), (1081.1666666666667, 'Sari'), (1209.7777777777778, 'Sarlota'), (1235.1960784313726, 'Sarvinoz'), (1033.027027027027, 'Sasa'), (747.3695652173913, 'Saska'), (888.7272727272727, 'Satsuki'), (1142.9285714285713, 'Savannah'), (1188.2941176470588, 'Schena'), (1210.2571428571428, 'Se Hyun'), (1122.4545454545455, 'Se Jin'), (1240.92, 'Sean'), (1003.5367647058823, 'Seda'), (1115.72, 'Seira'), (1168.6571428571428, 'Selin'), (858.9173789173789, 'Seo Kyung'), (889.8028169014085, 'Seone'), (14.654294803817603, 'Serena'), (162.3505747126437, 'Sesil'), (784.0465949820789, 'Seung Yeon'), (218.4701086956522, 'Severine'), (166.41358024691357, 'Shahar'), (924.8818897637796, 'Shakhlo'), (1236.7627118644068, 'Shakhnoza'), (1228.3235294117646, 'Shangqing'), (694.2, 'Shanshan'), (967.9034090909091, 'Shao Yuan'), (851.5633802816901, 'Sharmada'), (296.5792682926829, 'Sharon'), (1097.0, 'Sharon Sanchana'), (293.45733788395904, 'Shelby'), (788.5178571428571, 'Shelby'), (1171.0, 'Shelly'), (451.8657487091222, 'Sheng Nan'), (737.1428571428571, 'Sherazad'), (271.3972602739726, 'Sherazad'), (1024.0116279069769, 'Sherry'), (1070.5714285714287, 'Shiho'), (449.41388174807196, 'Shiho'), (632.2824427480916, 'Shilin'), (1070.6666666666667, 'Shiori'), (1154.4166666666667, 'Shir'), (1187.9245283018868, 'Shiran'), (935.2322946175638, 'Shivika'), (1120.388888888889, 'Shou Na'), (1148.0, 'Shreya'), (1042.6802325581396, 'Shu Ying'), (112.48686030428769, 'Shuai'), (237.83595113438045, 'Shuai'), (421.44179894179894, 'Shuko'), (864.1538461538462, 'Shuo'), (966.0588235294117, 'Shuyue'), (897.6951219512196, 'Shweta'), (1047.7575757575758, 'Si Qi'), (298.4636510500808, 'Silvia'), (673.017094017094, 'Silvia'), (1013.3469387755102, 'Silvia'), (872.2721518987341, 'Silvia'), (1158.1186440677966, 'Silvia'), (1212.0, 'Silvia'), (145.9185185185185, 'Simona'), (797.6269662921349, 'Simona'), (782.7252747252747, 'Simona'), (875.5769230769231, 'Simona'), (995.3055555555555, 'Simona'), (982.58, 'Simone'), (1110.9722222222222, 'Simone'), (974.8, 'Simran Kaur'), (728.7443609022556, 'Sina'), (975.3484848484849, 'Sinead'), (1141.842105263158, 'Sing Le'), (980.9076923076923, 'Siqi'), (949.7916666666666, 'Sirui'), (1241.1379310344828, 'Siyu'), (259.63589743589745, 'Sloane'), (1184.8260869565217, 'Smriti'), (1225.388888888889, 'Sneha'), (632.3150684931506, 'Snehadevi S'), (514.1732026143791, 'So Jung'), (572.2654545454545, 'So Ra'), (147.30172413793105, 'Sofia'), (461.0702987697715, 'Sofia'), (1071.1351351351352, 'Sofia'), (646.4561403508771, 'Sofia'), (1050.469696969697, 'Sofia'), (780.7583333333333, 'Sofia'), (990.6554054054054, 'Sofia'), (433.7792207792208, 'Sofia'), (1157.6190476190477, 'Sofia'), (977.12, 'Sofia'), (1190.8461538461538, 'Sofia'), (1084.107142857143, 'Sofico'), (724.5, 'Sofie'), (541.1570881226054, 'Sofiya'), (483.3235294117647, 'Sofya'), (895.952380952381, 'Sofya'), (1004.6666666666666, 'Sohyun'), (1029.0980392156862, 'Sonia'), (879.4974619289341, 'Sonja'), (946.3888888888889, 'Sonja'), (1221.3333333333333, 'Sophia'), (576.5778364116095, 'Sophie'), (611.3353293413173, 'Sophie'), (981.4137931034483, 'Sophie'), (676.4722222222222, 'Sophie'), (213.75043630017453, 'Sorana'), (813.1357142857142, 'Sowjanya'), (1149.3125, 'Spurti'), (792.1927710843373, 'Sri Vaishnavi'), (841.8387096774194, 'Stamatia'), (312.54158964879855, 'Stanislava'), (993.4255319148937, 'Stefana'), (1167.3333333333333, 'Stefani'), (618.7228525121556, 'Stefania'), (1028.2814371257484, 'Stefania'), (871.703488372093, 'Stefania'), (1071.142857142857, 'Stefania'), (1172.0714285714287, 'Stefania'), (241.69011406844106, 'Stefanie'), (1078.6511627906978, 'Stefanie'), (1003.1884057971015, 'Stefanie'), (506.79487179487177, 'Stefanie'), (891.8120805369127, 'Steffi'), (1020.9090909090909, 'Steffi'), (170.97505422993493, 'Stephanie'), (202.60919540229884, 'Stephanie'), (541.0248618784531, 'Stephanie'), (398.5627906976744, 'Stephanie'), (1085.9809523809524, 'Stephanie'), (1046.5884773662551, 'Stephanie'), (823.2670454545455, 'Stephanie'), (744.9586776859504, 'Stephanie'), (896.3787878787879, 'Stephanie'), (1019.9512195121952, 'Stephanie'), (1035.5548387096774, 'Stephanie Mariel'), (573.6708333333333, 'Storm'), (426.3886462882096, 'Su Jeong'), (217.2493188010899, 'Su Wei'), (911.7619047619048, 'Suellen'), (944.2432432432432, 'Sultan'), (812.4581005586592, 'Sun Jung'), (1229.8, 'Sunae'), (611.0757575757576, 'Sunam'), (570.6993736951983, 'Sung Hee'), (1138.274193548387, 'Sung Hee'), (1015.6792452830189, 'Susan'), (417.8053097345133, 'Susanne'), (982.7222222222222, 'Suzan'), (980.6666666666666, 'Suzuho'), (698.7567567567568, 'Suzy'), (843.2311557788945, 'Svenja'), (1231.0, 'Svenja'), (428.6868029739777, 'Svetlana'), (35.72872340425532, 'Svetlana'), (691.9934640522875, 'Sviatlana'), (1002.6792452830189, 'Sybille'), (869.1702127659574, 'Sylvia'), (787.7645348837209, 'Sylwia'), (791.1240506329113, 'Syna'), (772.3186813186813, 'Szabina'), (343.0985324947589, 'Tadeja'), (969.6588235294117, 'Taisiya'), (1230.2, 'Talya'), (949.8059701492538, 'Tamachan'), (1118.4166666666667, 'Tamar'), (577.373801916933, 'Tamara'), (881.8430232558139, 'Tamara'), (354.43809523809523, 'Tamara'), (1245.6190476190477, 'Tamara'), (1023.8333333333334, 'Tamara'), (298.32876712328766, 'Tamara'), (1146.3934426229507, 'Tamari'), (121.82273948075202, 'Tamarine'), (386.7025316455696, 'Tamaryn'), (135.88910505836577, 'Tamira'), (601.906914893617, 'Tammi'), (1113.2325581395348, 'Tanaporn'), (1023.089430894309, 'Tanya'), (475.2979683972912, 'Tara'), (1075.0, 'Tatia'), (742.8783185840708, 'Tatiana'), (562.8954081632653, 'Tatiana'), (1225.578947368421, 'Tatiana'), (869.0425531914893, 'Tatiana'), (274.4980988593156, 'Tatjana'), (131.44628099173553, 'Tatjana'), (912.1077844311377, 'Tatsiana'), (747.3172413793103, 'Tayisiya'), (348.2173913043478, 'Taylor'), (1066.3333333333333, 'Taylor'), (1068.7457627118645, 'Tea'), (461.06702898550725, 'Teliana'), (614.9346733668342, 'Tena'), (411.579476861167, 'Teodora'), (938.0540540540541, 'Teodora'), (1156.2424242424242, 'Teodora'), (490.3264705882353, 'Tereza'), (418.1658878504673, 'Tereza'), (347.5242718446602, 'Tereza'), (1208.5535714285713, 'Tereza'), (786.047619047619, 'Tereza'), (487.1965811965812, 'Tereza'), (1039.076923076923, 'Tereza'), (540.7397260273973, 'Tereza'), (860.8055555555555, 'Tereza'), (963.5, 'Terri'), (696.2878787878788, 'Tess'), (390.2361111111111, 'Tessah'), (437.4119658119658, 'Tetiana'), (398.83478260869566, 'Tetyana'), (802.7222222222222, 'Thai Sa Grana'), (650.1206896551724, 'Theo'), (1159.5632183908046, 'Theresa'), (1017.7777777777778, 'Tijana'), (172.28095238095239, 'Timea'), (201.32704402515722, 'Timea'), (382.1750380517504, 'Tina'), (966.9056603773585, 'Tina'), (810.6666666666666, 'Tinatin'), (739.7727272727273, 'Ting Fei'), (789.6113989637306, 'Ting Jr'), (1015.2352941176471, 'Tingting'), (743.1953125, 'Tjasa'), (828.09375, 'Tomoko'), (1238.75, 'Tomoko'), (841.7167381974249, 'Tori'), (878.1666666666666, 'Tornado Alicia'), (1029.3196721311476, 'Trang'), (1009.8666666666667, 'Treta'), (131.02074074074073, 'Tsvetana'), (992.4870588235294, 'Tyra'), (506.39344262295083, 'Ulrikke'), (844.0692307692308, 'Ulyana'), (229.35687022900763, 'Urszula'), (1132.4109589041095, 'Ushna'), (411.5068493150685, 'Usue Maitane'), (921.3333333333334, 'Valentina'), (691.1423076923077, 'Valentine'), (1185.5, 'Valentine'), (479.8914728682171, 'Valentini'), (368.14331210191085, 'Valentyna'), (389.49271844660194, 'Valeria'), (339.99632352941177, 'Valeria'), (1103.178947368421, 'Valeria'), (1232.2, 'Valeria'), (843.5209580838323, 'Valeria'), (757.0555555555555, 'Valeria'), (935.9090909090909, 'Valeria'), (874.1242236024844, 'Valeria'), (1118.015625, 'Valeria'), (1048.5, 'Valeria'), (730.6881720430108, 'Valerie'), (1232.2424242424242, 'Valerie'), (1022.25, 'Valeriya'), (621.5885714285714, 'Valeriya'), (1029.9850746268658, 'Valeriya'), (1217.7368421052631, 'Valeriya'), (814.3333333333334, 'Valeriya'), (943.8, 'Valeriya'), (735.3589743589744, 'Valeriya'), (696.4126984126984, 'Vanda'), (579.437984496124, 'Vanesa'), (371.69403973509935, 'Vanessa'), (1235.625, 'Vanessa'), (185.75, 'Vania'), (1130.6037735849056, 'Vaniya'), (1089.7111111111112, 'Vanja'), (450.4642082429501, 'Varatchaya'), (894.3846153846154, 'Varunya'), (168.25584795321637, 'Varvara'), (573.6621621621622, 'Varvara'), (1114.527027027027, 'Varvara'), (1159.3076923076924, 'Varvara'), (563.1287878787879, 'Vasilisa'), (886.9589041095891, 'Vasilisa'), (859.8103448275862, 'Vaszilisza'), (729.0117647058823, 'Vendula'), (32.984862819299906, 'Venus'), (81.09357541899442, 'Vera'), (141.8237951807229, 'Vera'), (1126.2, 'Vera'), (1191.6571428571428, 'Vera'), (431.26027397260276, 'Vera'), (1171.0588235294117, 'Vera'), (866.6914893617021, 'Verena'), (931.780487804878, 'Verena'), (1123.6153846153845, 'Verena'), (450.6966019417476, 'Veronica'), (1273.838888888889, 'Veronica'), (1032.2, 'Veronica'), (792.015625, 'Veronica'), (951.0075757575758, 'Veronica M'), (447.5016501650165, 'Veronika'), (1053.8061224489795, 'Veronika'), (938.3714285714286, 'Veronika'), (1016.5, 'Veronika'), (500.6933333333333, 'Veronika'), (1153.1025641025642, 'Veronika'), (1127.8181818181818, 'Veronika'), (1080.3728813559321, 'Veronika'), (240.0448979591837, 'Vesna'), (1252.9130434782608, 'Vicky'), (1138.8490566037735, 'Victoire'), (92.10391822827938, 'Victoria'), (465.5233333333333, 'Victoria'), (540.4605263157895, 'Victoria'), (425.08252427184465, 'Victoria'), (1099.8367346938776, 'Victoria'), (809.776397515528, 'Victoria'), (564.8894736842105, 'Victoria'), (1185.75, 'Victoria'), (462.3642857142857, 'Victoria'), (1232.2, 'Victoria'), (1086.888888888889, 'Victoria'), (923.1578947368421, 'Victoria'), (1236.0, 'Victoria Ariadna'), (299.6986301369863, 'Viktoria'), (811.72, 'Viktoria'), (434.8452380952381, 'Viktoria'), (1236.5333333333333, 'Viktoriia'), (454.87593984962405, 'Viktorija'), (559.3382899628252, 'Viktorija'), (598.6225165562914, 'Viktoriya'), (1169.4814814814815, 'Viktoriya'), (1087.4782608695652, 'Viktoriya'), (1174.608695652174, 'Viktoriya'), (845.7530864197531, 'Viktoryia'), (1104.1830985915492, 'Viktoryia'), (1243.0, 'Vilma Y'), (1214.1142857142856, 'Vincenza'), (1150.0, 'Vinciane'), (1137.5135135135135, 'Violetta'), (1209.375, 'Violetta'), (114.47024504084014, 'Virginie'), (890.4780361757106, 'Virginie'), (1208.952380952381, 'Vishesh'), (1201.25, 'Vita'), (293.81748071979433, 'Vitalia'), (1224.0, 'Vitalia'), (558.0348583877995, 'Vivian'), (770.6042780748663, 'Vivian'), (922.4666666666667, 'Vivian'), (940.7358490566038, 'Vivian'), (607.2810218978102, 'Vivien'), (659.2103004291846, 'Vivienne'), (585.0383795309168, 'Vlada'), (1034.090909090909, 'Vlada'), (943.5432098765432, 'Vladica'), (823.8770833333333, 'Vladimira'), (1006.1769911504425, 'Vladislava'), (856.0782608695653, 'Vladyslava'), (555.6572164948453, 'Vojislava'), (999.0215053763441, 'Voni'), (701.4009009009009, 'Wan Ting'), (1081.142857142857, 'Wan Yi'), (1249.3333333333333, 'Warona'), (440.35214446952597, 'Wen Hsin'), (1117.55, 'Wen Ling'), (1011.469696969697, 'Wendy Qi Wen'), (1152.7837837837837, 'Weronika Jasmina'), (873.0103626943005, 'Whitney'), (1152.8947368421052, 'Whitney'), (1083.1454545454546, 'Wiktoria'), (585.2589641434263, 'Wing Yau Venise'), (937.7878787878788, 'Wushuang'), (661.2222222222222, 'Xenia'), (714.8653846153846, 'Xi Yao'), (814.4171122994652, 'Xiao'), (467.24657534246575, 'Xiaodi'), (848.4418604651163, 'Xiaorong'), (737.7547169811321, 'Xiaoxi'), (646.3770491803278, 'Ximena'), (1101.3064516129032, 'Ximena'), (694.4808743169399, 'Xin'), (1022.3333333333334, 'Xin Yu'), (370.7671232876712, 'Xinyu'), (681.175, 'Xinyu'), (309.35767790262173, 'Xinyun'), (954.6, 'Xiyu'), (488.7671232876712, 'Xu Liu'), (1225.75, 'Ya'), (586.865, 'Ya Hsuan'), (325.6162790697674, 'Yafan'), (768.560975609756, 'Yan'), (725.9122807017544, 'Yana'), (658.0246305418719, 'Yana'), (1019.9629629629629, 'Yana'), (601.5174129353234, 'Yana'), (845.5966386554621, 'Yana'), (978.8979591836735, 'Yana'), (1200.1052631578948, 'Yana'), (1177.8823529411766, 'Yang'), (150.74395161290323, 'Yanina'), (1023.5898876404494, 'Yanina'), (1059.2702702702702, 'Yanni'), (1166.875, 'Yarden'), (211.41240310077518, 'Yaroslava'), (688.6819923371647, 'Yasmin'), (1142.5, 'Yasmin'), (1227.7777777777778, 'Yasmina'), (972.7345132743363, 'Yasmine'), (1018.3333333333334, 'Yasmine'), (1261.8181818181818, 'Yasmyn'), (1110.4594594594594, 'Yawna'), (114.78806907378336, 'Yayuk'), (431.3144424131627, 'Ye Ra'), (1048.081081081081, 'Ye Xin'), (1146.8846153846155, 'Yekaterina'), (1197.7333333333333, 'Yekaterina'), (1224.0, 'Yekaterina'), (897.4873949579832, 'Yelena'), (973.8617021276596, 'Yeong Won'), (724.8712871287129, 'Yevgeniya'), (693.3742802303263, 'Yi'), (936.7860465116279, 'Yi'), (921.5733333333334, 'Yi'), (381.5512572533849, 'Yi Fan'), (656.8787276341948, 'Yi Jing'), (418.2566137566138, 'Yi Miao'), (1185.030303030303, 'Yidi'), (1209.625, 'Yihong'), (1063.9411764705883, 'Yijia'), (661.3972602739726, 'Ying'), (403.8775981524249, 'Ying Ying'), (801.6712328767123, 'Yixuan'), (892.3561643835617, 'Ylena'), (642.9487179487179, 'Ylona Georgiana'), (1128.901098901099, 'Yoko'), (1068.4619883040937, 'Yolande'), (1263.7666666666667, 'Yoo Ri'), (844.9310344827586, 'Yoon Young'), (1096.9130434782608, 'Yoshimi'), (1222.24, 'Yosr'), (1170.3461538461538, 'You Na'), (458.86633663366337, 'Ysaline'), (1098.357142857143, 'Yu Jin'), (1239.6666666666667, 'Yu Tong'), (1054.0, 'Yuan'), (891.2340425531914, 'Yuanyi'), (983.359649122807, 'Yue'), (444.96190476190475, 'Yue Yue'), (961.876923076923, 'Yuenu'), (1034.1304347826087, 'Yujia'), (646.8995433789954, 'Yuka'), (858.2450980392157, 'Yuka'), (1071.5833333333333, 'Yukako'), (876.7428571428571, 'Yuki'), (698.8285714285714, 'Yuki Kristina'), (857.1692307692308, 'Yukina'), (824.3936170212766, 'Yukun'), (262.494623655914, 'Yulia'), (970.7878787878788, 'Yulia'), (814.5192307692307, 'Yulia'), (1230.5625, 'Yulia'), (1162.0, 'Yulia'), (1117.6923076923076, 'Yulia'), (694.0, 'Yuliana'), (1082.5882352941176, 'Yuliana'), (238.01381909547737, 'Yuliya'), (487.0730593607306, 'Yuliya'), (658.64, 'Yuliya'), (1167.5428571428572, 'Yuliya'), (963.9666666666667, 'Yuliya'), (784.9147465437788, 'Yumi'), (812.5773420479303, 'Yumi'), (166.6586270871985, 'Yung Jan'), (1047.3529411764705, 'Yuqi'), (322.17758620689654, 'Yurika'), (982.5393258426966, 'Yuriko'), (1101.2045454545455, 'Yuriko'), (746.4803493449782, 'Yurina'), (608.1309090909091, 'Yuuki'), (1230.2, 'Yuval'), (545.449074074074, 'Yuxuan'), (168.8637083993661, 'Yvonne'), (733.6431718061674, 'Yvonne'), (1227.344827586207, 'Zaineb'), (867.5288461538462, 'Zalina'), (709.625, 'Zarah'), (222.81428571428572, 'Zarina'), (791.2352941176471, 'Zeel'), (1229.5714285714287, 'Zeynep  Sena'), (627.7777777777778, 'Zhanlan'), (629.0081967213115, 'Zhaoxuan'), (1058.0, 'Zhibek'), (1144.45, 'Zhima'), (1237.9, 'Zhou'), (989.75, 'Zhuoma'), (291.11032028469754, 'Zi'), (661.3205741626795, 'Zi'), (1221.5, 'Zinovia'), (878.4606741573034, 'Ziyue'), (677.8082191780821, 'Zoe'), (1141.4117647058824, 'Zoe'), (935.081081081081, 'Zoe Gwen'), (916.559633027523, 'Zsofia'), (273.0369928400955, 'Zuzana'), (295.0, 'Zuzana'), (518.3550724637681, 'Zuzana'), (520.1380597014926, 'Zuzana'), (694.4581395348837, 'Zuzana'), (794.5416666666666, 'Zuzanna')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the average ranking for each player and their first name.' in SQLite? I currently have 'SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name', which outputs [(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet'), (541.273631840796, 'Bernarda'), (834.1005025125628, 'Bernice'), (1005.75, 'Berta'), (146.59709379128137, 'Bethanie'), (1229.5714285714287, 'Betina'), (878.0138888888889, 'Bhuvana'), (653.2805383022775, 'Bianca'), (696.952380952381, 'Bianka'), (550.1941544885177, 'Bibiane'), (912.71875, 'Blair'), (904.6538461538462, 'Blanca'), (1221.8333333333333, 'Blessing'), (1254.6341463414635, 'Boba'), (392.7313829787234, 'Bojana'), (834.2066115702479, 'Borislava'), (992.4222222222222, 'Boyan'), (970.9846153846154, 'Brandy'), (872.0930232558139, 'Breaunna'), (211.01377118644066, 'Brenda'), (854.3170731707318, 'Brianna'), (917.0, 'Brienne'), (1126.3333333333333, 'Brindtha'), (647.5205479452055, 'Britt'), (990.5210084033613, 'Brittany'), (804.6277056277056, 'Brooke'), (952.5619834710744, 'Brynn'), (555.3384615384615, 'Bunyawi'), (1140.981981981982, 'Busra'), (311.87854251012146, 'Cagla'), (709.4247787610619, 'Caitlin'), (803.7139479905437, 'Camelia Elena'), (1192.1818181818182, 'Cameron'), (539.7944621938232, 'Camila'), (1192.3783783783783, 'Camila Vital'), (801.6850649350649, 'Camilla'), (1112.9450549450548, 'Camille'), (236.07412398921832, 'Cara'), (416.3666666666667, 'Carina'), (411.70779777206513, 'Carla'), (1236.7777777777778, 'Carlota'), (1127.9338842975208, 'Carlotta'), (318.69978858350953, 'Carly'), (890.6351351351351, 'Carmen'), (842.1553398058253, 'Carmen Raluca'), (564.1434426229508, 'Carol'), (645.2279792746114, 'Carolin'), (718.725321888412, 'Carolina'), (799.0650406504066, 'Carolina Meligeni Rodrigues'), (342.40130505709624, 'Caroline'), (1161.5675675675675, 'Caroline B'), (1197.578947368421, 'Carolyn'), (1020.6, 'Carson'), (378.0163727959698, 'Casey'), (293.76942355889724, 'Catalina'), (941.4724409448819, 'Catherine'), (134.21917808219177, 'Catherine Cartan'), (744.0, 'Caty'), (755.4649681528663, 'Cecilia'), (1141.842105263158, 'Cecilie Lundgaard'), (708.618398637138, 'Celine'), (1123.3855421686746, 'Cemre'), (650.1367521367522, 'Chalena'), (343.2835365853659, 'Chanel'), (215.6615811373093, 'Chanelle'), (575.4626436781609, 'Chang'), (1281.8461538461538, 'Chanikarn'), (609.90625, 'Chantal'), (1128.030303030303, 'Chantelle'), (1232.8, 'Chaoyi'), (766.4794520547945, 'Charlene'), (927.7647058823529, 'Charlotte'), (593.9759036144578, 'Chayenne'), (1132.0, 'Chelsea'), (719.3061224489796, 'Chelsey'), (524.7444668008048, 'Chen'), (789.2857142857143, 'Chengyiyi'), (464.1367781155015, 'Chi Chi'), (1039.3902439024391, 'Chi Fan'), (950.8813559322034, 'Chia Hsien'), (359.3764705882353, 'Chia Jung'), (437.73858921161826, 'Chiaki'), (977.9640591966173, 'Chiara'), (533.9586374695864, 'Chieh Yu'), (848.9908952959029, 'Chihiro'), (385.2651515151515, 'Chin Wei'), (615.2230215827338, 'Chinami'), (583.530303030303, 'Ching Wen'), (749.3582089552239, 'Chiraz'), (874.8181818181819, 'Chisa'), (675.2445414847161, 'Chloe'), (1112.1458333333333, 'Chompoothip'), (1112.875, 'Christie'), (454.9920529801324, 'Christina'), (841.4051724137931, 'Christine'), (692.390625, 'Chun Mei'), (986.3944099378882, 'Chun Yan'), (659.3055555555555, 'Cindy'), (443.45754716981133, 'Claire'), (1190.7307692307693, 'Clara'), (826.2619047619048, 'Claudia'), (967.2978723404256, 'Claudia Antonia'), (996.2574257425742, 'Claudia Gianina'), (383.6413199426112, 'Claudine'), (823.6306306306307, 'Clelia'), (875.9772727272727, 'Clemence'), (964.1224489795918, 'Clementina Eugenia'), (620.4120171673819, 'Clothilde'), (270.5896860986547, 'Coco'), (1165.093023255814, 'Colomba'), (390.0, 'Conny'), (570.2723004694835, 'Constance'), (835.1132075471698, 'Constanza'), (1245.3333333333333, 'Constanze'), (832.7818181818182, 'Corina'), (356.8219696969697, 'Corinna'), (757.2253521126761, 'Cornelia'), (406.5511363636364, 'Cory Ann'), (1049.0, 'Costanza'), (554.5376344086021, 'Cristiana'), (643.616049382716, 'Cristina'), (439.5747863247863, 'Cristina Andreea'), (720.6428571428571, 'Cristina Madalina'), (949.7944444444445, 'Csilla'), (998.7722772277227, 'Cynthia'), (1010.3333333333334, 'Da Hye'), (920.1276595744681, 'Dabin'), (1159.1818181818182, 'Dagmara'), (720.7490039840637, 'Daiana'), (1181.4736842105262, 'Dajana'), (801.6933333333334, 'Dalia'), (525.9552572706936, 'Dalila'), (279.16438356164383, 'Dalma'), (1493.0, 'Damilola'), (1242.0, 'Damini'), (1198.3333333333333, 'Damira'), (994.4769230769231, 'Dan Ni'), (805.7028985507246, 'Dana'), (977.4539007092199, 'Daneika'), (380.609375, 'Danica'), (348.6364892881825, 'Daniela'), (643.9216101694915, 'Daniella'), (744.7453250222618, 'Danielle'), (434.68, 'Danielle Rose'), (1107.0919540229886, 'Danijela'), (302.83268482490274, 'Danka'), (1226.5454545454545, 'Daphne'), (629.6443987667009, 'Daria'), (464.95631067961165, 'Darija'), (1132.1744186046512, 'Dariya'), (531.1829405162739, 'Darya'), (722.6986301369863, 'Dasha'), (576.4307692307692, 'Dayana'), (550.9545454545455, 'Dea'), (764.6785714285714, 'Deborah'), (1115.0851063829787, 'Deeon'), (758.5342960288808, 'Dejana'), (983.4174757281553, 'Demi'), (419.1633466135458, 'Denisa'), (949.1239316239316, 'Denise'), (1160.3125, 'Denise Antonela'), (551.5304659498208, 'Deniz'), (1123.6486486486488, 'Deria'), (863.7826086956521, 'Desirae'), (1032.2666666666667, 'Desiree'), (665.686684073107, 'Despina'), (746.0962962962963, 'Despoina'), (483.77464788732397, 'Destanee'), (1154.2857142857142, 'Dewi'), (615.1506849315068, 'Dhruthi'), (736.1650485436893, 'Di'), (383.7832512315271, 'Dia'), (654.3773657782928, 'Diana'), (1205.7692307692307, 'Diana Maria'), (809.697247706422, 'Dianne'), (669.2982456140351, 'Dijana'), (1248.2, 'Dilara'), (1094.4583333333333, 'Dina'), (268.05945945945945, 'Dinah'), (1234.6176470588234, 'Doga Selen'), (803.8666666666667, 'Domenica'), (171.71134020618555, 'Dominika'), (1042.7843137254902, 'Dominique'), (1131.6333333333334, 'Donika'), (223.50900900900902, 'Donna'), (1196.56, 'Dorien'), (520.9397993311037, 'Doroteja'), (913.7272727272727, 'Draginja'), (929.0599369085173, 'Dunja'), (1073.1752577319587, 'Ebony'), (1029.6888888888889, 'Eden'), (211.67325428194994, 'Edina'), (656.2851711026616, 'Eduarda'), (842.7045454545455, 'Eetee'), (1214.857142857143, 'Ege'), (471.8367290748899, 'Ekaterina'), (553.9434782608696, 'Ekaterine'), (1221.7931034482758, 'Elaine'), (1066.5343511450383, 'Eleanor'), (324.3720930232558, 'Elena'), (392.44444444444446, 'Elena Gabriela'), (686.6470588235294, 'Elena Teodora'), (249.5244140625, 'Eleni'), (950.0277777777778, 'Eleonora'), (1087.372340425532, 'Eleonore'), (876.1730769230769, 'Eliessa'), (421.6573033707865, 'Elina'), (888.2213114754098, 'Elisabeth'), (334.7118644067797, 'Elise'), (418.39748953974896, 'Elitsa'), (579.5214723926381, 'Elixane'), (978.2708333333334, 'Eliza'), (1154.2714285714285, 'Elizabeta'), (736.9747747747748, 'Elizabeth'), (1006.2982456140351, 'Elizabeth Anita Alexandria'), (489.5307517084282, 'Elizaveta'), (981.9814814814815, 'Elizaveta Anna'), (1011.9433962264151, 'Elke'), (1168.7967479674796, 'Ella'), (750.9460093896714, 'Ellen'), (508.340206185567, 'Ellie'), (1211.2333333333333, 'Elodie'), (652.1984732824427, 'Elyne'), (819.3400503778338, 'Ema'), (672.730407523511, 'Emelyn'), (770.8472222222222, 'Emi'), (1232.0, 'Emilia'), (1022.9174311926605, 'Emiliana'), (705.4716981132076, 'Emilie'), (1209.625, 'Emilija'), (1092.2771084337348, 'Emiliya'), (585.093851132686, 'Emily'), (1041.948717948718, 'Emily J'), (682.0972222222222, 'Emina'), (641.046992481203, 'Emma'), (1193.3529411764705, 'Emma Christine'), (943.7716535433071, 'Emmanuelle'), (1229.7333333333333, 'En Pei'), (980.3333333333334, 'Ena'), (321.23595505617976, 'Eri'), (788.0384615384615, 'Erica'), (544.5041866028708, 'Erika'), (942.7969696969697, 'Erin'), (733.1351351351351, 'Erina'), (1218.5652173913043, 'Esen'), (966.0540540540541, 'Estela'), (617.4935251798561, 'Estelle'), (950.9090909090909, 'Ester'), (347.34943639291464, 'Estrella'), (781.3218390804598, 'Etsuko'), (911.7241379310345, 'Eudice Wong'), (1157.5, 'Eugenia'), (477.62886597938143, 'Eugenie'), (620.6746411483253, 'Eugeniya'), (500.29483037156706, 'Eva'), (1083.8333333333333, 'Eva Marie'), (1023.8690476190476, 'Eveliina'), (471.5439093484419, 'Evelyn'), (414.66339869281046, 'Evgenia'), (442.0344827586207, 'Evgeniya'), (612.0185185185185, 'Fang Ying'), (406.9281767955801, 'Fangzhou'), (569.1904761904761, 'Fanny'), (1106.3076923076924, 'Farah'), (673.7509157509157, 'Fatima'), (1070.9463414634147, 'Fatimah'), (648.2984054669704, 'Fatma'), (1015.5, 'Fatyha'), (722.7286493034525, 'Federica'), (1204.7272727272727, 'Federica Joe'), (647.922077922078, 'Fernanda'), (1187.0384615384614, 'Ferny'), (853.3908045977012, 'Fiona'), (376.47888446215137, 'Flavia'), (451.5810397553517, 'Florencia'), (999.2, 'Frances'), (570.534951862704, 'Francesca'), (903.1666666666666, 'Francisca'), (437.05298013245033, 'Francoise'), (949.6575342465753, 'Franziska'), (1244.3333333333333, 'Frederikke'), (544.1627906976744, 'Freya'), (696.7697332607512, 'Gabriela'), (994.0612244897959, 'Gabriela Nicole'), (792.5, 'Gabriella'), (985.7211538461538, 'Gabrielle Faith'), (1052.8314606741574, 'Gaelle'), (759.5352697095435, 'Gaia'), (526.2644836272041, 'Gail'), (305.19563522992985, 'Galina'), (606.7211740041929, 'Ganna'), (229.3774193548387, 'Garbine'), (1152.142857142857, 'Gebriela'), (772.2857142857143, 'Genevieve'), (533.5940594059406, 'Georgia'), (763.1014492753624, 'Georgia Andreea'), (1153.9166666666667, 'Georgiana'), (396.225, 'Georgina'), (1150.6607142857142, 'Ghislaine'), (813.1351351351351, 'Giada'), (567.8518518518518, 'Gioia'), (960.4941860465116, 'Giorgia'), (1226.5, 'Giorgie'), (1197.0, 'Giovanna'), (693.6215943491422, 'Giulia'), (584.359375, 'Giuliana'), (794.7118644067797, 'Gloria'), (716.3150684931506, 'Gozal'), (454.06233062330625, 'Grace'), (783.8288043478261, 'Gracia'), (547.277108433735, 'Greetje'), (296.8219584569733, 'Greta'), (797.383606557377, 'Guadalupe'), (1027.0, 'Guillermina'), (957.9512195121952, 'Guiomar'), (1168.3396226415093, 'Gulben'), (1196.0, 'Gulchekhra'), (1236.6153846153845, 'Gulnaz'), (995.4074074074074, 'Guzal'), (1087.6216216216217, 'Gyulnara'), (1051.623188405797, 'Habiba'), (844.3856812933026, 'Hae Sung'), (1179.4153846153847, 'Haine'), (1110.5376344086021, 'Hana'), (957.2, 'Hanna'), (543.968253968254, 'Hanyu'), (680.1050228310502, 'Hao Chen'), (1153.936507936508, 'Hao Ching'), (574.8723404255319, 'Harmony'), (694.341935483871, 'Harriet'), (774.6837606837607, 'Haruka'), (512.1515151515151, 'Haruna'), (914.5321100917431, 'Hayley'), (1214.7692307692307, 'Hazal'), (167.50632911392404, 'Heather'), (417.44323483670297, 'Heidi'), (1019.4107142857143, 'Helen'), (696.4752475247525, 'Helene'), (1095.1176470588234, 'Hikari'), (673.6635071090047, 'Hilda'), (1219.0, 'Himari'), (534.890243902439, 'Hiroko'), (860.8104265402843, 'Hirono'), (925.9865771812081, 'Ho Ching'), (1185.75, 'Hollie'), (914.8607594936709, 'Hongrui'), (1251.1333333333334, 'Hortencia'), (1107.7142857142858, 'Hsin Yuan'), (726.1737089201878, 'Hua Chen'), (1118.904761904762, 'Huijie'), (888.0055096418732, 'Hulya'), (1020.28125, 'Hye Min'), (1069.3208955223881, 'Hyojung'), (729.0671936758894, 'Hyun Hui'), (1038.6911764705883, 'I Hsuan'), (1085.581818181818, 'Iana'), (962.5, 'Ida'), (1232.2, 'Idia'), (705.5625, 'Iga'), (1135.5, 'Ilay'), (868.2191780821918, 'Ilka'), (452.625, 'Ilona'), (847.0941176470589, 'Ilze'), (845.375, 'Imane Maelle'), (1165.5573770491803, 'Ina'), (1069.0925925925926, 'Inci'), (954.046875, 'India'), (627.7027027027027, 'Indire'), (485.9559748427673, 'Indy'), (919.6147540983607, 'Ineke'), (687.0229885057471, 'Ines'), (1039.0, 'Inger'), (766.2549019607843, 'Ingrid'), (869.3571428571429, 'Ingrid Alexandra'), (748.6622691292876, 'Ingrid Esperanza'), (1192.5454545454545, 'Intissar'), (980.2232142857143, 'Ioana'), (482.43243243243245, 'Ioana Diana'), (646.0441176470588, 'Ioana Loredana'), (799.0552486187845, 'Ionela Andreea'), (655.7828348504552, 'Ipek'), (288.74423480083857, 'Irena'), (579.2153846153847, 'Irene'), (436.84339509862525, 'Irina'), (285.84388185654007, 'Irina Camelia'), (578.1381578947369, 'Irina Maria'), (866.1075949367089, 'Iris'), (489.5294964028777, 'Iryna'), (724.9178743961353, 'Isabel'), (1114.99375, 'Isabela'), (566.7873931623932, 'Isabella'), (781.6993464052288, 'Isabelle'), (1170.9411764705883, 'Iulia Maria'), (732.7386018237082, 'Iva'), (439.81414868105514, 'Ivana'), (871.109375, 'Ivania'), (1079.05, 'Ivanka'), (117.95684523809524, 'Iveta'), (1136.8535031847134, 'Ivette'), (872.0, 'Ivone'), (591.3809523809524, 'Ivonne'), (624.6089494163424, 'Jacqueline'), (909.2, 'Jada'), (739.04802259887, 'Jade'), (760.4920634920635, 'Jaeda'), (562.8450704225352, 'Jaimee'), (1243.875, 'Jaimy Gayle'), (1037.5274725274726, 'Jainy'), (402.36756756756756, 'Jamie'), (1247.3333333333333, 'Jamilya'), (592.5990783410139, 'Jan'), (406.6258503401361, 'Jana'), (240.5306603773585, 'Janette'), (699.7864583333334, 'Janina'), (1262.5416666666667, 'Janja'), (861.5102040816327, 'Janneke'), (748.7238095238096, 'Jaqueline Adina'), (1121.767857142857, 'Jara'), (149.46360759493672, 'Jarmila'), (633.027027027027, 'Jasmin'), (642.1811989100818, 'Jasmina'), (437.86915887850466, 'Jasmine'), (1117.64, 'Jasmine Amber'), (1070.5648854961833, 'Jawairiah'), (1035.46, 'Jazmin'), (983.1290322580645, 'Jazzamay'), (767.7730496453901, 'Jeannine'), (348.19338235294117, 'Jelena'), (556.7936681222708, 'Jennifer'), (902.1470588235294, 'Jenny'), (501.5860215053763, 'Jesika'), (655.7464059804486, 'Jessica'), (818.2043795620438, 'Jessika'), (967.6708860759494, 'Jessy'), (823.9789029535865, 'Ji Hee'), (833.5061082024433, 'Ji Young'), (1169.6923076923076, 'Jia'), (682.961038961039, 'Jia Jing'), (529.7777777777778, 'Jia Qi'), (794.4931506849315, 'Jiahui'), (1230.6, 'Jiakang'), (1232.032258064516, 'Jiatian'), (578.5, 'Jiaxi'), (1161.0, 'Jiaxue'), (114.05571428571429, 'Jie'), (501.0619469026549, 'Jil Belen'), (1116.4190476190477, 'Jil Nora'), (121.9579326923077, 'Jill'), (721.14, 'Jillian'), (1267.0, 'Jin'), (492.8915187376726, 'Jin A'), (1035.6470588235295, 'Jin Ju'), (369.1620469083156, 'Jing Jing'), (863.3225806451613, 'Joana'), (931.025641025641, 'Joanna'), (1227.8, 'Joanne'), (925.4230769230769, 'Jodie Anna'), (1111.8333333333333, 'Johana'), (310.3405299313052, 'Johanna'), (1022.6198347107438, 'Jordana'), (924.9325842696629, 'Josepha'), (684.4892086330935, 'Josephine'), (993.2105263157895, 'Josie'), (601.9846625766871, 'Jovana'), (812.6, 'Ju Eun'), (1224.0, 'Judith'), (1243.904761904762, 'Jule'), (576.9173467252564, 'Julia'), (1024.6666666666667, 'Julia Mansano'), (1110.0816326530612, 'Juliana'), (1175.7666666666667, 'Juliana Rocha'), (512.3787128712871, 'Julie'), (707.1467889908257, 'Julieta Lara'), (1019.9411764705883, 'Julita'), (732.1666666666666, 'Julyette Maria Josephine'), (1189.0, 'June'), (262.30884808013354, 'Junri'), (1212.9166666666667, 'Justina'), (521.5358361774744, 'Justine'), (585.8517745302714, 'Justyna'), (1055.020202020202, 'Kady'), (272.08855291576674, 'Kai Chen'), (522.6561403508772, 'Kai Lin'), (127.06775067750678, 'Kaia'), (901.3333333333334, 'Kaitlin'), (756.2549019607843, 'Kaitlyn'), (633.5454545454545, 'Kaja'), (661.9589041095891, 'Kajsa'), (568.2547169811321, 'Kamila'), (1162.8301886792453, 'Kamilla'), (765.1395348837209, 'Kamonwan'), (924.2782608695652, 'Kana'), (635.346516007533, 'Kanae'), (1105.3125, 'Kanako'), (799.9940828402367, 'Kanami'), (962.8536585365854, 'Kanika'), (871.0790513833992, 'Kaori'), (674.9672514619883, 'Karen'), (1068.9166666666667, 'Kariann'), (472.338003502627, 'Karin'), (883.6090909090909, 'Karina'), (696.9606060606061, 'Karina Ildor'), (1062.795918367347, 'Karina Kristina'), (868.8904109589041, 'Karine'), (1001.0679611650486, 'Karis'), (807.616, 'Karla'), (652.917808219178, 'Karman'), (928.3333333333334, 'Karola Patricia'), (1077.8095238095239, 'Karolayne'), (586.9412296564195, 'Karolina'), (873.6229508196722, 'Karoline'), (903.5769230769231, 'Karyn'), (927.0350877192982, 'Kassandra'), (331.93949394939494, 'Katalin'), (401.0998263888889, 'Katarina'), (459.29286608260327, 'Katarzyna'), (1117.7142857142858, 'Kate'), (491.8507295173962, 'Katerina'), (294.33209990749305, 'Kateryna'), (680.677700348432, 'Katharina'), (882.1071428571429, 'Katharine'), (836.6804511278195, 'Katherine'), (910.396694214876, 'Katherine Gabriela'), (415.7, 'Kathinka'), (291.4792817679558, 'Kathrin'), (620.9404580152672, 'Katie'), (1111.08, 'Katrine Isabel'), (492.6608695652174, 'Katy'), (1050.7, 'Katya'), (1010.1818181818181, 'Katyarina'), (583.1686746987951, 'Kayla'), (1163.3478260869565, 'Kaylah'), (772.2402912621359, 'Kazusa'), (1003.1212121212121, 'Kei'), (1114.9433962264152, 'Kelia'), (804.873831775701, 'Kelly'), (312.7584269662921, 'Kelly S'), (1012.325, 'Kelsey'), (807.7222222222222, 'Kennedy'), (643.422641509434, 'Keren'), (1018.6534653465346, 'Keri'), (1020.4271844660194, 'Kerstin'), (978.0229885057471, 'Khristina'), (1164.090909090909, 'Ki Ryang'), (287.71625344352617, 'Kiki'), (687.3120567375887, 'Kim'), (762.4081632653061, 'Kim Alice'), (846.9154228855722, 'Kimberley'), (618.6923076923077, 'Kimberly'), (1097.219512195122, 'Kimika'), (95.03465982028241, 'Kimiko'), (606.1467576791808, 'Kinnie'), (308.64912280701753, 'Kirsten'), (1035.0384615384614, 'Kirsten Andrea'), (576.9, 'Klaartje'), (235.31431431431432, 'Klara'), (780.7905027932961, 'Klaudia'), (826.0238095238095, 'Komola'), (567.0507399577167, 'Korina'), (844.7460317460317, 'Kotomi'), (522.984693877551, 'Krista'), (445.18918918918916, 'Kristie'), (343.25546975546973, 'Kristina'), (1060.5633802816901, 'Kristina N'), (837.7730496453901, 'Kristy'), (443.8467908902692, 'Kristyna'), (482.36648501362396, 'Ksenia'), (990.6, 'Kseniia'), (975.6271186440678, 'Ksenija'), (488.76107382550333, 'Kumiko'), (165.96132596685084, 'Kurumi'), (159.62397820163488, 'Kveta'), (1070.0377358490566, 'Kwan Yau'), (887.502487562189, 'Kyle'), (798.3181818181819, 'Kylie'), (348.54794520547944, 'Kyoka'), (443.76148409893995, 'Kyra'), (533.433770014556, 'Kyung Mi'), (677.4458598726114, 'Laetitia'), (996.8148148148148, 'Laili'), (1062.3666666666666, 'Lamis'), (643.6939163498099, 'Lara'), (1054.9019607843138, 'Larikah'), (504.4145867098865, 'Laura'), (910.5714285714286, 'Laura D'), (516.1982942430703, 'Laura Ioana'), (1198.1538461538462, 'Laura Sofia'), (484.9442231075697, 'Lauren'), (1107.0882352941176, 'Lauryn'), (612.736, 'Lavinia'), (1226.076923076923, 'Laylo'), (1184.0, 'Layne'), (858.4107142857143, 'Lea'), (1179.6216216216217, 'Leah'), (908.156862745098, 'Lee'), (594.9436936936937, 'Lena'), (657.8934169278997, 'Lena Marie'), (451.33577981651376, 'Lenka'), (773.5666666666667, 'Leolia'), (825.972972972973, 'Leonie'), (887.4545454545455, 'Lesedi Sheya'), (205.17590361445784, 'Lesia'), (514.7174515235457, 'Lesley'), (1180.5454545454545, 'Leslie'), (481.3229166666667, 'Leticia'), (1072.4, 'Leticia Garcia'), (1030.5, 'Leylah Annie'), (988.7425149700599, 'Li'), (387.87113402061857, 'Liana Gabriela'), (899.9150326797386, 'Libby'), (1035.327868852459, 'Libi'), (1147.8529411764705, 'Lidia'), (797.2128378378378, 'Lidziya'), (284.8326771653543, 'Liezel'), (567.9464544138929, 'Liga'), (722.5087719298245, 'Lilla'), (497.42124542124543, 'Lin'), (574.9808362369338, 'Lina'), (929.4398496240601, 'Linda'), (275.6055900621118, 'Lindsay'), (986.82, 'Lindsey'), (418.81925343811395, 'Ling'), (1184.7222222222222, 'Liniques'), (959.6981132075472, 'Linnea'), (356.0105210420842, 'Lisa'), (758.06, 'Lisa Maria'), (996.0408163265306, 'Lisa Marie'), (673.6507936507936, 'Lisanne'), (887.2875, 'Liubov'), (1179.875, 'Livia'), (870.9007633587786, 'Liz Tatiane'), (1120.5652173913043, 'Lizaveta'), (666.1496062992126, 'Lizette'), (1231.2727272727273, 'Lorenza'), (972.75, 'Lorraine M'), (680.1724137931035, 'Lou'), (1220.0, 'Loudmilla'), (380.5308641975309, 'Louisa'), (1070.1025641025642, 'Louise'), (188.06095041322314, 'Lourdes'), (907.3557312252965, 'Lu'), (859.8644067796611, 'Luca'), (845.740638002774, 'Lucia'), (885.7495107632094, 'Luciana'), (322.62611607142856, 'Lucie'), (845.986301369863, 'Lucrezia'), (756.3141592920354, 'Lucy'), (846.2727272727273, 'Ludmila'), (787.5416666666666, 'Ludmilla'), (981.7517730496454, 'Luisa'), (820.59375, 'Luisa Marie'), (284.22813688212926, 'Luksika'), (1098.2888888888888, 'Lulu'), (1139.0, 'Luna'), (974.2702702702703, 'Lusine'), (1190.0629921259842, 'Lutfiye'), (982.6666666666666, 'Lyann'), (952.4411764705883, 'Lynn'), (382.82479784366575, 'Lyudmyla'), (607.3360995850622, 'Macall'), (692.1515151515151, 'Macarena'), (324.63613231552165, 'Madalina'), (748.0, 'Maddison'), (1028.0365853658536, 'Madeleine'), (1217.469387755102, 'Madeline'), (1203.5, 'Madina'), (290.64452214452217, 'Madison'), (958.0955414012739, 'Madrie'), (787.0, 'Maegan'), (1139.7, 'Mafalda'), (1173.75, 'Maftuna'), (734.0, 'Magali'), (1036.1214953271028, 'Magalie'), (300.3974358974359, 'Magda'), (443.6296006264683, 'Magdalena'), (1092.7621951219512, 'Magy'), (875.0, 'Mahak'), (1007.15, 'Mahitha'), (687.25, 'Mai'), (745.433962264151, 'Maia'), (1206.6666666666667, 'Maia A'), (438.4245810055866, 'Maiko'), (1152.888888888889, 'Maileen'), (410.8463541666667, 'Mailen'), (896.7413793103449, 'Maja'), (784.8009049773756, 'Makiho'), (516.6615384615385, 'Makoto'), (999.15625, 'Malene'), (1004.7428571428571, 'Malika'), (825.039603960396, 'Malin'), (1031.5342465753424, 'Mallaurie'), (143.48235294117646, 'Mallory'), (947.3333333333334, 'Malou'), (1153.590909090909, 'Mami'), (1202.2692307692307, 'Man Ying Maggie'), (689.891129032258, 'Mana'), (1230.6, 'Mananchaya'), (838.1780821917808, 'Manca'), (361.0, 'Mandy'), (897.0974358974358, 'Manisha'), (622.7673469387755, 'Manon'), (1181.3548387096773, 'Manya'), (908.3962264150944, 'Mara'), (774.64, 'Marcela'), (1143.7957746478874, 'Marcela Guimaraes'), (1247.3636363636363, 'Marcelina'), (657.0171919770773, 'Marcella'), (325.5912596401028, 'Margalita'), (987.6739130434783, 'Margarida'), (611.4060995184591, 'Margarita'), (1051.1224489795918, 'Margaux'), (753.8346456692914, 'Margot'), (526.3698630136986, 'Mari'), (426.6002565198803, 'Maria'), (1190.0833333333333, 'Maria Agustina'), (1072.9591836734694, 'Maria Andrea'), (1188.5277777777778, 'Maria Camila'), (861.5050505050505, 'Maria Constanza De Las Mercedes'), (1119.4897959183672, 'Maria Del Rosario'), (194.2392065344224, 'Maria Elena'), (443.0228531855956, 'Maria Fernanda'), (1170.1830985915492, 'Maria Jesus'), (486.6092544987147, 'Maria Joao'), (306.1794310722101, 'Maria Jose'), (918.0769230769231, 'Maria Lourdes'), (1047.98224852071, 'Maria Paulina'), (359.81081081081084, 'Maria Teresa'), (662.1182795698925, 'Mariam'), (556.0428051001821, 'Mariana'), (730.3831168831168, 'Marianna'), (993.175925925926, 'Marianne'), (1085.4242424242425, 'Mariaryeni'), (695.574074074074, 'Marie'), (300.56296296296296, 'Marie Eve'), (1148.9166666666667, 'Mariia'), (544.2636655948553, 'Marija'), (1215.0, 'Marijana'), (532.6881807180315, 'Marina'), (774.5654761904761, 'Marine'), (279.78655282817505, 'Marion'), (1163.0, 'Mariona'), (1067.3413173652696, 'Marisa'), (281.871335504886, 'Mariya'), (353.44444444444446, 'Marketa'), (946.8934426229508, 'Marlies'), (783.1711711711712, 'Marrit'), (419.32988047808766, 'Marta'), (851.1224489795918, 'Marta Huqi'), (1056.0588235294117, 'Martha'), (751.8679119412942, 'Martina'), (869.1666666666666, 'Mary'), (1188.7096774193549, 'Mary Ann'), (323.86176470588236, 'Maryna'), (355.7223168654174, 'Masa'), (437.11396648044695, 'Mathilde'), (799.1875, 'Matilda'), (1013.4761904761905, 'Maud'), (1070.21875, 'Maureen'), (1121.0869565217392, 'Maurien'), (973.8717948717949, 'Maxine'), (1084.0294117647059, 'May'), (732.4260679079956, 'Maya'), (891.6309523809524, 'Mayar'), (407.029702970297, 'Mayo'), (619.9064748201439, 'Mayya'), (736.4809523809524, 'Megan'), (1025.0, 'Megumi'), (1031.6, 'Mei Xu'), (812.85, 'Meiling'), (1029.1666666666667, 'Meiqi'), (372.32502965599053, 'Melanie'), (1039.8333333333333, 'Melany Solange'), (1017.2560553633218, 'Melina'), (169.13578500707214, 'Melinda'), (634.7950310559006, 'Melis'), (993.1351351351351, 'Melisa'), (1154.093023255814, 'Melissa'), (1104.357142857143, 'Melissa Ishuan'), (1035.95, 'Meng Ning'), (1213.2142857142858, 'Mercedes'), (900.75, 'Merel'), (1182.9107142857142, 'Meritxell'), (337.5292682926829, 'Mervana'), (554.3953934740883, 'Mi'), (1071.3076923076924, 'Mi Jeong'), (992.7225433526012, 'Mi Rae'), (999.375, 'Mi Zhuoma'), (987.504761904762, 'Mia Nicole'), (1332.0737704918033, 'Micaela'), (676.90589198036, 'Michaela'), (185.3469387755102, 'Michaella'), (1228.9285714285713, 'Michela'), (946.8846153846154, 'Michele Alexandra'), (280.79959100204496, 'Michelle'), (718.047619047619, 'Michika'), (376.7356115107914, 'Mihaela'), (1223.4, 'Mihaela Lorena'), (523.2788844621514, 'Miharu'), (1064.142857142857, 'Mihika'), (1110.4411764705883, 'Mihoki'), (586.2250489236791, 'Miki'), (1201.16, 'Mila'), (1234.2857142857142, 'Milagros'), (626.441935483871, 'Milana'), (1114.4074074074074, 'Milena'), (1221.904761904762, 'Milica'), (866.0693069306931, 'Min'), (819.8425531914894, 'Min Hwa'), (1238.0625, 'Minami'), (788.2622950819672, 'Mira'), (721.1643835616438, 'Mirabelle'), (1169.4864864864865, 'Miranda'), (912.120218579235, 'Miriam'), (628.075, 'Miriam Bianca'), (950.6263736263736, 'Miriana'), (843.6428571428571, 'Mirjam'), (186.76587795765877, 'Mirjana'), (617.0379241516966, 'Misa'), (208.95263157894738, 'Misaki'), (1121.04, 'Mitsumi'), (447.93283582089555, 'Miyabi'), (594.9036697247707, 'Miyu'), (593.1506849315068, 'Mizuno'), (1029.0, 'Molly'), (772.6981132075472, 'Momoko'), (273.57517899761336, 'Mona'), (210.0846394984326, 'Monica'), (980.575, 'Monika'), (462.4270462633452, 'Monique'), (541.952380952381, 'Montserrat'), (880.6527777777778, 'Morgane'), (1243.4, 'Moulika'), (1258.5, 'Mouna'), (1198.25, 'Moyuka'), (1227.0, 'Muazzez'), (1186.9444444444443, 'Muge'), (485.40168539325845, 'Myrtille'), (82.13112391930835, 'Na'), (608.7791798107255, 'Na Lae'), (573.5197368421053, 'Na Ri'), (868.6521739130435, 'Nadezda'), (407.5463976945245, 'Nadia'), (637.4607407407408, 'Nadiya'), (631.8181818181819, 'Nadja'), (828.0675675675676, 'Nagi'), (767.4963503649635, 'Naiktha'), (930.7027027027027, 'Naima'), (878.6666666666666, 'Nam Yeon'), (890.4455445544554, 'Nan Nan'), (542.7168141592921, 'Nanuli'), (313.45625, 'Nao'), (1180.3828125, 'Naoko'), (483.97225572979494, 'Naomi'), (929.4388489208633, 'Napatsakorn'), (1138.9166666666667, 'Nastassia'), (554.5290322580645, 'Nastassja'), (593.1772853185596, 'Nastja'), (720.132932166302, 'Natalia'), (577.9677419354839, 'Natalie'), (634.3620689655172, 'Natalija'), (1247.909090909091, 'Nataliya'), (666.2853403141361, 'Natasa'), (883.0777142857143, 'Natasha'), (566.4943396226415, 'Natela'), (962.0188679245283, 'Natella'), (543.031185031185, 'Nathalia'), (617.4615384615385, 'Nathaly'), (929.6928104575163, 'Natia'), (547.7037037037037, 'Natsumi'), (1177.622641509434, 'Nattawadee'), (1087.3823529411766, 'Naz'), (825.7291666666666, 'Nazari'), (745.421052631579, 'Neda'), (1164.107142857143, 'Nelise'), (1069.15, 'Nermeen'), (1031.0, 'Nevena'), (515.3191489361702, 'Nicha'), (843.9007633587786, 'Nicky'), (753.2253164556962, 'Nicola'), (499.4127634660422, 'Nicole'), (485.46875, 'Nicoleta Catalina'), (778.1648648648649, 'Nicolette'), (762.1578947368421, 'Nidhi'), (376.7617554858934, 'Nigina'), (913.4380165289256, 'Nika'), (1174.0, 'Nikita'), (1017.3134328358209, 'Nikki'), (1054.0813953488373, 'Nikol'), (723.484076433121, 'Nikola'), (528.8673050615595, 'Nina'), (1124.1666666666667, 'Nina Isabella'), (841.0514705882352, 'Nives'), (965.5343511450382, 'Noel'), (1049.834745762712, 'Noelia'), (883.7787610619469, 'Noelle'), (1167.2758620689656, 'Nonna'), (374.93926247288505, 'Noppawan'), (921.6216216216217, 'Nora'), (1096.1140350877192, 'Nour'), (936.3392857142857, 'Nozomi'), (436.66881028938906, 'Nudnida'), (537.577922077922, 'Nungnadda'), (395.6680227827502, 'Nuria'), (1027.1382978723404, 'Oana'), (686.3047619047619, 'Oana Georgeta'), (728.7630208333334, 'Oceane'), (839.4923664122138, 'Ofri'), (533.9652351738241, 'Oksana'), (660.8924731182796, 'Ola'), (1397.5, 'Olawaseun'), (1112.75, 'Olaya'), (903.4289156626506, 'Oleksandra'), (1179.1555555555556, 'Olena'), (501.44444444444446, 'Olesya'), (432.6511627906977, 'Olga'), (446.7231833910035, 'Olivia'), (1006.5128205128206, 'Oliwia'), (435.1470588235294, 'Ons'), (978.7321428571429, 'Ornella'), (866.0454545454545, 'Oyku'), (1156.28125, 'Paige Mary'), (989.1904761904761, 'Pamela'), (683.1081081081081, 'Panna'), (132.12638580931264, 'Paola'), (1099.625, 'Parris'), (863.5507246376811, 'Patcharin'), (572.8059701492538, 'Patricia'), (403.935, 'Patricia Maria'), (657.3816155988858, 'Patrycja'), (385.8135593220339, 'Patty'), (558.0162601626016, 'Paula'), (1175.909090909091, 'Paula Andrea'), (868.7624113475177, 'Paula Catalina'), (508.4679802955665, 'Paula Cristina'), (1035.7780678851175, 'Paulina'), (298.1861898890259, 'Pauline'), (915.5892857142857, 'Pavla'), (514.586319218241, 'Peangtarn'), (755.5813953488372, 'Peggy'), (673.9809523809524, 'Pei Chi'), (1106.5, 'Pei Hsuan'), (1061.3076923076924, 'Pei Ju'), (465.24962852897477, 'Pemra'), (619.4154929577464, 'Pernilla'), (710.3972602739726, 'Petia'), (365.50280484204313, 'Petra'), (1211.0, 'Phenomena'), (826.6486486486486, 'Phillis'), (737.862676056338, 'Pia'), (668.2581196581197, 'Piia'), (740.5879828326181, 'Pilar'), (1041.0740740740741, 'Pippa'), (937.7945205479452, 'Plobrung'), (630.7953529937444, 'Polina'), (478.30369515011546, 'Polona'), (729.1047904191616, 'Poojashree'), (795.4736842105264, 'Pranjala'), (653.5070422535211, 'Prarthana G'), (740.5361842105264, 'Prerna'), (1137.19, 'Priscila'), (675.4124293785311, 'Priscilla'), (383.4714587737844, 'Qiang'), (826.1388888888889, 'Qianhui'), (943.421052631579, 'Qianqian'), (705.8493150684932, 'Qiu Yu'), (883.2352941176471, 'Quinn'), (633.9770491803279, 'Quirine'), (859.2706766917294, 'Rachael'), (1147.8526315789475, 'Rachel'), (955.7833333333333, 'Radina'), (1121.2432432432433, 'Rafaela'), (1176.5, 'Ralina'), (304.4619771863118, 'Raluca'), (672.2258064516129, 'Raluca Elena'), (539.6164383561644, 'Raluca Georgiana'), (1010.4545454545455, 'Ramu'), (1121.8846153846155, 'Ramya'), (598.2655172413793, 'Ran'), (1117.6666666666667, 'Rana'), (700.7644444444444, 'Raquel'), (1089.2100840336134, 'Rashmi'), (1021.6504854368932, 'Ratnika'), (487.6268656716418, 'Raveena'), (1145.4333333333334, 'Rebeca'), (568.3374316939891, 'Rebecca'), (676.1090909090909, 'Rebeka'), (289.60283687943263, 'Regina'), (1019.0, 'Reina'), (323.1388101983003, 'Reka Luca'), (494.6111111111111, 'Remi'), (274.85317919075146, 'Renata'), (669.448275862069, 'Ria'), (638.6666666666666, 'Rianna'), (246.19871794871796, 'Richel'), (290.0614657210402, 'Rika'), (495.22641509433964, 'Riko'), (1125.0363636363636, 'Rio'), (489.65909090909093, 'Risa'), (775.7269624573379, 'Rishika'), (1051.7349397590363, 'Rita'), (651.4246575342465, 'Riya'), (150.96681415929203, 'Roberta'), (431.19607843137254, 'Robin'), (1054.606896551724, 'Robyn'), (795.6201232032854, 'Rocio'), (402.49931972789113, 'Romana'), (669.8542372881356, 'Romana Caroline'), (283.63246554364474, 'Romina'), (758.1714285714286, 'Romy'), (1125.5471698113208, 'Rona'), (427.0, 'Ronit'), (1072.857142857143, 'Ronke'), (1168.2857142857142, 'Roosh'), (965.0, 'Rosa'), (1059.73, 'Rosalia'), (1066.5887096774193, 'Rosalie'), (984.1714285714286, 'Rosie'), (479.51738241308794, 'Roxane'), (1209.625, 'Rui'), (573.8729603729604, 'Rushmi'), (808.5096774193548, 'Rutuja'), (1069.0379746835442, 'Ryann'), (1117.88, 'Saana'), (982.7397260273973, 'Sabastiani'), (682.2005532503458, 'Sabina'), (1184.6666666666667, 'Sabina Elena'), (203.5871080139373, 'Sabine'), (905.6324786324786, 'Sabrina'), (340.2890442890443, 'Sacha'), (400.8093385214008, 'Sachia'), (368.26881720430106, 'Sachie'), (665.8219178082192, 'Sadafmoh'), (998.5238095238095, 'Sai Samhitha'), (297.39032258064515, 'Saisai'), (832.9585365853659, 'Sakiko'), (529.583908045977, 'Sally'), (1204.6666666666667, 'Salma'), (406.21702404158543, 'Samantha'), (932.8940397350993, 'Samira'), (1105.171875, 'Sanae'), (703.1372549019608, 'Sanaz'), (563.964505613908, 'Sandra'), (1028.9565217391305, 'Sandy'), (857.9508196721312, 'Sang Hee'), (177.22695035460993, 'Sania'), (509.80945757997216, 'Sara'), (546.5551763367463, 'Sarah'), (875.9277108433735, 'Sarah Beth'), (743.6062176165804, 'Sarah Rebecca'), (1139.2340425531916, 'Sarahi'), (1191.6470588235295, 'Sarai Delfina'), (840.0776699029126, 'Saray'), (1081.1666666666667, 'Sari'), (1209.7777777777778, 'Sarlota'), (1235.1960784313726, 'Sarvinoz'), (1033.027027027027, 'Sasa'), (747.3695652173913, 'Saska'), (888.7272727272727, 'Satsuki'), (1142.9285714285713, 'Savannah'), (1188.2941176470588, 'Schena'), (1210.2571428571428, 'Se Hyun'), (1122.4545454545455, 'Se Jin'), (1240.92, 'Sean'), (1003.5367647058823, 'Seda'), (1115.72, 'Seira'), (1168.6571428571428, 'Selin'), (858.9173789173789, 'Seo Kyung'), (889.8028169014085, 'Seone'), (14.654294803817603, 'Serena'), (162.3505747126437, 'Sesil'), (784.0465949820789, 'Seung Yeon'), (218.4701086956522, 'Severine'), (166.41358024691357, 'Shahar'), (924.8818897637796, 'Shakhlo'), (1236.7627118644068, 'Shakhnoza'), (1228.3235294117646, 'Shangqing'), (694.2, 'Shanshan'), (967.9034090909091, 'Shao Yuan'), (851.5633802816901, 'Sharmada'), (296.5792682926829, 'Sharon'), (1097.0, 'Sharon Sanchana'), (372.89398280802294, 'Shelby'), (1171.0, 'Shelly'), (451.8657487091222, 'Sheng Nan'), (649.5154639175257, 'Sherazad'), (1024.0116279069769, 'Sherry'), (500.688679245283, 'Shiho'), (632.2824427480916, 'Shilin'), (1070.6666666666667, 'Shiori'), (1154.4166666666667, 'Shir'), (1187.9245283018868, 'Shiran'), (935.2322946175638, 'Shivika'), (1120.388888888889, 'Shou Na'), (1148.0, 'Shreya'), (1042.6802325581396, 'Shu Ying'), (167.90740740740742, 'Shuai'), (421.44179894179894, 'Shuko'), (864.1538461538462, 'Shuo'), (966.0588235294117, 'Shuyue'), (897.6951219512196, 'Shweta'), (1047.7575757575758, 'Si Qi'), (565.8211508553654, 'Silvia'), (542.2382851445662, 'Simona'), (1070.3417721518988, 'Simone'), (974.8, 'Simran Kaur'), (728.7443609022556, 'Sina'), (975.3484848484849, 'Sinead'), (1141.842105263158, 'Sing Le'), (980.9076923076923, 'Siqi'), (949.7916666666666, 'Sirui'), (1241.1379310344828, 'Siyu'), (259.63589743589745, 'Sloane'), (1184.8260869565217, 'Smriti'), (1225.388888888889, 'Sneha'), (632.3150684931506, 'Snehadevi S'), (514.1732026143791, 'So Jung'), (572.2654545454545, 'So Ra'), (526.3535641547861, 'Sofia'), (1084.107142857143, 'Sofico'), (724.5, 'Sofie'), (541.1570881226054, 'Sofiya'), (640.8727272727273, 'Sofya'), (1004.6666666666666, 'Sohyun'), (1029.0980392156862, 'Sonia'), (885.0976744186047, 'Sonja'), (1221.3333333333333, 'Sophia'), (600.6881091617934, 'Sophie'), (213.75043630017453, 'Sorana'), (813.1357142857142, 'Sowjanya'), (1149.3125, 'Spurti'), (792.1927710843373, 'Sri Vaishnavi'), (841.8387096774194, 'Stamatia'), (312.54158964879855, 'Stanislava'), (993.4255319148937, 'Stefana'), (1167.3333333333333, 'Stefani'), (759.2894995093228, 'Stefania'), (387.73412112259973, 'Stefanie'), (939.746835443038, 'Steffi'), (439.87772357723577, 'Stephanie'), (1035.5548387096774, 'Stephanie Mariel'), (573.6708333333333, 'Storm'), (426.3886462882096, 'Su Jeong'), (217.2493188010899, 'Su Wei'), (911.7619047619048, 'Suellen'), (944.2432432432432, 'Sultan'), (812.4581005586592, 'Sun Jung'), (1229.8, 'Sunae'), (611.0757575757576, 'Sunam'), (635.7449168207024, 'Sung Hee'), (1015.6792452830189, 'Susan'), (417.8053097345133, 'Susanne'), (982.7222222222222, 'Suzan'), (980.6666666666666, 'Suzuho'), (698.7567567567568, 'Suzy'), (844.203007518797, 'Svenja'), (267.03227571115974, 'Svetlana'), (691.9934640522875, 'Sviatlana'), (1002.6792452830189, 'Sybille'), (869.1702127659574, 'Sylvia'), (787.7645348837209, 'Sylwia'), (791.1240506329113, 'Syna'), (772.3186813186813, 'Szabina'), (343.0985324947589, 'Tadeja'), (969.6588235294117, 'Taisiya'), (1230.2, 'Talya'), (949.8059701492538, 'Tamachan'), (1118.4166666666667, 'Tamar'), (614.0434782608696, 'Tamara'), (1146.3934426229507, 'Tamari'), (121.82273948075202, 'Tamarine'), (386.7025316455696, 'Tamaryn'), (135.88910505836577, 'Tamira'), (601.906914893617, 'Tammi'), (1113.2325581395348, 'Tanaporn'), (1023.089430894309, 'Tanya'), (475.2979683972912, 'Tara'), (1075.0, 'Tatia'), (681.9417582417583, 'Tatiana'), (247.7449768160742, 'Tatjana'), (912.1077844311377, 'Tatsiana'), (747.3172413793103, 'Tayisiya'), (387.5662100456621, 'Taylor'), (1068.7457627118645, 'Tea'), (461.06702898550725, 'Teliana'), (614.9346733668342, 'Tena'), (489.27513227513225, 'Teodora'), (557.241418764302, 'Tereza'), (963.5, 'Terri'), (696.2878787878788, 'Tess'), (390.2361111111111, 'Tessah'), (437.4119658119658, 'Tetiana'), (398.83478260869566, 'Tetyana'), (802.7222222222222, 'Thai Sa Grana'), (650.1206896551724, 'Theo'), (1159.5632183908046, 'Theresa'), (1017.7777777777778, 'Tijana'), (182.02426160337552, 'Timea'), (425.82394366197184, 'Tina'), (810.6666666666666, 'Tinatin'), (739.7727272727273, 'Ting Fei'), (789.6113989637306, 'Ting Jr'), (1015.2352941176471, 'Tingting'), (743.1953125, 'Tjasa'), (838.8065217391304, 'Tomoko'), (841.7167381974249, 'Tori'), (878.1666666666666, 'Tornado Alicia'), (1029.3196721311476, 'Trang'), (1009.8666666666667, 'Treta'), (131.02074074074073, 'Tsvetana'), (992.4870588235294, 'Tyra'), (506.39344262295083, 'Ulrikke'), (844.0692307692308, 'Ulyana'), (229.35687022900763, 'Urszula'), (1132.4109589041095, 'Ushna'), (411.5068493150685, 'Usue Maitane'), (921.3333333333334, 'Valentina'), (751.2668918918919, 'Valentine'), (479.8914728682171, 'Valentini'), (368.14331210191085, 'Valentyna'), (661.8474576271186, 'Valeria'), (806.2648401826484, 'Valerie'), (799.8668224299065, 'Valeriya'), (696.4126984126984, 'Vanda'), (579.437984496124, 'Vanesa'), (398.3106546854942, 'Vanessa'), (185.75, 'Vania'), (1130.6037735849056, 'Vaniya'), (1089.7111111111112, 'Vanja'), (450.4642082429501, 'Varatchaya'), (894.3846153846154, 'Varunya'), (382.6888217522659, 'Varvara'), (613.5330490405117, 'Vasilisa'), (859.8103448275862, 'Vaszilisza'), (729.0117647058823, 'Vendula'), (32.984862819299906, 'Venus'), (195.66923570969814, 'Vera'), (958.1327800829876, 'Verena'), (726.1852387843704, 'Veronica'), (951.0075757575758, 'Veronica M'), (734.6018957345972, 'Veronika'), (240.0448979591837, 'Vesna'), (1252.9130434782608, 'Vicky'), (1138.8490566037735, 'Victoire'), (444.9760935910478, 'Victoria'), (1236.0, 'Victoria Ariadna'), (566.9148936170212, 'Viktoria'), (1236.5333333333333, 'Viktoriia'), (507.4, 'Viktorija'), (736.2288557213931, 'Viktoriya'), (966.4671052631579, 'Viktoryia'), (1243.0, 'Vilma Y'), (1214.1142857142856, 'Vincenza'), (1150.0, 'Vinciane'), (1170.840579710145, 'Violetta'), (355.88102893890675, 'Virginie'), (1208.952380952381, 'Vishesh'), (1201.25, 'Vita'), (296.2025641025641, 'Vitalia'), (670.9108527131783, 'Vivian'), (607.2810218978102, 'Vivien'), (659.2103004291846, 'Vivienne'), (595.3291666666667, 'Vlada'), (943.5432098765432, 'Vladica'), (823.8770833333333, 'Vladimira'), (1006.1769911504425, 'Vladislava'), (856.0782608695653, 'Vladyslava'), (555.6572164948453, 'Vojislava'), (999.0215053763441, 'Voni'), (701.4009009009009, 'Wan Ting'), (1081.142857142857, 'Wan Yi'), (1249.3333333333333, 'Warona'), (440.35214446952597, 'Wen Hsin'), (1117.55, 'Wen Ling'), (1011.469696969697, 'Wendy Qi Wen'), (1152.7837837837837, 'Weronika Jasmina'), (886.1407407407407, 'Whitney'), (1083.1454545454546, 'Wiktoria'), (585.2589641434263, 'Wing Yau Venise'), (937.7878787878788, 'Wushuang'), (661.2222222222222, 'Xenia'), (714.8653846153846, 'Xi Yao'), (814.4171122994652, 'Xiao'), (467.24657534246575, 'Xiaodi'), (848.4418604651163, 'Xiaorong'), (737.7547169811321, 'Xiaoxi'), (712.2780373831775, 'Ximena'), (694.4808743169399, 'Xin'), (1022.3333333333334, 'Xin Yu'), (480.646017699115, 'Xinyu'), (309.35767790262173, 'Xinyun'), (954.6, 'Xiyu'), (488.7671232876712, 'Xu Liu'), (1225.75, 'Ya'), (586.865, 'Ya Hsuan'), (325.6162790697674, 'Yafan'), (768.560975609756, 'Yan'), (740.0214504596527, 'Yana'), (1177.8823529411766, 'Yang'), (381.2581602373887, 'Yanina'), (1059.2702702702702, 'Yanni'), (1166.875, 'Yarden'), (211.41240310077518, 'Yaroslava'), (702.1784386617101, 'Yasmin'), (1227.7777777777778, 'Yasmina'), (983.0410958904109, 'Yasmine'), (1261.8181818181818, 'Yasmyn'), (1110.4594594594594, 'Yawna'), (114.78806907378336, 'Yayuk'), (431.3144424131627, 'Ye Ra'), (1048.081081081081, 'Ye Xin'), (1155.8191489361702, 'Yekaterina'), (897.4873949579832, 'Yelena'), (973.8617021276596, 'Yeong Won'), (724.8712871287129, 'Yevgeniya'), (791.0756207674943, 'Yi'), (381.5512572533849, 'Yi Fan'), (656.8787276341948, 'Yi Jing'), (418.2566137566138, 'Yi Miao'), (1185.030303030303, 'Yidi'), (1209.625, 'Yihong'), (1063.9411764705883, 'Yijia'), (661.3972602739726, 'Ying'), (403.8775981524249, 'Ying Ying'), (801.6712328767123, 'Yixuan'), (892.3561643835617, 'Ylena'), (642.9487179487179, 'Ylona Georgiana'), (1128.901098901099, 'Yoko'), (1068.4619883040937, 'Yolande'), (1263.7666666666667, 'Yoo Ri'), (844.9310344827586, 'Yoon Young'), (1096.9130434782608, 'Yoshimi'), (1222.24, 'Yosr'), (1170.3461538461538, 'You Na'), (458.86633663366337, 'Ysaline'), (1098.357142857143, 'Yu Jin'), (1239.6666666666667, 'Yu Tong'), (1054.0, 'Yuan'), (891.2340425531914, 'Yuanyi'), (983.359649122807, 'Yue'), (444.96190476190475, 'Yue Yue'), (961.876923076923, 'Yuenu'), (1034.1304347826087, 'Yujia'), (748.8250591016548, 'Yuka'), (1071.5833333333333, 'Yukako'), (876.7428571428571, 'Yuki'), (698.8285714285714, 'Yuki Kristina'), (857.1692307692308, 'Yukina'), (824.3936170212766, 'Yukun'), (485.35135135135135, 'Yulia'), (725.5322195704057, 'Yuliana'), (384.87776983559684, 'Yuliya'), (799.1332586786115, 'Yumi'), (166.6586270871985, 'Yung Jan'), (1047.3529411764705, 'Yuqi'), (322.17758620689654, 'Yurika'), (1041.5367231638418, 'Yuriko'), (746.4803493449782, 'Yurina'), (608.1309090909091, 'Yuuki'), (1230.2, 'Yuval'), (545.449074074074, 'Yuxuan'), (318.2867132867133, 'Yvonne'), (1227.344827586207, 'Zaineb'), (867.5288461538462, 'Zalina'), (709.625, 'Zarah'), (222.81428571428572, 'Zarina'), (791.2352941176471, 'Zeel'), (1229.5714285714287, 'Zeynep  Sena'), (627.7777777777778, 'Zhanlan'), (629.0081967213115, 'Zhaoxuan'), (1058.0, 'Zhibek'), (1144.45, 'Zhima'), (1237.9, 'Zhou'), (989.75, 'Zhuoma'), (391.4656290531777, 'Zi'), (1221.5, 'Zinovia'), (878.4606741573034, 'Ziyue'), (765.3777777777777, 'Zoe'), (935.081081081081, 'Zoe Gwen'), (916.559633027523, 'Zsofia'), (451.92875448487956, 'Zuzana'), (794.5416666666666, 'Zuzanna')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of templates of the type CV.' in SQLite? I currently have 'SELECT count(*) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Templates WHERE template_type_code  =  \\\"CV\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the makers and models?' in SQLite? I currently have 'SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker', which outputs [('amc', 'amc'), ('volkswagen', 'audi'), ('bmw', 'bmw'), ('gm', 'buick'), ('gm', 'cadillac'), ('ford', 'capri'), ('gm', 'chevrolet'), ('chrysler', 'chrysler'), ('citroen', 'citroen'), ('nissan', 'datsun'), ('chrysler', 'dodge'), ('fiat', 'fiat'), ('ford', 'ford'), ('honda', 'honda'), ('mazda', 'mazda'), ('daimler benz', 'mercedes'), ('daimler benz', 'mercedes-benz'), ('ford', 'mercury'), ('nissan', 'nissan'), ('gm', 'oldsmobile'), ('opel', 'opel'), ('peugeaut', 'peugeot'), ('chrysler', 'plymouth'), ('gm', 'pontiac'), ('renault', 'renault'), ('saab', 'saab'), ('subaru', 'subaru'), ('toyota', 'toyota'), ('triumph', 'triumph'), ('volkswagen', 'volkswagen'), ('volvo', 'volvo'), ('kia', 'kia'), ('hyundai', 'hyundai'), ('chrysler', 'jeep'), ('toyota', 'scion')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Maker ,  Model FROM MODEL_LIST;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are all the makers and models?' in SQLite? I currently have 'SELECT Maker ,  Model FROM MODEL_LIST;', which outputs [(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Maker ,  Model FROM MODEL_LIST;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many available features are there in total?' in SQLite? I currently have 'SELECT COUNT(*) FROM Other_Available_Features', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Other_Available_Features\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'what are all the addresses including line 1 and line 2?' in SQLite? I currently have 'SELECT line_1, line_2 FROM Addresses', which outputs [('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT line_1 ,  line_2 FROM addresses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the code of the airport with the least flights.' in SQLite? I currently have 'SELECT AirportCode FROM (SELECT AirportCode, count(*) as num_flights FROM (SELECT SourceAirport as AirportCode FROM flights UNION ALL SELECT DestAirport as AirportCode FROM flights) AS T1 GROUP BY AirportCode) AS T2 ORDER BY num_flights ASC LIMIT 1', which outputs [(' AID',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the code of the airport with the least flights.' in SQLite? I currently have 'SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are different nationalities of people and the corresponding number of people from each nation?' in SQLite? I currently have 'SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality', which outputs [('Bulgaria', 1), ('Russia', 6)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which country has the most of TV Channels? List the country and number of TV Channels it has.' in SQLite? I currently have 'SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1', which outputs [('Italy', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of tourney that has more than 10 matches.' in SQLite? I currently have 'SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10', which outputs [('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average miles per gallon(mpg) of the cars with 4 cylinders?' in SQLite? I currently have 'SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4', which outputs [(28.862318840579714,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner who has won the most matches, and how many rank points does this player have?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name, T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )', which outputs [('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 16), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 17), ('Angelique', 'Kerber', 27), ('Angelique', 'Kerber', 27), ('Angelique', 'Kerber', 27), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 34), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 60), ('Angelique', 'Kerber', 61), ('Angelique', 'Kerber', 61), ('Angelique', 'Kerber', 61), ('Angelique', 'Kerber', 61), ('Angelique', 'Kerber', 49), ('Angelique', 'Kerber', 49), ('Angelique', 'Kerber', 49), ('Angelique', 'Kerber', 49), ('Angelique', 'Kerber', 49), ('Angelique', 'Kerber', 47), ('Angelique', 'Kerber', 47), ('Angelique', 'Kerber', 53), ('Angelique', 'Kerber', 53), ('Angelique', 'Kerber', 59), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 58), ('Angelique', 'Kerber', 59), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 45), ('Angelique', 'Kerber', 45), ('Angelique', 'Kerber', 52), ('Angelique', 'Kerber', 52), ('Angelique', 'Kerber', 52), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 86), ('Angelique', 'Kerber', 95), ('Angelique', 'Kerber', 95), ('Angelique', 'Kerber', 95), ('Angelique', 'Kerber', 95), ('Angelique', 'Kerber', 96), ('Angelique', 'Kerber', 96), ('Angelique', 'Kerber', 70), ('Angelique', 'Kerber', 73), ('Angelique', 'Kerber', 73), ('Angelique', 'Kerber', 73), ('Angelique', 'Kerber', 73), ('Angelique', 'Kerber', 73), ('Angelique', 'Kerber', 71), ('Angelique', 'Kerber', 71), ('Angelique', 'Kerber', 71), ('Angelique', 'Kerber', 71), ('Angelique', 'Kerber', 71), ('Angelique', 'Kerber', 81), ('Angelique', 'Kerber', 81), ('Angelique', 'Kerber', 103), ('Angelique', 'Kerber', 103), ('Angelique', 'Kerber', 109), ('Angelique', 'Kerber', 114), ('Angelique', 'Kerber', 114), ('Angelique', 'Kerber', 114), ('Angelique', 'Kerber', 107), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 106), ('Angelique', 'Kerber', 106), ('Angelique', 'Kerber', 106), ('Angelique', 'Kerber', 106), ('Angelique', 'Kerber', 107), ('Angelique', 'Kerber', 107), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 111), ('Angelique', 'Kerber', 119), ('Angelique', 'Kerber', 126), ('Angelique', 'Kerber', 126), ('Angelique', 'Kerber', 126), ('Angelique', 'Kerber', 122), ('Angelique', 'Kerber', 122), ('Angelique', 'Kerber', 115), ('Angelique', 'Kerber', 115), ('Angelique', 'Kerber', 115), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 82), ('Angelique', 'Kerber', 51), ('Angelique', 'Kerber', 51), ('Angelique', 'Kerber', 51), ('Angelique', 'Kerber', 51), ('Angelique', 'Kerber', 50), ('Angelique', 'Kerber', 50), ('Angelique', 'Kerber', 50), ('Angelique', 'Kerber', 74), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 76), ('Angelique', 'Kerber', 70), ('Angelique', 'Kerber', 70), ('Angelique', 'Kerber', 53), ('Angelique', 'Kerber', 53), ('Angelique', 'Kerber', 53), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 48), ('Angelique', 'Kerber', 44), ('Angelique', 'Kerber', 44), ('Angelique', 'Kerber', 44), ('Angelique', 'Kerber', 44), ('Angelique', 'Kerber', 44), ('Angelique', 'Kerber', 43), ('Angelique', 'Kerber', 43), ('Angelique', 'Kerber', 40), ('Angelique', 'Kerber', 40), ('Angelique', 'Kerber', 40), ('Angelique', 'Kerber', 40), ('Angelique', 'Kerber', 51), ('Angelique', 'Kerber', 56), ('Angelique', 'Kerber', 52), ('Angelique', 'Kerber', 52), ('Angelique', 'Kerber', 77), ('Angelique', 'Kerber', 102), ('Angelique', 'Kerber', 126), ('Angelique', 'Kerber', 126), ('Angelique', 'Kerber', 139), ('Angelique', 'Kerber', 156), ('Angelique', 'Kerber', 155), ('Angelique', 'Kerber', 155), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 162), ('Angelique', 'Kerber', 173), ('Angelique', 'Kerber', 173), ('Angelique', 'Kerber', 205), ('Angelique', 'Kerber', 239), ('Angelique', 'Kerber', 215), ('Angelique', 'Kerber', 214), ('Angelique', 'Kerber', 214), ('Angelique', 'Kerber', 214), ('Angelique', 'Kerber', 214), ('Angelique', 'Kerber', 255), ('Angelique', 'Kerber', 261), ('Angelique', 'Kerber', 261), ('Angelique', 'Kerber', 261), ('Angelique', 'Kerber', 270), ('Angelique', 'Kerber', 270), ('Angelique', 'Kerber', 325), ('Angelique', 'Kerber', 325), ('Angelique', 'Kerber', 325), ('Angelique', 'Kerber', 325), ('Angelique', 'Kerber', 366), ('Angelique', 'Kerber', 376), ('Angelique', 'Kerber', 399), ('Angelique', 'Kerber', 399), ('Angelique', 'Kerber', 390), ('Angelique', 'Kerber', 390), ('Angelique', 'Kerber', 397), ('Angelique', 'Kerber', 397), ('Angelique', 'Kerber', 432), ('Angelique', 'Kerber', 432), ('Angelique', 'Kerber', 432), ('Angelique', 'Kerber', 432), ('Angelique', 'Kerber', 432), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 417), ('Angelique', 'Kerber', 409), ('Angelique', 'Kerber', 399), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 386), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 378), ('Angelique', 'Kerber', 429), ('Angelique', 'Kerber', 429), ('Angelique', 'Kerber', 419), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 389), ('Angelique', 'Kerber', 424), ('Angelique', 'Kerber', 424), ('Angelique', 'Kerber', 412), ('Angelique', 'Kerber', 412), ('Angelique', 'Kerber', 412), ('Angelique', 'Kerber', 404), ('Angelique', 'Kerber', 404), ('Angelique', 'Kerber', 342), ('Angelique', 'Kerber', 342), ('Angelique', 'Kerber', 342), ('Angelique', 'Kerber', 342), ('Angelique', 'Kerber', 288), ('Angelique', 'Kerber', 278), ('Angelique', 'Kerber', 267), ('Angelique', 'Kerber', 267), ('Angelique', 'Kerber', 267), ('Angelique', 'Kerber', 267), ('Angelique', 'Kerber', 248), ('Angelique', 'Kerber', 244), ('Angelique', 'Kerber', 197), ('Angelique', 'Kerber', 197), ('Angelique', 'Kerber', 197), ('Angelique', 'Kerber', 197), ('Angelique', 'Kerber', 197), ('Angelique', 'Kerber', 205), ('Angelique', 'Kerber', 205), ('Angelique', 'Kerber', 205), ('Angelique', 'Kerber', 229), ('Angelique', 'Kerber', 229), ('Angelique', 'Kerber', 236), ('Angelique', 'Kerber', 270), ('Angelique', 'Kerber', 270), ('Angelique', 'Kerber', 280), ('Angelique', 'Kerber', 318), ('Angelique', 'Kerber', 318), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 351), ('Angelique', 'Kerber', 696), ('Angelique', 'Kerber', 696), ('Angelique', 'Kerber', 708), ('Angelique', 'Kerber', 708), ('Angelique', 'Kerber', 593), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 571), ('Angelique', 'Kerber', 497), ('Angelique', 'Kerber', 497), ('Angelique', 'Kerber', 441), ('Angelique', 'Kerber', 441), ('Angelique', 'Kerber', 447), ('Angelique', 'Kerber', 447), ('Angelique', 'Kerber', 461), ('Angelique', 'Kerber', 461), ('Angelique', 'Kerber', 461), ('Angelique', 'Kerber', 461), ('Angelique', 'Kerber', 461), ('Angelique', 'Kerber', 497), ('Angelique', 'Kerber', 485), ('Angelique', 'Kerber', 443), ('Angelique', 'Kerber', 443), ('Angelique', 'Kerber', 543), ('Angelique', 'Kerber', 565), ('Angelique', 'Kerber', 565), ('Angelique', 'Kerber', 567), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 587), ('Angelique', 'Kerber', 729), ('Angelique', 'Kerber', 737), ('Angelique', 'Kerber', 717), ('Angelique', 'Kerber', 747), ('Angelique', 'Kerber', 747), ('Angelique', 'Kerber', 687), ('Angelique', 'Kerber', 687), ('Angelique', 'Kerber', 673), ('Angelique', 'Kerber', 603), ('Angelique', 'Kerber', 603), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 541), ('Angelique', 'Kerber', 522), ('Angelique', 'Kerber', 522), ('Angelique', 'Kerber', 737), ('Angelique', 'Kerber', 737), ('Angelique', 'Kerber', 737), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 936), ('Angelique', 'Kerber', 948), ('Angelique', 'Kerber', 968), ('Angelique', 'Kerber', 1018), ('Angelique', 'Kerber', 1018), ('Angelique', 'Kerber', 1068), ('Angelique', 'Kerber', 1068), ('Angelique', 'Kerber', 1068), ('Angelique', 'Kerber', 1068), ('Angelique', 'Kerber', 1068), ('Angelique', 'Kerber', 1128), ('Angelique', 'Kerber', 1148), ('Angelique', 'Kerber', 1148), ('Angelique', 'Kerber', 1148), ('Angelique', 'Kerber', 1208), ('Angelique', 'Kerber', 1188), ('Angelique', 'Kerber', 1188), ('Angelique', 'Kerber', 1179), ('Angelique', 'Kerber', 1150), ('Angelique', 'Kerber', 1219), ('Angelique', 'Kerber', 1219), ('Angelique', 'Kerber', 1219), ('Angelique', 'Kerber', 1258), ('Angelique', 'Kerber', 1258), ('Angelique', 'Kerber', 1103), ('Angelique', 'Kerber', 1086), ('Angelique', 'Kerber', 1057), ('Angelique', 'Kerber', 1018), ('Angelique', 'Kerber', 1157), ('Angelique', 'Kerber', 1148), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1277), ('Angelique', 'Kerber', 1346), ('Angelique', 'Kerber', 1346), ('Angelique', 'Kerber', 1131), ('Angelique', 'Kerber', 1131), ('Angelique', 'Kerber', 1131), ('Angelique', 'Kerber', 932), ('Angelique', 'Kerber', 932), ('Angelique', 'Kerber', 932), ('Angelique', 'Kerber', 932), ('Angelique', 'Kerber', 1045), ('Angelique', 'Kerber', 1045), ('Angelique', 'Kerber', 1075), ('Angelique', 'Kerber', 1046), ('Angelique', 'Kerber', 987), ('Angelique', 'Kerber', 987), ('Angelique', 'Kerber', 918), ('Angelique', 'Kerber', 918), ('Angelique', 'Kerber', 937), ('Angelique', 'Kerber', 937), ('Angelique', 'Kerber', 937), ('Angelique', 'Kerber', 842), ('Angelique', 'Kerber', 842), ('Angelique', 'Kerber', 842), ('Angelique', 'Kerber', 842), ('Angelique', 'Kerber', 687), ('Angelique', 'Kerber', 716), ('Angelique', 'Kerber', 716), ('Angelique', 'Kerber', 716), ('Angelique', 'Kerber', 716), ('Angelique', 'Kerber', 647), ('Angelique', 'Kerber', 647), ('Angelique', 'Kerber', 647), ('Angelique', 'Kerber', 747), ('Angelique', 'Kerber', 747), ('Angelique', 'Kerber', 1642), ('Angelique', 'Kerber', 1642), ('Angelique', 'Kerber', 1642), ('Angelique', 'Kerber', 1741), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1750), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1621), ('Angelique', 'Kerber', 1750), ('Angelique', 'Kerber', 1810), ('Angelique', 'Kerber', 1810), ('Angelique', 'Kerber', 1965), ('Angelique', 'Kerber', 1965), ('Angelique', 'Kerber', 2415), ('Angelique', 'Kerber', 2465), ('Angelique', 'Kerber', 2465), ('Angelique', 'Kerber', 2465), ('Angelique', 'Kerber', 2465), ('Angelique', 'Kerber', 2820), ('Angelique', 'Kerber', 2820), ('Angelique', 'Kerber', 2775), ('Angelique', 'Kerber', 2775), ('Angelique', 'Kerber', 3035), ('Angelique', 'Kerber', 3035), ('Angelique', 'Kerber', 3125), ('Angelique', 'Kerber', 3125), ('Angelique', 'Kerber', 3235), ('Angelique', 'Kerber', 3560), ('Angelique', 'Kerber', 3560), ('Angelique', 'Kerber', 3560), ('Angelique', 'Kerber', 4055), ('Angelique', 'Kerber', 4055), ('Angelique', 'Kerber', 4275), ('Angelique', 'Kerber', 4275), ('Angelique', 'Kerber', 5170), ('Angelique', 'Kerber', 5170), ('Angelique', 'Kerber', 5170), ('Angelique', 'Kerber', 5170), ('Angelique', 'Kerber', 5225), ('Angelique', 'Kerber', 5225), ('Angelique', 'Kerber', 5715), ('Angelique', 'Kerber', 5705), ('Angelique', 'Kerber', 5705), ('Angelique', 'Kerber', 5085), ('Angelique', 'Kerber', 5085), ('Angelique', 'Kerber', 5085), ('Angelique', 'Kerber', 5350), ('Angelique', 'Kerber', 5470), ('Angelique', 'Kerber', 5470), ('Angelique', 'Kerber', 5470), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5550), ('Angelique', 'Kerber', 5575), ('Angelique', 'Kerber', 5575), ('Angelique', 'Kerber', 5695), ('Angelique', 'Kerber', 5695), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5400), ('Angelique', 'Kerber', 5475), ('Angelique', 'Kerber', 5500), ('Angelique', 'Kerber', 5395), ('Angelique', 'Kerber', 5395), ('Angelique', 'Kerber', 5420), ('Angelique', 'Kerber', 5420), ('Angelique', 'Kerber', 5530), ('Angelique', 'Kerber', 5135), ('Angelique', 'Kerber', 5135), ('Angelique', 'Kerber', 5135), ('Angelique', 'Kerber', 4915), ('Angelique', 'Kerber', 4915), ('Angelique', 'Kerber', 4770), ('Angelique', 'Kerber', 3970), ('Angelique', 'Kerber', 3970), ('Angelique', 'Kerber', 3970), ('Angelique', 'Kerber', 3970), ('Angelique', 'Kerber', 3920), ('Angelique', 'Kerber', 3915), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3420), ('Angelique', 'Kerber', 3645), ('Angelique', 'Kerber', 3645), ('Angelique', 'Kerber', 3805), ('Angelique', 'Kerber', 3715), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 3965), ('Angelique', 'Kerber', 4070), ('Angelique', 'Kerber', 4070), ('Angelique', 'Kerber', 4030), ('Angelique', 'Kerber', 4030), ('Angelique', 'Kerber', 4030), ('Angelique', 'Kerber', 4490), ('Angelique', 'Kerber', 4490), ('Angelique', 'Kerber', 2650), ('Angelique', 'Kerber', 2500), ('Angelique', 'Kerber', 2865), ('Angelique', 'Kerber', 2865), ('Angelique', 'Kerber', 3230), ('Angelique', 'Kerber', 3230), ('Angelique', 'Kerber', 3230), ('Angelique', 'Kerber', 3230), ('Angelique', 'Kerber', 3120), ('Angelique', 'Kerber', 3285), ('Angelique', 'Kerber', 2790), ('Angelique', 'Kerber', 3150), ('Angelique', 'Kerber', 3150), ('Angelique', 'Kerber', 3150), ('Angelique', 'Kerber', 3150), ('Angelique', 'Kerber', 3075), ('Angelique', 'Kerber', 3220), ('Angelique', 'Kerber', 3330), ('Angelique', 'Kerber', 3400), ('Angelique', 'Kerber', 3590), ('Angelique', 'Kerber', 3710), ('Angelique', 'Kerber', 3710), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5700), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5740), ('Angelique', 'Kerber', 5620), ('Angelique', 'Kerber', 5330), ('Angelique', 'Kerber', 5330), ('Angelique', 'Kerber', 6375), ('Angelique', 'Kerber', 8730), ('Angelique', 'Kerber', 8730), ('Angelique', 'Kerber', 8390), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 9080), ('Angelique', 'Kerber', 8875), ('Angelique', 'Kerber', 8875), ('Angelique', 'Kerber', 7115), ('Angelique', 'Kerber', 7115), ('Angelique', 'Kerber', 7405), ('Angelique', 'Kerber', 7515), ('Angelique', 'Kerber', 7335), ('Angelique', 'Kerber', 6925), ('Angelique', 'Kerber', 6925), ('Angelique', 'Kerber', 6945), ('Angelique', 'Kerber', 7035), ('Angelique', 'Kerber', 7035), ('Angelique', 'Kerber', 7035), ('Angelique', 'Kerber', 7035), ('Angelique', 'Kerber', 6965), ('Angelique', 'Kerber', 6965), ('Angelique', 'Kerber', 7035), ('Angelique', 'Kerber', 5975), ('Angelique', 'Kerber', 5975), ('Angelique', 'Kerber', 5626), ('Angelique', 'Kerber', 5626), ('Angelique', 'Kerber', 5730), ('Angelique', 'Kerber', 5146), ('Angelique', 'Kerber', 5146), ('Angelique', 'Kerber', 3156)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the winner who has won the most matches, and how many rank points does this player have?' in SQLite? I currently have 'SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1', which outputs [('Angelique Kerber', 3715)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and capacity of the stadium with the most concerts after 2013 ?' in SQLite? I currently have 'SELECT T2.Name, T2.Capacity FROM stadium AS T2 WHERE T2.Stadium_ID IN (SELECT T1.Stadium_ID FROM concert AS T1 WHERE T1.Year > 2013 GROUP BY T1.Stadium_ID HAVING count(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) as concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) as subquery) LIMIT 1)', which outputs [('Somerset Park', 11998)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of car models that are produced by each maker and what is the id and full name of each maker?' in SQLite? I currently have 'SELECT count(T1.Model), T2.Id, T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.Id, T2.FullName', which outputs [(1, 1, 'American Motor Company'), (2, 2, 'Volkswagen'), (1, 3, 'BMW'), (5, 4, 'General Motors'), (3, 5, 'Ford Motor Company'), (4, 6, 'Chrysler'), (1, 7, 'Citroen'), (2, 8, 'Nissan Motors'), (1, 9, 'Fiat'), (1, 11, 'Honda'), (1, 12, 'Mazda'), (2, 13, 'Daimler Benz'), (1, 14, 'Opel'), (1, 15, 'Peugeaut'), (1, 16, 'Renault'), (1, 17, 'Saab'), (1, 18, 'Subaru'), (2, 19, 'Toyota'), (1, 20, 'Triumph'), (1, 21, 'Volvo'), (1, 22, 'Kia Motors'), (1, 23, 'Hyundai')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of car models that are produced by each maker and what is the id and full name of each maker?' in SQLite? I currently have 'SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;', which outputs [(1, 'American Motor Company', 1), (2, 'Volkswagen', 2), (1, 'BMW', 3), (5, 'General Motors', 4), (3, 'Ford Motor Company', 5), (4, 'Chrysler', 6), (1, 'Citroen', 7), (2, 'Nissan Motors', 8), (1, 'Fiat', 9), (1, 'Honda', 11), (1, 'Mazda', 12), (2, 'Daimler Benz', 13), (1, 'Opel', 14), (1, 'Peugeaut', 15), (1, 'Renault', 16), (1, 'Saab', 17), (1, 'Subaru', 18), (2, 'Toyota', 19), (1, 'Triumph', 20), (1, 'Volvo', 21), (1, 'Kia Motors', 22), (1, 'Hyundai', 23)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which makers designed more than 3 car models? List full name and the id.' in SQLite? I currently have 'SELECT T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING count(T2.Model) > 3', which outputs [(4, 'General Motors'), (6, 'Chrysler')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which makers designed more than 3 car models? List full name and the id.' in SQLite? I currently have 'SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;', which outputs [('General Motors', 4), ('Chrysler', 6)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models created by either the car maker General Motors or weighed more than 3500?' in SQLite? I currently have 'SELECT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'General Motors' OR T4.Weight > 3500', which outputs [('chevrolet',), ('buick',), ('ford',), ('chevrolet',), ('plymouth',), ('pontiac',), ('amc',), ('chevrolet',), ('ford',), ('plymouth',), ('amc',), ('dodge',), ('plymouth',), ('chevrolet',), ('ford',), ('chevrolet',), ('dodge',), ('chevrolet',), ('pontiac',), ('ford',), ('plymouth',), ('dodge',), ('ford',), ('pontiac',), ('chevrolet',), ('pontiac',), ('plymouth',), ('ford',), ('amc',), ('mercury',), ('buick',), ('oldsmobile',), ('chrysler',), ('amc',), ('chevrolet',), ('ford',), ('plymouth',), ('buick',), ('amc',), ('chevrolet',), ('ford',), ('dodge',), ('mercury',), ('chevrolet',), ('ford',), ('plymouth',), ('chrysler',), ('buick',), ('amc',), ('chevrolet',), ('ford',), ('plymouth',), ('oldsmobile',), ('chevrolet',), ('pontiac',), ('oldsmobile',), ('chevrolet',), ('amc',), ('plymouth',), ('ford',), ('buick',), ('dodge',), ('ford',), ('amc',), ('pontiac',), ('chevrolet',), ('plymouth',), ('ford',), ('buick',), ('chevrolet',), ('amc',), ('plymouth',), ('chevrolet',), ('dodge',), ('amc',), ('ford',), ('dodge',), ('ford',), ('pontiac',), ('plymouth',), ('mercedes-benz',), ('cadillac',), ('chevrolet',), ('ford',), ('dodge',), ('chevrolet',), ('oldsmobile',), ('dodge',), ('mercury',), ('chevrolet',), ('plymouth',), ('ford',), ('pontiac',), ('chevrolet',), ('chrysler',), ('ford',), ('dodge',), ('mercury',), ('pontiac',), ('dodge',), ('dodge',), ('chevrolet',), ('ford',), ('mercury',), ('dodge',), ('buick',), ('ford',), ('chevrolet',), ('chrysler',), ('mercedes',), ('cadillac',), ('oldsmobile',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different models created by either the car maker General Motors or weighed more than 3500?' in SQLite? I currently have 'SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;', which outputs [('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the sections in reverse alphabetical order?' in SQLite? I currently have 'SELECT section_name FROM Sections ORDER BY section_name DESC', which outputs [('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_name FROM Sections ORDER BY section_name DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the number of votes from state 'NY' or 'CA'?' in SQLite? I currently have 'SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?' in SQLite? I currently have 'SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'', which outputs [(43.0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Weekly_Rank FROM TV_series WHERE Episode = \\\"A Love of a Lifetime\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the year that has the most number of matches.' in SQLite? I currently have 'SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1', which outputs [(2016,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different series and contents are listed in the TV Channel table?' in SQLite? I currently have 'SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel', which outputs [(15, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum accelerate for different number of cylinders?' in SQLite? I currently have 'SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders', which outputs [(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the names of countries with English and French as official languages.' in SQLite? I currently have 'SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T'', which outputs [('Canada',), ('Seychelles',), ('Vanuatu',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND T2.IsOfficial  =  \\\"T\\\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"French\\\" AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of employees' in SQLite? I currently have 'SELECT COUNT(*) FROM employee', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM employee\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the arriving date and the departing date of all the dogs?' in SQLite? I currently have 'SELECT date_arrived, date_departed FROM Dogs', which outputs [('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT date_arrived ,  date_departed FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the record companies of orchestras, sorted descending by the years in which they were founded.' in SQLite? I currently have 'SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC', which outputs [('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids of templates with template type code PP or PPT?' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'', which outputs [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the email, cell phone and home phone of each professional?' in SQLite? I currently have 'SELECT email_address, cell_number, home_phone FROM Professionals', which outputs [('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT email_address ,  cell_number ,  home_phone FROM professionals\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the flight numbers of flights leaving from APG.' in SQLite? I currently have 'SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many matches were played in 2013 or 2016?' in SQLite? I currently have 'SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016', which outputs [(170,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose courses have not been arranged?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)', which outputs [('Joseph Huts',), ('John Deloor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of conductors and the orchestras they have conducted.' in SQLite? I currently have 'SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID', which outputs [('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List each language and the number of TV Channels using it.' in SQLite? I currently have 'SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language', which outputs [('English', 3), ('Italian', 12)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name and capacity for the stadium with the highest average attendance?' in SQLite? I currently have 'SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1', which outputs [(\"Stark's Park\", 10104)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the version numbers and template type codes of templates with a version number greater than 5.' in SQLite? I currently have 'SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5', which outputs [(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of distinct store locations.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Location) FROM shop', which outputs [(9,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT LOCATION) FROM shop\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the manager name and district of the shop whose number of products is the largest.' in SQLite? I currently have 'SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT max(Number_products) FROM shop)', which outputs [('Ilkka Mäkelä', 'Lahden Stadion')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the airport code of the airport with the most flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON (T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport) GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the full name of each car maker, along with its id and how many models it produces?' in SQLite? I currently have 'SELECT T1.FullName, T1.Id, count(T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName, T1.Id', which outputs [('American Motor Company', 1, 1), ('BMW', 3, 1), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Daimler Benz', 13, 2), ('Fiat', 9, 1), ('Ford Motor Company', 5, 3), ('General Motors', 4, 5), ('Honda', 11, 1), ('Hyundai', 23, 1), ('Kia Motors', 22, 1), ('Mazda', 12, 1), ('Nissan Motors', 8, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volkswagen', 2, 2), ('Volvo', 21, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the full name of each car maker, along with its id and how many models it produces?' in SQLite? I currently have 'SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;', which outputs [('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which department offers the most number of degrees? List department name and id.' in SQLite? I currently have 'SELECT T1.department_name, T1.department_id, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1', which outputs [('statistics', 8, 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which department offers the most number of degrees? List department name and id.' in SQLite? I currently have 'SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1', which outputs [('statistics', 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which grade has the most high schoolers?' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?' in SQLite? I currently have 'SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'', which outputs [('Sky Radio', 'Italy'), ('Music Box Italia', 'Italy'), ('MTV Hits', 'Italy'), ('MTV Rocks', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('Classica', 'Italy'), ('MTV Dance', 'United Kingdom')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?' in SQLite? I currently have 'SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'', which outputs [('MTV Dance', 'United Kingdom')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which employee received the biggest bonus? Give me the employee name.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = (SELECT max(Bonus) FROM evaluation)', which outputs [('Louis Deacon',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which shops run with no employees? Find the shop names' in SQLite? I currently have 'SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)', which outputs [('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cartoons were written by \"Joseph Kuhr\"?' in SQLite? I currently have 'SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Cartoon WHERE Written_by = \\\"Joseph Kuhr\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.' in SQLite? I currently have 'SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'', which outputs [('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different loser names are there?' in SQLite? I currently have 'SELECT COUNT(DISTINCT loser_name) FROM matches', which outputs [(49,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT loser_name) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the airline names and abbreviations for airlines in the USA?' in SQLite? I currently have 'SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'', which outputs [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all document ids with at least two paragraphs.' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  >=  2', which outputs [(80,), (2394,), (651512,), (16514113,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first name of all the professionals along with the description of the treatment they have done.' in SQLite? I currently have 'SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id JOIN Treatment_Types AS T2 ON T3.treatment_type_code = T2.treatment_type_code', which outputs [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the first name of all the professionals along with the description of the treatment they have done.' in SQLite? I currently have 'SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code', which outputs [('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers that have more than one song.' in SQLite? I currently have 'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name HAVING count(*) > 1', which outputs [('Liliane Bettencourt',), ('Christy Walton',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of singers that have more than one song.' in SQLite? I currently have 'SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1', which outputs [('Christy Walton',), ('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the names of stores whose number products is more than the average number of products.' in SQLite? I currently have 'SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)', which outputs [('HJK',), ('FC Inter',), ('FC Lahti',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'how many countries are in Asia?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE Continent = 'Asia'', which outputs [(51,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE continent  =  \\\"Asia\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many dogs have not gone through any treatment?' in SQLite? I currently have 'SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which abbreviation corresponds to Jetblue Airways?' in SQLite? I currently have 'SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which abbreviation corresponds to Jetblue Airways?' in SQLite? I currently have 'SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"', which outputs [('JetBlue',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all stadiums that did not have a concert in 2014?' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  =  2014)', which outputs [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all stadiums that did not have a concert in 2014?' in SQLite? I currently have 'SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014', which outputs [('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For students who have pets , how many pets does each student have ? list their ids instead of names .' in SQLite? I currently have 'SELECT StuID, count(PetID) FROM Has_Pet GROUP BY StuID', which outputs [(1001, 1), (1002, 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For students who have pets , how many pets does each student have ? list their ids instead of names .' in SQLite? I currently have 'select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid', which outputs [(1, 1001), (2, 1002)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many documents are using the template with type code 'PPT'?' in SQLite? I currently have 'SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the total number of unique official languages spoken in the countries that are founded before 1930?' in SQLite? I currently have 'SELECT count(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930)', which outputs [(40,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers are from each country?' in SQLite? I currently have 'SELECT COUNT(Singer_ID) AS NumberOfSingers, Country FROM singer GROUP BY Country', which outputs [(4, 'France'), (1, 'Netherlands'), (1, 'United States')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many singers are from each country?' in SQLite? I currently have 'SELECT country ,  count(*) FROM singer GROUP BY country', which outputs [('France', 4), ('Netherlands', 1), ('United States', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT country ,  count(*) FROM singer GROUP BY country\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the ID of the high schooler named Kyle.' in SQLite? I currently have 'SELECT ID FROM Highschooler WHERE name = 'Kyle'', which outputs [(1934,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT ID FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of concerts happened in the stadium with the highest capacity .' in SQLite? I currently have 'SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age for all students who do not own any pets ?' in SQLite? I currently have 'SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)', which outputs [(19.625,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select avg(age) from student where stuid not in (select stuid from has_pet)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes for countries that do not speak English?' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', which outputs [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BVT',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HMD',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IOT',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SGS',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the country codes for countries that do not speak English?' in SQLite? I currently have 'SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"', which outputs [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers and number of concerts for each person?' in SQLite? I currently have 'SELECT T1.Name, count(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name, T2.Singer_ID', which outputs [('John Nizinik', 2), ('Justin Brown', 3), ('Rose White', 1), ('Timbaland', 2), ('Tribal King', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers and number of concerts for each person?' in SQLite? I currently have 'SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id', which outputs [('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each singer name, what is the total sales for their songs?' in SQLite? I currently have 'SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name', which outputs [('Liliane Bettencourt', 1646407.0), ('Christy Walton', 651421.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Gina Rinehart', 292000.0), ('Susanne Klatten', 261000.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each singer name, what is the total sales for their songs?' in SQLite? I currently have 'SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name', which outputs [('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the first names of every student who has a cat or dog as a pet?' in SQLite? I currently have 'SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'', which outputs [('Linda',), ('Tracy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.' in SQLite? I currently have 'SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015', which outputs [('Somerset Park', 'Ayr United')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the codes of the countries that do not speak English and whose government forms are not Republic?' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'', which outputs [('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Code FROM country WHERE GovernmentForm != \\\"Republic\\\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many visitors below age 30 are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM visitor WHERE Age < 30', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM visitor WHERE age  <  30\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the id, line 1, and line 2 of the address with the most students?' in SQLite? I currently have 'SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2 ORDER BY count(*) DESC LIMIT 1', which outputs [(9, '0643 Muller Vista', 'Suite 383')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights arriving in Aberdeen city?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the number of car models created by the car maker American Motor Company?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many official languages are spoken in Afghanistan?' in SQLite? I currently have 'SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \\\"Afghanistan\\\" AND IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?' in SQLite? I currently have 'SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'', which outputs [('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Title FROM Cartoon WHERE Directed_by = \\\"Ben Jones\\\" OR Directed_by = \\\"Brandon Vietti\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the countries having at least one car maker? List name and id.' in SQLite? I currently have 'SELECT DISTINCT T2.CountryName, T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId', which outputs [('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many type of governments are in Africa?' in SQLite? I currently have 'SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \\\"Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with the least number of results?' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date, COUNT(T2.student_course_id) AS num_results FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY num_results ASC LIMIT 1', which outputs [(2, '1975-10-28 15:16:51', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the date and id of the transcript with the least number of results?' in SQLite? I currently have 'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1', which outputs [('1975-10-28 15:16:51', 2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the model for the car with a weight smaller than the average?' in SQLite? I currently have 'SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM cars_data)', which outputs [('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id with 1 to 2 paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2', which outputs [(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all European countries with at least 3 manufacturers?' in SQLite? I currently have 'SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of all European countries with at least 3 manufacturers?' in SQLite? I currently have 'SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;', which outputs [('france',), ('germany',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?' in SQLite? I currently have 'SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'', which outputs [('2018-03-09 19:03:21', 'NY', 7182887233)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each stadium, how many concerts play there?' in SQLite? I currently have 'SELECT T1.Stadium_ID, T1.Name, COUNT(T2.concert_ID)  FROM stadium AS T1  JOIN concert AS T2  ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Stadium_ID, T1.Name', which outputs [(1, \"Stark's Park\", 1), (2, 'Somerset Park', 2), (7, 'Recreation Park', 1), (9, 'Balmoor', 1), (10, 'Glebe Park', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each stadium, how many concerts play there?' in SQLite? I currently have 'SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id', which outputs [(\"Stark's Park\", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the student with the most likes.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.liked_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1', which outputs [('Kris',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name of the student with the most likes.' in SQLite? I currently have 'SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1', which outputs [('John',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who is the first student to register? List the first name, middle name and last name.' in SQLite? I currently have 'SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1', which outputs [('Timmothy', 'Anna', 'Ward')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the ids and names of each document, as well as the number of paragraphs in each?' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name', which outputs [(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the descriptions for all the math courses?' in SQLite? I currently have 'SELECT course_description FROM Courses WHERE course_name LIKE '%math%'', which outputs [('q',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT course_description FROM Courses WHERE course_name  =  'math'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the names of teachers in ascending order of age.' in SQLite? I currently have 'SELECT Name FROM teacher ORDER BY Age ASC', which outputs [('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM teacher ORDER BY Age ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are airport names at City 'Aberdeen'?' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE City = 'Aberdeen'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM AIRPORTS WHERE City = \\\"Aberdeen\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.' in SQLite? I currently have 'SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID', which outputs [(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the mobile phone number of the student named Timmothy Ward ?' in SQLite? I currently have 'SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'', which outputs [('(096)889-8954x524',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the mobile phone number of the student named Timmothy Ward ?' in SQLite? I currently have 'select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?' in SQLite? I currently have 'SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \\\"The Rise of the Blue Beetle!\\\";\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?' in SQLite? I currently have 'SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";', which outputs [('Sky Radio',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \\\"The Rise of the Blue Beetle!\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of teachers whose hometown is not `` Little Lever Urban District '' .' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'', which outputs [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the name of teachers whose hometown is not `` Little Lever Urban District '' .' in SQLite? I currently have 'select name from teacher where hometown != \"little lever urban district\"', which outputs [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are years of founding for orchestras that have had more than a single performance?' in SQLite? I currently have 'SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the language spoken by the largest percentage of people in each country?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN (SELECT CountryCode, max(Percentage) AS max_percentage FROM countrylanguage GROUP BY CountryCode) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.max_percentage', which outputs [('Papiamento',), ('Pashto',), ('Ovimbundu',), ('English',), ('Albaniana',), ('Spanish',), ('Papiamento',), ('Arabic',), ('Spanish',), ('Armenian',), ('Samoan',), ('Creole English',), ('English',), ('German',), ('Azerbaijani',), ('Kirundi',), ('Dutch',), ('Fon',), ('Mossi',), ('Bengali',), ('Bulgariana',), ('Arabic',), ('Creole English',), ('Serbo-Croatian',), ('Belorussian',), ('English',), ('English',), ('Spanish',), ('Portuguese',), ('Bajan',), ('Malay',), ('Dzongkha',), ('Tswana',), ('Gbaya',), ('English',), ('English',), ('Malay',), ('German',), ('Spanish',), ('Chinese',), ('Akan',), ('Fang',), ('Luba',), ('Kongo',), ('English',), ('Maori',), ('Spanish',), ('Comorian',), ('Crioulo',), ('Spanish',), ('Spanish',), ('Chinese',), ('English',), ('English',), ('Greek',), ('Czech',), ('German',), ('Somali',), ('Creole English',), ('Danish',), ('Spanish',), ('Arabic',), ('Spanish',), ('Arabic',), ('Tigrinja',), ('Arabic',), ('Spanish',), ('Estonian',), ('Oromo',), ('Finnish',), ('Fijian',), ('English',), ('French',), ('Faroese',), ('Trukese',), ('Fang',), ('English',), ('Georgiana',), ('Akan',), ('English',), ('Ful',), ('Creole French',), ('Malinke',), ('Crioulo',), ('Fang',), ('Greek',), ('Creole English',), ('Greenlandic',), ('Spanish',), ('Creole French',), ('English',), ('Creole English',), ('Canton Chinese',), ('Spanish',), ('Serbo-Croatian',), ('Haiti Creole',), ('Hungarian',), ('Javanese',), ('Hindi',), ('English',), ('Persian',), ('Arabic',), ('Icelandic',), ('Hebrew',), ('Italian',), ('Creole English',), ('Arabic',), ('Japanese',), ('Kazakh',), ('Kikuyu',), ('Kirgiz',), ('Khmer',), ('Kiribati',), ('Creole English',), ('Korean',), ('Arabic',), ('Lao',), ('Arabic',), ('Kpelle',), ('Arabic',), ('Creole French',), ('German',), ('Singali',), ('Sotho',), ('Lithuanian',), ('Luxembourgish',), ('Latvian',), ('Canton Chinese',), ('Arabic',), ('French',), ('Romanian',), ('Malagasy',), ('Dhivehi',), ('Spanish',), ('Marshallese',), ('Macedonian',), ('Bambara',), ('Maltese',), ('Burmese',), ('Mongolian',), ('Philippene Languages',), ('Makua',), ('Hassaniya',), ('English',), ('Creole French',), ('Creole French',), ('Chichewa',), ('Malay',), ('Mahoré',), ('Ovambo',), ('Malenasian Languages',), ('Hausa',), ('English',), ('Joruba',), ('Spanish',), ('English',), ('Niue',), ('Dutch',), ('Norwegian',), ('Nepali',), ('Nauru',), ('English',), ('Arabic',), ('Punjabi',), ('Spanish',), ('Pitcairnese',), ('Spanish',), ('Pilipino',), ('Palau',), ('Papuan Languages',), ('Polish',), ('Spanish',), ('Korean',), ('Portuguese',), ('Spanish',), ('Arabic',), ('Tahitian',), ('Arabic',), ('Creole French',), ('Romanian',), ('Russian',), ('Rwanda',), ('Arabic',), ('Arabic',), ('Wolof',), ('Chinese',), ('English',), ('Norwegian',), ('Russian',), ('Malenasian Languages',), ('Mende',), ('Spanish',), ('Italian',), ('Somali',), ('French',), ('Crioulo',), ('Sranantonga',), ('Slovak',), ('Slovene',), ('Swedish',), ('Swazi',), ('Seselwa',), ('Arabic',), ('English',), ('Sara',), ('Ewe',), ('Thai',), ('Tadzhik',), ('English',), ('Tokelau',), ('Turkmenian',), ('Portuguese',), ('Sunda',), ('Tongan',), ('English',), ('Arabic',), ('Turkish',), ('Tuvalu',), ('Min',), ('Nyamwesi',), ('Ganda',), ('Ukrainian',), ('English',), ('Spanish',), ('English',), ('Uzbek',), ('Italian',), ('Creole English',), ('Spanish',), ('English',), ('English',), ('Vietnamese',), ('Bislama',), ('Futuna',), ('Wallis',), ('Samoan-English',), ('Arabic',), ('Serbo-Croatian',), ('Zulu',), ('Bemba',), ('Shona',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the language spoken by the largest percentage of people in each country?' in SQLite? I currently have 'SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode', which outputs [('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is all the information about hiring?' in SQLite? I currently have 'SELECT * FROM hiring', which outputs [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the maximum and minimum values of area codes?' in SQLite? I currently have 'SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE', which outputs [(989, 201)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(area_code) ,  min(area_code) FROM area_code_state\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which grades have 4 or more high schoolers?' in SQLite? I currently have 'SELECT grade FROM Highschooler GROUP BY grade HAVING count(ID) >= 4', which outputs [(9,), (10,), (11,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights land in Aberdeen or Abilene?' in SQLite? I currently have 'SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \\\"Aberdeen\\\" OR T2.city  =  \\\"Abilene\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the languages used by the least number of TV Channels and how many channels use it?' in SQLite? I currently have 'SELECT Language, count(*) AS num_channels FROM TV_Channel GROUP BY Language HAVING count(*) = (SELECT min(count(*)) FROM TV_Channel GROUP BY Language)', which outputs misuse of aggregate function count(). If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the languages used by the least number of TV Channels and how many channels use it?' in SQLite? I currently have 'SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;', which outputs [('English', 3)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which city and country is the Alton airport at?' in SQLite? I currently have 'SELECT City, Country FROM airports WHERE AirportName = 'Alton'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \\\"Alton\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model of the car has the minimum horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = (SELECT min(Horsepower) FROM cars_data)', which outputs [('amc',), ('chevrolet',), ('amc',), ('pontiac',), ('chevrolet',), ('amc',), ('amc',), ('amc',), ('chevrolet',), ('chevrolet',), ('amc',), ('plymouth',), ('dodge',), ('plymouth',), ('plymouth',), ('mazda',), ('datsun',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which model of the car has the minimum horsepower?' in SQLite? I currently have 'SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;', which outputs [('amc',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers who are not French citizens?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Citizenship != 'French'', which outputs [('Liliane Bettencourt',), ('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Citizenship != \\\"France\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the singers who are not French citizens?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Citizenship != \"France\"', which outputs [('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Citizenship != \\\"France\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average age of all the dogs?' in SQLite? I currently have 'SELECT AVG(age) FROM Dogs', which outputs [(5.066666666666666,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(age) FROM Dogs\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?' in SQLite? I currently have 'SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980', which outputs [('null',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Describe the section h.' in SQLite? I currently have 'SELECT section_description FROM Sections WHERE section_name = 'h'', which outputs [('et',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT section_description FROM Sections WHERE section_name  =  'h'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many different templates do all document use?' in SQLite? I currently have 'SELECT count(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT template_id) FROM Documents\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name of the student whose permanent address is different from his or her current one?' in SQLite? I currently have 'SELECT first_name FROM Students WHERE permanent_address_id != current_address_id', which outputs [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the record company used by the greatest number of orchestras?' in SQLite? I currently have 'SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1', which outputs [('Decca Records',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the document id and name with greatest number of paragraphs?' in SQLite? I currently have 'SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY count(T2.Paragraph_ID) DESC LIMIT 1', which outputs [(2394, 'Customer reviews')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of students who have 2 or more likes?' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How long is the peopleâ€™s average life expectancy in Central Africa?' in SQLite? I currently have 'SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'', which outputs [(50.31111111111111,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \\\"Central Africa\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give the name, population, and head of state for the country that has the largest area.' in SQLite? I currently have 'SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1', which outputs [('Russian Federation', 146934000, 'Vladimir Putin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of airport that has fewest number of flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM airports AS T1 LEFT JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1', which outputs [('AAF',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the code of airport that has fewest number of flights?' in SQLite? I currently have 'SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the names of all the poker players.' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID', which outputs [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many cars have more than 4 cylinders?' in SQLite? I currently have 'SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4', which outputs [(195,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the name of the conductor that has conducted orchestras founded after 2008.' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008', which outputs [('Igor Stravinsky',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What country is Jetblue Airways affiliated with?' in SQLite? I currently have 'SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What country is Jetblue Airways affiliated with?' in SQLite? I currently have 'SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"', which outputs [('USA',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Country FROM AIRLINES WHERE Airline  =  \\\"JetBlue Airways\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What grade is Kyle in?' in SQLite? I currently have 'SELECT grade FROM Highschooler WHERE name = 'Kyle'', which outputs [(12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT grade FROM Highschooler WHERE name  =  \\\"Kyle\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum horsepower and the make of the car models with 3 cylinders?' in SQLite? I currently have 'SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make', which outputs [('110', 'mazda rx-4'), ('100', 'mazda rx-7 gs'), ('97', 'mazda rx2 coupe'), ('90', 'mazda rx3')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the maximum horsepower and the make of the car models with 3 cylinders?' in SQLite? I currently have 'SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;', which outputs [('97', 'mazda rx2 coupe')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the most expensive charge type costs?' in SQLite? I currently have 'SELECT MAX(charge_amount) FROM Charges', which outputs [(640,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(charge_amount) FROM Charges\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the weight of the youngest dog.' in SQLite? I currently have 'SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'', which outputs [(9.3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT weight FROM pets ORDER BY pet_age LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the African countries that have a  population less than any country in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')', which outputs [('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \\\"Asia\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the African countries that have a  population less than any country in Asia?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")', which outputs [('Angola',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('British Indian Ocean Territory',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Mayotte',), ('Namibia',), ('Niger',), ('Nigeria',), ('Réunion',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Saint Helena',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Africa\\\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \\\"Asia\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the ids of templates that have the code PP or PPT.' in SQLite? I currently have 'SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'', which outputs [(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Templates WHERE template_type_code  =  \\\"PP\\\" OR template_type_code  =  \\\"PPT\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many flights depart from 'APG'?' in SQLite? I currently have 'SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'', which outputs [(0,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \\\"APG\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the last name of the student who has a cat that is 3 years old?' in SQLite? I currently have 'SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3', which outputs [('Smith',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the description of the treatment type that costs the least money in total?' in SQLite? I currently have 'SELECT T2.treatment_type_description FROM Treatment_Types AS T2 JOIN (SELECT T1.treatment_type_code, SUM(T1.cost_of_treatment) as total_cost FROM Treatments AS T1 GROUP BY T1.treatment_type_code) AS T3 ON T2.treatment_type_code = T3.treatment_type_code ORDER BY T3.total_cost ASC LIMIT 1', which outputs [('Take for a Walk',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'which countries' tv channels are playing some cartoon written by Todd Casey?' in SQLite? I currently have 'SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'', which outputs [('United Kingdom',), ('Italy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of students who have at least 2 likes.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When is the first transcript released? List the date and details.' in SQLite? I currently have 'SELECT transcript_id, transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', which outputs [(8, '1975-05-06 12:04:47', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'When is the first transcript released? List the date and details.' in SQLite? I currently have 'SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1', which outputs [('1975-05-06 12:04:47', None)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".' in SQLite? I currently have 'SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'', which outputs [('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the towns from which at least two teachers come from?' in SQLite? I currently have 'SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(Teacher_ID) >= 2', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show names of all high school students who do not have any friends.' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', which outputs [('Brittany',), ('John',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries are listed?' in SQLite? I currently have 'SELECT COUNT(*) FROM countries', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM COUNTRIES;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name and gender of the all the students who have more than one pet?' in SQLite? I currently have 'SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)', which outputs [('Tracy', 'F')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many players are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM players', which outputs [(20662,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country codes for countries that do not speak English.' in SQLite? I currently have 'SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')', which outputs [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BVT',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HMD',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IOT',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SGS',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the country codes for countries that do not speak English.' in SQLite? I currently have 'SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"', which outputs [('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \\\"English\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the smallest weight of the car produced with 8 cylinders on 1974 ?' in SQLite? I currently have 'SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974', which outputs [(4141,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select min(weight) from cars_data where cylinders  =  8 and year  =  1974\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of all high schoolers in grade 10.' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE grade = 10', which outputs [('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM Highschooler WHERE grade  =  10\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Give me all the information about hiring.' in SQLite? I currently have 'SELECT * FROM hiring', which outputs [(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM hiring\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name of students who have cat or dog pet.' in SQLite? I currently have 'SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'', which outputs [('Linda',), ('Tracy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.' in SQLite? I currently have 'SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1', which outputs [(3, 'Stoltenberg')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.' in SQLite? I currently have 'SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1', which outputs [(14, 'Funk')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show all distinct template type codes for all templates.' in SQLite? I currently have 'SELECT DISTINCT Template_Type_Code FROM Templates', which outputs [('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of airports which do not have any flight in and out.' in SQLite? I currently have 'SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)', which outputs [('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of high schoolers who have at least 3 friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  >=  3', which outputs [('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does each charge type costs? List both charge type and amount.' in SQLite? I currently have 'SELECT charge_type, charge_amount FROM Charges', which outputs [('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT charge_type ,  charge_amount FROM Charges\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many distinct countries do players come from?' in SQLite? I currently have 'SELECT COUNT(DISTINCT country_code) FROM players', which outputs [(153,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT country_code) FROM players\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?' in SQLite? I currently have 'SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)', which outputs [('Somerset Park', 'Ayr United')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is minimum and maximum share of TV series?' in SQLite? I currently have 'SELECT MIN(Share), MAX(Share) FROM TV_series', which outputs [(5.0, 9.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is minimum and maximum share of TV series?' in SQLite? I currently have 'SELECT max(SHARE) , min(SHARE) FROM TV_series;', which outputs [(9.0, 5.0)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT max(SHARE) , min(SHARE) FROM TV_series;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?' in SQLite? I currently have 'SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'', which outputs [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?' in SQLite? I currently have 'select name from teacher where hometown != \"little lever urban district\"', which outputs [('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select name from teacher where hometown != \\\"little lever urban district\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What the smallest version number and its template type code?' in SQLite? I currently have 'SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Version_Number ASC LIMIT 1', which outputs [(0, 'PP')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(Version_Number) ,  template_type_code FROM Templates\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Return the name, location and district of all shops in descending order of number of products.' in SQLite? I currently have 'SELECT Name, Location, District FROM shop ORDER BY Number_products DESC', which outputs [('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which language is the most popular on the Asian continent?' in SQLite? I currently have 'SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY sum(T1.Percentage) DESC LIMIT 1', which outputs [('Arabic',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \\\"Asia\\\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the first name, country code, and birth date of the player with the most winner rank points across all matches?' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  ORDER BY T2.winner_rank_points DESC  LIMIT 1', which outputs [('Serena', 'USA', 19810926)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the last name of the students who live in North Carolina but have not registered in any degree programs?' in SQLite? I currently have 'SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)', which outputs []. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the last name of the students who live in North Carolina but have not registered in any degree programs?' in SQLite? I currently have 'SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id', which outputs [('Gleichner',), ('Weimann',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who both have friends and are liked?' in SQLite? I currently have 'SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)', which outputs [('Haley',), ('Alexis',), ('Jordan',), ('Kris',), ('Jessica',), ('Gabriel',), ('Cassandra',), ('Kyle',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of high schoolers who both have friends and are liked?' in SQLite? I currently have 'SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id', which outputs [('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the number of dog pets that are raised by female students (with sex F).' in SQLite? I currently have 'SELECT count(T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'F'', which outputs [(2,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which professionals have done at least two treatments? List the professional's id, role, and first name.' in SQLite? I currently have 'SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2', which outputs [(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Tell me the number of dogs that have not received any treatment .' in SQLite? I currently have 'SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)', which outputs [(6,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"select count(*) from dogs where dog_id not in ( select dog_id from treatments )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average weight and year for each year?' in SQLite? I currently have 'SELECT AVG(Weight), Year FROM cars_data GROUP BY Year', which outputs [(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are names of countries with the top 3 largest population?' in SQLite? I currently have 'SELECT Name FROM country ORDER BY Population DESC LIMIT 3', which outputs [('China',), ('India',), ('United States',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country ORDER BY Population DESC LIMIT 3\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the stadium names without any concert.' in SQLite? I currently have 'SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert)', which outputs [('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List all airline names and their abbreviations in \"USA\".' in SQLite? I currently have 'SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'', which outputs [('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \\\"USA\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the student IDs and numbers of friends corresponding to each.' in SQLite? I currently have 'SELECT T1.ID, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID', which outputs [(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the player who did the most number of tours.' in SQLite? I currently have 'SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.tours = (SELECT max(tours) FROM rankings)', which outputs [('Julia', 'USA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the first name and country code of the player who did the most number of tours.' in SQLite? I currently have 'SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1', which outputs [('USA', 'Julia')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many courses are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM Courses', which outputs [(15,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM Courses\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the most common nationality of people?' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1', which outputs [('Russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?' in SQLite? I currently have 'SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500', which outputs [('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have less than 200 flights?' in SQLite? I currently have 'SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200', which outputs [(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which airlines have less than 200 flights?' in SQLite? I currently have 'SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200', which outputs [('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the population and life expectancies in Brazil?' in SQLite? I currently have 'SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'', which outputs [(170115000, 62.9)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \\\"Brazil\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which semesters do not have any student enrolled? List the semester name.' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)', which outputs [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the semester with no students enrolled?' in SQLite? I currently have 'SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)', which outputs [('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the pixel aspect ratio and nation of the tv channels that do not use English.' in SQLite? I currently have 'SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'', which outputs [('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many contestants did not get voted?' in SQLite? I currently have 'SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)', which outputs [(8,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which cities do more than one employee under age 30 come from?' in SQLite? I currently have 'SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(Employee_ID) > 1', which outputs [('Bath',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who owns the youngest dog? Give me his or her last name.' in SQLite? I currently have 'SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)', which outputs [('Mertz',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Who owns the youngest dog? Give me his or her last name.' in SQLite? I currently have 'SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )', which outputs [('Feil',), ('Fisher',), ('Rippin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each shop, return the number of employees working there and the name of the shop.' in SQLite? I currently have 'SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name', which outputs [(2, 'FC Haka'), (1, 'HJK'), (1, 'FC Inter'), (1, 'FF Jaro'), (1, 'FC KooTeePee'), (1, 'FC Lahti')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'For each shop, return the number of employees working there and the name of the shop.' in SQLite? I currently have 'SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name', which outputs [(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name and age of the visitor who bought the most tickets at once.' in SQLite? I currently have 'SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Num_of_Ticket = (SELECT max(Num_of_Ticket) FROM visit)', which outputs [('Arjen Robben', 27)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the names of students who have a grade higher than 5 and have at least 2 friends.' in SQLite? I currently have 'SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)', which outputs [('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models were produced by the maker with full name American Motor Company?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'', which outputs [(1,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of poker players?' in SQLite? I currently have 'SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID', which outputs [('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?' in SQLite? I currently have 'SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm', which outputs [('Commonwealth of the US', 3947000), ('Constitutional Monarchy (Emirate)', 1972000), ('Constitutional Monarchy, Federation', 82516000), ('Dependent Territory of the UK', 193050), ('Emirate Federation', 2441000), ('Federation', 7160400), ('Monarchy (Emirate)', 617000), ('Monarchy (Sultanate)', 2870000), ('Nonmetropolitan Territory of France', 464000), ('Nonmetropolitan Territory of The Netherlands', 320000), ('Overseas Department of France', 1731000), ('Parliamentary Coprincipality', 78000), ('Part of Denmark', 99000), ('Socialistic Republic', 115072000), ('Socialistic State', 5605000), ('Special Administrative Region of China', 7255000), ('US Territory', 329000)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?' in SQLite? I currently have 'SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72', which outputs [(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the singer who is worth the most?' in SQLite? I currently have 'SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1', which outputs [('Liliane Bettencourt',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?' in SQLite? I currently have 'SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3  UNION  SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  JOIN model_list AS T3 ON T2.Id = T3.Maker  WHERE T3.Model = 'fiat'', which outputs [(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.' in SQLite? I currently have 'SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1', which outputs [('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the name of the makers that produced some cars in the year of 1970?' in SQLite? I currently have 'SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970', which outputs [('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the record formats of orchestras in ascending order of count.' in SQLite? I currently have 'SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC', which outputs [('CD / LP', 1), ('DVD', 1), ('CD', 10)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Please show the record formats of orchestras in ascending order of count.' in SQLite? I currently have 'SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC', which outputs [('CD / LP',), ('DVD',), ('CD',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of players who won in both 2013 and 2016?' in SQLite? I currently have 'SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013 ', which outputs [('Serena', 'Williams'), ('Serena', 'Williams'), ('Serena', 'Williams'), ('Petra', 'Kvitova'), ('Angelique', 'Kerber'), ('Petra', 'Kvitova'), ('Na', 'Li'), ('Victoria', 'Azarenka'), ('Jelena', 'Jankovic'), ('Na', 'Li'), ('Na', 'Li'), ('Sara', 'Errani')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of players who won in both 2013 and 2016?' in SQLite? I currently have 'SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016', which outputs [('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the total number of matches.' in SQLite? I currently have 'SELECT COUNT(*) FROM matches', which outputs [(278,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM matches\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of conductors who have conducted orchestras founded after the year 2008?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008', which outputs [('Igor Stravinsky',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the continent name which Anguilla belongs to?' in SQLite? I currently have 'SELECT Continent FROM country WHERE Name = 'Anguilla'', which outputs [('North America',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Continent FROM country WHERE Name  =  \\\"Anguilla\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have either English or Dutch as an official language?' in SQLite? I currently have 'SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'', which outputs [('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antigua and Barbuda',), ('Australia',), ('Belgium',), ('Belize',), ('Bermuda',), ('Barbados',), ('Canada',), ('Cocos (Keeling) Islands',), ('Christmas Island',), ('Cayman Islands',), ('Falkland Islands',), ('United Kingdom',), ('Gibraltar',), ('Guam',), ('Hong Kong',), ('Ireland',), ('Saint Kitts and Nevis',), ('Saint Lucia',), ('Lesotho',), ('Marshall Islands',), ('Malta',), ('Northern Mariana Islands',), ('Montserrat',), ('Norfolk Island',), ('Niue',), ('Netherlands',), ('Nauru',), ('New Zealand',), ('Palau',), ('Saint Helena',), ('Seychelles',), ('Turks and Caicos Islands',), ('Tokelau',), ('Tonga',), ('Tuvalu',), ('United States Minor Outlying Islands',), ('United States',), ('Saint Vincent and the Grenadines',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('Samoa',), ('South Africa',), ('Zimbabwe',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND IsOfficial  =  \\\"T\\\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\" AND IsOfficial  =  \\\"T\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Which countries have either English or Dutch as an official language?' in SQLite? I currently have 'SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"', which outputs [('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, None, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, None, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, None, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, None, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, None, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, None, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, None, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, None, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, None, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, None, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, None, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, None, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, None, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, None, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, None, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, None, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, None, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, None, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', \"Taufa'ahau Tupou IV\", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, None, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, None, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, None, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"English\\\" AND IsOfficial  =  \\\"T\\\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \\\"Dutch\\\" AND IsOfficial  =  \\\"T\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How much does the most recent treatment cost?' in SQLite? I currently have 'SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments)', which outputs [(407,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many car models are produced in the usa?' in SQLite? I currently have 'SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'', which outputs [(13,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the minimum grade of students who have no friends.' in SQLite? I currently have 'SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)', which outputs [(10,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the Asian countries which have a population larger than that of any country in Africa?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa')', which outputs [('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \\\"Africa\\\")\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the Asian countries which have a population larger than that of any country in Africa?' in SQLite? I currently have 'SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")', which outputs [('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Hong Kong',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Macao',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Palestine',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('East Timor',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM country WHERE Continent  =  \\\"Asia\\\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \\\"Africa\\\")\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the average and maximum age for each pet type?' in SQLite? I currently have 'SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType', which outputs [(3.0, 3, 'cat'), (1.5, 2, 'dog')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the conductor who has conducted the most orchestras?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID, T1.Name ORDER BY count(*) DESC LIMIT 1', which outputs [('Antal Doráti',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the name of the conductor who has conducted the most orchestras?' in SQLite? I currently have 'SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1', which outputs [('Michael Tilson Thomas',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Find the kind of program which most number of students are enrolled in?' in SQLite? I currently have 'SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1', which outputs [('Bachelor',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the nationalities that are shared by at least two people?' in SQLite? I currently have 'SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) > 1', which outputs [('Russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many orchestras does each record company manage?' in SQLite? I currently have 'SELECT COUNT(*) , Record_Company FROM orchestra GROUP BY Record_Company', which outputs [(1, 'Columbia Masterworks'), (2, 'Decca Records'), (1, 'Delos Records'), (1, 'Deutsche Grammophon'), (1, 'EMI'), (1, 'Koch Records / Naxos Records'), (1, 'Kultur'), (1, 'Mercury Records'), (1, 'Philips'), (1, 'Philips Classics Records'), (1, 'RCA')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many orchestras does each record company manage?' in SQLite? I currently have 'SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company', which outputs [('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the sname of every sing that does not have any song?' in SQLite? I currently have 'SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)', which outputs [('Alice Walton',), ('Abigail Johnson',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the countries with no car makers?' in SQLite? I currently have 'SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)', which outputs [('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of the countries with no car makers?' in SQLite? I currently have 'SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;', which outputs [('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many continents are there?' in SQLite? I currently have 'SELECT COUNT(*) FROM continents', which outputs [(5,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM CONTINENTS;\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date and id of the transcript with at least 2 course results.' in SQLite? I currently have 'SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING count(*) >= 2', which outputs [(5, '2013-06-30 13:01:40'), (6, '2010-12-13 10:55:15'), (8, '1975-05-06 12:04:47'), (15, '1998-11-22 12:18:29')]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Show the date and id of the transcript with at least 2 course results.' in SQLite? I currently have 'SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2', which outputs [('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have governments that are republics?' in SQLite? I currently have 'SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%'', which outputs [(143,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"false\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'How many countries have governments that are republics?' in SQLite? I currently have 'SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"', which outputs [(122,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(*) FROM country WHERE GovernmentForm  =  \\\"Republic\\\"\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the template ids of any templates used in more than a single document?' in SQLite? I currently have 'SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(*) > 1', which outputs [(11,), (14,), (25,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the content of the series Sky Radio?' in SQLite? I currently have 'SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'', which outputs [('music',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What is the content of TV Channel with serial name \"Sky Radio\"?' in SQLite? I currently have 'SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'', which outputs [('music',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Content FROM TV_Channel WHERE series_name = \\\"Sky Radio\\\";\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'find the name of employee who was awarded the most times in the evaluation.' in SQLite? I currently have 'SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(count_eval) FROM (SELECT count(*) as count_eval FROM evaluation GROUP BY Employee_ID) AS subquery)', which outputs [('George Chuter',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the name, population, and life expectancy of the largest Asian country by land?' in SQLite? I currently have 'SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1', which outputs [('China', 1277558000, 71.4)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \\\"Asia\\\" ORDER BY SurfaceArea DESC LIMIT 1\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Count the number of different nationalities of conductors.' in SQLite? I currently have 'SELECT COUNT(DISTINCT Nationality) FROM conductor', which outputs [(3,)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT count(DISTINCT Nationality) FROM conductor\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'Whose permanent address is different from his or her current address? List his or her first name.' in SQLite? I currently have 'SELECT first_name FROM Students WHERE permanent_address_id != current_address_id', which outputs [('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id\", \"correct\": \"true\"}"}]}
{"messages": [{"role": "system", "content": "You are helping the user debug their SQL query by returning a JSON, given an English prompt, a sample SQL query, and that query's output. The given query may already be correct."}, {"role": "user", "content": "How do I express 'What are the names of people who do not play poker?' in SQLite? I currently have 'SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)', which outputs [('Roman Bragin',), ('Sergey Grankin',)]. If this is correct, please return this query in the format specified below. Create a valid JSON that represents the corrected query:{\"sql_query\": \"The correct SQL query\",\"correct\": \"Whether the given SQL query is correct\",}"}, {"role": "assistant", "content": "{\"sql_query\": \"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)\", \"correct\": \"true\"}"}]}

{"prompt": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "predicted": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')", "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "database": "tvshow"}
{"prompt": "Show ids for all templates not used by any document.", "predicted": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Show ids of all students who do not have any friends.", "predicted": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)", "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "database": "network_1"}
{"prompt": "What are the ids for templates that are not used in any documents?", "predicted": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)", "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What is the total ticket expense of the visitors whose membership level is 1?", "predicted": "SELECT sum(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID WHERE T2.Level_of_membership  =  1", "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "database": "museum_visit"}
{"prompt": "What languages are only used by a single country with a republic government?", "predicted": "SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm LIKE '%republic%' GROUP BY T1.Language HAVING count(*) = 1", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "database": "world_1"}
{"prompt": "Find the name of the employee who got the highest one time bonus.", "predicted": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"prompt": "Count the number of documents.", "predicted": "SELECT COUNT(*) FROM Documents", "gold": "SELECT count(*) FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"prompt": "How many 'United Airlines' flights go to Airport 'ASY'?", "predicted": "SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'", "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "database": "flight_2"}
{"prompt": "What is the official language spoken in the country whose head of state is Beatrix?", "predicted": "SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix'", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "database": "world_1"}
{"prompt": "Find the first name and age of students who have a pet.", "predicted": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID", "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "database": "pets_1"}
{"prompt": "What is the total number of singers?", "predicted": "SELECT COUNT(*) FROM singer", "gold": "SELECT count(*) FROM singer", "database": "concert_singer"}
{"prompt": "What are the details for the paragraph that includes the text 'Korea ' ?", "predicted": "SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'", "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "predicted": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"prompt": "List the arrival date and the departure date for all the dogs.", "predicted": "SELECT date_arrived, date_departed FROM Dogs", "gold": "SELECT date_arrived ,  date_departed FROM Dogs", "database": "dog_kennels"}
{"prompt": "Which continent speaks the most languages?", "predicted": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1", "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "database": "world_1"}
{"prompt": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "predicted": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC", "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "database": "museum_visit"}
{"prompt": "Find the codes of countries that have more than 50 players.", "predicted": "SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50", "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "database": "wta_1"}
{"prompt": "Find the number of professionals who have not treated any dogs.", "predicted": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "database": "dog_kennels"}
{"prompt": "Show the names and grades of each high schooler.", "predicted": "SELECT name, grade FROM Highschooler", "gold": "SELECT name ,  grade FROM Highschooler", "database": "network_1"}
{"prompt": "What is the year that had the most concerts?", "predicted": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1", "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "database": "concert_singer"}
{"prompt": "Count the number of matches.", "predicted": "SELECT COUNT(*) FROM matches", "gold": "SELECT count(*) FROM matches", "database": "wta_1"}
{"prompt": "How many TV Channel using language English?", "predicted": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'", "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "database": "tvshow"}
{"prompt": "What is the age of the oldest dog?", "predicted": "SELECT MAX(age) FROM Dogs", "gold": "SELECT max(age) FROM Dogs", "database": "dog_kennels"}
{"prompt": "What is the name of the high schooler who has the greatest number of likes?", "predicted": "SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID HAVING count(T2.liked_id) = (SELECT max(count_likes) FROM (SELECT count(liked_id) as count_likes FROM Likes GROUP BY liked_id) as subquery)", "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "database": "network_1"}
{"prompt": "Return the number of airlines in the USA.", "predicted": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA'", "gold": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "database": "flight_2"}
{"prompt": "What is the name and capacity for the stadium with highest average attendance?", "predicted": "SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1", "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "database": "concert_singer"}
{"prompt": "How many professionals did not operate any treatment on dogs?", "predicted": "SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "database": "dog_kennels"}
{"prompt": "What are the manager name and district of the shop that sells the largest number of products?", "predicted": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1", "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"prompt": "Count the number of documents that use the PPT template type.", "predicted": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'", "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the different addresses that have students living there?", "predicted": "SELECT DISTINCT * FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students)", "gold": "SELECT count(DISTINCT current_address_id) FROM Students", "database": "student_transcripts_tracking"}
{"prompt": "What is the name of the country with the most car makers?", "predicted": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1", "gold": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "database": "car_1"}
{"prompt": "Count the number of conductors.", "predicted": "SELECT COUNT(*) FROM conductor", "gold": "SELECT count(*) FROM conductor", "database": "orchestra"}
{"prompt": "Find the average age of students who do not have any pet .", "predicted": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)", "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)", "database": "pets_1"}
{"prompt": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "predicted": "SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010)", "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "database": "museum_visit"}
{"prompt": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "predicted": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID ORDER BY T1.Name ASC", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "database": "course_teach"}
{"prompt": "What are the makers and models?", "predicted": "SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker", "gold": "SELECT Maker ,  Model FROM MODEL_LIST;", "database": "car_1"}
{"prompt": "Find the model of the car whose weight is below the average weight.", "predicted": "SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT avg(Weight) FROM cars_data))", "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "database": "car_1"}
{"prompt": "What are the average and maximum number of tickets bought in all visits?", "predicted": "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit", "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "database": "museum_visit"}
{"prompt": "What is the first, middle, and last name of the earliest school graduate?", "predicted": "SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What airline serves the most flights?", "predicted": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1", "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "database": "flight_2"}
{"prompt": "What is the description of the department whose name has the substring the computer?", "predicted": "SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'", "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "database": "student_transcripts_tracking"}
{"prompt": "What is the name of the conductor who has worked the greatest number of years?", "predicted": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "database": "orchestra"}
{"prompt": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "predicted": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000", "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "database": "concert_singer"}
{"prompt": "What are the notes of the death events which has substring 'East'?", "predicted": "SELECT note FROM death WHERE note LIKE '%East%'", "gold": "SELECT note FROM death WHERE note LIKE '%East%'", "database": "battle_death"}
{"prompt": "What is the money rank of the tallest poker player?", "predicted": "SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people)", "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "database": "poker_player"}
{"prompt": "Return the name of the airport with code 'AKO'.", "predicted": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'", "gold": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "database": "flight_2"}
{"prompt": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "predicted": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'", "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "database": "dog_kennels"}
{"prompt": "Which model has the most version(make) of cars?", "predicted": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Make) DESC LIMIT 1", "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "database": "car_1"}
{"prompt": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "predicted": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%'", "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the paragraph texts for the document with the name 'Customer reviews'?", "predicted": "SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'", "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the ids, version numbers, and type codes for each template?", "predicted": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"prompt": "How many singers are there?", "predicted": "SELECT COUNT(*) FROM singer", "gold": "SELECT count(*) FROM singer", "database": "singer"}
{"prompt": "What are the countries that have cartoons on TV that were written by Todd Casey?", "predicted": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'", "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "database": "tvshow"}
{"prompt": "How many different departments offer degrees?", "predicted": "SELECT count(distinct department_id) FROM Degree_Programs", "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "database": "student_transcripts_tracking"}
{"prompt": "List names of conductors in descending order of years of work.", "predicted": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "database": "orchestra"}
{"prompt": "Give the names of the nations that were founded after 1950.", "predicted": "SELECT Name FROM country WHERE IndepYear > 1950", "gold": "SELECT Name FROM country WHERE IndepYear  >  1950", "database": "world_1"}
{"prompt": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "predicted": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"prompt": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "predicted": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "database": "wta_1"}
{"prompt": "List the final tables made and the best finishes of poker players.", "predicted": "SELECT Final_Table_Made, Best_Finish FROM poker_player", "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "database": "poker_player"}
{"prompt": "What is the name of the shop that is hiring the largest number of employees?", "predicted": "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name HAVING count(T2.Employee_ID) = (SELECT max(count_employee) FROM (SELECT count(Employee_ID) as count_employee FROM hiring GROUP BY Shop_ID) as subquery)", "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"prompt": "Find the number of pets whose weight is heavier than 10.", "predicted": "SELECT COUNT(*) FROM Pets WHERE weight > 10", "gold": "SELECT count(*) FROM pets WHERE weight  >  10", "database": "pets_1"}
{"prompt": "Show names for all stadiums except for stadiums having a concert in year 2014.", "predicted": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')", "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "database": "concert_singer"}
{"prompt": "What is the template type code for template type description \"Book\".", "predicted": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "predicted": "SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'", "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "database": "orchestra"}
{"prompt": "Show template ids, version numbers, and template type codes for all templates.", "predicted": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates", "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Count the number of employees for each city.", "predicted": "SELECT COUNT(Employee_ID), City FROM employee GROUP BY City", "gold": "SELECT count(*) ,  city FROM employee GROUP BY city", "database": "employee_hire_evaluation"}
{"prompt": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "predicted": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) >= 2 AND count(*) > 3", "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "database": "car_1"}
{"prompt": "What is the produdction code and channel of the most recent cartoon ?", "predicted": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1", "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "database": "tvshow"}
{"prompt": "Find the number of distinct type of pets.", "predicted": "SELECT COUNT(DISTINCT PetType) FROM Pets", "gold": "SELECT count(DISTINCT pettype) FROM pets", "database": "pets_1"}
{"prompt": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "predicted": "SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Masters') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelors')", "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "database": "student_transcripts_tracking"}
{"prompt": "List the last name of the owner owning the youngest dog.", "predicted": "SELECT T2.last_name FROM Owners AS T2 JOIN Dogs AS T1 ON T1.owner_id = T2.owner_id WHERE T1.date_of_birth = (SELECT max(date_of_birth) FROM Dogs)", "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "database": "dog_kennels"}
{"prompt": "How many people live in Gelderland district?", "predicted": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'", "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "database": "world_1"}
{"prompt": "What are the orchestras that do not have any performances?", "predicted": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "database": "orchestra"}
{"prompt": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "predicted": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'", "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "database": "dog_kennels"}
{"prompt": "What are the first names of all players, and their total ranking points?", "predicted": "SELECT T1.first_name, sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name", "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "database": "wta_1"}
{"prompt": "What are the names of the contestants whose names are not 'Jessie Alloway'", "predicted": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'", "gold": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "database": "voter_1"}
{"prompt": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "predicted": "SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id  FROM Students AS T2  WHERE T2.student_id IN (     SELECT T1.student_id      FROM Student_Enrolment AS T1      GROUP BY T1.student_id, T1.semester_id      HAVING count(*) = 2 )", "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "database": "student_transcripts_tracking"}
{"prompt": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "predicted": "SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Total_spent = (SELECT max(Total_spent) FROM visit)", "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "database": "museum_visit"}
{"prompt": "List the names and birth dates of people in ascending alphabetical order of name.", "predicted": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC", "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "database": "poker_player"}
{"prompt": "Find the id of the pet owned by student whose last name is â€˜Smithâ€™.", "predicted": "SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'", "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "database": "pets_1"}
{"prompt": "What is maximum and minimum death toll caused each time?", "predicted": "SELECT max(killed), min(killed), caused_by_ship_id FROM death GROUP BY caused_by_ship_id", "gold": "SELECT max(killed) ,  min(killed) FROM death", "database": "battle_death"}
{"prompt": "Which distinct car models are the produced after 1980?", "predicted": "SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Year > 1980", "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "database": "car_1"}
{"prompt": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "predicted": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT T1.dog_id FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING sum(T2.cost_of_treatment) > 1000)", "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "database": "dog_kennels"}
{"prompt": "Show name of all students who have some friends and also are liked by someone else.", "predicted": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "database": "network_1"}
{"prompt": "Find the package choice and series name of the TV channel that has high definition TV.", "predicted": "SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes'", "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "database": "tvshow"}
{"prompt": "What is the zip code of the address in the city Port Chelsea?", "predicted": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'", "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "database": "student_transcripts_tracking"}
{"prompt": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "predicted": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.last_name, T1.cell_number HAVING count(*) > 2)", "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "database": "dog_kennels"}
{"prompt": "Give the ids of documents that have between one and two paragraphs.", "predicted": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the country codes of countries where people use languages other than English?", "predicted": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'", "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "database": "world_1"}
{"prompt": "Which languages are spoken by only one country in republic governments?", "predicted": "SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING count(*) = 1", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "database": "world_1"}
{"prompt": "Find the average age of losers and winners of all matches.", "predicted": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches", "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "database": "wta_1"}
{"prompt": "What are the names of airports in Aberdeen?", "predicted": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'", "gold": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "database": "flight_2"}
{"prompt": "What are the names of all courses that have some students enrolled?", "predicted": "SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "database": "student_transcripts_tracking"}
{"prompt": "Which continent has the most diverse languages?", "predicted": "SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS num_languages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY num_languages DESC LIMIT 1", "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "database": "world_1"}
{"prompt": "List the names of people that are not poker players.", "predicted": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "database": "poker_player"}
{"prompt": "What model has the most different versions?", "predicted": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Model) DESC LIMIT 1", "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "database": "car_1"}
{"prompt": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "predicted": "SELECT avg(LifeExpectancy), sum(Population), Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72", "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "database": "world_1"}
{"prompt": "Which unique cities are in Asian countries where Chinese is the official language ?", "predicted": "SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T'", "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "database": "world_1"}
{"prompt": "What are all different template ids used for documents, and how many times were each of them used?", "predicted": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID", "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the ids of documents that have 2 or more paragraphs?", "predicted": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(*) >= 2", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "database": "cre_Doc_Template_Mgt"}
{"prompt": "List the names of orchestras that have no performance.", "predicted": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "database": "orchestra"}
{"prompt": "How many distinct nationalities are there?", "predicted": "SELECT COUNT(DISTINCT Nationality) FROM people", "gold": "SELECT count(DISTINCT Nationality) FROM people", "database": "poker_player"}
{"prompt": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "predicted": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC", "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "database": "concert_singer"}
{"prompt": "Give the mean life expectancy of countries in which English is not the official language.", "predicted": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "database": "world_1"}
{"prompt": "What are the minimum and maximum number of products across all the shops?", "predicted": "SELECT MIN(Number_products), MAX(Number_products) FROM shop", "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "database": "employee_hire_evaluation"}
{"prompt": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "predicted": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'", "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "database": "battle_death"}
{"prompt": "What are the names of the nations with the 3 lowest populations?", "predicted": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "database": "world_1"}
{"prompt": "How many transcripts are listed?", "predicted": "SELECT COUNT(*) FROM Transcripts", "gold": "SELECT count(*) FROM Transcripts", "database": "student_transcripts_tracking"}
{"prompt": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "predicted": "SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) > 2", "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "database": "world_1"}
{"prompt": "When did the episode \"A Love of a Lifetime\" air?", "predicted": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'", "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "database": "tvshow"}
{"prompt": "Give the number of Jetblue Airways flights.", "predicted": "SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'Jetblue Airways'", "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "database": "flight_2"}
{"prompt": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "predicted": "SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'", "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "database": "tvshow"}
{"prompt": "Show the hometowns shared by at least two teachers.", "predicted": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) > 1", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "database": "course_teach"}
{"prompt": "Count the number of high schoolers.", "predicted": "SELECT COUNT(*) FROM Highschooler", "gold": "SELECT count(*) FROM Highschooler", "database": "network_1"}
{"prompt": "Count the number of countries for which Spanish is the predominantly spoken language.", "predicted": "SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'", "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"prompt": "Which employee received the most awards in evaluations? Give me the employee name.", "predicted": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(awards) FROM (SELECT count(*) as awards FROM evaluation GROUP BY Employee_ID) as subquery)", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "database": "employee_hire_evaluation"}
{"prompt": "List the section_name in reversed lexicographical order.", "predicted": "SELECT section_name FROM Sections ORDER BY section_name DESC", "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC", "database": "student_transcripts_tracking"}
{"prompt": "How many degrees does the engineering department have?", "predicted": "SELECT count(degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'", "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "database": "student_transcripts_tracking"}
{"prompt": "What are the name, independence year, and surface area of the country with the smallest population?", "predicted": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1", "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "database": "world_1"}
{"prompt": "How many battles did not lose any ship with tonnage '225'?", "predicted": "SELECT COUNT(id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225)", "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "database": "battle_death"}
{"prompt": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "predicted": "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' ORDER BY T2.Percentage DESC", "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"prompt": "Give the average life expectancy for countries in Africa which are republics?", "predicted": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%'", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "database": "world_1"}
{"prompt": "What are the names of the teachers who teach at least two courses?", "predicted": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name HAVING count(*)  >=  2", "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "database": "course_teach"}
{"prompt": "What region is Kabul in?", "predicted": "SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'", "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "database": "world_1"}
{"prompt": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "predicted": "SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)", "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "database": "singer"}
{"prompt": "What is the best rank of losers across all matches?", "predicted": "SELECT MIN(loser_rank) FROM matches", "gold": "SELECT min(loser_rank) FROM matches", "database": "wta_1"}
{"prompt": "List the most common hometown of teachers.", "predicted": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "database": "course_teach"}
{"prompt": "Give the language that is spoken in the most countries.", "predicted": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1", "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "database": "world_1"}
{"prompt": "How many different store locations are there?", "predicted": "SELECT COUNT(DISTINCT Location) FROM shop", "gold": "SELECT count(DISTINCT LOCATION) FROM shop", "database": "employee_hire_evaluation"}
{"prompt": "What is the name of the course with the most students enrolled?", "predicted": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(T2.student_course_id) DESC LIMIT 1", "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "predicted": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000", "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "database": "world_1"}
{"prompt": "What are flight numbers of flights departing from Airport \"APG\"?", "predicted": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'", "gold": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "database": "flight_2"}
{"prompt": "What are the names of high schoolers who have likes, and how many likes does each have?", "predicted": "SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name", "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "database": "network_1"}
{"prompt": "What are the countries that have greater surface area than any country in Europe?", "predicted": "SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe')", "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "database": "world_1"}
{"prompt": "What are the names of nations speak both English and French?", "predicted": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French'", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "database": "world_1"}
{"prompt": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "predicted": "SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'", "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "database": "pets_1"}
{"prompt": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "predicted": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')", "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "database": "tvshow"}
{"prompt": "What is the charge amount of the most expensive charge type?", "predicted": "SELECT MAX(charge_amount) FROM Charges", "gold": "SELECT max(charge_amount) FROM Charges", "database": "dog_kennels"}
{"prompt": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "predicted": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'", "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "database": "tvshow"}
{"prompt": "How is the math course described?", "predicted": "SELECT course_description FROM Courses WHERE course_name = 'math'", "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "database": "student_transcripts_tracking"}
{"prompt": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "predicted": "SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2)", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "database": "network_1"}
{"prompt": "Count the number of friends Kyle has.", "predicted": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'", "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "database": "network_1"}
{"prompt": "Return the number of flights.", "predicted": "SELECT COUNT(*) FROM flights", "gold": "SELECT count(*) FROM FLIGHTS", "database": "flight_2"}
{"prompt": "Which dogs are of the rarest breed? Show their names and treatment dates.", "predicted": "SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )", "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "database": "dog_kennels"}
{"prompt": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "predicted": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)", "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "database": "student_transcripts_tracking"}
{"prompt": "What are the students' first names who have both cats and dogs as pets?", "predicted": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog'", "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "database": "pets_1"}
{"prompt": "What is the id and type code for the template used by the most documents?", "predicted": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1", "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "predicted": "SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955)", "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "database": "singer"}
{"prompt": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "predicted": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "database": "dog_kennels"}
{"prompt": "How many cities in each district have a population that is above the average population across all cities?", "predicted": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "database": "world_1"}
{"prompt": "List the name of the conductor with the most years of work.", "predicted": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "database": "orchestra"}
{"prompt": "List document IDs, document names, and document descriptions for all documents.", "predicted": "SELECT Document_ID, Document_Name, Document_Description FROM Documents", "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents", "database": "cre_Doc_Template_Mgt"}
{"prompt": "How many official languages does Afghanistan have?", "predicted": "SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan'", "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "database": "world_1"}
{"prompt": "List the name of singers in ascending order of net worth.", "predicted": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "database": "singer"}
{"prompt": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "predicted": "SELECT count(T1.student_course_id) ,  T1.student_course_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T1.student_course_id ORDER BY count(T1.student_course_id) DESC LIMIT 1", "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What is the number of nations that use English and Dutch?", "predicted": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch'", "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "database": "world_1"}
{"prompt": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "predicted": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "predicted": "SELECT DISTINCT first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'", "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "database": "student_transcripts_tracking"}
{"prompt": "What is the birth date of the poker player with the lowest earnings?", "predicted": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (SELECT min(Earnings) FROM poker_player)", "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "database": "poker_player"}
{"prompt": "What are all distinct countries where singers above age 20 are from?", "predicted": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "database": "concert_singer"}
{"prompt": "Return the codes of countries that do not speak English and do not have Republics for governments.", "predicted": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'", "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "database": "world_1"}
{"prompt": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "predicted": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "database": "dog_kennels"}
{"prompt": "Find the make and production time of the cars that were produced in the earliest year?", "predicted": "SELECT T1.Make , T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data)", "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "database": "car_1"}
{"prompt": "How many paragraphs for the document with name 'Summer Show'?", "predicted": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'", "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the different template type codes, and how many templates correspond to each?", "predicted": "SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code", "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Tell me the age of the oldest dog.", "predicted": "SELECT MAX(age) FROM Dogs", "gold": "SELECT max(age) FROM Dogs", "database": "dog_kennels"}
{"prompt": "What is the name of the museum that had no visitor yet?", "predicted": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)", "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "database": "museum_visit"}
{"prompt": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "predicted": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones')", "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "database": "tvshow"}
{"prompt": "Return the type code of the template type with the description \"Book\".", "predicted": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'", "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are flight numbers of flights arriving at Airport \"APG\"?", "predicted": "SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG'", "gold": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "database": "flight_2"}
{"prompt": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "predicted": "SELECT T1.series_name, T1.Country  FROM TV_Channel AS T1  WHERE T1.id IN (     SELECT T2.id      FROM TV_Channel AS T2      JOIN Cartoon AS T3 ON T2.id = T3.Channel      WHERE T3.Directed_by = 'Ben Jones'  ) AND T1.id IN (     SELECT T4.id      FROM TV_Channel AS T4      JOIN Cartoon AS T5 ON T4.id = T5.Channel      WHERE T5.Directed_by = 'Michael Chang' )", "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "database": "tvshow"}
{"prompt": "What are the average ages of losers and winners across matches?", "predicted": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches", "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "database": "wta_1"}
{"prompt": "How many dog pets are raised by female students?", "predicted": "SELECT count(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'female'", "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "database": "pets_1"}
{"prompt": "What are the names , themes , and number of singers for every concert ?", "predicted": "SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme", "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "database": "concert_singer"}
{"prompt": "Find the highest rank of losers in all matches.", "predicted": "SELECT MAX(loser_rank) FROM matches", "gold": "SELECT min(loser_rank) FROM matches", "database": "wta_1"}
{"prompt": "Show countries where a singer above age 40 and a singer below 30 are from.", "predicted": "SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age > 40) INTERSECT SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age < 30)", "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "database": "concert_singer"}
{"prompt": "Give the country codes for countries in which people speak langauges that are not English.", "predicted": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'", "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "database": "world_1"}
{"prompt": "What are the population, name and leader of the country with the largest area?", "predicted": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "database": "world_1"}
{"prompt": "Find the name and rank of the 3 youngest winners across all matches.", "predicted": "SELECT T1.first_name, T1.last_name, T3.winner_rank FROM players AS T1 JOIN matches AS T3 ON T1.player_id = T3.winner_id ORDER BY T3.winner_age ASC LIMIT 3", "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "database": "wta_1"}
{"prompt": "Find the number of shops in each location.", "predicted": "SELECT count(*) ,  Location FROM shop GROUP BY Location", "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "database": "employee_hire_evaluation"}
{"prompt": "Find the total ranking points for each player and their first name.", "predicted": "SELECT sum(T1.ranking_points), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id, T2.first_name", "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "database": "wta_1"}
{"prompt": "What are all the course names of the courses which ever have students enrolled in?", "predicted": "SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id", "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "database": "student_transcripts_tracking"}
{"prompt": "Give the flight numbers of flights leaving from Aberdeen.", "predicted": "SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'", "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"prompt": "Show the ids of high schoolers who have friends and are also liked by someone else.", "predicted": "SELECT DISTINCT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id", "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "database": "network_1"}
{"prompt": "Return the grade for the high schooler named Kyle.", "predicted": "SELECT grade FROM Highschooler WHERE name = 'Kyle'", "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "database": "network_1"}
{"prompt": "List the record company shared by the most number of orchestras.", "predicted": "SELECT Record_Company, COUNT(*) as count FROM orchestra GROUP BY Record_Company ORDER BY count DESC LIMIT 1", "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "database": "orchestra"}
{"prompt": "What are the names and descriptions of all the sections?", "predicted": "SELECT section_name, section_description FROM Sections", "gold": "SELECT section_name ,  section_description FROM Sections", "database": "student_transcripts_tracking"}
{"prompt": "What is the name of country that has the shortest life expectancy in Asia?", "predicted": "SELECT Name FROM country WHERE LifeExpectancy = (SELECT min(LifeExpectancy) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia'", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "database": "world_1"}
{"prompt": "Count the number of likes for each student id.", "predicted": "SELECT count(T1.liked_id), T1.student_id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id", "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "database": "network_1"}
{"prompt": "What are the first name and last name of the professionals who have done treatment with cost below average?", "predicted": "SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)", "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "database": "dog_kennels"}
{"prompt": "Count the number of countries in Asia.", "predicted": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia'", "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "database": "world_1"}
{"prompt": "Find the production code and channel of the most recently aired cartoon .", "predicted": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1", "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "database": "tvshow"}
{"prompt": "How many languages are spoken in Aruba?", "predicted": "SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba'", "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "database": "world_1"}
{"prompt": "What are the names of cities in Europe for which English is not the official language?", "predicted": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  'Europe' AND T3.Language  =  'English' AND T3.IsOfficial  =  'T')", "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "database": "world_1"}
{"prompt": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "predicted": "SELECT DISTINCT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003)", "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "database": "orchestra"}
{"prompt": "Return the number of  airports.", "predicted": "SELECT COUNT(*) FROM airports", "gold": "SELECT count(*) FROM AIRPORTS", "database": "flight_2"}
{"prompt": "What are the names of all high schoolers in grade 10?", "predicted": "SELECT name FROM Highschooler WHERE grade = 10", "gold": "SELECT name FROM Highschooler WHERE grade  =  10", "database": "network_1"}
{"prompt": "For each semester, what is the name and id of the one with the most students registered?", "predicted": "SELECT T1.semester_id, T1.semester_name, COUNT(T2.student_id) AS num_students FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY num_students DESC LIMIT 1", "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What is the average attendance of shows?", "predicted": "SELECT AVG(Attendance) FROM show", "gold": "SELECT avg(Attendance) FROM SHOW", "database": "orchestra"}
{"prompt": "how many cars were produced in 1980?", "predicted": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980", "gold": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "database": "car_1"}
{"prompt": "Find the number of flights landing in the city of Aberdeen or Abilene.", "predicted": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'", "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "database": "flight_2"}
{"prompt": "How many people are there of each nationality?", "predicted": "SELECT count(*) ,  Nationality FROM people GROUP BY Nationality", "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "database": "poker_player"}
{"prompt": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "predicted": "SELECT Airline FROM flights WHERE SourceAirport  =  'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport  =  'APG'", "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "database": "flight_2"}
{"prompt": "Give the name of the country in Asia with the lowest life expectancy.", "predicted": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "database": "world_1"}
{"prompt": "How many people live in countries that do not speak English?", "predicted": "SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')", "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "database": "world_1"}
{"prompt": "Return the names of cities that have a population between 160000 and 900000 .", "predicted": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000", "gold": "select name from city where population between 160000 and 900000", "database": "world_1"}
{"prompt": "What is the last transcript release date?", "predicted": "SELECT MAX(transcript_date) FROM Transcripts", "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What is the episode for the TV series named \"Sky Radio\"?", "predicted": "SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'", "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "database": "tvshow"}
{"prompt": "What is the number of cars with more than 4 cylinders?", "predicted": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4", "gold": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "database": "car_1"}
{"prompt": "Return the names and surface areas of the 5 largest countries.", "predicted": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "database": "world_1"}
{"prompt": "What is the most populace city that speaks English?", "predicted": "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1", "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "database": "world_1"}
{"prompt": "Count the number of paragraphs.", "predicted": "SELECT COUNT(*) FROM Paragraphs", "gold": "SELECT count(*) FROM Paragraphs", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Show the name of the teacher for the math course.", "predicted": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math'", "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "database": "course_teach"}
{"prompt": "What are the names of poker players whose earnings is higher than 300000?", "predicted": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "database": "poker_player"}
{"prompt": "What is the document id, template id and description for document named \"Robbin CV\"?", "predicted": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'", "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Return the id and type code of the template that is used for the greatest number of documents.", "predicted": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code HAVING COUNT(*) = (     SELECT MAX(COUNT(*))     FROM Documents     GROUP BY Template_ID )", "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"prompt": "Show the names of conductors that have conducted more than one orchestras.", "predicted": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "database": "orchestra"}
{"prompt": "Show names of teachers and the courses they are arranged to teach.", "predicted": "SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "database": "course_teach"}
{"prompt": "What is the total count of teachers?", "predicted": "SELECT COUNT(*) FROM teacher", "gold": "SELECT count(*) FROM teacher", "database": "course_teach"}
{"prompt": "What are the first names and birth dates of players from the USA?", "predicted": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'", "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "database": "wta_1"}
{"prompt": "What is the average earnings of poker players with height higher than 200?", "predicted": "SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200", "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "database": "poker_player"}
{"prompt": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "predicted": "SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'", "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"prompt": "Count the number of flights departing from 'APG'.", "predicted": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'", "gold": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "database": "flight_2"}
{"prompt": "Sort employee names by their age in ascending order.", "predicted": "SELECT Name FROM employee ORDER BY Age ASC", "gold": "SELECT name FROM employee ORDER BY age", "database": "employee_hire_evaluation"}
{"prompt": "What is the average, minimum, and maximum age for all French singers?", "predicted": "SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'", "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "database": "concert_singer"}
{"prompt": "For each citizenship, what is the maximum net worth?", "predicted": "SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship", "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "database": "singer"}
{"prompt": "What language is predominantly spoken in Aruba?", "predicted": "SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "database": "world_1"}
{"prompt": "What are the countries where either English or Dutch is the official language ?", "predicted": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T'", "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "database": "world_1"}
{"prompt": "What are flight numbers of flights departing from City \"Aberdeen \"?", "predicted": "SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'", "gold": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "database": "flight_2"}
{"prompt": "What are the names of properties that are either houses or apartments with more than 1 room?", "predicted": "SELECT P.property_name FROM Properties AS P JOIN Ref_Property_Types AS RPT ON P.property_type_code = RPT.property_type_code WHERE (RPT.property_type_description = 'house' OR RPT.property_type_description = 'apartment') AND P.room_count > 1", "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "database": "real_estate_properties"}
{"prompt": "What are the names and ids of all makers with more than 3 models?", "predicted": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) > 3", "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "database": "car_1"}
{"prompt": "Find the abbreviation and country of the airline that has fewest number of flights?", "predicted": "SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)", "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "database": "flight_2"}
{"prompt": "Which template type code has most number of templates?", "predicted": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1", "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the names of conductors, ordered by age?", "predicted": "SELECT Name FROM conductor ORDER BY Age", "gold": "SELECT Name FROM conductor ORDER BY Age ASC", "database": "orchestra"}
{"prompt": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "predicted": "SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'", "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the names and ranks of the three youngest winners across all matches?", "predicted": "SELECT T1.first_name, T1.last_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age ASC LIMIT 3", "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "database": "wta_1"}
{"prompt": "Which address holds the most number of students currently? List the address id and all lines.", "predicted": "SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses AS A WHERE A.address_id = (     SELECT S.current_address_id     FROM Students AS S     GROUP BY S.current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )", "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "How many different degrees are offered?", "predicted": "SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs", "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "database": "student_transcripts_tracking"}
{"prompt": "Find the number of matches happened in each year.", "predicted": "SELECT count(*) ,  year FROM matches GROUP BY year", "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "database": "wta_1"}
{"prompt": "Count the number of dogs of an age below the average.", "predicted": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)", "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "database": "dog_kennels"}
{"prompt": "Return the owner id, first name and last name of the owner who has the most dogs.", "predicted": "SELECT T2.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1", "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "database": "dog_kennels"}
{"prompt": "Which airlines have departures from CVO but not from APG airports?", "predicted": "SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG'", "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "database": "flight_2"}
{"prompt": "List each charge type and its amount.", "predicted": "SELECT charge_type, charge_amount FROM Charges", "gold": "SELECT charge_type ,  charge_amount FROM Charges", "database": "dog_kennels"}
{"prompt": "Find the average age of the dogs who went through treatments.", "predicted": "SELECT avg(T1.age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id", "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "database": "dog_kennels"}
{"prompt": "How many car makers are there in france?", "predicted": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'", "gold": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "database": "car_1"}
{"prompt": "find id of the tv channels that from the countries where have more than two tv channels.", "predicted": "SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*) > 2)", "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "database": "tvshow"}
{"prompt": "List all singer names in concerts in year 2014.", "predicted": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'", "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "database": "concert_singer"}
{"prompt": "For each language, list the number of TV Channels that use it.", "predicted": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language", "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "database": "tvshow"}
{"prompt": "What is last date created of votes from the state 'CA'?", "predicted": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'", "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'", "database": "voter_1"}
{"prompt": "Which breed do the most dogs have? Give me the breed name.", "predicted": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(T2.breed_code) DESC LIMIT 1", "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "database": "dog_kennels"}
{"prompt": "List the name of singers whose citizenship is not \"France\".", "predicted": "SELECT Name FROM singer WHERE Citizenship != 'France'", "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "database": "singer"}
{"prompt": "For a volvo model, how many cylinders does the version with least accelerate have?", "predicted": "SELECT T4.Cylinders FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'Volvo' ORDER BY T4.Accelerate ASC LIMIT 1", "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "database": "car_1"}
{"prompt": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "predicted": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000", "gold": "select distinct year from cars_data where weight between 3000 and 4000;", "database": "car_1"}
{"prompt": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "predicted": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'", "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "database": "concert_singer"}
{"prompt": "What are the names of the teachers ordered by ascending age?", "predicted": "SELECT Name FROM teacher ORDER BY Age ASC", "gold": "SELECT Name FROM teacher ORDER BY Age ASC", "database": "course_teach"}
{"prompt": "Show all document ids and the number of paragraphs in each document. Order by document id.", "predicted": "SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID", "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What is average life expectancy in the countries where English is not the official language?", "predicted": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "database": "world_1"}
{"prompt": "List the earnings of poker players in descending order.", "predicted": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "database": "poker_player"}
{"prompt": "What other details can you tell me about students in reverse alphabetical order?", "predicted": "SELECT other_student_details FROM Students ORDER BY last_name DESC", "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "database": "student_transcripts_tracking"}
{"prompt": "Which airlines have a flight with destination airport AHD?", "predicted": "SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD'", "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "database": "flight_2"}
{"prompt": "find the names of loser and winner who played in the match with greatest number of minutes.", "predicted": "SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON (T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id) WHERE T2.minutes = (SELECT MAX(minutes) FROM matches) ORDER BY T2.minutes DESC LIMIT 2", "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "database": "wta_1"}
{"prompt": "How many templates do we have?", "predicted": "SELECT COUNT(*) FROM Templates", "gold": "SELECT count(*) FROM Templates", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "predicted": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'", "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "database": "tvshow"}
{"prompt": "Return the codes of countries for which Spanish is the predominantly spoken language.", "predicted": "SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T'", "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "database": "world_1"}
{"prompt": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "predicted": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'", "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "database": "student_transcripts_tracking"}
{"prompt": "Return the ids corresponding to templates with the description 'Presentation'.", "predicted": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'", "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "database": "cre_Doc_Template_Mgt"}
{"prompt": "List the names of teachers who have not been arranged to teach courses.", "predicted": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)", "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "database": "course_teach"}
{"prompt": "What major is every student who does not own a cat as a pet, and also how old are they?", "predicted": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')", "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "database": "pets_1"}
{"prompt": "Find the number of pets for each student who has any pet and student id.", "predicted": "SELECT count(T1.PetID), T1.StuID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID", "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "database": "pets_1"}
{"prompt": "Which airline has abbreviation 'UAL'?", "predicted": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'", "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "database": "flight_2"}
{"prompt": "Return the names of the 3 most populated countries.", "predicted": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "database": "world_1"}
{"prompt": "What is the abbreviation of Airline \"JetBlue Airways\"?", "predicted": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'", "gold": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "database": "flight_2"}
{"prompt": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "predicted": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "database": "poker_player"}
{"prompt": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "predicted": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!'", "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "database": "tvshow"}
{"prompt": "What are  the different countries with singers above age 20?", "predicted": "SELECT DISTINCT Country FROM singer WHERE Age > 20", "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "database": "concert_singer"}
{"prompt": "What are the ids of students who both have friends and are liked?", "predicted": "SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id GROUP BY T1.student_id", "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "database": "network_1"}
{"prompt": "List the name, date and result of each battle.", "predicted": "SELECT name, date, result FROM battle", "gold": "SELECT name ,  date FROM battle", "database": "battle_death"}
{"prompt": "Find the number of left handed winners who participated in the WTA Championships.", "predicted": "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'", "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "database": "wta_1"}
{"prompt": "What are the codes of countries with more than 50 players?", "predicted": "SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50", "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "database": "wta_1"}
{"prompt": "List the names of employees and sort in ascending order of age.", "predicted": "SELECT Name FROM employee ORDER BY Age ASC", "gold": "SELECT name FROM employee ORDER BY age", "database": "employee_hire_evaluation"}
{"prompt": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "predicted": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1", "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "database": "dog_kennels"}
{"prompt": "Find the cities that have more than one employee under age 30.", "predicted": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1", "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "database": "employee_hire_evaluation"}
{"prompt": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "predicted": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'", "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "database": "dog_kennels"}
{"prompt": "What are the names of the singers who performed in a concert in 2014?", "predicted": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'", "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "database": "concert_singer"}
{"prompt": "Compute the average age of all the dogs.", "predicted": "SELECT AVG(age) FROM Dogs", "gold": "SELECT avg(age) FROM Dogs", "database": "dog_kennels"}
{"prompt": "What is the language that is used by the largest number of Asian nations?", "predicted": "SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "database": "world_1"}
{"prompt": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "predicted": "SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000 INTERSECT SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000", "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "database": "employee_hire_evaluation"}
{"prompt": "find the minimum and maximum number of products of all stores.", "predicted": "SELECT MIN(Number_products), MAX(Number_products) FROM shop", "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "database": "employee_hire_evaluation"}
{"prompt": "What is the maximum accelerate for all the different cylinders?", "predicted": "SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders", "gold": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "database": "car_1"}
{"prompt": "Show distinct names of singers that have songs with sales more than 300000.", "predicted": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000", "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "database": "singer"}
{"prompt": "Give the airline with abbreviation 'UAL'.", "predicted": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'", "gold": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "database": "flight_2"}
{"prompt": "How many dogs went through any treatments?", "predicted": "SELECT count(DISTINCT dog_id) FROM Treatments", "gold": "SELECT count(DISTINCT dog_id) FROM Treatments", "database": "dog_kennels"}
{"prompt": "What is the description for the section named h?", "predicted": "SELECT section_description FROM Sections WHERE section_name = 'h'", "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "database": "student_transcripts_tracking"}
{"prompt": "What is the semester which most student registered in? Show both the name and the id.", "predicted": "SELECT T2.semester_id, T2.semester_name, count(T1.student_id) as student_count FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id, T2.semester_name ORDER BY student_count DESC LIMIT 1", "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "database": "student_transcripts_tracking"}
{"prompt": "What are the full names of all left handed players, in order of birth date?", "predicted": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "database": "wta_1"}
{"prompt": "What are the different template type codes, and how many documents use each type?", "predicted": "SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code", "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What are the cities whose population is between 160000 and 900000?", "predicted": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000", "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "database": "world_1"}
{"prompt": "List the maximum weight and type for each type of pet.", "predicted": "SELECT MAX(weight), PetType FROM Pets GROUP BY PetType", "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "database": "pets_1"}
{"prompt": "What is the number of countries with more than 2 car makers ?", "predicted": "SELECT count(T1.Id) ,  T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING count(*)  >  2", "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "database": "car_1"}
{"prompt": "How many ships ended up being 'Captured'?", "predicted": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'", "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "database": "battle_death"}
{"prompt": "List the vote ids, phone numbers and states of all votes.", "predicted": "SELECT vote_id, phone_number, state FROM VOTES", "gold": "SELECT vote_id ,  phone_number ,  state FROM votes", "database": "voter_1"}
{"prompt": "What are the names of the teachers and how many courses do they teach?", "predicted": "SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name", "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "database": "course_teach"}
{"prompt": "What are the date and the operating professional's first name of each treatment?", "predicted": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id", "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "database": "dog_kennels"}
{"prompt": "List each owner's first name, last name, and the size of his for her dog.", "predicted": "SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code", "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "database": "dog_kennels"}
{"prompt": "List the first and last name of all players who are left / L hand in the order of birth date.", "predicted": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "database": "wta_1"}
{"prompt": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "predicted": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'", "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "database": "car_1"}
{"prompt": "Please show the most common citizenship of singers.", "predicted": "SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1", "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "database": "singer"}
{"prompt": "Show paragraph details for paragraph with text 'Korea ' .", "predicted": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'", "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "database": "cre_Doc_Template_Mgt"}
{"prompt": "What is the age and hometown of every teacher?", "predicted": "SELECT Age, Hometown FROM teacher", "gold": "SELECT Age ,  Hometown FROM teacher", "database": "course_teach"}
{"prompt": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "predicted": "SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  INTERSECT  SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'Australian Open'", "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "database": "wta_1"}
